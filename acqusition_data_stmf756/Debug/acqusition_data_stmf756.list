
acqusition_data_stmf756.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efc4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800f18c  0800f18c  0001f18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f25c  0800f25c  00020544  2**0
                  CONTENTS
  4 .ARM          00000008  0800f25c  0800f25c  0001f25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f264  0800f264  00020544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f264  0800f264  0001f264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f268  0800f268  0001f268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000544  20000000  0800f26c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000363b8  20000544  0800f7b0  00020544  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200368fc  0800f7b0  000268fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020544  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036bff  00000000  00000000  00020574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049b5  00000000  00000000  00057173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002938  00000000  00000000  0005bb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002720  00000000  00000000  0005e460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b41d  00000000  00000000  00060b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028afa  00000000  00000000  0008bf9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010513e  00000000  00000000  000b4a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cf  00000000  00000000  001b9bd5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b2f4  00000000  00000000  001b9ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000544 	.word	0x20000544
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800f174 	.word	0x0800f174

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000548 	.word	0x20000548
 8000204:	0800f174 	.word	0x0800f174

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <measure_and_add>:
#include "math.h"




void measure_and_add(ism330dhcx_axis3bit16_t *data){
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af02      	add	r7, sp, #8
 8000512:	6078      	str	r0, [r7, #4]


	if(HAL_I2C_Mem_Read_IT(&hi2c4, ACC_ADDRESS, ACC_AXES_ADDRESS, 1, data, 6)==HAL_OK){
 8000514:	2306      	movs	r3, #6
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2301      	movs	r3, #1
 800051e:	2228      	movs	r2, #40	; 0x28
 8000520:	21d7      	movs	r1, #215	; 0xd7
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <measure_and_add+0x24>)
 8000524:	f006 ffcc 	bl	80074c0 <HAL_I2C_Mem_Read_IT>

	}

}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000588 	.word	0x20000588

08000534 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <MX_CRC_Init+0x3c>)
 800053a:	4a0e      	ldr	r2, [pc, #56]	; (8000574 <MX_CRC_Init+0x40>)
 800053c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800053e:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <MX_CRC_Init+0x3c>)
 8000540:	2200      	movs	r2, #0
 8000542:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <MX_CRC_Init+0x3c>)
 8000546:	2200      	movs	r2, #0
 8000548:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <MX_CRC_Init+0x3c>)
 800054c:	2200      	movs	r2, #0
 800054e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <MX_CRC_Init+0x3c>)
 8000552:	2200      	movs	r2, #0
 8000554:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <MX_CRC_Init+0x3c>)
 8000558:	2201      	movs	r2, #1
 800055a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800055c:	4804      	ldr	r0, [pc, #16]	; (8000570 <MX_CRC_Init+0x3c>)
 800055e:	f005 fd07 	bl	8005f70 <HAL_CRC_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000568:	f000 fe40 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000564 	.word	0x20000564
 8000574:	40023000 	.word	0x40023000

08000578 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_CRC_MspInit+0x38>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d10b      	bne.n	80005a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <HAL_CRC_MspInit+0x3c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <HAL_CRC_MspInit+0x3c>)
 8000590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <HAL_CRC_MspInit+0x3c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40023000 	.word	0x40023000
 80005b4:	40023800 	.word	0x40023800

080005b8 <BSP_I2C4_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]

  hi2c4.Instance  = I2C4;
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <BSP_I2C4_Init+0x70>)
 80005c4:	4a19      	ldr	r2, [pc, #100]	; (800062c <BSP_I2C4_Init+0x74>)
 80005c6:	601a      	str	r2, [r3, #0]

  if(I2C4InitCounter++ == 0)
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <BSP_I2C4_Init+0x78>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	1c5a      	adds	r2, r3, #1
 80005ce:	4918      	ldr	r1, [pc, #96]	; (8000630 <BSP_I2C4_Init+0x78>)
 80005d0:	600a      	str	r2, [r1, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d122      	bne.n	800061c <BSP_I2C4_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c4) == HAL_I2C_STATE_RESET)
 80005d6:	4814      	ldr	r0, [pc, #80]	; (8000628 <BSP_I2C4_Init+0x70>)
 80005d8:	f007 f8d1 	bl	800777e <HAL_I2C_GetState>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d11c      	bne.n	800061c <BSP_I2C4_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C4_MspInit(&hi2c4);
 80005e2:	4811      	ldr	r0, [pc, #68]	; (8000628 <BSP_I2C4_Init+0x70>)
 80005e4:	f000 f902 	bl	80007ec <I2C4_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d116      	bne.n	800061c <BSP_I2C4_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C4_Init(&hi2c4) != HAL_OK)
 80005ee:	480e      	ldr	r0, [pc, #56]	; (8000628 <BSP_I2C4_Init+0x70>)
 80005f0:	f000 f8b4 	bl	800075c <MX_I2C4_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d003      	beq.n	8000602 <BSP_I2C4_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80005fa:	f06f 0307 	mvn.w	r3, #7
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	e00c      	b.n	800061c <BSP_I2C4_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000602:	2100      	movs	r1, #0
 8000604:	4808      	ldr	r0, [pc, #32]	; (8000628 <BSP_I2C4_Init+0x70>)
 8000606:	f008 fc97 	bl	8008f38 <HAL_I2CEx_ConfigAnalogFilter>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d003      	beq.n	8000618 <BSP_I2C4_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000610:	f06f 0307 	mvn.w	r3, #7
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	e001      	b.n	800061c <BSP_I2C4_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000588 	.word	0x20000588
 800062c:	40006000 	.word	0x40006000
 8000630:	200005dc 	.word	0x200005dc

08000634 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]

  if (I2C4InitCounter > 0)
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <BSP_I2C4_DeInit+0x48>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d014      	beq.n	8000670 <BSP_I2C4_DeInit+0x3c>
  {
    if (--I2C4InitCounter == 0)
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <BSP_I2C4_DeInit+0x48>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	3b01      	subs	r3, #1
 800064c:	4a0b      	ldr	r2, [pc, #44]	; (800067c <BSP_I2C4_DeInit+0x48>)
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <BSP_I2C4_DeInit+0x48>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d10b      	bne.n	8000670 <BSP_I2C4_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C4_MspDeInit(&hi2c4);
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <BSP_I2C4_DeInit+0x4c>)
 800065a:	f000 f939 	bl	80008d0 <I2C4_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c4) != HAL_OK)
 800065e:	4808      	ldr	r0, [pc, #32]	; (8000680 <BSP_I2C4_DeInit+0x4c>)
 8000660:	f006 fcd0 	bl	8007004 <HAL_I2C_DeInit>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d002      	beq.n	8000670 <BSP_I2C4_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800066a:	f06f 0307 	mvn.w	r3, #7
 800066e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000670:	687b      	ldr	r3, [r7, #4]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200005dc 	.word	0x200005dc
 8000680:	20000588 	.word	0x20000588

08000684 <BSP_I2C4_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af04      	add	r7, sp, #16
 800068a:	60ba      	str	r2, [r7, #8]
 800068c:	461a      	mov	r2, r3
 800068e:	4603      	mov	r3, r0
 8000690:	81fb      	strh	r3, [r7, #14]
 8000692:	460b      	mov	r3, r1
 8000694:	81bb      	strh	r3, [r7, #12]
 8000696:	4613      	mov	r3, r2
 8000698:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c4, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C4_POLL_TIMEOUT) != HAL_OK)
 800069e:	89ba      	ldrh	r2, [r7, #12]
 80006a0:	89f9      	ldrh	r1, [r7, #14]
 80006a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a6:	9302      	str	r3, [sp, #8]
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2301      	movs	r3, #1
 80006b2:	480c      	ldr	r0, [pc, #48]	; (80006e4 <BSP_I2C4_WriteReg+0x60>)
 80006b4:	f006 fcd6 	bl	8007064 <HAL_I2C_Mem_Write>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d00c      	beq.n	80006d8 <BSP_I2C4_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c4) == HAL_I2C_ERROR_AF)
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <BSP_I2C4_WriteReg+0x60>)
 80006c0:	f007 f86b 	bl	800779a <HAL_I2C_GetError>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d103      	bne.n	80006d2 <BSP_I2C4_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80006ca:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	e002      	b.n	80006d8 <BSP_I2C4_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80006d2:	f06f 0303 	mvn.w	r3, #3
 80006d6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80006d8:	697b      	ldr	r3, [r7, #20]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000588 	.word	0x20000588

080006e8 <BSP_I2C4_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af04      	add	r7, sp, #16
 80006ee:	60ba      	str	r2, [r7, #8]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4603      	mov	r3, r0
 80006f4:	81fb      	strh	r3, [r7, #14]
 80006f6:	460b      	mov	r3, r1
 80006f8:	81bb      	strh	r3, [r7, #12]
 80006fa:	4613      	mov	r3, r2
 80006fc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c4, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C4_POLL_TIMEOUT) != HAL_OK)
 8000702:	89ba      	ldrh	r2, [r7, #12]
 8000704:	89f9      	ldrh	r1, [r7, #14]
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	9302      	str	r3, [sp, #8]
 800070c:	88fb      	ldrh	r3, [r7, #6]
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	480c      	ldr	r0, [pc, #48]	; (8000748 <BSP_I2C4_ReadReg+0x60>)
 8000718:	f006 fdb8 	bl	800728c <HAL_I2C_Mem_Read>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00c      	beq.n	800073c <BSP_I2C4_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c4) == HAL_I2C_ERROR_AF)
 8000722:	4809      	ldr	r0, [pc, #36]	; (8000748 <BSP_I2C4_ReadReg+0x60>)
 8000724:	f007 f839 	bl	800779a <HAL_I2C_GetError>
 8000728:	4603      	mov	r3, r0
 800072a:	2b04      	cmp	r3, #4
 800072c:	d103      	bne.n	8000736 <BSP_I2C4_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800072e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	e002      	b.n	800073c <BSP_I2C4_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000736:	f06f 0303 	mvn.w	r3, #3
 800073a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800073c:	697b      	ldr	r3, [r7, #20]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000588 	.word	0x20000588

0800074c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000750:	f005 fa9a 	bl	8005c88 <HAL_GetTick>
 8000754:	4603      	mov	r3, r0
}
 8000756:	4618      	mov	r0, r3
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <MX_I2C4_Init>:

/* I2C4 init function */

__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef* hi2c)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C4;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a1e      	ldr	r2, [pc, #120]	; (80007e4 <MX_I2C4_Init+0x88>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00100610;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a1d      	ldr	r2, [pc, #116]	; (80007e8 <MX_I2C4_Init+0x8c>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2201      	movs	r2, #1
 800077e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f006 fba0 	bl	8006ee4 <HAL_I2C_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C4_Init+0x52>
  {
    ret = HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f008 fbc1 	bl	8008f38 <HAL_I2CEx_ConfigAnalogFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C4_Init+0x64>
  {
    ret = HAL_ERROR;
 80007bc:	2301      	movs	r3, #1
 80007be:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f008 fc03 	bl	8008fce <HAL_I2CEx_ConfigDigitalFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C4_Init+0x76>
  {
    ret = HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	73fb      	strb	r3, [r7, #15]
  }

  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C4);
 80007d2:	2008      	movs	r0, #8
 80007d4:	f008 fc48 	bl	8009068 <HAL_I2CEx_EnableFastModePlus>

  return ret;
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40006000 	.word	0x40006000
 80007e8:	00100610 	.word	0x00100610

080007ec <I2C4_MspInit>:

static void I2C4_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0aa      	sub	sp, #168	; 0xa8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	2284      	movs	r2, #132	; 0x84
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f00e f8df 	bl	800e9c0 <memset>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000802:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000806:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000808:	2300      	movs	r3, #0
 800080a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	4618      	mov	r0, r3
 8000814:	f009 f910 	bl	8009a38 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <I2C4_MspInit+0xdc>)
 800081a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081c:	4a2a      	ldr	r2, [pc, #168]	; (80008c8 <I2C4_MspInit+0xdc>)
 800081e:	f043 0308 	orr.w	r3, r3, #8
 8000822:	6313      	str	r3, [r2, #48]	; 0x30
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <I2C4_MspInit+0xdc>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	f003 0308 	and.w	r3, r3, #8
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C4_SCL_GPIO_PIN;
 8000830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000834:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000838:	2312      	movs	r3, #18
 800083a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = BUS_I2C4_SCL_GPIO_AF;
 800084a:	2304      	movs	r3, #4
 800084c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000850:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000854:	4619      	mov	r1, r3
 8000856:	481d      	ldr	r0, [pc, #116]	; (80008cc <I2C4_MspInit+0xe0>)
 8000858:	f006 f88c 	bl	8006974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C4_SDA_GPIO_PIN;
 800085c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000860:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000864:	2312      	movs	r3, #18
 8000866:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000870:	2303      	movs	r3, #3
 8000872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = BUS_I2C4_SDA_GPIO_AF;
 8000876:	2304      	movs	r3, #4
 8000878:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &GPIO_InitStruct);
 800087c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000880:	4619      	mov	r1, r3
 8000882:	4812      	ldr	r0, [pc, #72]	; (80008cc <I2C4_MspInit+0xe0>)
 8000884:	f006 f876 	bl	8006974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <I2C4_MspInit+0xdc>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <I2C4_MspInit+0xdc>)
 800088e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000892:	6413      	str	r3, [r2, #64]	; 0x40
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <I2C4_MspInit+0xdc>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	205f      	movs	r0, #95	; 0x5f
 80008a6:	f005 fb1e 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80008aa:	205f      	movs	r0, #95	; 0x5f
 80008ac:	f005 fb37 	bl	8005f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	2060      	movs	r0, #96	; 0x60
 80008b6:	f005 fb16 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80008ba:	2060      	movs	r0, #96	; 0x60
 80008bc:	f005 fb2f 	bl	8005f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
}
 80008c0:	bf00      	nop
 80008c2:	37a8      	adds	r7, #168	; 0xa8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020c00 	.word	0x40020c00

080008d0 <I2C4_MspDeInit>:

static void I2C4_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C4_MspDeInit 0 */

  /* USER CODE END I2C4_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C4_CLK_DISABLE();
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <I2C4_MspDeInit+0x3c>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <I2C4_MspDeInit+0x3c>)
 80008de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008e2:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, BUS_I2C4_SCL_GPIO_PIN);
 80008e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <I2C4_MspDeInit+0x40>)
 80008ea:	f006 f9ef 	bl	8006ccc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, BUS_I2C4_SDA_GPIO_PIN);
 80008ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <I2C4_MspDeInit+0x40>)
 80008f4:	f006 f9ea 	bl	8006ccc <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 80008f8:	205f      	movs	r0, #95	; 0x5f
 80008fa:	f005 fb1e 	bl	8005f3a <HAL_NVIC_DisableIRQ>

    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 80008fe:	2060      	movs	r0, #96	; 0x60
 8000900:	f005 fb1b 	bl	8005f3a <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40020c00 	.word	0x40020c00

08000914 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_DMA_Init+0x38>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a0b      	ldr	r2, [pc, #44]	; (800094c <MX_DMA_Init+0x38>)
 8000920:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_DMA_Init+0x38>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	200e      	movs	r0, #14
 8000938:	f005 fad5 	bl	8005ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800093c:	200e      	movs	r0, #14
 800093e:	f005 faee 	bl	8005f1e <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <MX_GPIO_Init+0xc8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a2b      	ldr	r2, [pc, #172]	; (8000a18 <MX_GPIO_Init+0xc8>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <MX_GPIO_Init+0xc8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <MX_GPIO_Init+0xc8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a25      	ldr	r2, [pc, #148]	; (8000a18 <MX_GPIO_Init+0xc8>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <MX_GPIO_Init+0xc8>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <MX_GPIO_Init+0xc8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a1f      	ldr	r2, [pc, #124]	; (8000a18 <MX_GPIO_Init+0xc8>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_GPIO_Init+0xc8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_GPIO_Init+0xc8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a19      	ldr	r2, [pc, #100]	; (8000a18 <MX_GPIO_Init+0xc8>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_GPIO_Init+0xc8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_GPIO_Init+0xc8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <MX_GPIO_Init+0xc8>)
 80009cc:	f043 0310 	orr.w	r3, r3, #16
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_GPIO_Init+0xc8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0310 	and.w	r3, r3, #16
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009de:	2340      	movs	r3, #64	; 0x40
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	480a      	ldr	r0, [pc, #40]	; (8000a1c <MX_GPIO_Init+0xcc>)
 80009f4:	f005 ffbe 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_GPIO_Init+0xcc>)
 8000a0c:	f005 ffb2 	bl	8006974 <HAL_GPIO_Init>

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	; 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020000 	.word	0x40020000

08000a20 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a26:	4a1c      	ldr	r2, [pc, #112]	; (8000a98 <MX_I2C1_Init+0x78>)
 8000a28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x007076B3;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a2c:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <MX_I2C1_Init+0x7c>)
 8000a2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a5a:	480e      	ldr	r0, [pc, #56]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a5c:	f006 fa42 	bl	8006ee4 <HAL_I2C_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a66:	f000 fbc1 	bl	80011ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a6e:	f008 fa63 	bl	8008f38 <HAL_I2CEx_ConfigAnalogFilter>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a78:	f000 fbb8 	bl	80011ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_I2C1_Init+0x74>)
 8000a80:	f008 faa5 	bl	8008fce <HAL_I2CEx_ConfigDigitalFilter>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a8a:	f000 fbaf 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200005e0 	.word	0x200005e0
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	007076b3 	.word	0x007076b3

08000aa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b0aa      	sub	sp, #168	; 0xa8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	2284      	movs	r2, #132	; 0x84
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f00d ff7d 	bl	800e9c0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a29      	ldr	r2, [pc, #164]	; (8000b70 <HAL_I2C_MspInit+0xd0>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d14b      	bne.n	8000b68 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ad0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ad4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f008 ffaa 	bl	8009a38 <HAL_RCCEx_PeriphCLKConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000aea:	f000 fb7f 	bl	80011ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <HAL_I2C_MspInit+0xd4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a20      	ldr	r2, [pc, #128]	; (8000b74 <HAL_I2C_MspInit+0xd4>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <HAL_I2C_MspInit+0xd4>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b06:	23c0      	movs	r3, #192	; 0xc0
 8000b08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0c:	2312      	movs	r3, #18
 8000b0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4813      	ldr	r0, [pc, #76]	; (8000b78 <HAL_I2C_MspInit+0xd8>)
 8000b2c:	f005 ff22 	bl	8006974 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b30:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_I2C_MspInit+0xd4>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <HAL_I2C_MspInit+0xd4>)
 8000b36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <HAL_I2C_MspInit+0xd4>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	201f      	movs	r0, #31
 8000b4e:	f005 f9ca 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b52:	201f      	movs	r0, #31
 8000b54:	f005 f9e3 	bl	8005f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2020      	movs	r0, #32
 8000b5e:	f005 f9c2 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b62:	2020      	movs	r0, #32
 8000b64:	f005 f9db 	bl	8005f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b68:	bf00      	nop
 8000b6a:	37a8      	adds	r7, #168	; 0xa8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40005400 	.word	0x40005400
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020400 	.word	0x40020400

08000b7c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <HAL_I2C_MspDeInit+0x44>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d113      	bne.n	8000bb6 <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <HAL_I2C_MspDeInit+0x48>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <HAL_I2C_MspDeInit+0x48>)
 8000b94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000b9a:	2140      	movs	r1, #64	; 0x40
 8000b9c:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <HAL_I2C_MspDeInit+0x4c>)
 8000b9e:	f006 f895 	bl	8006ccc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	4808      	ldr	r0, [pc, #32]	; (8000bc8 <HAL_I2C_MspDeInit+0x4c>)
 8000ba6:	f006 f891 	bl	8006ccc <HAL_GPIO_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8000baa:	201f      	movs	r0, #31
 8000bac:	f005 f9c5 	bl	8005f3a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8000bb0:	2020      	movs	r0, #32
 8000bb2:	f005 f9c2 	bl	8005f3a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020400 	.word	0x40020400

08000bcc <FifoWrite_B>:
/* USER CODE BEGIN PFP */

//Function storing  sound data in a big buffer
//Whenever the big buffer is full espTxFlag is set
//to start transmiting
void FifoWrite_B(uint16_t data) {
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	80fb      	strh	r3, [r7, #6]

  if (fifoIterator != PCM_BIG_BUF) {
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <FifoWrite_B+0x4c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d00a      	beq.n	8000bf8 <FifoWrite_B+0x2c>

    pcmBigBuffer[fifoIterator] = data;
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <FifoWrite_B+0x4c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	490d      	ldr	r1, [pc, #52]	; (8000c1c <FifoWrite_B+0x50>)
 8000be8:	88fa      	ldrh	r2, [r7, #6]
 8000bea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    fifoIterator++;
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <FifoWrite_B+0x4c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <FifoWrite_B+0x4c>)
 8000bf6:	6013      	str	r3, [r2, #0]

  }
  if (fifoIterator == PCM_BIG_BUF) {
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <FifoWrite_B+0x4c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d102      	bne.n	8000c0a <FifoWrite_B+0x3e>

    espTxFlag = 1;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <FifoWrite_B+0x54>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]

  }

}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20017e28 	.word	0x20017e28
 8000c1c:	20000724 	.word	0x20000724
 8000c20:	2002f57c 	.word	0x2002f57c

08000c24 <HAL_SPI_RxHalfCpltCallback>:

//Callbacks allowing pipelining in the i2s interface.
//Its used to ensure constant data flow.
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef * hspi) {
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  if (hspi -> Instance == SPI2) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <HAL_SPI_RxHalfCpltCallback+0x24>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d102      	bne.n	8000c3c <HAL_SPI_RxHalfCpltCallback+0x18>

    micRxFlag = 1;
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_SPI_RxHalfCpltCallback+0x28>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]

  }

}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40003800 	.word	0x40003800
 8000c4c:	20017e24 	.word	0x20017e24

08000c50 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi) {
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  if (hspi -> Instance == SPI2) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <HAL_SPI_RxCpltCallback+0x24>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d102      	bne.n	8000c68 <HAL_SPI_RxCpltCallback+0x18>

    micRxFlag = 2;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_SPI_RxCpltCallback+0x28>)
 8000c64:	2202      	movs	r2, #2
 8000c66:	701a      	strb	r2, [r3, #0]

  }

}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	40003800 	.word	0x40003800
 8000c78:	20017e24 	.word	0x20017e24

08000c7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  if (htim -> Instance == TIM1) {
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d106      	bne.n	8000c9c <HAL_TIM_PeriodElapsedCallback+0x20>

    if (acc_aqcuisition_flag == 0) {
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d102      	bne.n	8000c9c <HAL_TIM_PeriodElapsedCallback+0x20>

      measure_and_add( & data_raw.i16bit);
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c98:	f7ff fc38 	bl	800050c <measure_and_add>

    }

  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010000 	.word	0x40010000
 8000ca8:	20036618 	.word	0x20036618
 8000cac:	20032dc4 	.word	0x20032dc4

08000cb0 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef * hi2c) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]

  if (hi2c -> Instance == I2C4) {
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a32      	ldr	r2, [pc, #200]	; (8000d88 <HAL_I2C_MemRxCpltCallback+0xd8>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d15c      	bne.n	8000d7c <HAL_I2C_MemRxCpltCallback+0xcc>

    acc_vector[acc_iterator].x = (int16_t)((float)((float)(data_raw.i16bit[0]) * ACC_SENS));
 8000cc2:	4b32      	ldr	r3, [pc, #200]	; (8000d8c <HAL_I2C_MemRxCpltCallback+0xdc>)
 8000cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc8:	ee07 3a90 	vmov	s15, r3
 8000ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000d90 <HAL_I2C_MemRxCpltCallback+0xe0>
 8000cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <HAL_I2C_MemRxCpltCallback+0xe4>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ce0:	ee17 3a90 	vmov	r3, s15
 8000ce4:	b218      	sxth	r0, r3
 8000ce6:	492c      	ldr	r1, [pc, #176]	; (8000d98 <HAL_I2C_MemRxCpltCallback+0xe8>)
 8000ce8:	4613      	mov	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	440b      	add	r3, r1
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	801a      	strh	r2, [r3, #0]
    acc_vector[acc_iterator].y = (int16_t)((float)((float)(data_raw.i16bit[1]) * ACC_SENS));
 8000cf6:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <HAL_I2C_MemRxCpltCallback+0xdc>)
 8000cf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cfc:	ee07 3a90 	vmov	s15, r3
 8000d00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d04:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000d90 <HAL_I2C_MemRxCpltCallback+0xe0>
 8000d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0c:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <HAL_I2C_MemRxCpltCallback+0xe4>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d14:	ee17 3a90 	vmov	r3, s15
 8000d18:	b218      	sxth	r0, r3
 8000d1a:	491f      	ldr	r1, [pc, #124]	; (8000d98 <HAL_I2C_MemRxCpltCallback+0xe8>)
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	440b      	add	r3, r1
 8000d26:	3302      	adds	r3, #2
 8000d28:	4602      	mov	r2, r0
 8000d2a:	801a      	strh	r2, [r3, #0]
    acc_vector[acc_iterator].z = (int16_t)((float)((float)(data_raw.i16bit[2]) * ACC_SENS));
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <HAL_I2C_MemRxCpltCallback+0xdc>)
 8000d2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d32:	ee07 3a90 	vmov	s15, r3
 8000d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d3a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000d90 <HAL_I2C_MemRxCpltCallback+0xe0>
 8000d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <HAL_I2C_MemRxCpltCallback+0xe4>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4a:	ee17 3a90 	vmov	r3, s15
 8000d4e:	b218      	sxth	r0, r3
 8000d50:	4911      	ldr	r1, [pc, #68]	; (8000d98 <HAL_I2C_MemRxCpltCallback+0xe8>)
 8000d52:	4613      	mov	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	440b      	add	r3, r1
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	4602      	mov	r2, r0
 8000d60:	801a      	strh	r2, [r3, #0]

    acc_iterator++;
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <HAL_I2C_MemRxCpltCallback+0xe4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <HAL_I2C_MemRxCpltCallback+0xe4>)
 8000d6a:	6013      	str	r3, [r2, #0]

    if (acc_iterator == ACC_BUFFER_SIZE) {
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_I2C_MemRxCpltCallback+0xe4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000d74:	d102      	bne.n	8000d7c <HAL_I2C_MemRxCpltCallback+0xcc>

      acc_aqcuisition_flag = 1;
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_I2C_MemRxCpltCallback+0xec>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]

    }

  }

}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	40006000 	.word	0x40006000
 8000d8c:	20032dc4 	.word	0x20032dc4
 8000d90:	3d79db23 	.word	0x3d79db23
 8000d94:	20032dc0 	.word	0x20032dc0
 8000d98:	2002f580 	.word	0x2002f580
 8000d9c:	20036618 	.word	0x20036618

08000da0 <prepare_mic_data_to_send>:

void prepare_mic_data_to_send()
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0

  uint8_t pack_nr = 0;
 8000da6:	2300      	movs	r3, #0
 8000da8:	73fb      	strb	r3, [r7, #15]

  uint16_t * ptr = & pcmBigBuffer[0];
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <prepare_mic_data_to_send+0xb0>)
 8000dac:	60bb      	str	r3, [r7, #8]

  for (int i = 0; i < mic_buffer_bytes; i = i + 2) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	e042      	b.n	8000e3a <prepare_mic_data_to_send+0x9a>

    if (i % 1201 == 0) {
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <prepare_mic_data_to_send+0xb4>)
 8000db8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dbc:	1159      	asrs	r1, r3, #5
 8000dbe:	17d3      	asrs	r3, r2, #31
 8000dc0:	1acb      	subs	r3, r1, r3
 8000dc2:	f240 41b1 	movw	r1, #1201	; 0x4b1
 8000dc6:	fb01 f303 	mul.w	r3, r1, r3
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d10b      	bne.n	8000de8 <prepare_mic_data_to_send+0x48>

      mic_data_to_send[i] = pack_nr;
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <prepare_mic_data_to_send+0xb8>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	7bfa      	ldrb	r2, [r7, #15]
 8000dd8:	701a      	strb	r2, [r3, #0]

      pack_nr++;
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]

      i++;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3301      	adds	r3, #1
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	e025      	b.n	8000e34 <prepare_mic_data_to_send+0x94>

    }

    else if (i % 1201 != 0) {
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <prepare_mic_data_to_send+0xb4>)
 8000dec:	fb83 1302 	smull	r1, r3, r3, r2
 8000df0:	1159      	asrs	r1, r3, #5
 8000df2:	17d3      	asrs	r3, r2, #31
 8000df4:	1acb      	subs	r3, r1, r3
 8000df6:	f240 41b1 	movw	r1, #1201	; 0x4b1
 8000dfa:	fb01 f303 	mul.w	r3, r1, r3
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d017      	beq.n	8000e34 <prepare_mic_data_to_send+0x94>

      mic_data_to_send[i] = ( * ptr >> 8);
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	b2d9      	uxtb	r1, r3
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <prepare_mic_data_to_send+0xb8>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	460a      	mov	r2, r1
 8000e16:	701a      	strb	r2, [r3, #0]

      mic_data_to_send[i + 1] = ( * ptr & 0xFF);
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	881a      	ldrh	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	b2d1      	uxtb	r1, r2
 8000e22:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <prepare_mic_data_to_send+0xb8>)
 8000e24:	54d1      	strb	r1, [r2, r3]

      if (i < mic_buffer_bytes - 1) {
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a0c      	ldr	r2, [pc, #48]	; (8000e5c <prepare_mic_data_to_send+0xbc>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	dc02      	bgt.n	8000e34 <prepare_mic_data_to_send+0x94>

        ptr++;
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3302      	adds	r3, #2
 8000e32:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < mic_buffer_bytes; i = i + 2) {
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3302      	adds	r3, #2
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <prepare_mic_data_to_send+0xc0>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	ddb8      	ble.n	8000db4 <prepare_mic_data_to_send+0x14>

    }

  }

}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	20000724 	.word	0x20000724
 8000e54:	06d22be9 	.word	0x06d22be9
 8000e58:	20017e2c 	.word	0x20017e2c
 8000e5c:	0001774e 	.word	0x0001774e
 8000e60:	0001774f 	.word	0x0001774f

08000e64 <prepare_acc_data_to_send>:

void prepare_acc_data_to_send()
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
  uint8_t pack_nr = 128;
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	73fb      	strb	r3, [r7, #15]

  acceleration * ptr = & acc_vector[0];
 8000e6e:	4b3d      	ldr	r3, [pc, #244]	; (8000f64 <prepare_acc_data_to_send+0x100>)
 8000e70:	60bb      	str	r3, [r7, #8]

  for (int i = 0; i < acc_buffer_bytes; i = i + 6)
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	e069      	b.n	8000f4c <prepare_acc_data_to_send+0xe8>
  {

    if (i % 1201 == 0) {
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <prepare_acc_data_to_send+0x104>)
 8000e7c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e80:	1159      	asrs	r1, r3, #5
 8000e82:	17d3      	asrs	r3, r2, #31
 8000e84:	1acb      	subs	r3, r1, r3
 8000e86:	f240 41b1 	movw	r1, #1201	; 0x4b1
 8000e8a:	fb01 f303 	mul.w	r3, r1, r3
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10b      	bne.n	8000eac <prepare_acc_data_to_send+0x48>

      acc_data_to_send[i] = pack_nr;
 8000e94:	4a35      	ldr	r2, [pc, #212]	; (8000f6c <prepare_acc_data_to_send+0x108>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	7bfa      	ldrb	r2, [r7, #15]
 8000e9c:	701a      	strb	r2, [r3, #0]

      pack_nr++;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	73fb      	strb	r3, [r7, #15]

      i++;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	e04c      	b.n	8000f46 <prepare_acc_data_to_send+0xe2>

    }
    else if (i % 1201 != 0){
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <prepare_acc_data_to_send+0x104>)
 8000eb0:	fb83 1302 	smull	r1, r3, r3, r2
 8000eb4:	1159      	asrs	r1, r3, #5
 8000eb6:	17d3      	asrs	r3, r2, #31
 8000eb8:	1acb      	subs	r3, r1, r3
 8000eba:	f240 41b1 	movw	r1, #1201	; 0x4b1
 8000ebe:	fb01 f303 	mul.w	r3, r1, r3
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d03e      	beq.n	8000f46 <prepare_acc_data_to_send+0xe2>

      acc_data_to_send[i] = (ptr -> x >> 8);
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ece:	121b      	asrs	r3, r3, #8
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	b2d9      	uxtb	r1, r3
 8000ed4:	4a25      	ldr	r2, [pc, #148]	; (8000f6c <prepare_acc_data_to_send+0x108>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	460a      	mov	r2, r1
 8000edc:	701a      	strb	r2, [r3, #0]

      acc_data_to_send[i + 1] = (ptr -> x & 0xFF);
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2d1      	uxtb	r1, r2
 8000eea:	4a20      	ldr	r2, [pc, #128]	; (8000f6c <prepare_acc_data_to_send+0x108>)
 8000eec:	54d1      	strb	r1, [r2, r3]

      acc_data_to_send[i + 2] = (ptr -> y >> 8);
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ef4:	121b      	asrs	r3, r3, #8
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3302      	adds	r3, #2
 8000efc:	b2d1      	uxtb	r1, r2
 8000efe:	4a1b      	ldr	r2, [pc, #108]	; (8000f6c <prepare_acc_data_to_send+0x108>)
 8000f00:	54d1      	strb	r1, [r2, r3]

      acc_data_to_send[i + 3] = (ptr -> y & 0xFF);
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3303      	adds	r3, #3
 8000f0c:	b2d1      	uxtb	r1, r2
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <prepare_acc_data_to_send+0x108>)
 8000f10:	54d1      	strb	r1, [r2, r3]

      acc_data_to_send[i + 4] = (ptr -> z >> 8);
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f18:	121b      	asrs	r3, r3, #8
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3304      	adds	r3, #4
 8000f20:	b2d1      	uxtb	r1, r2
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <prepare_acc_data_to_send+0x108>)
 8000f24:	54d1      	strb	r1, [r2, r3]

      acc_data_to_send[i + 5] = (ptr -> z & 0xFF);
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3305      	adds	r3, #5
 8000f30:	b2d1      	uxtb	r1, r2
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <prepare_acc_data_to_send+0x108>)
 8000f34:	54d1      	strb	r1, [r2, r3]

      if (i < acc_buffer_bytes - 1) {
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f643 024a 	movw	r2, #14410	; 0x384a
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	dc02      	bgt.n	8000f46 <prepare_acc_data_to_send+0xe2>

    	  ptr++;
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	3306      	adds	r3, #6
 8000f44:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < acc_buffer_bytes; i = i + 6)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3306      	adds	r3, #6
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f643 024b 	movw	r2, #14411	; 0x384b
 8000f52:	4293      	cmp	r3, r2
 8000f54:	dd90      	ble.n	8000e78 <prepare_acc_data_to_send+0x14>

    }

  }

}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	2002f580 	.word	0x2002f580
 8000f68:	06d22be9 	.word	0x06d22be9
 8000f6c:	20032dcc 	.word	0x20032dcc

08000f70 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f76:	f004 fe35 	bl	8005be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7a:	f000 f8cf 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7e:	f7ff fce7 	bl	8000950 <MX_GPIO_Init>
  MX_CRC_Init();
 8000f82:	f7ff fad7 	bl	8000534 <MX_CRC_Init>
  MX_DMA_Init();
 8000f86:	f7ff fcc5 	bl	8000914 <MX_DMA_Init>
  MX_PDM2PCM_Init();
 8000f8a:	f00b fdf5 	bl	800cb78 <MX_PDM2PCM_Init>
  MX_SPI2_Init();
 8000f8e:	f000 f933 	bl	80011f8 <MX_SPI2_Init>
  MX_UART4_Init();
 8000f92:	f000 fb7b 	bl	800168c <MX_UART4_Init>
  MX_I2C1_Init();
 8000f96:	f7ff fd43 	bl	8000a20 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f9a:	f000 fae5 	bl	8001568 <MX_TIM1_Init>
  MX_MEMS_Init();
 8000f9e:	f00b fddc 	bl	800cb5a <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_DMA( & hspi2, PDMbuff, PDM_BUF);
 8000fa2:	22c0      	movs	r2, #192	; 0xc0
 8000fa4:	494f      	ldr	r1, [pc, #316]	; (80010e4 <main+0x174>)
 8000fa6:	4850      	ldr	r0, [pc, #320]	; (80010e8 <main+0x178>)
 8000fa8:	f009 f9e2 	bl	800a370 <HAL_SPI_Receive_DMA>
  HAL_TIM_Base_Start_IT( & htim1);
 8000fac:	484f      	ldr	r0, [pc, #316]	; (80010ec <main+0x17c>)
 8000fae:	f00a f8f9 	bl	800b1a4 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

    //Read values mode
    if (espTxFlag == 0 && fifoIterator != PCM_BIG_BUF) {
 8000fb2:	4b4f      	ldr	r3, [pc, #316]	; (80010f0 <main+0x180>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d147      	bne.n	800104a <main+0xda>
 8000fba:	4b4e      	ldr	r3, [pc, #312]	; (80010f4 <main+0x184>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d041      	beq.n	800104a <main+0xda>

      if (micRxFlag == 1) {
 8000fc6:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <main+0x188>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d11c      	bne.n	8001008 <main+0x98>

        if (PDM_Filter( & PDMbuff[0], & pcmSmallBuffer[0], & PDM1_filter_handler) != 0) {
 8000fce:	4a4b      	ldr	r2, [pc, #300]	; (80010fc <main+0x18c>)
 8000fd0:	494b      	ldr	r1, [pc, #300]	; (8001100 <main+0x190>)
 8000fd2:	4844      	ldr	r0, [pc, #272]	; (80010e4 <main+0x174>)
 8000fd4:	f00d fc7c 	bl	800e8d0 <PDM_Filter>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <main+0x72>

          Error_Handler();
 8000fde:	f000 f905 	bl	80011ec <Error_Handler>

        }

        for (int i = 0; i < PCM_MID_BUF; i++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	e009      	b.n	8000ffc <main+0x8c>

          FifoWrite_B(pcmSmallBuffer[i]);
 8000fe8:	4a45      	ldr	r2, [pc, #276]	; (8001100 <main+0x190>)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fdeb 	bl	8000bcc <FifoWrite_B>
        for (int i = 0; i < PCM_MID_BUF; i++) {
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b17      	cmp	r3, #23
 8001000:	ddf2      	ble.n	8000fe8 <main+0x78>

        }

        micRxFlag = 0;
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <main+0x188>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]

      }

      if (micRxFlag == 2) {
 8001008:	4b3b      	ldr	r3, [pc, #236]	; (80010f8 <main+0x188>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d11c      	bne.n	800104a <main+0xda>

        if (PDM_Filter( & PDMbuff[PDM_BUF / 2], & pcmSmallBuffer[0], & PDM1_filter_handler) != 0) {
 8001010:	4a3a      	ldr	r2, [pc, #232]	; (80010fc <main+0x18c>)
 8001012:	493b      	ldr	r1, [pc, #236]	; (8001100 <main+0x190>)
 8001014:	483b      	ldr	r0, [pc, #236]	; (8001104 <main+0x194>)
 8001016:	f00d fc5b 	bl	800e8d0 <PDM_Filter>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <main+0xb4>

          Error_Handler();
 8001020:	f000 f8e4 	bl	80011ec <Error_Handler>

        }

        for (int i = 0; i < PCM_MID_BUF; i++) {
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	e009      	b.n	800103e <main+0xce>

          FifoWrite_B(pcmSmallBuffer[i]);
 800102a:	4a35      	ldr	r2, [pc, #212]	; (8001100 <main+0x190>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fdca 	bl	8000bcc <FifoWrite_B>
        for (int i = 0; i < PCM_MID_BUF; i++) {
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	3301      	adds	r3, #1
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	2b17      	cmp	r3, #23
 8001042:	ddf2      	ble.n	800102a <main+0xba>

        }

        micRxFlag = 0;
 8001044:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <main+0x188>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
      }
    }

    //Transmit mode
    if (espTxFlag == 1 && acc_aqcuisition_flag == 1) {
 800104a:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <main+0x180>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d1af      	bne.n	8000fb2 <main+0x42>
 8001052:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <main+0x198>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d1ab      	bne.n	8000fb2 <main+0x42>

      prepare_mic_data_to_send();
 800105a:	f7ff fea1 	bl	8000da0 <prepare_mic_data_to_send>
      prepare_acc_data_to_send();
 800105e:	f7ff ff01 	bl	8000e64 <prepare_acc_data_to_send>

      for (int i = 0; i < 80; i++) {
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	e013      	b.n	8001090 <main+0x120>

        HAL_UART_Transmit( & huart4, & mic_data_to_send[1201 * i], 1201, HAL_MAX_DELAY);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f240 42b1 	movw	r2, #1201	; 0x4b1
 800106e:	fb02 f303 	mul.w	r3, r2, r3
 8001072:	4a26      	ldr	r2, [pc, #152]	; (800110c <main+0x19c>)
 8001074:	1899      	adds	r1, r3, r2
 8001076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800107a:	f240 42b1 	movw	r2, #1201	; 0x4b1
 800107e:	4824      	ldr	r0, [pc, #144]	; (8001110 <main+0x1a0>)
 8001080:	f00a fd4e 	bl	800bb20 <HAL_UART_Transmit>
        HAL_Delay(1);
 8001084:	2001      	movs	r0, #1
 8001086:	f004 fe0b 	bl	8005ca0 <HAL_Delay>
      for (int i = 0; i < 80; i++) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3301      	adds	r3, #1
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b4f      	cmp	r3, #79	; 0x4f
 8001094:	dde8      	ble.n	8001068 <main+0xf8>

      }

      for (int i = 0; i < 12; i++) {
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	e013      	b.n	80010c4 <main+0x154>

        HAL_UART_Transmit( & huart4, & acc_data_to_send[1201 * i], 1201, HAL_MAX_DELAY);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f240 42b1 	movw	r2, #1201	; 0x4b1
 80010a2:	fb02 f303 	mul.w	r3, r2, r3
 80010a6:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <main+0x1a4>)
 80010a8:	1899      	adds	r1, r3, r2
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ae:	f240 42b1 	movw	r2, #1201	; 0x4b1
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <main+0x1a0>)
 80010b4:	f00a fd34 	bl	800bb20 <HAL_UART_Transmit>
        HAL_Delay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f004 fdf1 	bl	8005ca0 <HAL_Delay>
      for (int i = 0; i < 12; i++) {
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	2b0b      	cmp	r3, #11
 80010c8:	dde8      	ble.n	800109c <main+0x12c>

      }

      espTxFlag = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <main+0x180>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
      fifoIterator = 0;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <main+0x184>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
      acc_aqcuisition_flag = 0;
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <main+0x198>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
      acc_iterator = 0;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <main+0x1a8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
    if (espTxFlag == 0 && fifoIterator != PCM_BIG_BUF) {
 80010e2:	e766      	b.n	8000fb2 <main+0x42>
 80010e4:	20000634 	.word	0x20000634
 80010e8:	2003661c 	.word	0x2003661c
 80010ec:	200366e0 	.word	0x200366e0
 80010f0:	2002f57c 	.word	0x2002f57c
 80010f4:	20017e28 	.word	0x20017e28
 80010f8:	20017e24 	.word	0x20017e24
 80010fc:	200368a8 	.word	0x200368a8
 8001100:	200006f4 	.word	0x200006f4
 8001104:	20000694 	.word	0x20000694
 8001108:	20036618 	.word	0x20036618
 800110c:	20017e2c 	.word	0x20017e2c
 8001110:	2003672c 	.word	0x2003672c
 8001114:	20032dcc 	.word	0x20032dcc
 8001118:	20032dc0 	.word	0x20032dc0

0800111c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b094      	sub	sp, #80	; 0x50
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	2230      	movs	r2, #48	; 0x30
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f00d fc48 	bl	800e9c0 <memset>
    0
  };
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
    0
  };

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <SystemClock_Config+0xc8>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	4a27      	ldr	r2, [pc, #156]	; (80011e4 <SystemClock_Config+0xc8>)
 8001146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114a:	6413      	str	r3, [r2, #64]	; 0x40
 800114c:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <SystemClock_Config+0xc8>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <SystemClock_Config+0xcc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001160:	4a21      	ldr	r2, [pc, #132]	; (80011e8 <SystemClock_Config+0xcc>)
 8001162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <SystemClock_Config+0xcc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001174:	2302      	movs	r3, #2
 8001176:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117c:	2310      	movs	r3, #16
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001180:	2302      	movs	r3, #2
 8001182:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001184:	2300      	movs	r3, #0
 8001186:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 14;
 8001188:	230e      	movs	r3, #14
 800118a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 214;
 800118c:	23d6      	movs	r3, #214	; 0xd6
 800118e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001190:	2304      	movs	r3, #4
 8001192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig( & RCC_OscInitStruct) != HAL_OK) {
 8001198:	f107 0320 	add.w	r3, r7, #32
 800119c:	4618      	mov	r0, r3
 800119e:	f007 ff83 	bl	80090a8 <HAL_RCC_OscConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0x90>
    Error_Handler();
 80011a8:	f000 f820 	bl	80011ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 80011ac:	230f      	movs	r3, #15
 80011ae:	60fb      	str	r3, [r7, #12]
    RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b0:	2302      	movs	r3, #2
 80011b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig( & RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2102      	movs	r1, #2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f008 fa10 	bl	80095f0 <HAL_RCC_ClockConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0xbe>
    Error_Handler();
 80011d6:	f000 f809 	bl	80011ec <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	3750      	adds	r7, #80	; 0x50
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40007000 	.word	0x40007000

080011ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {}
 80011f4:	e7fe      	b.n	80011f4 <Error_Handler+0x8>
	...

080011f8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_SPI2_Init+0x74>)
 80011fe:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <MX_SPI2_Init+0x78>)
 8001200:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_SPI2_Init+0x74>)
 8001204:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001208:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_SPI2_Init+0x74>)
 800120c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001210:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_SPI2_Init+0x74>)
 8001214:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001218:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_SPI2_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_SPI2_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_SPI2_Init+0x74>)
 8001228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800122c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_SPI2_Init+0x74>)
 8001230:	2218      	movs	r2, #24
 8001232:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <MX_SPI2_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_SPI2_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_SPI2_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_SPI2_Init+0x74>)
 8001248:	2207      	movs	r2, #7
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <MX_SPI2_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_SPI2_Init+0x74>)
 8001254:	2208      	movs	r2, #8
 8001256:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_SPI2_Init+0x74>)
 800125a:	f008 ffdd 	bl	800a218 <HAL_SPI_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001264:	f7ff ffc2 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2003661c 	.word	0x2003661c
 8001270:	40003800 	.word	0x40003800

08001274 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a41      	ldr	r2, [pc, #260]	; (8001398 <HAL_SPI_MspInit+0x124>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d17c      	bne.n	8001390 <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001296:	4b41      	ldr	r3, [pc, #260]	; (800139c <HAL_SPI_MspInit+0x128>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a40      	ldr	r2, [pc, #256]	; (800139c <HAL_SPI_MspInit+0x128>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b3e      	ldr	r3, [pc, #248]	; (800139c <HAL_SPI_MspInit+0x128>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <HAL_SPI_MspInit+0x128>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a3a      	ldr	r2, [pc, #232]	; (800139c <HAL_SPI_MspInit+0x128>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b38      	ldr	r3, [pc, #224]	; (800139c <HAL_SPI_MspInit+0x128>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <HAL_SPI_MspInit+0x128>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a34      	ldr	r2, [pc, #208]	; (800139c <HAL_SPI_MspInit+0x128>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b32      	ldr	r3, [pc, #200]	; (800139c <HAL_SPI_MspInit+0x128>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012de:	2304      	movs	r3, #4
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ee:	2305      	movs	r3, #5
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	4829      	ldr	r0, [pc, #164]	; (80013a0 <HAL_SPI_MspInit+0x12c>)
 80012fa:	f005 fb3b 	bl	8006974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001310:	2305      	movs	r3, #5
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4822      	ldr	r0, [pc, #136]	; (80013a4 <HAL_SPI_MspInit+0x130>)
 800131c:	f005 fb2a 	bl	8006974 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <HAL_SPI_MspInit+0x134>)
 8001322:	4a22      	ldr	r2, [pc, #136]	; (80013ac <HAL_SPI_MspInit+0x138>)
 8001324:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_SPI_MspInit+0x134>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <HAL_SPI_MspInit+0x134>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <HAL_SPI_MspInit+0x134>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_SPI_MspInit+0x134>)
 800133a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800133e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <HAL_SPI_MspInit+0x134>)
 8001342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001346:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <HAL_SPI_MspInit+0x134>)
 800134a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800134e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_SPI_MspInit+0x134>)
 8001352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001356:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_SPI_MspInit+0x134>)
 800135a:	2200      	movs	r2, #0
 800135c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_SPI_MspInit+0x134>)
 8001360:	2200      	movs	r2, #0
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001364:	4810      	ldr	r0, [pc, #64]	; (80013a8 <HAL_SPI_MspInit+0x134>)
 8001366:	f004 feed 	bl	8006144 <HAL_DMA_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_SPI_MspInit+0x100>
    {
      Error_Handler();
 8001370:	f7ff ff3c 	bl	80011ec <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <HAL_SPI_MspInit+0x134>)
 8001378:	659a      	str	r2, [r3, #88]	; 0x58
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <HAL_SPI_MspInit+0x134>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	2024      	movs	r0, #36	; 0x24
 8001386:	f004 fdae 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800138a:	2024      	movs	r0, #36	; 0x24
 800138c:	f004 fdc7 	bl	8005f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40003800 	.word	0x40003800
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	20036680 	.word	0x20036680
 80013ac:	40026058 	.word	0x40026058

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_MspInit+0x50>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a11      	ldr	r2, [pc, #68]	; (8001400 <HAL_MspInit+0x50>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_MspInit+0x50>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_MspInit+0x50>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <HAL_MspInit+0x50>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_MspInit+0x50>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2005      	movs	r0, #5
 80013ec:	f004 fd7b 	bl	8005ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013f0:	2005      	movs	r0, #5
 80013f2:	f004 fd94 	bl	8005f1e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <NMI_Handler+0x4>

0800140a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <MemManage_Handler+0x4>

08001416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <UsageFault_Handler+0x4>

08001422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001450:	f004 fc06 	bl	8005c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <DMA1_Stream3_IRQHandler+0x10>)
 800146e:	f005 f809 	bl	8006484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20036680 	.word	0x20036680

0800147c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001482:	f009 ff07 	bl	800b294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200366e0 	.word	0x200366e0

08001490 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001496:	f009 fefd 	bl	800b294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200366e0 	.word	0x200366e0

080014a4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014a8:	4802      	ldr	r0, [pc, #8]	; (80014b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80014aa:	f009 fef3 	bl	800b294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200366e0 	.word	0x200366e0

080014b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <TIM1_CC_IRQHandler+0x10>)
 80014be:	f009 fee9 	bl	800b294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200366e0 	.word	0x200366e0

080014cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <I2C1_EV_IRQHandler+0x10>)
 80014d2:	f006 f87b 	bl	80075cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200005e0 	.word	0x200005e0

080014e0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <I2C1_ER_IRQHandler+0x10>)
 80014e6:	f006 f88b 	bl	8007600 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200005e0 	.word	0x200005e0

080014f4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <SPI2_IRQHandler+0x10>)
 80014fa:	f009 f9e9 	bl	800a8d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2003661c 	.word	0x2003661c

08001508 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <UART4_IRQHandler+0x10>)
 800150e:	f00a fb8b 	bl	800bc28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2003672c 	.word	0x2003672c

0800151c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <I2C4_EV_IRQHandler+0x10>)
 8001522:	f006 f853 	bl	80075cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000588 	.word	0x20000588

08001530 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <I2C4_ER_IRQHandler+0x10>)
 8001536:	f006 f863 	bl	8007600 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000588 	.word	0x20000588

08001544 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SystemInit+0x20>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <SystemInit+0x20>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <MX_TIM1_Init+0xa0>)
 8001588:	4a20      	ldr	r2, [pc, #128]	; (800160c <MX_TIM1_Init+0xa4>)
 800158a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800158c:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <MX_TIM1_Init+0xa0>)
 800158e:	2200      	movs	r2, #0
 8001590:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_TIM1_Init+0xa0>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6667;
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <MX_TIM1_Init+0xa0>)
 800159a:	f641 220b 	movw	r2, #6667	; 0x1a0b
 800159e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <MX_TIM1_Init+0xa0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_TIM1_Init+0xa0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <MX_TIM1_Init+0xa0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015b2:	4815      	ldr	r0, [pc, #84]	; (8001608 <MX_TIM1_Init+0xa0>)
 80015b4:	f009 fd9e 	bl	800b0f4 <HAL_TIM_Base_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80015be:	f7ff fe15 	bl	80011ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4619      	mov	r1, r3
 80015ce:	480e      	ldr	r0, [pc, #56]	; (8001608 <MX_TIM1_Init+0xa0>)
 80015d0:	f009 ff80 	bl	800b4d4 <HAL_TIM_ConfigClockSource>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80015da:	f7ff fe07 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <MX_TIM1_Init+0xa0>)
 80015f0:	f00a f99c 	bl	800b92c <HAL_TIMEx_MasterConfigSynchronization>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015fa:	f7ff fdf7 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015fe:	bf00      	nop
 8001600:	3720      	adds	r7, #32
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200366e0 	.word	0x200366e0
 800160c:	40010000 	.word	0x40010000

08001610 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_TIM_Base_MspInit+0x74>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12b      	bne.n	800167a <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_TIM_Base_MspInit+0x78>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a18      	ldr	r2, [pc, #96]	; (8001688 <HAL_TIM_Base_MspInit+0x78>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <HAL_TIM_Base_MspInit+0x78>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	2018      	movs	r0, #24
 8001640:	f004 fc51 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001644:	2018      	movs	r0, #24
 8001646:	f004 fc6a 	bl	8005f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2019      	movs	r0, #25
 8001650:	f004 fc49 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001654:	2019      	movs	r0, #25
 8001656:	f004 fc62 	bl	8005f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	201a      	movs	r0, #26
 8001660:	f004 fc41 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001664:	201a      	movs	r0, #26
 8001666:	f004 fc5a 	bl	8005f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	201b      	movs	r0, #27
 8001670:	f004 fc39 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001674:	201b      	movs	r0, #27
 8001676:	f004 fc52 	bl	8005f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40010000 	.word	0x40010000
 8001688:	40023800 	.word	0x40023800

0800168c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_UART4_Init+0x58>)
 8001692:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <MX_UART4_Init+0x5c>)
 8001694:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_UART4_Init+0x58>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_UART4_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_UART4_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_UART4_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_UART4_Init+0x58>)
 80016b2:	2208      	movs	r2, #8
 80016b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_UART4_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_UART4_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_UART4_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_UART4_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_UART4_Init+0x58>)
 80016d0:	f00a f9d8 	bl	800ba84 <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80016da:	f7ff fd87 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2003672c 	.word	0x2003672c
 80016e8:	40004c00 	.word	0x40004c00

080016ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b0ac      	sub	sp, #176	; 0xb0
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001704:	f107 0318 	add.w	r3, r7, #24
 8001708:	2284      	movs	r2, #132	; 0x84
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f00d f957 	bl	800e9c0 <memset>
  if(uartHandle->Instance==UART4)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a36      	ldr	r2, [pc, #216]	; (80017f0 <HAL_UART_MspInit+0x104>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d165      	bne.n	80017e8 <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800171c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001720:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001722:	2300      	movs	r3, #0
 8001724:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001726:	f107 0318 	add.w	r3, r7, #24
 800172a:	4618      	mov	r0, r3
 800172c:	f008 f984 	bl	8009a38 <HAL_RCCEx_PeriphCLKConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001736:	f7ff fd59 	bl	80011ec <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800173a:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <HAL_UART_MspInit+0x108>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a2d      	ldr	r2, [pc, #180]	; (80017f4 <HAL_UART_MspInit+0x108>)
 8001740:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b2b      	ldr	r3, [pc, #172]	; (80017f4 <HAL_UART_MspInit+0x108>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <HAL_UART_MspInit+0x108>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <HAL_UART_MspInit+0x108>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <HAL_UART_MspInit+0x108>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800176a:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <HAL_UART_MspInit+0x108>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a21      	ldr	r2, [pc, #132]	; (80017f4 <HAL_UART_MspInit+0x108>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <HAL_UART_MspInit+0x108>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001782:	2302      	movs	r3, #2
 8001784:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800179a:	2308      	movs	r3, #8
 800179c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017a4:	4619      	mov	r1, r3
 80017a6:	4814      	ldr	r0, [pc, #80]	; (80017f8 <HAL_UART_MspInit+0x10c>)
 80017a8:	f005 f8e4 	bl	8006974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017c6:	2308      	movs	r3, #8
 80017c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017d0:	4619      	mov	r1, r3
 80017d2:	480a      	ldr	r0, [pc, #40]	; (80017fc <HAL_UART_MspInit+0x110>)
 80017d4:	f005 f8ce 	bl	8006974 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2034      	movs	r0, #52	; 0x34
 80017de:	f004 fb82 	bl	8005ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80017e2:	2034      	movs	r0, #52	; 0x34
 80017e4:	f004 fb9b 	bl	8005f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80017e8:	bf00      	nop
 80017ea:	37b0      	adds	r7, #176	; 0xb0
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40004c00 	.word	0x40004c00
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020800 	.word	0x40020800

08001800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001838 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001806:	490e      	ldr	r1, [pc, #56]	; (8001840 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800181c:	4c0b      	ldr	r4, [pc, #44]	; (800184c <LoopFillZerobss+0x26>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800182a:	f7ff fe8b 	bl	8001544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182e:	f00d f8a3 	bl	800e978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001832:	f7ff fb9d 	bl	8000f70 <main>
  bx  lr    
 8001836:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001838:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	20000544 	.word	0x20000544
  ldr r2, =_sidata
 8001844:	0800f26c 	.word	0x0800f26c
  ldr r2, =_sbss
 8001848:	20000544 	.word	0x20000544
  ldr r4, =_ebss
 800184c:	200368fc 	.word	0x200368fc

08001850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC_IRQHandler>
	...

08001854 <IIS2DLPC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_RegisterBusIO(IIS2DLPC_Object_t *pObj, IIS2DLPC_IO_t *pIO)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d103      	bne.n	8001870 <IIS2DLPC_RegisterBusIO+0x1c>
  {
    ret = IIS2DLPC_ERROR;
 8001868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	e051      	b.n	8001914 <IIS2DLPC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	7b1a      	ldrb	r2, [r3, #12]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	699a      	ldr	r2, [r3, #24]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a1d      	ldr	r2, [pc, #116]	; (8001920 <IIS2DLPC_RegisterBusIO+0xcc>)
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <IIS2DLPC_RegisterBusIO+0xd0>)
 80018b2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	69da      	ldr	r2, [r3, #28]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d103      	bne.n	80018d2 <IIS2DLPC_RegisterBusIO+0x7e>
    {
      ret = IIS2DLPC_ERROR;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	e020      	b.n	8001914 <IIS2DLPC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != IIS2DLPC_OK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4798      	blx	r3
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <IIS2DLPC_RegisterBusIO+0x92>
    {
      ret = IIS2DLPC_ERROR;
 80018de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	e016      	b.n	8001914 <IIS2DLPC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == IIS2DLPC_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d112      	bne.n	8001914 <IIS2DLPC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10d      	bne.n	8001914 <IIS2DLPC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 80018f8:	2305      	movs	r3, #5
 80018fa:	72fb      	strb	r3, [r7, #11]

          if (IIS2DLPC_Write_Reg(pObj, IIS2DLPC_CTRL2, data) != IIS2DLPC_OK)
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	461a      	mov	r2, r3
 8001900:	2121      	movs	r1, #33	; 0x21
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fd67 	bl	80023d6 <IIS2DLPC_Write_Reg>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <IIS2DLPC_RegisterBusIO+0xc0>
          {
            ret = IIS2DLPC_ERROR;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001912:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001914:	68fb      	ldr	r3, [r7, #12]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	08002769 	.word	0x08002769
 8001924:	0800279f 	.word	0x0800279f

08001928 <IIS2DLPC_Init>:
  * @brief  Initialize the IIS2DLPC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_Init(IIS2DLPC_Object_t *pObj)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (iis2dlpc_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3320      	adds	r3, #32
 8001934:	2101      	movs	r1, #1
 8001936:	4618      	mov	r0, r3
 8001938:	f001 fa52 	bl	8002de0 <iis2dlpc_auto_increment_set>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <IIS2DLPC_Init+0x20>
  {
    return IIS2DLPC_ERROR;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001946:	e04b      	b.n	80019e0 <IIS2DLPC_Init+0xb8>
  }

  /* Enable BDU */
  if (iis2dlpc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3320      	adds	r3, #32
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f001 f966 	bl	8002c20 <iis2dlpc_block_data_update_set>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <IIS2DLPC_Init+0x38>
  {
    return IIS2DLPC_ERROR;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195e:	e03f      	b.n	80019e0 <IIS2DLPC_Init+0xb8>
  }

  /* FIFO mode selection */
  if (iis2dlpc_fifo_mode_set(&(pObj->Ctx), IIS2DLPC_BYPASS_MODE) != IIS2DLPC_OK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3320      	adds	r3, #32
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f001 fa60 	bl	8002e2c <iis2dlpc_fifo_mode_set>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <IIS2DLPC_Init+0x50>
  {
    return IIS2DLPC_ERROR;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001976:	e033      	b.n	80019e0 <IIS2DLPC_Init+0xb8>
  }

  /* Power mode selection */
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), IIS2DLPC_HIGH_PERFORMANCE) != IIS2DLPC_OK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3320      	adds	r3, #32
 800197c:	2104      	movs	r1, #4
 800197e:	4618      	mov	r0, r3
 8001980:	f000 ff58 	bl	8002834 <iis2dlpc_power_mode_set>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <IIS2DLPC_Init+0x68>
  {
    return IIS2DLPC_ERROR;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800198e:	e027      	b.n	80019e0 <IIS2DLPC_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <IIS2DLPC_Init+0xc0>)
 8001994:	635a      	str	r2, [r3, #52]	; 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Output data rate selection - power down. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3320      	adds	r3, #32
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f001 f849 	bl	8002a44 <iis2dlpc_data_rate_set>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <IIS2DLPC_Init+0x96>
  {
    return IIS2DLPC_ERROR;
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019bc:	e010      	b.n	80019e0 <IIS2DLPC_Init+0xb8>
  }

  /* Full scale selection. */
  if (iis2dlpc_full_scale_set(&(pObj->Ctx), IIS2DLPC_2g) != IIS2DLPC_OK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3320      	adds	r3, #32
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f001 f951 	bl	8002c6c <iis2dlpc_full_scale_set>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <IIS2DLPC_Init+0xae>
  {
    return IIS2DLPC_ERROR;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d4:	e004      	b.n	80019e0 <IIS2DLPC_Init+0xb8>
  }

  pObj->is_initialized = 1;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS2DLPC_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	42c80000 	.word	0x42c80000

080019ec <IIS2DLPC_DeInit>:
  * @brief  Deinitialize the IIS2DLPC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_DeInit(IIS2DLPC_Object_t *pObj)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2DLPC_ACC_Disable(pObj) != IIS2DLPC_OK)
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f888 	bl	8001b0a <IIS2DLPC_ACC_Disable>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <IIS2DLPC_DeInit+0x1a>
  {
    return IIS2DLPC_ERROR;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a04:	e010      	b.n	8001a28 <IIS2DLPC_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->is_initialized = 0;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS2DLPC_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <IIS2DLPC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ReadID(IIS2DLPC_Object_t *pObj, uint8_t *Id)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  if (iis2dlpc_device_id_get(&(pObj->Ctx), Id) != IIS2DLPC_OK)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3320      	adds	r3, #32
 8001a3e:	6839      	ldr	r1, [r7, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 f9bc 	bl	8002dbe <iis2dlpc_device_id_get>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <IIS2DLPC_ReadID+0x22>
  {
    return IIS2DLPC_ERROR;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a50:	e000      	b.n	8001a54 <IIS2DLPC_ReadID+0x24>
  }

  return IIS2DLPC_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <IIS2DLPC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to IIS2DLPC sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_GetCapabilities(IIS2DLPC_Object_t *pObj, IIS2DLPC_Capabilities_t *Capabilities)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2200      	movs	r2, #0
 8001a76:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2200      	movs	r2, #0
 8001a82:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2210      	movs	r2, #16
 8001a88:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4a06      	ldr	r2, [pc, #24]	; (8001ab4 <IIS2DLPC_GetCapabilities+0x58>)
 8001a9c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
  return IIS2DLPC_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	44c80000 	.word	0x44c80000

08001ab8 <IIS2DLPC_ACC_Enable>:
  * @brief  Enable the IIS2DLPC accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_Enable(IIS2DLPC_Object_t *pObj)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <IIS2DLPC_ACC_Enable+0x16>
  {
    return IIS2DLPC_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e019      	b.n	8001b02 <IIS2DLPC_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fc90 	bl	800240c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <IIS2DLPC_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != IIS2DLPC_OK)
  {
    return IIS2DLPC_ERROR;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001af6:	e004      	b.n	8001b02 <IIS2DLPC_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2DLPC_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <IIS2DLPC_ACC_Disable>:
  * @brief  Disable the IIS2DLPC accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_Disable(IIS2DLPC_Object_t *pObj)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <IIS2DLPC_ACC_Disable+0x16>
  {
    return IIS2DLPC_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e010      	b.n	8001b42 <IIS2DLPC_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3320      	adds	r3, #32
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 ff8c 	bl	8002a44 <iis2dlpc_data_rate_set>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <IIS2DLPC_ACC_Disable+0x2e>
  {
    return IIS2DLPC_ERROR;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b36:	e004      	b.n	8001b42 <IIS2DLPC_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2DLPC_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <IIS2DLPC_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetSensitivity(IIS2DLPC_Object_t *pObj, float *Sensitivity)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
  iis2dlpc_fs_t full_scale;
  iis2dlpc_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DLPC_OK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3320      	adds	r3, #32
 8001b5e:	f107 020b 	add.w	r2, r7, #11
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f001 f8a7 	bl	8002cb8 <iis2dlpc_full_scale_get>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <IIS2DLPC_ACC_GetSensitivity+0x2a>
  {
    return IIS2DLPC_ERROR;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b74:	e0a0      	b.n	8001cb8 <IIS2DLPC_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3320      	adds	r3, #32
 8001b7a:	f107 020a 	add.w	r2, r7, #10
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 fea5 	bl	80028d0 <iis2dlpc_power_mode_get>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <IIS2DLPC_ACC_GetSensitivity+0x46>
  {
    return IIS2DLPC_ERROR;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b90:	e092      	b.n	8001cb8 <IIS2DLPC_ACC_GetSensitivity+0x16c>
  }

  switch (mode)
 8001b92:	7abb      	ldrb	r3, [r7, #10]
 8001b94:	2b1b      	cmp	r3, #27
 8001b96:	f200 8087 	bhi.w	8001ca8 <IIS2DLPC_ACC_GetSensitivity+0x15c>
 8001b9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ba0 <IIS2DLPC_ACC_GetSensitivity+0x54>)
 8001b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba0:	08001c11 	.word	0x08001c11
 8001ba4:	08001c5d 	.word	0x08001c5d
 8001ba8:	08001c5d 	.word	0x08001c5d
 8001bac:	08001c5d 	.word	0x08001c5d
 8001bb0:	08001c5d 	.word	0x08001c5d
 8001bb4:	08001ca9 	.word	0x08001ca9
 8001bb8:	08001ca9 	.word	0x08001ca9
 8001bbc:	08001ca9 	.word	0x08001ca9
 8001bc0:	08001c11 	.word	0x08001c11
 8001bc4:	08001c5d 	.word	0x08001c5d
 8001bc8:	08001c5d 	.word	0x08001c5d
 8001bcc:	08001c5d 	.word	0x08001c5d
 8001bd0:	08001ca9 	.word	0x08001ca9
 8001bd4:	08001ca9 	.word	0x08001ca9
 8001bd8:	08001ca9 	.word	0x08001ca9
 8001bdc:	08001ca9 	.word	0x08001ca9
 8001be0:	08001c11 	.word	0x08001c11
 8001be4:	08001c5d 	.word	0x08001c5d
 8001be8:	08001c5d 	.word	0x08001c5d
 8001bec:	08001c5d 	.word	0x08001c5d
 8001bf0:	08001c5d 	.word	0x08001c5d
 8001bf4:	08001ca9 	.word	0x08001ca9
 8001bf8:	08001ca9 	.word	0x08001ca9
 8001bfc:	08001ca9 	.word	0x08001ca9
 8001c00:	08001c11 	.word	0x08001c11
 8001c04:	08001c5d 	.word	0x08001c5d
 8001c08:	08001c5d 	.word	0x08001c5d
 8001c0c:	08001c5d 	.word	0x08001c5d
  {
    case IIS2DLPC_CONT_LOW_PWR_12bit:
    case IIS2DLPC_SINGLE_LOW_PWR_12bit:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
    case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8001c10:	7afb      	ldrb	r3, [r7, #11]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d81a      	bhi.n	8001c4c <IIS2DLPC_ACC_GetSensitivity+0x100>
 8001c16:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <IIS2DLPC_ACC_GetSensitivity+0xd0>)
 8001c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c35 	.word	0x08001c35
 8001c24:	08001c3d 	.word	0x08001c3d
 8001c28:	08001c45 	.word	0x08001c45
      {
        case IIS2DLPC_2g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4a24      	ldr	r2, [pc, #144]	; (8001cc0 <IIS2DLPC_ACC_GetSensitivity+0x174>)
 8001c30:	601a      	str	r2, [r3, #0]
          break;
 8001c32:	e012      	b.n	8001c5a <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_4g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	4a23      	ldr	r2, [pc, #140]	; (8001cc4 <IIS2DLPC_ACC_GetSensitivity+0x178>)
 8001c38:	601a      	str	r2, [r3, #0]
          break;
 8001c3a:	e00e      	b.n	8001c5a <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_8g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <IIS2DLPC_ACC_GetSensitivity+0x17c>)
 8001c40:	601a      	str	r2, [r3, #0]
          break;
 8001c42:	e00a      	b.n	8001c5a <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_16g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <IIS2DLPC_ACC_GetSensitivity+0x180>)
 8001c48:	601a      	str	r2, [r3, #0]
          break;
 8001c4a:	e006      	b.n	8001c5a <IIS2DLPC_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4a20      	ldr	r2, [pc, #128]	; (8001cd0 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 8001c50:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c56:	60fb      	str	r3, [r7, #12]
          break;
 8001c58:	bf00      	nop
      }
      break;
 8001c5a:	e02c      	b.n	8001cb6 <IIS2DLPC_ACC_GetSensitivity+0x16a>
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8001c5c:	7afb      	ldrb	r3, [r7, #11]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d81a      	bhi.n	8001c98 <IIS2DLPC_ACC_GetSensitivity+0x14c>
 8001c62:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <IIS2DLPC_ACC_GetSensitivity+0x11c>)
 8001c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c68:	08001c79 	.word	0x08001c79
 8001c6c:	08001c81 	.word	0x08001c81
 8001c70:	08001c89 	.word	0x08001c89
 8001c74:	08001c91 	.word	0x08001c91
      {
        case IIS2DLPC_2g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4a16      	ldr	r2, [pc, #88]	; (8001cd4 <IIS2DLPC_ACC_GetSensitivity+0x188>)
 8001c7c:	601a      	str	r2, [r3, #0]
          break;
 8001c7e:	e012      	b.n	8001ca6 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_4g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <IIS2DLPC_ACC_GetSensitivity+0x18c>)
 8001c84:	601a      	str	r2, [r3, #0]
          break;
 8001c86:	e00e      	b.n	8001ca6 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_8g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <IIS2DLPC_ACC_GetSensitivity+0x174>)
 8001c8c:	601a      	str	r2, [r3, #0]
          break;
 8001c8e:	e00a      	b.n	8001ca6 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_16g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <IIS2DLPC_ACC_GetSensitivity+0x178>)
 8001c94:	601a      	str	r2, [r3, #0]
          break;
 8001c96:	e006      	b.n	8001ca6 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 8001c9c:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ca2:	60fb      	str	r3, [r7, #12]
          break;
 8001ca4:	bf00      	nop
      }
      break;
 8001ca6:	e006      	b.n	8001cb6 <IIS2DLPC_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 8001cac:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb2:	60fb      	str	r3, [r7, #12]
      break;
 8001cb4:	bf00      	nop
  }

  return ret;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	3f79db23 	.word	0x3f79db23
 8001cc4:	3ff9db23 	.word	0x3ff9db23
 8001cc8:	4079db23 	.word	0x4079db23
 8001ccc:	40f9db23 	.word	0x40f9db23
 8001cd0:	bf800000 	.word	0xbf800000
 8001cd4:	3e79db23 	.word	0x3e79db23
 8001cd8:	3ef9db23 	.word	0x3ef9db23

08001cdc <IIS2DLPC_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetOutputDataRate(IIS2DLPC_Object_t *pObj, float *Odr)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
  iis2dlpc_odr_t odr_low_level;
  iis2dlpc_mode_t mode;

  /* Get current output data rate. */
  if (iis2dlpc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2DLPC_OK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3320      	adds	r3, #32
 8001cee:	f107 020b 	add.w	r2, r7, #11
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 feeb 	bl	8002ad0 <iis2dlpc_data_rate_get>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <IIS2DLPC_ACC_GetOutputDataRate+0x2a>
  {
    return IIS2DLPC_ERROR;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d04:	e1b4      	b.n	8002070 <IIS2DLPC_ACC_GetOutputDataRate+0x394>
  }

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3320      	adds	r3, #32
 8001d0a:	f107 020a 	add.w	r2, r7, #10
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fddd 	bl	80028d0 <iis2dlpc_power_mode_get>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <IIS2DLPC_ACC_GetOutputDataRate+0x46>
  {
    return IIS2DLPC_ERROR;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d20:	e1a6      	b.n	8002070 <IIS2DLPC_ACC_GetOutputDataRate+0x394>
  }

  switch (odr_low_level)
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	2b22      	cmp	r3, #34	; 0x22
 8001d26:	f200 819b 	bhi.w	8002060 <IIS2DLPC_ACC_GetOutputDataRate+0x384>
 8001d2a:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <IIS2DLPC_ACC_GetOutputDataRate+0x54>)
 8001d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d30:	08001dbd 	.word	0x08001dbd
 8001d34:	08001dc7 	.word	0x08001dc7
 8001d38:	08001e65 	.word	0x08001e65
 8001d3c:	08001e6d 	.word	0x08001e6d
 8001d40:	08001e75 	.word	0x08001e75
 8001d44:	08001e7d 	.word	0x08001e7d
 8001d48:	08001e85 	.word	0x08001e85
 8001d4c:	08001e8d 	.word	0x08001e8d
 8001d50:	08001f29 	.word	0x08001f29
 8001d54:	08001fc5 	.word	0x08001fc5
 8001d58:	08002061 	.word	0x08002061
 8001d5c:	08002061 	.word	0x08002061
 8001d60:	08002061 	.word	0x08002061
 8001d64:	08002061 	.word	0x08002061
 8001d68:	08002061 	.word	0x08002061
 8001d6c:	08002061 	.word	0x08002061
 8001d70:	08002061 	.word	0x08002061
 8001d74:	08002061 	.word	0x08002061
 8001d78:	08001dbd 	.word	0x08001dbd
 8001d7c:	08002061 	.word	0x08002061
 8001d80:	08002061 	.word	0x08002061
 8001d84:	08002061 	.word	0x08002061
 8001d88:	08002061 	.word	0x08002061
 8001d8c:	08002061 	.word	0x08002061
 8001d90:	08002061 	.word	0x08002061
 8001d94:	08002061 	.word	0x08002061
 8001d98:	08002061 	.word	0x08002061
 8001d9c:	08002061 	.word	0x08002061
 8001da0:	08002061 	.word	0x08002061
 8001da4:	08002061 	.word	0x08002061
 8001da8:	08002061 	.word	0x08002061
 8001dac:	08002061 	.word	0x08002061
 8001db0:	08002061 	.word	0x08002061
 8001db4:	08002061 	.word	0x08002061
 8001db8:	08001dbd 	.word	0x08001dbd
  {
    case IIS2DLPC_XL_ODR_OFF:
    case IIS2DLPC_XL_SET_SW_TRIG:
    case IIS2DLPC_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
      break;
 8001dc4:	e153      	b.n	800206e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8001dc6:	7abb      	ldrb	r3, [r7, #10]
 8001dc8:	2b1b      	cmp	r3, #27
 8001dca:	d843      	bhi.n	8001e54 <IIS2DLPC_ACC_GetOutputDataRate+0x178>
 8001dcc:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <IIS2DLPC_ACC_GetOutputDataRate+0xf8>)
 8001dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd2:	bf00      	nop
 8001dd4:	08001e4d 	.word	0x08001e4d
 8001dd8:	08001e4d 	.word	0x08001e4d
 8001ddc:	08001e4d 	.word	0x08001e4d
 8001de0:	08001e4d 	.word	0x08001e4d
 8001de4:	08001e45 	.word	0x08001e45
 8001de8:	08001e55 	.word	0x08001e55
 8001dec:	08001e55 	.word	0x08001e55
 8001df0:	08001e55 	.word	0x08001e55
 8001df4:	08001e4d 	.word	0x08001e4d
 8001df8:	08001e4d 	.word	0x08001e4d
 8001dfc:	08001e4d 	.word	0x08001e4d
 8001e00:	08001e4d 	.word	0x08001e4d
 8001e04:	08001e55 	.word	0x08001e55
 8001e08:	08001e55 	.word	0x08001e55
 8001e0c:	08001e55 	.word	0x08001e55
 8001e10:	08001e55 	.word	0x08001e55
 8001e14:	08001e4d 	.word	0x08001e4d
 8001e18:	08001e4d 	.word	0x08001e4d
 8001e1c:	08001e4d 	.word	0x08001e4d
 8001e20:	08001e4d 	.word	0x08001e4d
 8001e24:	08001e45 	.word	0x08001e45
 8001e28:	08001e55 	.word	0x08001e55
 8001e2c:	08001e55 	.word	0x08001e55
 8001e30:	08001e55 	.word	0x08001e55
 8001e34:	08001e4d 	.word	0x08001e4d
 8001e38:	08001e4d 	.word	0x08001e4d
 8001e3c:	08001e4d 	.word	0x08001e4d
 8001e40:	08001e4d 	.word	0x08001e4d
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4a8c      	ldr	r2, [pc, #560]	; (8002078 <IIS2DLPC_ACC_GetOutputDataRate+0x39c>)
 8001e48:	601a      	str	r2, [r3, #0]
          break;
 8001e4a:	e00a      	b.n	8001e62 <IIS2DLPC_ACC_GetOutputDataRate+0x186>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	4a8b      	ldr	r2, [pc, #556]	; (800207c <IIS2DLPC_ACC_GetOutputDataRate+0x3a0>)
 8001e50:	601a      	str	r2, [r3, #0]
          break;
 8001e52:	e006      	b.n	8001e62 <IIS2DLPC_ACC_GetOutputDataRate+0x186>

        default:
          *Odr = -1.0f;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4a8a      	ldr	r2, [pc, #552]	; (8002080 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8001e58:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e5e:	60fb      	str	r3, [r7, #12]
          break;
 8001e60:	bf00      	nop
      }
      break;
 8001e62:	e104      	b.n	800206e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4a84      	ldr	r2, [pc, #528]	; (8002078 <IIS2DLPC_ACC_GetOutputDataRate+0x39c>)
 8001e68:	601a      	str	r2, [r3, #0]
      break;
 8001e6a:	e100      	b.n	800206e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_25Hz:
      *Odr = 25.0f;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4a85      	ldr	r2, [pc, #532]	; (8002084 <IIS2DLPC_ACC_GetOutputDataRate+0x3a8>)
 8001e70:	601a      	str	r2, [r3, #0]
      break;
 8001e72:	e0fc      	b.n	800206e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4a84      	ldr	r2, [pc, #528]	; (8002088 <IIS2DLPC_ACC_GetOutputDataRate+0x3ac>)
 8001e78:	601a      	str	r2, [r3, #0]
      break;
 8001e7a:	e0f8      	b.n	800206e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_100Hz:
      *Odr = 100.0f;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4a83      	ldr	r2, [pc, #524]	; (800208c <IIS2DLPC_ACC_GetOutputDataRate+0x3b0>)
 8001e80:	601a      	str	r2, [r3, #0]
      break;
 8001e82:	e0f4      	b.n	800206e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_200Hz:
      *Odr = 200.0f;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4a82      	ldr	r2, [pc, #520]	; (8002090 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8001e88:	601a      	str	r2, [r3, #0]
      break;
 8001e8a:	e0f0      	b.n	800206e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_400Hz:
      switch (mode)
 8001e8c:	7abb      	ldrb	r3, [r7, #10]
 8001e8e:	2b1b      	cmp	r3, #27
 8001e90:	d842      	bhi.n	8001f18 <IIS2DLPC_ACC_GetOutputDataRate+0x23c>
 8001e92:	a201      	add	r2, pc, #4	; (adr r2, 8001e98 <IIS2DLPC_ACC_GetOutputDataRate+0x1bc>)
 8001e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e98:	08001f11 	.word	0x08001f11
 8001e9c:	08001f11 	.word	0x08001f11
 8001ea0:	08001f11 	.word	0x08001f11
 8001ea4:	08001f11 	.word	0x08001f11
 8001ea8:	08001f09 	.word	0x08001f09
 8001eac:	08001f19 	.word	0x08001f19
 8001eb0:	08001f19 	.word	0x08001f19
 8001eb4:	08001f19 	.word	0x08001f19
 8001eb8:	08001f11 	.word	0x08001f11
 8001ebc:	08001f11 	.word	0x08001f11
 8001ec0:	08001f11 	.word	0x08001f11
 8001ec4:	08001f11 	.word	0x08001f11
 8001ec8:	08001f19 	.word	0x08001f19
 8001ecc:	08001f19 	.word	0x08001f19
 8001ed0:	08001f19 	.word	0x08001f19
 8001ed4:	08001f19 	.word	0x08001f19
 8001ed8:	08001f11 	.word	0x08001f11
 8001edc:	08001f11 	.word	0x08001f11
 8001ee0:	08001f11 	.word	0x08001f11
 8001ee4:	08001f11 	.word	0x08001f11
 8001ee8:	08001f09 	.word	0x08001f09
 8001eec:	08001f19 	.word	0x08001f19
 8001ef0:	08001f19 	.word	0x08001f19
 8001ef4:	08001f19 	.word	0x08001f19
 8001ef8:	08001f11 	.word	0x08001f11
 8001efc:	08001f11 	.word	0x08001f11
 8001f00:	08001f11 	.word	0x08001f11
 8001f04:	08001f11 	.word	0x08001f11
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4a62      	ldr	r2, [pc, #392]	; (8002094 <IIS2DLPC_ACC_GetOutputDataRate+0x3b8>)
 8001f0c:	601a      	str	r2, [r3, #0]
          break;
 8001f0e:	e00a      	b.n	8001f26 <IIS2DLPC_ACC_GetOutputDataRate+0x24a>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4a5f      	ldr	r2, [pc, #380]	; (8002090 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8001f14:	601a      	str	r2, [r3, #0]
          break;
 8001f16:	e006      	b.n	8001f26 <IIS2DLPC_ACC_GetOutputDataRate+0x24a>

        default:
          *Odr = -1.0f;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4a59      	ldr	r2, [pc, #356]	; (8002080 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8001f1c:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f22:	60fb      	str	r3, [r7, #12]
          break;
 8001f24:	bf00      	nop
      }
      break;
 8001f26:	e0a2      	b.n	800206e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_800Hz:
      switch (mode)
 8001f28:	7abb      	ldrb	r3, [r7, #10]
 8001f2a:	2b1b      	cmp	r3, #27
 8001f2c:	d842      	bhi.n	8001fb4 <IIS2DLPC_ACC_GetOutputDataRate+0x2d8>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <IIS2DLPC_ACC_GetOutputDataRate+0x258>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001fad 	.word	0x08001fad
 8001f38:	08001fad 	.word	0x08001fad
 8001f3c:	08001fad 	.word	0x08001fad
 8001f40:	08001fad 	.word	0x08001fad
 8001f44:	08001fa5 	.word	0x08001fa5
 8001f48:	08001fb5 	.word	0x08001fb5
 8001f4c:	08001fb5 	.word	0x08001fb5
 8001f50:	08001fb5 	.word	0x08001fb5
 8001f54:	08001fad 	.word	0x08001fad
 8001f58:	08001fad 	.word	0x08001fad
 8001f5c:	08001fad 	.word	0x08001fad
 8001f60:	08001fad 	.word	0x08001fad
 8001f64:	08001fb5 	.word	0x08001fb5
 8001f68:	08001fb5 	.word	0x08001fb5
 8001f6c:	08001fb5 	.word	0x08001fb5
 8001f70:	08001fb5 	.word	0x08001fb5
 8001f74:	08001fad 	.word	0x08001fad
 8001f78:	08001fad 	.word	0x08001fad
 8001f7c:	08001fad 	.word	0x08001fad
 8001f80:	08001fad 	.word	0x08001fad
 8001f84:	08001fa5 	.word	0x08001fa5
 8001f88:	08001fb5 	.word	0x08001fb5
 8001f8c:	08001fb5 	.word	0x08001fb5
 8001f90:	08001fb5 	.word	0x08001fb5
 8001f94:	08001fad 	.word	0x08001fad
 8001f98:	08001fad 	.word	0x08001fad
 8001f9c:	08001fad 	.word	0x08001fad
 8001fa0:	08001fad 	.word	0x08001fad
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4a3c      	ldr	r2, [pc, #240]	; (8002098 <IIS2DLPC_ACC_GetOutputDataRate+0x3bc>)
 8001fa8:	601a      	str	r2, [r3, #0]
          break;
 8001faa:	e00a      	b.n	8001fc2 <IIS2DLPC_ACC_GetOutputDataRate+0x2e6>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4a38      	ldr	r2, [pc, #224]	; (8002090 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8001fb0:	601a      	str	r2, [r3, #0]
          break;
 8001fb2:	e006      	b.n	8001fc2 <IIS2DLPC_ACC_GetOutputDataRate+0x2e6>

        default:
          *Odr = -1.0f;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4a32      	ldr	r2, [pc, #200]	; (8002080 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8001fb8:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fbe:	60fb      	str	r3, [r7, #12]
          break;
 8001fc0:	bf00      	nop
      }
      break;
 8001fc2:	e054      	b.n	800206e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_1k6Hz:
      switch (mode)
 8001fc4:	7abb      	ldrb	r3, [r7, #10]
 8001fc6:	2b1b      	cmp	r3, #27
 8001fc8:	d842      	bhi.n	8002050 <IIS2DLPC_ACC_GetOutputDataRate+0x374>
 8001fca:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <IIS2DLPC_ACC_GetOutputDataRate+0x2f4>)
 8001fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd0:	08002049 	.word	0x08002049
 8001fd4:	08002049 	.word	0x08002049
 8001fd8:	08002049 	.word	0x08002049
 8001fdc:	08002049 	.word	0x08002049
 8001fe0:	08002041 	.word	0x08002041
 8001fe4:	08002051 	.word	0x08002051
 8001fe8:	08002051 	.word	0x08002051
 8001fec:	08002051 	.word	0x08002051
 8001ff0:	08002049 	.word	0x08002049
 8001ff4:	08002049 	.word	0x08002049
 8001ff8:	08002049 	.word	0x08002049
 8001ffc:	08002049 	.word	0x08002049
 8002000:	08002051 	.word	0x08002051
 8002004:	08002051 	.word	0x08002051
 8002008:	08002051 	.word	0x08002051
 800200c:	08002051 	.word	0x08002051
 8002010:	08002049 	.word	0x08002049
 8002014:	08002049 	.word	0x08002049
 8002018:	08002049 	.word	0x08002049
 800201c:	08002049 	.word	0x08002049
 8002020:	08002041 	.word	0x08002041
 8002024:	08002051 	.word	0x08002051
 8002028:	08002051 	.word	0x08002051
 800202c:	08002051 	.word	0x08002051
 8002030:	08002049 	.word	0x08002049
 8002034:	08002049 	.word	0x08002049
 8002038:	08002049 	.word	0x08002049
 800203c:	08002049 	.word	0x08002049
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	4a16      	ldr	r2, [pc, #88]	; (800209c <IIS2DLPC_ACC_GetOutputDataRate+0x3c0>)
 8002044:	601a      	str	r2, [r3, #0]
          break;
 8002046:	e00a      	b.n	800205e <IIS2DLPC_ACC_GetOutputDataRate+0x382>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	4a11      	ldr	r2, [pc, #68]	; (8002090 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 800204c:	601a      	str	r2, [r3, #0]
          break;
 800204e:	e006      	b.n	800205e <IIS2DLPC_ACC_GetOutputDataRate+0x382>

        default:
          *Odr = -1.0f;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8002054:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800205a:	60fb      	str	r3, [r7, #12]
          break;
 800205c:	bf00      	nop
      }
      break;
 800205e:	e006      	b.n	800206e <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    default:
      *Odr = -1.0f;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4a07      	ldr	r2, [pc, #28]	; (8002080 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8002064:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800206a:	60fb      	str	r3, [r7, #12]
      break;
 800206c:	bf00      	nop
  }

  return ret;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	41480000 	.word	0x41480000
 800207c:	3fcccccd 	.word	0x3fcccccd
 8002080:	bf800000 	.word	0xbf800000
 8002084:	41c80000 	.word	0x41c80000
 8002088:	42480000 	.word	0x42480000
 800208c:	42c80000 	.word	0x42c80000
 8002090:	43480000 	.word	0x43480000
 8002094:	43c80000 	.word	0x43c80000
 8002098:	44480000 	.word	0x44480000
 800209c:	44c80000 	.word	0x44c80000

080020a0 <IIS2DLPC_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_SetOutputDataRate(IIS2DLPC_Object_t *pObj, float Odr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return IIS2DLPC_ACC_SetOutputDataRate_With_Mode(pObj, Odr, IIS2DLPC_HIGH_PERFORMANCE_MODE, IIS2DLPC_LOW_NOISE_DISABLE);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	ed97 0a00 	vldr	s0, [r7]
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f805 	bl	80020c4 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>
 80020ba:	4603      	mov	r3, r0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_SetOutputDataRate_With_Mode(IIS2DLPC_Object_t *pObj, float Odr, IIS2DLPC_Operating_Mode_t Mode,
                                                 IIS2DLPC_Low_Noise_t Noise)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80020d0:	460b      	mov	r3, r1
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	4613      	mov	r3, r2
 80020d6:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d109      	bne.n	80020f6 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80020e2:	79ba      	ldrb	r2, [r7, #6]
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	4619      	mov	r1, r3
 80020e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f98d 	bl	800240c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 80020f2:	4603      	mov	r3, r0
 80020f4:	e008      	b.n	8002108 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80020f6:	79ba      	ldrb	r2, [r7, #6]
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	4619      	mov	r1, r3
 80020fc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fa9f 	bl	8002644 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>
 8002106:	4603      	mov	r3, r0
  }
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <IIS2DLPC_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetFullScale(IIS2DLPC_Object_t *pObj, int32_t *FullScale)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
  iis2dlpc_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS2DLPC_OK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3320      	adds	r3, #32
 8002122:	f107 020b 	add.w	r2, r7, #11
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f000 fdc5 	bl	8002cb8 <iis2dlpc_full_scale_get>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <IIS2DLPC_ACC_GetFullScale+0x2a>
  {
    return IIS2DLPC_ERROR;
 8002134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002138:	e027      	b.n	800218a <IIS2DLPC_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800213a:	7afb      	ldrb	r3, [r7, #11]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d81b      	bhi.n	8002178 <IIS2DLPC_ACC_GetFullScale+0x68>
 8002140:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <IIS2DLPC_ACC_GetFullScale+0x38>)
 8002142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002146:	bf00      	nop
 8002148:	08002159 	.word	0x08002159
 800214c:	08002161 	.word	0x08002161
 8002150:	08002169 	.word	0x08002169
 8002154:	08002171 	.word	0x08002171
  {
    case IIS2DLPC_2g:
      *FullScale =  2;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2202      	movs	r2, #2
 800215c:	601a      	str	r2, [r3, #0]
      break;
 800215e:	e013      	b.n	8002188 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_4g:
      *FullScale =  4;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2204      	movs	r2, #4
 8002164:	601a      	str	r2, [r3, #0]
      break;
 8002166:	e00f      	b.n	8002188 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_8g:
      *FullScale =  8;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2208      	movs	r2, #8
 800216c:	601a      	str	r2, [r3, #0]
      break;
 800216e:	e00b      	b.n	8002188 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_16g:
      *FullScale = 16;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2210      	movs	r2, #16
 8002174:	601a      	str	r2, [r3, #0]
      break;
 8002176:	e007      	b.n	8002188 <IIS2DLPC_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800217e:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002184:	60fb      	str	r3, [r7, #12]
      break;
 8002186:	bf00      	nop
  }

  return ret;
 8002188:	68fb      	ldr	r3, [r7, #12]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop

08002194 <IIS2DLPC_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_SetFullScale(IIS2DLPC_Object_t *pObj, int32_t FullScale)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  iis2dlpc_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? IIS2DLPC_2g
           : (FullScale <= 4) ? IIS2DLPC_4g
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	dd0b      	ble.n	80021bc <IIS2DLPC_ACC_SetFullScale+0x28>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	dd06      	ble.n	80021b8 <IIS2DLPC_ACC_SetFullScale+0x24>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	dc01      	bgt.n	80021b4 <IIS2DLPC_ACC_SetFullScale+0x20>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e004      	b.n	80021be <IIS2DLPC_ACC_SetFullScale+0x2a>
 80021b4:	2303      	movs	r3, #3
 80021b6:	e002      	b.n	80021be <IIS2DLPC_ACC_SetFullScale+0x2a>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <IIS2DLPC_ACC_SetFullScale+0x2a>
 80021bc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? IIS2DLPC_2g
 80021be:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? IIS2DLPC_8g
           :                    IIS2DLPC_16g;

  if (iis2dlpc_full_scale_set(&(pObj->Ctx), new_fs) != IIS2DLPC_OK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3320      	adds	r3, #32
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fd4f 	bl	8002c6c <iis2dlpc_full_scale_set>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <IIS2DLPC_ACC_SetFullScale+0x46>
  {
    return IIS2DLPC_ERROR;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d8:	e000      	b.n	80021dc <IIS2DLPC_ACC_SetFullScale+0x48>
  }

  return IIS2DLPC_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <IIS2DLPC_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetAxesRaw(IIS2DLPC_Object_t *pObj, IIS2DLPC_AxesRaw_t *Value)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  iis2dlpc_axis3bit16_t data_raw;
  iis2dlpc_mode_t mode;
  int32_t ret = IIS2DLPC_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3320      	adds	r3, #32
 80021f6:	f107 020b 	add.w	r2, r7, #11
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fb67 	bl	80028d0 <iis2dlpc_power_mode_get>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <IIS2DLPC_ACC_GetAxesRaw+0x2a>
  {
    return IIS2DLPC_ERROR;
 8002208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800220c:	e089      	b.n	8002322 <IIS2DLPC_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (iis2dlpc_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DLPC_OK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3320      	adds	r3, #32
 8002212:	f107 020c 	add.w	r2, r7, #12
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fd85 	bl	8002d28 <iis2dlpc_acceleration_raw_get>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <IIS2DLPC_ACC_GetAxesRaw+0x46>
  {
    return IIS2DLPC_ERROR;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002228:	e07b      	b.n	8002322 <IIS2DLPC_ACC_GetAxesRaw+0x13e>
  }

  switch (mode)
 800222a:	7afb      	ldrb	r3, [r7, #11]
 800222c:	2b1b      	cmp	r3, #27
 800222e:	d873      	bhi.n	8002318 <IIS2DLPC_ACC_GetAxesRaw+0x134>
 8002230:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <IIS2DLPC_ACC_GetAxesRaw+0x54>)
 8002232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002236:	bf00      	nop
 8002238:	080022a9 	.word	0x080022a9
 800223c:	080022e1 	.word	0x080022e1
 8002240:	080022e1 	.word	0x080022e1
 8002244:	080022e1 	.word	0x080022e1
 8002248:	080022e1 	.word	0x080022e1
 800224c:	08002319 	.word	0x08002319
 8002250:	08002319 	.word	0x08002319
 8002254:	08002319 	.word	0x08002319
 8002258:	080022a9 	.word	0x080022a9
 800225c:	080022e1 	.word	0x080022e1
 8002260:	080022e1 	.word	0x080022e1
 8002264:	080022e1 	.word	0x080022e1
 8002268:	08002319 	.word	0x08002319
 800226c:	08002319 	.word	0x08002319
 8002270:	08002319 	.word	0x08002319
 8002274:	08002319 	.word	0x08002319
 8002278:	080022a9 	.word	0x080022a9
 800227c:	080022e1 	.word	0x080022e1
 8002280:	080022e1 	.word	0x080022e1
 8002284:	080022e1 	.word	0x080022e1
 8002288:	080022e1 	.word	0x080022e1
 800228c:	08002319 	.word	0x08002319
 8002290:	08002319 	.word	0x08002319
 8002294:	08002319 	.word	0x08002319
 8002298:	080022a9 	.word	0x080022a9
 800229c:	080022e1 	.word	0x080022e1
 80022a0:	080022e1 	.word	0x080022e1
 80022a4:	080022e1 	.word	0x080022e1
    case IIS2DLPC_CONT_LOW_PWR_12bit:
    case IIS2DLPC_SINGLE_LOW_PWR_12bit:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
    case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80022a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	da00      	bge.n	80022b2 <IIS2DLPC_ACC_GetAxesRaw+0xce>
 80022b0:	330f      	adds	r3, #15
 80022b2:	111b      	asrs	r3, r3, #4
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 80022ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	da00      	bge.n	80022c4 <IIS2DLPC_ACC_GetAxesRaw+0xe0>
 80022c2:	330f      	adds	r3, #15
 80022c4:	111b      	asrs	r3, r3, #4
 80022c6:	b21a      	sxth	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80022cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	da00      	bge.n	80022d6 <IIS2DLPC_ACC_GetAxesRaw+0xf2>
 80022d4:	330f      	adds	r3, #15
 80022d6:	111b      	asrs	r3, r3, #4
 80022d8:	b21a      	sxth	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	809a      	strh	r2, [r3, #4]
      break;
 80022de:	e01f      	b.n	8002320 <IIS2DLPC_ACC_GetAxesRaw+0x13c>
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80022e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	da00      	bge.n	80022ea <IIS2DLPC_ACC_GetAxesRaw+0x106>
 80022e8:	3303      	adds	r3, #3
 80022ea:	109b      	asrs	r3, r3, #2
 80022ec:	b21a      	sxth	r2, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80022f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	da00      	bge.n	80022fc <IIS2DLPC_ACC_GetAxesRaw+0x118>
 80022fa:	3303      	adds	r3, #3
 80022fc:	109b      	asrs	r3, r3, #2
 80022fe:	b21a      	sxth	r2, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8002304:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	da00      	bge.n	800230e <IIS2DLPC_ACC_GetAxesRaw+0x12a>
 800230c:	3303      	adds	r3, #3
 800230e:	109b      	asrs	r3, r3, #2
 8002310:	b21a      	sxth	r2, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	809a      	strh	r2, [r3, #4]
      break;
 8002316:	e003      	b.n	8002320 <IIS2DLPC_ACC_GetAxesRaw+0x13c>

    default:
      ret = IIS2DLPC_ERROR;
 8002318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800231c:	617b      	str	r3, [r7, #20]
      break;
 800231e:	bf00      	nop
  }

  return ret;
 8002320:	697b      	ldr	r3, [r7, #20]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop

0800232c <IIS2DLPC_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_ACC_GetAxes(IIS2DLPC_Object_t *pObj, IIS2DLPC_Axes_t *Acceleration)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  IIS2DLPC_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (IIS2DLPC_ACC_GetAxesRaw(pObj, &data_raw) != IIS2DLPC_OK)
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	4619      	mov	r1, r3
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ff4e 	bl	80021e4 <IIS2DLPC_ACC_GetAxesRaw>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <IIS2DLPC_ACC_GetAxes+0x28>
  {
    return IIS2DLPC_ERROR;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002352:	e03c      	b.n	80023ce <IIS2DLPC_ACC_GetAxes+0xa2>
  }

  /* Get IIS2DLPC actual sensitivity. */
  if (IIS2DLPC_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DLPC_OK)
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	4619      	mov	r1, r3
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fbf6 	bl	8001b4c <IIS2DLPC_ACC_GetSensitivity>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <IIS2DLPC_ACC_GetAxes+0x40>
  {
    return IIS2DLPC_ERROR;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800236a:	e030      	b.n	80023ce <IIS2DLPC_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800236c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002370:	ee07 3a90 	vmov	s15, r3
 8002374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002378:	edd7 7a03 	vldr	s15, [r7, #12]
 800237c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002380:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002384:	ee17 2a90 	vmov	r2, s15
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800238c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002398:	edd7 7a03 	vldr	s15, [r7, #12]
 800239c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a4:	ee17 2a90 	vmov	r2, s15
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80023ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023b0:	ee07 3a90 	vmov	s15, r3
 80023b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80023bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c4:	ee17 2a90 	vmov	r2, s15
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	609a      	str	r2, [r3, #8]

  return IIS2DLPC_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <IIS2DLPC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2DLPC_Write_Reg(IIS2DLPC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	70fb      	strb	r3, [r7, #3]
 80023e2:	4613      	mov	r3, r2
 80023e4:	70bb      	strb	r3, [r7, #2]
  if (iis2dlpc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2DLPC_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f103 0020 	add.w	r0, r3, #32
 80023ec:	1cba      	adds	r2, r7, #2
 80023ee:	78f9      	ldrb	r1, [r7, #3]
 80023f0:	2301      	movs	r3, #1
 80023f2:	f000 fa07 	bl	8002804 <iis2dlpc_write_reg>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <IIS2DLPC_Write_Reg+0x2c>
  {
    return IIS2DLPC_ERROR;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002400:	e000      	b.n	8002404 <IIS2DLPC_Write_Reg+0x2e>
  }

  return IIS2DLPC_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(IIS2DLPC_Object_t *pObj, float Odr,
                                                           IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	ed87 0a02 	vstr	s0, [r7, #8]
 8002418:	460b      	mov	r3, r1
 800241a:	71fb      	strb	r3, [r7, #7]
 800241c:	4613      	mov	r3, r2
 800241e:	71bb      	strb	r3, [r7, #6]
  iis2dlpc_odr_t new_odr;
  iis2dlpc_mode_t new_power_mode;

  switch (Mode)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	3b01      	subs	r3, #1
 8002424:	2b03      	cmp	r3, #3
 8002426:	d80b      	bhi.n	8002440 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002428:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x24>)
 800242a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242e:	bf00      	nop
 8002430:	0800246d 	.word	0x0800246d
 8002434:	08002499 	.word	0x08002499
 8002438:	080024c5 	.word	0x080024c5
 800243c:	080024f1 	.word	0x080024f1
  {
    case IIS2DLPC_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8002440:	79bb      	ldrb	r3, [r7, #6]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d002      	beq.n	800244c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE;
 8002446:	2304      	movs	r3, #4
 8002448:	75fb      	strb	r3, [r7, #23]
          break;
 800244a:	e002      	b.n	8002452 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x46>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 800244c:	2314      	movs	r3, #20
 800244e:	75fb      	strb	r3, [r7, #23]
          break;
 8002450:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8002452:	edd7 7a02 	vldr	s15, [r7, #8]
 8002456:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800245a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	d400      	bmi.n	8002466 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8002464:	e05a      	b.n	800251c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8002466:	4b6f      	ldr	r3, [pc, #444]	; (8002624 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8002468:	60bb      	str	r3, [r7, #8]
      break;
 800246a:	e057      	b.n	800251c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE4:
      switch (Noise)
 800246c:	79bb      	ldrb	r3, [r7, #6]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d002      	beq.n	8002478 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_4;
 8002472:	2303      	movs	r3, #3
 8002474:	75fb      	strb	r3, [r7, #23]
          break;
 8002476:	e002      	b.n	800247e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x72>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 8002478:	2313      	movs	r3, #19
 800247a:	75fb      	strb	r3, [r7, #23]
          break;
 800247c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800247e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002482:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002628 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	dc00      	bgt.n	8002492 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002490:	e044      	b.n	800251c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002492:	4b66      	ldr	r3, [pc, #408]	; (800262c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002494:	60bb      	str	r3, [r7, #8]
      break;
 8002496:	e041      	b.n	800251c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE3:
      switch (Noise)
 8002498:	79bb      	ldrb	r3, [r7, #6]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d002      	beq.n	80024a4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_3;
 800249e:	2302      	movs	r3, #2
 80024a0:	75fb      	strb	r3, [r7, #23]
          break;
 80024a2:	e002      	b.n	80024aa <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 80024a4:	2312      	movs	r3, #18
 80024a6:	75fb      	strb	r3, [r7, #23]
          break;
 80024a8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80024aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80024ae:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002628 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80024b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	dc00      	bgt.n	80024be <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 80024bc:	e02e      	b.n	800251c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80024be:	4b5b      	ldr	r3, [pc, #364]	; (800262c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80024c0:	60bb      	str	r3, [r7, #8]
      break;
 80024c2:	e02b      	b.n	800251c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE2:
      switch (Noise)
 80024c4:	79bb      	ldrb	r3, [r7, #6]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d002      	beq.n	80024d0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_2;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
          break;
 80024ce:	e002      	b.n	80024d6 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xca>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 80024d0:	2311      	movs	r3, #17
 80024d2:	75fb      	strb	r3, [r7, #23]
          break;
 80024d4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80024d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80024da:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002628 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80024de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e6:	dc00      	bgt.n	80024ea <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 80024e8:	e018      	b.n	800251c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80024ea:	4b50      	ldr	r3, [pc, #320]	; (800262c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80024ec:	60bb      	str	r3, [r7, #8]
      break;
 80024ee:	e015      	b.n	800251c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE1:
      switch (Noise)
 80024f0:	79bb      	ldrb	r3, [r7, #6]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d002      	beq.n	80024fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_12bit;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]
          break;
 80024fa:	e002      	b.n	8002502 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 80024fc:	2310      	movs	r3, #16
 80024fe:	75fb      	strb	r3, [r7, #23]
          break;
 8002500:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8002502:	edd7 7a02 	vldr	s15, [r7, #8]
 8002506:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002628 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800250a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	dc00      	bgt.n	8002516 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002514:	e001      	b.n	800251a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002516:	4b45      	ldr	r3, [pc, #276]	; (800262c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002518:	60bb      	str	r3, [r7, #8]
      break;
 800251a:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? IIS2DLPC_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? IIS2DLPC_XL_ODR_12Hz5
 800251c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002520:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002630 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252c:	d801      	bhi.n	8002532 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x126>
 800252e:	2301      	movs	r3, #1
 8002530:	e04d      	b.n	80025ce <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002532:	edd7 7a02 	vldr	s15, [r7, #8]
 8002536:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800253a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	d801      	bhi.n	8002548 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002544:	2302      	movs	r3, #2
 8002546:	e042      	b.n	80025ce <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002548:	edd7 7a02 	vldr	s15, [r7, #8]
 800254c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	d801      	bhi.n	800255e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x152>
 800255a:	2303      	movs	r3, #3
 800255c:	e037      	b.n	80025ce <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800255e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002562:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002634 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x228>
 8002566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256e:	d801      	bhi.n	8002574 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002570:	2304      	movs	r3, #4
 8002572:	e02c      	b.n	80025ce <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002574:	edd7 7a02 	vldr	s15, [r7, #8]
 8002578:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002638 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x22c>
 800257c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002584:	d801      	bhi.n	800258a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8002586:	2305      	movs	r3, #5
 8002588:	e021      	b.n	80025ce <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800258a:	edd7 7a02 	vldr	s15, [r7, #8]
 800258e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002628 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	d801      	bhi.n	80025a0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x194>
 800259c:	2306      	movs	r3, #6
 800259e:	e016      	b.n	80025ce <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80025a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80025a4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800263c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x230>
 80025a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b0:	d801      	bhi.n	80025b6 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 80025b2:	2307      	movs	r3, #7
 80025b4:	e00b      	b.n	80025ce <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80025b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ba:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002640 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x234>
 80025be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c6:	d801      	bhi.n	80025cc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 80025c8:	2308      	movs	r3, #8
 80025ca:	e000      	b.n	80025ce <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80025cc:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? IIS2DLPC_XL_ODR_1Hz6_LP_ONLY
 80025ce:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? IIS2DLPC_XL_ODR_400Hz
            : (Odr <=  800.0f) ? IIS2DLPC_XL_ODR_800Hz
            :                    IIS2DLPC_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2DLPC_OK)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	3320      	adds	r3, #32
 80025d4:	7dba      	ldrb	r2, [r7, #22]
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fa33 	bl	8002a44 <iis2dlpc_data_rate_set>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return IIS2DLPC_ERROR;
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025e8:	e018      	b.n	800261c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), new_power_mode) != IIS2DLPC_OK)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3320      	adds	r3, #32
 80025ee:	7dfa      	ldrb	r2, [r7, #23]
 80025f0:	4611      	mov	r1, r2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f91e 	bl	8002834 <iis2dlpc_power_mode_set>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return IIS2DLPC_ERROR;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002602:	e00b      	b.n	800261c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	635a      	str	r2, [r3, #52]	; 0x34
  pObj->acc_operating_mode = Mode;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	79fa      	ldrb	r2, [r7, #7]
 800260e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	79ba      	ldrb	r2, [r7, #6]
 8002616:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return IIS2DLPC_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	41480000 	.word	0x41480000
 8002628:	43480000 	.word	0x43480000
 800262c:	43480000 	.word	0x43480000
 8002630:	3fcccccd 	.word	0x3fcccccd
 8002634:	42480000 	.word	0x42480000
 8002638:	42c80000 	.word	0x42c80000
 800263c:	43c80000 	.word	0x43c80000
 8002640:	44480000 	.word	0x44480000

08002644 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(IIS2DLPC_Object_t *pObj, float Odr,
                                                            IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002650:	460b      	mov	r3, r1
 8002652:	71fb      	strb	r3, [r7, #7]
 8002654:	4613      	mov	r3, r2
 8002656:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	79fa      	ldrb	r2, [r7, #7]
 800265c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  pObj->acc_low_noise = Noise;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	79ba      	ldrb	r2, [r7, #6]
 8002664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8002668:	edd7 7a02 	vldr	s15, [r7, #8]
 800266c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800272c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002678:	d801      	bhi.n	800267e <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x3a>
 800267a:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xec>)
 800267c:	e04d      	b.n	800271a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 800267e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002682:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	d801      	bhi.n	8002694 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002690:	4b28      	ldr	r3, [pc, #160]	; (8002734 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002692:	e042      	b.n	800271a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8002694:	edd7 7a02 	vldr	s15, [r7, #8]
 8002698:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800269c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a4:	d801      	bhi.n	80026aa <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x66>
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 80026a8:	e037      	b.n	800271a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 80026aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ae:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800273c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80026b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	d801      	bhi.n	80026c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x7c>
 80026bc:	4b20      	ldr	r3, [pc, #128]	; (8002740 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 80026be:	e02c      	b.n	800271a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 80026c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80026c4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002744 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x100>
 80026c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	d801      	bhi.n	80026d6 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x92>
 80026d2:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x104>)
 80026d4:	e021      	b.n	800271a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 80026d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026da:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800274c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x108>
 80026de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e6:	d801      	bhi.n	80026ec <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 80026ea:	e016      	b.n	800271a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 80026ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002754 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x110>
 80026f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fc:	d801      	bhi.n	8002702 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xbe>
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002700:	e00b      	b.n	800271a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8002702:	edd7 7a02 	vldr	s15, [r7, #8]
 8002706:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800275c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x118>
 800270a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002712:	d801      	bhi.n	8002718 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002716:	e000      	b.n	800271a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	6353      	str	r3, [r2, #52]	; 0x34

  return IIS2DLPC_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	3fcccccd 	.word	0x3fcccccd
 8002730:	3fcccccd 	.word	0x3fcccccd
 8002734:	41480000 	.word	0x41480000
 8002738:	41c80000 	.word	0x41c80000
 800273c:	42480000 	.word	0x42480000
 8002740:	42480000 	.word	0x42480000
 8002744:	42c80000 	.word	0x42c80000
 8002748:	42c80000 	.word	0x42c80000
 800274c:	43480000 	.word	0x43480000
 8002750:	43480000 	.word	0x43480000
 8002754:	43c80000 	.word	0x43c80000
 8002758:	43c80000 	.word	0x43c80000
 800275c:	44480000 	.word	0x44480000
 8002760:	44480000 	.word	0x44480000
 8002764:	44c80000 	.word	0x44c80000

08002768 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	461a      	mov	r2, r3
 8002774:	460b      	mov	r3, r1
 8002776:	72fb      	strb	r3, [r7, #11]
 8002778:	4613      	mov	r3, r2
 800277a:	813b      	strh	r3, [r7, #8]
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	695c      	ldr	r4, [r3, #20]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	7b1b      	ldrb	r3, [r3, #12]
 8002788:	b298      	uxth	r0, r3
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	b299      	uxth	r1, r3
 800278e:	893b      	ldrh	r3, [r7, #8]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	47a0      	blx	r4
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	371c      	adds	r7, #28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd90      	pop	{r4, r7, pc}

0800279e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800279e:	b590      	push	{r4, r7, lr}
 80027a0:	b087      	sub	sp, #28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	461a      	mov	r2, r3
 80027aa:	460b      	mov	r3, r1
 80027ac:	72fb      	strb	r3, [r7, #11]
 80027ae:	4613      	mov	r3, r2
 80027b0:	813b      	strh	r3, [r7, #8]
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	691c      	ldr	r4, [r3, #16]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	7b1b      	ldrb	r3, [r3, #12]
 80027be:	b298      	uxth	r0, r3
 80027c0:	7afb      	ldrb	r3, [r7, #11]
 80027c2:	b299      	uxth	r1, r3
 80027c4:	893b      	ldrh	r3, [r7, #8]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	47a0      	blx	r4
 80027ca:	4603      	mov	r3, r0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd90      	pop	{r4, r7, pc}

080027d4 <iis2dlpc_read_reg>:
  *
  */
int32_t iis2dlpc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	461a      	mov	r2, r3
 80027e0:	460b      	mov	r3, r1
 80027e2:	72fb      	strb	r3, [r7, #11]
 80027e4:	4613      	mov	r3, r2
 80027e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685c      	ldr	r4, [r3, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	68d8      	ldr	r0, [r3, #12]
 80027f0:	893b      	ldrh	r3, [r7, #8]
 80027f2:	7af9      	ldrb	r1, [r7, #11]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	47a0      	blx	r4
 80027f8:	6178      	str	r0, [r7, #20]

  return ret;
 80027fa:	697b      	ldr	r3, [r7, #20]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	371c      	adds	r7, #28
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}

08002804 <iis2dlpc_write_reg>:
  *
  */
int32_t iis2dlpc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	461a      	mov	r2, r3
 8002810:	460b      	mov	r3, r1
 8002812:	72fb      	strb	r3, [r7, #11]
 8002814:	4613      	mov	r3, r2
 8002816:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681c      	ldr	r4, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	68d8      	ldr	r0, [r3, #12]
 8002820:	893b      	ldrh	r3, [r7, #8]
 8002822:	7af9      	ldrb	r1, [r7, #11]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	47a0      	blx	r4
 8002828:	6178      	str	r0, [r7, #20]

  return ret;
 800282a:	697b      	ldr	r3, [r7, #20]
}
 800282c:	4618      	mov	r0, r3
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	bd90      	pop	{r4, r7, pc}

08002834 <iis2dlpc_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_set(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t val)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002840:	f107 0210 	add.w	r2, r7, #16
 8002844:	2301      	movs	r3, #1
 8002846:	2120      	movs	r1, #32
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ffc3 	bl	80027d4 <iis2dlpc_read_reg>
 800284e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d118      	bne.n	8002888 <iis2dlpc_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	b2da      	uxtb	r2, r3
 8002860:	7c3b      	ldrb	r3, [r7, #16]
 8002862:	f362 0383 	bfi	r3, r2, #2, #2
 8002866:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	b2da      	uxtb	r2, r3
 8002870:	7c3b      	ldrb	r3, [r7, #16]
 8002872:	f362 0301 	bfi	r3, r2, #0, #2
 8002876:	743b      	strb	r3, [r7, #16]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002878:	f107 0210 	add.w	r2, r7, #16
 800287c:	2301      	movs	r3, #1
 800287e:	2120      	movs	r1, #32
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ffbf 	bl	8002804 <iis2dlpc_write_reg>
 8002886:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d107      	bne.n	800289e <iis2dlpc_power_mode_set+0x6a>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 800288e:	f107 020c 	add.w	r2, r7, #12
 8002892:	2301      	movs	r3, #1
 8002894:	2125      	movs	r1, #37	; 0x25
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff ff9c 	bl	80027d4 <iis2dlpc_read_reg>
 800289c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d110      	bne.n	80028c6 <iis2dlpc_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	7b3b      	ldrb	r3, [r7, #12]
 80028b0:	f362 0382 	bfi	r3, r2, #2, #1
 80028b4:	733b      	strb	r3, [r7, #12]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 80028b6:	f107 020c 	add.w	r2, r7, #12
 80028ba:	2301      	movs	r3, #1
 80028bc:	2125      	movs	r1, #37	; 0x25
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ffa0 	bl	8002804 <iis2dlpc_write_reg>
 80028c4:	6178      	str	r0, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 80028c6:	697b      	ldr	r3, [r7, #20]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <iis2dlpc_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_get(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t *val)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 80028da:	f107 0210 	add.w	r2, r7, #16
 80028de:	2301      	movs	r3, #1
 80028e0:	2120      	movs	r1, #32
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ff76 	bl	80027d4 <iis2dlpc_read_reg>
 80028e8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f040 80a3 	bne.w	8002a38 <iis2dlpc_power_mode_get+0x168>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 80028f2:	f107 020c 	add.w	r2, r7, #12
 80028f6:	2301      	movs	r3, #1
 80028f8:	2125      	movs	r1, #37	; 0x25
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ff6a 	bl	80027d4 <iis2dlpc_read_reg>
 8002900:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002902:	7b3b      	ldrb	r3, [r7, #12]
 8002904:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	011a      	lsls	r2, r3, #4
 800290c:	7c3b      	ldrb	r3, [r7, #16]
 800290e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002912:	b2db      	uxtb	r3, r3
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8002918:	7c3a      	ldrb	r2, [r7, #16]
 800291a:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800291e:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002920:	4413      	add	r3, r2
 8002922:	2b1b      	cmp	r3, #27
 8002924:	f200 8084 	bhi.w	8002a30 <iis2dlpc_power_mode_get+0x160>
 8002928:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <iis2dlpc_power_mode_get+0x60>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	080029c1 	.word	0x080029c1
 8002934:	080029b9 	.word	0x080029b9
 8002938:	080029b1 	.word	0x080029b1
 800293c:	080029a9 	.word	0x080029a9
 8002940:	080029a1 	.word	0x080029a1
 8002944:	08002a31 	.word	0x08002a31
 8002948:	08002a31 	.word	0x08002a31
 800294c:	08002a31 	.word	0x08002a31
 8002950:	080029e1 	.word	0x080029e1
 8002954:	080029d9 	.word	0x080029d9
 8002958:	080029d1 	.word	0x080029d1
 800295c:	080029c9 	.word	0x080029c9
 8002960:	08002a31 	.word	0x08002a31
 8002964:	08002a31 	.word	0x08002a31
 8002968:	08002a31 	.word	0x08002a31
 800296c:	08002a31 	.word	0x08002a31
 8002970:	08002a09 	.word	0x08002a09
 8002974:	08002a01 	.word	0x08002a01
 8002978:	080029f9 	.word	0x080029f9
 800297c:	080029f1 	.word	0x080029f1
 8002980:	080029e9 	.word	0x080029e9
 8002984:	08002a31 	.word	0x08002a31
 8002988:	08002a31 	.word	0x08002a31
 800298c:	08002a31 	.word	0x08002a31
 8002990:	08002a29 	.word	0x08002a29
 8002994:	08002a21 	.word	0x08002a21
 8002998:	08002a19 	.word	0x08002a19
 800299c:	08002a11 	.word	0x08002a11
    {
      case IIS2DLPC_HIGH_PERFORMANCE:
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2204      	movs	r2, #4
 80029a4:	701a      	strb	r2, [r3, #0]
        break;
 80029a6:	e048      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_4:
        *val = IIS2DLPC_CONT_LOW_PWR_4;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2203      	movs	r2, #3
 80029ac:	701a      	strb	r2, [r3, #0]
        break;
 80029ae:	e044      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_3:
        *val = IIS2DLPC_CONT_LOW_PWR_3;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2202      	movs	r2, #2
 80029b4:	701a      	strb	r2, [r3, #0]
        break;
 80029b6:	e040      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_2:
        *val = IIS2DLPC_CONT_LOW_PWR_2;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
        break;
 80029be:	e03c      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_12bit:
        *val = IIS2DLPC_CONT_LOW_PWR_12bit;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
        break;
 80029c6:	e038      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_4:
        *val = IIS2DLPC_SINGLE_LOW_PWR_4;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	220b      	movs	r2, #11
 80029cc:	701a      	strb	r2, [r3, #0]
        break;
 80029ce:	e034      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_3:
        *val = IIS2DLPC_SINGLE_LOW_PWR_3;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	220a      	movs	r2, #10
 80029d4:	701a      	strb	r2, [r3, #0]
        break;
 80029d6:	e030      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_2:
        *val = IIS2DLPC_SINGLE_LOW_PWR_2;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2209      	movs	r2, #9
 80029dc:	701a      	strb	r2, [r3, #0]
        break;
 80029de:	e02c      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_12bit:
        *val = IIS2DLPC_SINGLE_LOW_PWR_12bit;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2208      	movs	r2, #8
 80029e4:	701a      	strb	r2, [r3, #0]
        break;
 80029e6:	e028      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
        *val = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2214      	movs	r2, #20
 80029ec:	701a      	strb	r2, [r3, #0]
        break;
 80029ee:	e024      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2213      	movs	r2, #19
 80029f4:	701a      	strb	r2, [r3, #0]
        break;
 80029f6:	e020      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2212      	movs	r2, #18
 80029fc:	701a      	strb	r2, [r3, #0]
        break;
 80029fe:	e01c      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2211      	movs	r2, #17
 8002a04:	701a      	strb	r2, [r3, #0]
        break;
 8002a06:	e018      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	701a      	strb	r2, [r3, #0]
        break;
 8002a0e:	e014      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	221b      	movs	r2, #27
 8002a14:	701a      	strb	r2, [r3, #0]
        break;
 8002a16:	e010      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	221a      	movs	r2, #26
 8002a1c:	701a      	strb	r2, [r3, #0]
        break;
 8002a1e:	e00c      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	2219      	movs	r2, #25
 8002a24:	701a      	strb	r2, [r3, #0]
        break;
 8002a26:	e008      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2218      	movs	r2, #24
 8002a2c:	701a      	strb	r2, [r3, #0]
        break;
 8002a2e:	e004      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>

      default:
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2204      	movs	r2, #4
 8002a34:	701a      	strb	r2, [r3, #0]
        break;
 8002a36:	e000      	b.n	8002a3a <iis2dlpc_power_mode_get+0x16a>
    }
  }
 8002a38:	bf00      	nop

  return ret;
 8002a3a:	697b      	ldr	r3, [r7, #20]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <iis2dlpc_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_set(stmdev_ctx_t *ctx, iis2dlpc_odr_t val)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002a50:	f107 0210 	add.w	r2, r7, #16
 8002a54:	2301      	movs	r3, #1
 8002a56:	2120      	movs	r1, #32
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff febb 	bl	80027d4 <iis2dlpc_read_reg>
 8002a5e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10f      	bne.n	8002a86 <iis2dlpc_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	7c3b      	ldrb	r3, [r7, #16]
 8002a70:	f362 1307 	bfi	r3, r2, #4, #4
 8002a74:	743b      	strb	r3, [r7, #16]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002a76:	f107 0210 	add.w	r2, r7, #16
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	2120      	movs	r1, #32
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff fec0 	bl	8002804 <iis2dlpc_write_reg>
 8002a84:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <iis2dlpc_data_rate_set+0x58>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8002a8c:	f107 020c 	add.w	r2, r7, #12
 8002a90:	2301      	movs	r3, #1
 8002a92:	2122      	movs	r1, #34	; 0x22
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff fe9d 	bl	80027d4 <iis2dlpc_read_reg>
 8002a9a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d110      	bne.n	8002ac4 <iis2dlpc_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	7b3b      	ldrb	r3, [r7, #12]
 8002aae:	f362 0301 	bfi	r3, r2, #0, #2
 8002ab2:	733b      	strb	r3, [r7, #12]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8002ab4:	f107 020c 	add.w	r2, r7, #12
 8002ab8:	2301      	movs	r3, #1
 8002aba:	2122      	movs	r1, #34	; 0x22
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fea1 	bl	8002804 <iis2dlpc_write_reg>
 8002ac2:	6178      	str	r0, [r7, #20]
  else
  {
    ret = ret;
  }

  return ret;
 8002ac4:	697b      	ldr	r3, [r7, #20]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <iis2dlpc_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_get(stmdev_ctx_t *ctx, iis2dlpc_odr_t *val)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002ada:	f107 0210 	add.w	r2, r7, #16
 8002ade:	2301      	movs	r3, #1
 8002ae0:	2120      	movs	r1, #32
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff fe76 	bl	80027d4 <iis2dlpc_read_reg>
 8002ae8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f040 8091 	bne.w	8002c14 <iis2dlpc_data_rate_get+0x144>
  {
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8002af2:	f107 020c 	add.w	r2, r7, #12
 8002af6:	2301      	movs	r3, #1
 8002af8:	2122      	movs	r1, #34	; 0x22
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff fe6a 	bl	80027d4 <iis2dlpc_read_reg>
 8002b00:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8002b02:	7b3b      	ldrb	r3, [r7, #12]
 8002b04:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	7c3a      	ldrb	r2, [r7, #16]
 8002b0e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	4413      	add	r3, r2
 8002b16:	2b22      	cmp	r3, #34	; 0x22
 8002b18:	d878      	bhi.n	8002c0c <iis2dlpc_data_rate_get+0x13c>
 8002b1a:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <iis2dlpc_data_rate_get+0x50>)
 8002b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b20:	08002bad 	.word	0x08002bad
 8002b24:	08002bb5 	.word	0x08002bb5
 8002b28:	08002bbd 	.word	0x08002bbd
 8002b2c:	08002bc5 	.word	0x08002bc5
 8002b30:	08002bcd 	.word	0x08002bcd
 8002b34:	08002bd5 	.word	0x08002bd5
 8002b38:	08002bdd 	.word	0x08002bdd
 8002b3c:	08002be5 	.word	0x08002be5
 8002b40:	08002bed 	.word	0x08002bed
 8002b44:	08002bf5 	.word	0x08002bf5
 8002b48:	08002c0d 	.word	0x08002c0d
 8002b4c:	08002c0d 	.word	0x08002c0d
 8002b50:	08002c0d 	.word	0x08002c0d
 8002b54:	08002c0d 	.word	0x08002c0d
 8002b58:	08002c0d 	.word	0x08002c0d
 8002b5c:	08002c0d 	.word	0x08002c0d
 8002b60:	08002c0d 	.word	0x08002c0d
 8002b64:	08002c0d 	.word	0x08002c0d
 8002b68:	08002bfd 	.word	0x08002bfd
 8002b6c:	08002c0d 	.word	0x08002c0d
 8002b70:	08002c0d 	.word	0x08002c0d
 8002b74:	08002c0d 	.word	0x08002c0d
 8002b78:	08002c0d 	.word	0x08002c0d
 8002b7c:	08002c0d 	.word	0x08002c0d
 8002b80:	08002c0d 	.word	0x08002c0d
 8002b84:	08002c0d 	.word	0x08002c0d
 8002b88:	08002c0d 	.word	0x08002c0d
 8002b8c:	08002c0d 	.word	0x08002c0d
 8002b90:	08002c0d 	.word	0x08002c0d
 8002b94:	08002c0d 	.word	0x08002c0d
 8002b98:	08002c0d 	.word	0x08002c0d
 8002b9c:	08002c0d 	.word	0x08002c0d
 8002ba0:	08002c0d 	.word	0x08002c0d
 8002ba4:	08002c0d 	.word	0x08002c0d
 8002ba8:	08002c05 	.word	0x08002c05
    {
      case IIS2DLPC_XL_ODR_OFF:
        *val = IIS2DLPC_XL_ODR_OFF;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
        break;
 8002bb2:	e030      	b.n	8002c16 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_1Hz6_LP_ONLY:
        *val = IIS2DLPC_XL_ODR_1Hz6_LP_ONLY;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]
        break;
 8002bba:	e02c      	b.n	8002c16 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_12Hz5:
        *val = IIS2DLPC_XL_ODR_12Hz5;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	701a      	strb	r2, [r3, #0]
        break;
 8002bc2:	e028      	b.n	8002c16 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_25Hz:
        *val = IIS2DLPC_XL_ODR_25Hz;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	701a      	strb	r2, [r3, #0]
        break;
 8002bca:	e024      	b.n	8002c16 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_50Hz:
        *val = IIS2DLPC_XL_ODR_50Hz;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2204      	movs	r2, #4
 8002bd0:	701a      	strb	r2, [r3, #0]
        break;
 8002bd2:	e020      	b.n	8002c16 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_100Hz:
        *val = IIS2DLPC_XL_ODR_100Hz;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2205      	movs	r2, #5
 8002bd8:	701a      	strb	r2, [r3, #0]
        break;
 8002bda:	e01c      	b.n	8002c16 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_200Hz:
        *val = IIS2DLPC_XL_ODR_200Hz;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2206      	movs	r2, #6
 8002be0:	701a      	strb	r2, [r3, #0]
        break;
 8002be2:	e018      	b.n	8002c16 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_400Hz:
        *val = IIS2DLPC_XL_ODR_400Hz;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2207      	movs	r2, #7
 8002be8:	701a      	strb	r2, [r3, #0]
        break;
 8002bea:	e014      	b.n	8002c16 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_800Hz:
        *val = IIS2DLPC_XL_ODR_800Hz;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2208      	movs	r2, #8
 8002bf0:	701a      	strb	r2, [r3, #0]
        break;
 8002bf2:	e010      	b.n	8002c16 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_1k6Hz:
        *val = IIS2DLPC_XL_ODR_1k6Hz;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2209      	movs	r2, #9
 8002bf8:	701a      	strb	r2, [r3, #0]
        break;
 8002bfa:	e00c      	b.n	8002c16 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_SET_SW_TRIG:
        *val = IIS2DLPC_XL_SET_SW_TRIG;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2212      	movs	r2, #18
 8002c00:	701a      	strb	r2, [r3, #0]
        break;
 8002c02:	e008      	b.n	8002c16 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_SET_PIN_TRIG:
        *val = IIS2DLPC_XL_SET_PIN_TRIG;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2222      	movs	r2, #34	; 0x22
 8002c08:	701a      	strb	r2, [r3, #0]
        break;
 8002c0a:	e004      	b.n	8002c16 <iis2dlpc_data_rate_get+0x146>

      default:
        *val = IIS2DLPC_XL_ODR_OFF;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
        break;
 8002c12:	e000      	b.n	8002c16 <iis2dlpc_data_rate_get+0x146>
    }
  }
 8002c14:	bf00      	nop

  return ret;
 8002c16:	697b      	ldr	r3, [r7, #20]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <iis2dlpc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002c2c:	f107 0208 	add.w	r2, r7, #8
 8002c30:	2301      	movs	r3, #1
 8002c32:	2121      	movs	r1, #33	; 0x21
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff fdcd 	bl	80027d4 <iis2dlpc_read_reg>
 8002c3a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10f      	bne.n	8002c62 <iis2dlpc_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	7a3b      	ldrb	r3, [r7, #8]
 8002c4c:	f362 03c3 	bfi	r3, r2, #3, #1
 8002c50:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002c52:	f107 0208 	add.w	r2, r7, #8
 8002c56:	2301      	movs	r3, #1
 8002c58:	2121      	movs	r1, #33	; 0x21
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff fdd2 	bl	8002804 <iis2dlpc_write_reg>
 8002c60:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002c62:	68fb      	ldr	r3, [r7, #12]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <iis2dlpc_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_set(stmdev_ctx_t *ctx, iis2dlpc_fs_t val)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8002c78:	f107 0208 	add.w	r2, r7, #8
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	2125      	movs	r1, #37	; 0x25
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff fda7 	bl	80027d4 <iis2dlpc_read_reg>
 8002c86:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10f      	bne.n	8002cae <iis2dlpc_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	7a3b      	ldrb	r3, [r7, #8]
 8002c98:	f362 1305 	bfi	r3, r2, #4, #2
 8002c9c:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8002c9e:	f107 0208 	add.w	r2, r7, #8
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	2125      	movs	r1, #37	; 0x25
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff fdac 	bl	8002804 <iis2dlpc_write_reg>
 8002cac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <iis2dlpc_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_get(stmdev_ctx_t *ctx, iis2dlpc_fs_t *val)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8002cc2:	f107 0208 	add.w	r2, r7, #8
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	2125      	movs	r1, #37	; 0x25
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff fd82 	bl	80027d4 <iis2dlpc_read_reg>
 8002cd0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8002cd2:	7a3b      	ldrb	r3, [r7, #8]
 8002cd4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d81a      	bhi.n	8002d14 <iis2dlpc_full_scale_get+0x5c>
 8002cde:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <iis2dlpc_full_scale_get+0x2c>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002cf5 	.word	0x08002cf5
 8002ce8:	08002cfd 	.word	0x08002cfd
 8002cec:	08002d05 	.word	0x08002d05
 8002cf0:	08002d0d 	.word	0x08002d0d
  {
    case IIS2DLPC_2g:
      *val = IIS2DLPC_2g;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
      break;
 8002cfa:	e00f      	b.n	8002d1c <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_4g:
      *val = IIS2DLPC_4g;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
      break;
 8002d02:	e00b      	b.n	8002d1c <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_8g:
      *val = IIS2DLPC_8g;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2202      	movs	r2, #2
 8002d08:	701a      	strb	r2, [r3, #0]
      break;
 8002d0a:	e007      	b.n	8002d1c <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_16g:
      *val = IIS2DLPC_16g;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2203      	movs	r2, #3
 8002d10:	701a      	strb	r2, [r3, #0]
      break;
 8002d12:	e003      	b.n	8002d1c <iis2dlpc_full_scale_get+0x64>

    default:
      *val = IIS2DLPC_2g;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
      break;
 8002d1a:	bf00      	nop
  }

  return ret;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop

08002d28 <iis2dlpc_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_OUT_X_L, buff, 6);
 8002d32:	f107 020c 	add.w	r2, r7, #12
 8002d36:	2306      	movs	r3, #6
 8002d38:	2128      	movs	r1, #40	; 0x28
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff fd4a 	bl	80027d4 <iis2dlpc_read_reg>
 8002d40:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002d42:	7b7b      	ldrb	r3, [r7, #13]
 8002d44:	b21a      	sxth	r2, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	7b3b      	ldrb	r3, [r7, #12]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	b21a      	sxth	r2, r3
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	3302      	adds	r3, #2
 8002d6a:	b212      	sxth	r2, r2
 8002d6c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	3302      	adds	r3, #2
 8002d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	7bbb      	ldrb	r3, [r7, #14]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	3302      	adds	r3, #2
 8002d88:	b212      	sxth	r2, r2
 8002d8a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002d8c:	7c7a      	ldrb	r2, [r7, #17]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	3304      	adds	r3, #4
 8002d92:	b212      	sxth	r2, r2
 8002d94:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	7c3b      	ldrb	r3, [r7, #16]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	3304      	adds	r3, #4
 8002db0:	b212      	sxth	r2, r2
 8002db2:	801a      	strh	r2, [r3, #0]

  return ret;
 8002db4:	697b      	ldr	r3, [r7, #20]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 8002dc8:	2301      	movs	r3, #1
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	210f      	movs	r1, #15
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff fd00 	bl	80027d4 <iis2dlpc_read_reg>
 8002dd4:	60f8      	str	r0, [r7, #12]

  return ret;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <iis2dlpc_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002dec:	f107 0208 	add.w	r2, r7, #8
 8002df0:	2301      	movs	r3, #1
 8002df2:	2121      	movs	r1, #33	; 0x21
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff fced 	bl	80027d4 <iis2dlpc_read_reg>
 8002dfa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10f      	bne.n	8002e22 <iis2dlpc_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	7a3b      	ldrb	r3, [r7, #8]
 8002e0c:	f362 0382 	bfi	r3, r2, #2, #1
 8002e10:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002e12:	f107 0208 	add.w	r2, r7, #8
 8002e16:	2301      	movs	r3, #1
 8002e18:	2121      	movs	r1, #33	; 0x21
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff fcf2 	bl	8002804 <iis2dlpc_write_reg>
 8002e20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e22:	68fb      	ldr	r3, [r7, #12]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <iis2dlpc_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_fifo_mode_set(stmdev_ctx_t *ctx,
                               iis2dlpc_fmode_t val)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_fifo_ctrl_t reg;
  int32_t ret;

  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002e38:	f107 0208 	add.w	r2, r7, #8
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	212e      	movs	r1, #46	; 0x2e
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff fcc7 	bl	80027d4 <iis2dlpc_read_reg>
 8002e46:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10f      	bne.n	8002e6e <iis2dlpc_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	7a3b      	ldrb	r3, [r7, #8]
 8002e58:	f362 1347 	bfi	r3, r2, #5, #3
 8002e5c:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002e5e:	f107 0208 	add.w	r2, r7, #8
 8002e62:	2301      	movs	r3, #1
 8002e64:	212e      	movs	r1, #46	; 0x2e
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff fccc 	bl	8002804 <iis2dlpc_write_reg>
 8002e6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <IIS2MDC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d103      	bne.n	8002e94 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	e04f      	b.n	8002f34 <IIS2MDC_RegisterBusIO+0xbc>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	7b1a      	ldrb	r2, [r3, #12]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <IIS2MDC_RegisterBusIO+0xc8>)
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	; (8002f44 <IIS2MDC_RegisterBusIO+0xcc>)
 8002ed6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d103      	bne.n	8002ef6 <IIS2MDC_RegisterBusIO+0x7e>
    {
      ret = IIS2MDC_ERROR;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	e01e      	b.n	8002f34 <IIS2MDC_RegisterBusIO+0xbc>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4798      	blx	r3
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <IIS2MDC_RegisterBusIO+0x92>
    {
      ret = IIS2MDC_ERROR;
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	e014      	b.n	8002f34 <IIS2MDC_RegisterBusIO+0xbc>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d010      	beq.n	8002f34 <IIS2MDC_RegisterBusIO+0xbc>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10b      	bne.n	8002f34 <IIS2MDC_RegisterBusIO+0xbc>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3320      	adds	r3, #32
 8002f20:	2101      	movs	r1, #1
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fbc8 	bl	80036b8 <iis2mdc_i2c_interface_set>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <IIS2MDC_RegisterBusIO+0xbc>
          {
            ret = IIS2MDC_ERROR;
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f32:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002f34:	68fb      	ldr	r3, [r7, #12]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	0800333b 	.word	0x0800333b
 8002f44:	0800339d 	.word	0x0800339d

08002f48 <IIS2MDC_Init>:
  * @brief  Initialize the IIS2MDC sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3320      	adds	r3, #32
 8002f54:	2101      	movs	r1, #1
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fb06 	bl	8003568 <iis2mdc_block_data_update_set>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f66:	e028      	b.n	8002fba <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3320      	adds	r3, #32
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fa75 	bl	800345e <iis2mdc_operating_mode_set>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f7e:	e01c      	b.n	8002fba <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3320      	adds	r3, #32
 8002f84:	2103      	movs	r1, #3
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fa8f 	bl	80034aa <iis2mdc_data_rate_set>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 8002f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f96:	e010      	b.n	8002fba <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3320      	adds	r3, #32
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fb64 	bl	800366c <iis2mdc_self_test_set>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fae:	e004      	b.n	8002fba <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS2MDC_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <IIS2MDC_DeInit>:
  * @brief  Deinitialize the IIS2MDC magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f874 	bl	80030b8 <IIS2MDC_MAG_Disable>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 8002fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fda:	e004      	b.n	8002fe6 <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return IIS2MDC_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <IIS2MDC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3320      	adds	r3, #32
 8002ffc:	6839      	ldr	r1, [r7, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fb23 	bl	800364a <iis2mdc_device_id_get>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 800300a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800300e:	e000      	b.n	8003012 <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <IIS2MDC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
  * @retval Component status
  */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2200      	movs	r2, #0
 8003030:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2201      	movs	r2, #1
 8003036:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2200      	movs	r2, #0
 800303c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2200      	movs	r2, #0
 8003042:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2232      	movs	r2, #50	; 0x32
 800304e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4a04      	ldr	r2, [pc, #16]	; (8003074 <IIS2MDC_GetCapabilities+0x58>)
 8003064:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	42c80000 	.word	0x42c80000

08003078 <IIS2MDC_MAG_Enable>:
  * @brief Enable the IIS2MDC magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	e010      	b.n	80030b0 <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3320      	adds	r3, #32
 8003092:	2100      	movs	r1, #0
 8003094:	4618      	mov	r0, r3
 8003096:	f000 f9e2 	bl	800345e <iis2mdc_operating_mode_set>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 80030a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030a4:	e004      	b.n	80030b0 <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2MDC_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <IIS2MDC_MAG_Disable>:
  * @brief Disable the IIS2MDC magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e010      	b.n	80030f0 <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3320      	adds	r3, #32
 80030d2:	2102      	movs	r1, #2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f9c2 	bl	800345e <iis2mdc_operating_mode_set>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030e4:	e004      	b.n	80030f0 <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2MDC_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <IIS2MDC_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003108:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <IIS2MDC_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3320      	adds	r3, #32
 800312a:	f107 020b 	add.w	r2, r7, #11
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f9e1 	bl	80034f8 <iis2mdc_data_rate_get>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003140:	e023      	b.n	800318a <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003142:	7afb      	ldrb	r3, [r7, #11]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d81b      	bhi.n	8003180 <IIS2MDC_MAG_GetOutputDataRate+0x68>
 8003148:	a201      	add	r2, pc, #4	; (adr r2, 8003150 <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 800314a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314e:	bf00      	nop
 8003150:	08003161 	.word	0x08003161
 8003154:	08003169 	.word	0x08003169
 8003158:	08003171 	.word	0x08003171
 800315c:	08003179 	.word	0x08003179
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 8003164:	601a      	str	r2, [r3, #0]
      break;
 8003166:	e00f      	b.n	8003188 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 800316c:	601a      	str	r2, [r3, #0]
      break;
 800316e:	e00b      	b.n	8003188 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4a0a      	ldr	r2, [pc, #40]	; (800319c <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 8003174:	601a      	str	r2, [r3, #0]
      break;
 8003176:	e007      	b.n	8003188 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 800317c:	601a      	str	r2, [r3, #0]
      break;
 800317e:	e003      	b.n	8003188 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 8003180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003184:	60fb      	str	r3, [r7, #12]
      break;
 8003186:	bf00      	nop
  }

  return ret;
 8003188:	68fb      	ldr	r3, [r7, #12]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	41200000 	.word	0x41200000
 8003198:	41a00000 	.word	0x41a00000
 800319c:	42480000 	.word	0x42480000
 80031a0:	42c80000 	.word	0x42c80000

080031a4 <IIS2MDC_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 80031b0:	edd7 7a00 	vldr	s15, [r7]
 80031b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c0:	d801      	bhi.n	80031c6 <IIS2MDC_MAG_SetOutputDataRate+0x22>
 80031c2:	2300      	movs	r3, #0
 80031c4:	e016      	b.n	80031f4 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 80031c6:	edd7 7a00 	vldr	s15, [r7]
 80031ca:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80031ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	d801      	bhi.n	80031dc <IIS2MDC_MAG_SetOutputDataRate+0x38>
 80031d8:	2301      	movs	r3, #1
 80031da:	e00b      	b.n	80031f4 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 80031dc:	edd7 7a00 	vldr	s15, [r7]
 80031e0:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800321c <IIS2MDC_MAG_SetOutputDataRate+0x78>
 80031e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	d801      	bhi.n	80031f2 <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e000      	b.n	80031f4 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 80031f2:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 80031f4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3320      	adds	r3, #32
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 f953 	bl	80034aa <iis2mdc_data_rate_set>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 800320a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800320e:	e000      	b.n	8003212 <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	42480000 	.word	0x42480000

08003220 <IIS2MDC_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2232      	movs	r2, #50	; 0x32
 800322e:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <IIS2MDC_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <IIS2MDC_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3320      	adds	r3, #32
 8003264:	f107 0208 	add.w	r2, r7, #8
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f9a2 	bl	80035b4 <iis2mdc_magnetic_raw_get>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800327a:	e00c      	b.n	8003296 <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800327c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003284:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800328c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <IIS2MDC_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3320      	adds	r3, #32
 80032ac:	f107 0210 	add.w	r2, r7, #16
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f97e 	bl	80035b4 <iis2mdc_magnetic_raw_get>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 80032be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032c2:	e036      	b.n	8003332 <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 80032c4:	f107 030c 	add.w	r3, r7, #12
 80032c8:	4619      	mov	r1, r3
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ff14 	bl	80030f8 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80032d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80032d4:	ee07 3a90 	vmov	s15, r3
 80032d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80032e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032e8:	ee17 2a90 	vmov	r2, s15
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80032f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80032f4:	ee07 3a90 	vmov	s15, r3
 80032f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003308:	ee17 2a90 	vmov	r2, s15
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003310:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003314:	ee07 3a90 	vmov	s15, r3
 8003318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800331c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003328:	ee17 2a90 	vmov	r2, s15
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800333a:	b590      	push	{r4, r7, lr}
 800333c:	b087      	sub	sp, #28
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	461a      	mov	r2, r3
 8003346:	460b      	mov	r3, r1
 8003348:	72fb      	strb	r3, [r7, #11]
 800334a:	4613      	mov	r3, r2
 800334c:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10e      	bne.n	8003378 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	695c      	ldr	r4, [r3, #20]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	7b1b      	ldrb	r3, [r3, #12]
 8003362:	b298      	uxth	r0, r3
 8003364:	7afb      	ldrb	r3, [r7, #11]
 8003366:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800336a:	b2db      	uxtb	r3, r3
 800336c:	b299      	uxth	r1, r3
 800336e:	893b      	ldrh	r3, [r7, #8]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	47a0      	blx	r4
 8003374:	4603      	mov	r3, r0
 8003376:	e00d      	b.n	8003394 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	695c      	ldr	r4, [r3, #20]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	7b1b      	ldrb	r3, [r3, #12]
 8003380:	b298      	uxth	r0, r3
 8003382:	7afb      	ldrb	r3, [r7, #11]
 8003384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003388:	b2db      	uxtb	r3, r3
 800338a:	b299      	uxth	r1, r3
 800338c:	893b      	ldrh	r3, [r7, #8]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	47a0      	blx	r4
 8003392:	4603      	mov	r3, r0
  }
}
 8003394:	4618      	mov	r0, r3
 8003396:	371c      	adds	r7, #28
 8003398:	46bd      	mov	sp, r7
 800339a:	bd90      	pop	{r4, r7, pc}

0800339c <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	461a      	mov	r2, r3
 80033a8:	460b      	mov	r3, r1
 80033aa:	72fb      	strb	r3, [r7, #11]
 80033ac:	4613      	mov	r3, r2
 80033ae:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10e      	bne.n	80033da <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	691c      	ldr	r4, [r3, #16]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	7b1b      	ldrb	r3, [r3, #12]
 80033c4:	b298      	uxth	r0, r3
 80033c6:	7afb      	ldrb	r3, [r7, #11]
 80033c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	b299      	uxth	r1, r3
 80033d0:	893b      	ldrh	r3, [r7, #8]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	47a0      	blx	r4
 80033d6:	4603      	mov	r3, r0
 80033d8:	e00d      	b.n	80033f6 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	691c      	ldr	r4, [r3, #16]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	7b1b      	ldrb	r3, [r3, #12]
 80033e2:	b298      	uxth	r0, r3
 80033e4:	7afb      	ldrb	r3, [r7, #11]
 80033e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	b299      	uxth	r1, r3
 80033ee:	893b      	ldrh	r3, [r7, #8]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	47a0      	blx	r4
 80033f4:	4603      	mov	r3, r0
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd90      	pop	{r4, r7, pc}

080033fe <iis2mdc_read_reg>:
  *
  */
int32_t __weak iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80033fe:	b590      	push	{r4, r7, lr}
 8003400:	b087      	sub	sp, #28
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	461a      	mov	r2, r3
 800340a:	460b      	mov	r3, r1
 800340c:	72fb      	strb	r3, [r7, #11]
 800340e:	4613      	mov	r3, r2
 8003410:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685c      	ldr	r4, [r3, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	68d8      	ldr	r0, [r3, #12]
 800341a:	893b      	ldrh	r3, [r7, #8]
 800341c:	7af9      	ldrb	r1, [r7, #11]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	47a0      	blx	r4
 8003422:	6178      	str	r0, [r7, #20]

  return ret;
 8003424:	697b      	ldr	r3, [r7, #20]
}
 8003426:	4618      	mov	r0, r3
 8003428:	371c      	adds	r7, #28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd90      	pop	{r4, r7, pc}

0800342e <iis2mdc_write_reg>:
  *
  */
int32_t __weak iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800342e:	b590      	push	{r4, r7, lr}
 8003430:	b087      	sub	sp, #28
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	461a      	mov	r2, r3
 800343a:	460b      	mov	r3, r1
 800343c:	72fb      	strb	r3, [r7, #11]
 800343e:	4613      	mov	r3, r2
 8003440:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681c      	ldr	r4, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	68d8      	ldr	r0, [r3, #12]
 800344a:	893b      	ldrh	r3, [r7, #8]
 800344c:	7af9      	ldrb	r1, [r7, #11]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	47a0      	blx	r4
 8003452:	6178      	str	r0, [r7, #20]

  return ret;
 8003454:	697b      	ldr	r3, [r7, #20]
}
 8003456:	4618      	mov	r0, r3
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bd90      	pop	{r4, r7, pc}

0800345e <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800346a:	f107 0208 	add.w	r2, r7, #8
 800346e:	2301      	movs	r3, #1
 8003470:	2160      	movs	r1, #96	; 0x60
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ffc3 	bl	80033fe <iis2mdc_read_reg>
 8003478:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10f      	bne.n	80034a0 <iis2mdc_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	b2da      	uxtb	r2, r3
 8003488:	7a3b      	ldrb	r3, [r7, #8]
 800348a:	f362 0301 	bfi	r3, r2, #0, #2
 800348e:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003490:	f107 0208 	add.w	r2, r7, #8
 8003494:	2301      	movs	r3, #1
 8003496:	2160      	movs	r1, #96	; 0x60
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff ffc8 	bl	800342e <iis2mdc_write_reg>
 800349e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80034a0:	68fb      	ldr	r3, [r7, #12]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80034b6:	f107 0208 	add.w	r2, r7, #8
 80034ba:	2301      	movs	r3, #1
 80034bc:	2160      	movs	r1, #96	; 0x60
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ff9d 	bl	80033fe <iis2mdc_read_reg>
 80034c4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10f      	bne.n	80034ec <iis2mdc_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	7a3b      	ldrb	r3, [r7, #8]
 80034d6:	f362 0383 	bfi	r3, r2, #2, #2
 80034da:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80034dc:	f107 0208 	add.w	r2, r7, #8
 80034e0:	2301      	movs	r3, #1
 80034e2:	2160      	movs	r1, #96	; 0x60
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ffa2 	bl	800342e <iis2mdc_write_reg>
 80034ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80034ec:	68fb      	ldr	r3, [r7, #12]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003502:	f107 0208 	add.w	r2, r7, #8
 8003506:	2301      	movs	r3, #1
 8003508:	2160      	movs	r1, #96	; 0x60
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ff77 	bl	80033fe <iis2mdc_read_reg>
 8003510:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8003512:	7a3b      	ldrb	r3, [r7, #8]
 8003514:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b03      	cmp	r3, #3
 800351c:	d81a      	bhi.n	8003554 <iis2mdc_data_rate_get+0x5c>
 800351e:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <iis2mdc_data_rate_get+0x2c>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003535 	.word	0x08003535
 8003528:	0800353d 	.word	0x0800353d
 800352c:	08003545 	.word	0x08003545
 8003530:	0800354d 	.word	0x0800354d
  {
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
      break;
 800353a:	e00f      	b.n	800355c <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2201      	movs	r2, #1
 8003540:	701a      	strb	r2, [r3, #0]
      break;
 8003542:	e00b      	b.n	800355c <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2202      	movs	r2, #2
 8003548:	701a      	strb	r2, [r3, #0]
      break;
 800354a:	e007      	b.n	800355c <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2203      	movs	r2, #3
 8003550:	701a      	strb	r2, [r3, #0]
      break;
 8003552:	e003      	b.n	800355c <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]
      break;
 800355a:	bf00      	nop
  }

  return ret;
 800355c:	68fb      	ldr	r3, [r7, #12]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop

08003568 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003574:	f107 0208 	add.w	r2, r7, #8
 8003578:	2301      	movs	r3, #1
 800357a:	2162      	movs	r1, #98	; 0x62
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff ff3e 	bl	80033fe <iis2mdc_read_reg>
 8003582:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10f      	bne.n	80035aa <iis2mdc_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	b2da      	uxtb	r2, r3
 8003592:	7a3b      	ldrb	r3, [r7, #8]
 8003594:	f362 1304 	bfi	r3, r2, #4, #1
 8003598:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800359a:	f107 0208 	add.w	r2, r7, #8
 800359e:	2301      	movs	r3, #1
 80035a0:	2162      	movs	r1, #98	; 0x62
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff ff43 	bl	800342e <iis2mdc_write_reg>
 80035a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80035aa:	68fb      	ldr	r3, [r7, #12]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 80035be:	f107 020c 	add.w	r2, r7, #12
 80035c2:	2306      	movs	r3, #6
 80035c4:	2168      	movs	r1, #104	; 0x68
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ff19 	bl	80033fe <iis2mdc_read_reg>
 80035cc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80035ce:	7b7b      	ldrb	r3, [r7, #13]
 80035d0:	b21a      	sxth	r2, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	7b3b      	ldrb	r3, [r7, #12]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	b21a      	sxth	r2, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	3302      	adds	r3, #2
 80035f6:	b212      	sxth	r2, r2
 80035f8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	3302      	adds	r3, #2
 80035fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003602:	b29b      	uxth	r3, r3
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	b29a      	uxth	r2, r3
 8003608:	7bbb      	ldrb	r3, [r7, #14]
 800360a:	b29b      	uxth	r3, r3
 800360c:	4413      	add	r3, r2
 800360e:	b29a      	uxth	r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	3302      	adds	r3, #2
 8003614:	b212      	sxth	r2, r2
 8003616:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003618:	7c7a      	ldrb	r2, [r7, #17]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	3304      	adds	r3, #4
 800361e:	b212      	sxth	r2, r2
 8003620:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	3304      	adds	r3, #4
 8003626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800362a:	b29b      	uxth	r3, r3
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	b29a      	uxth	r2, r3
 8003630:	7c3b      	ldrb	r3, [r7, #16]
 8003632:	b29b      	uxth	r3, r3
 8003634:	4413      	add	r3, r2
 8003636:	b29a      	uxth	r2, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	3304      	adds	r3, #4
 800363c:	b212      	sxth	r2, r2
 800363e:	801a      	strh	r2, [r3, #0]

  return ret;
 8003640:	697b      	ldr	r3, [r7, #20]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8003654:	2301      	movs	r3, #1
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	214f      	movs	r1, #79	; 0x4f
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff fecf 	bl	80033fe <iis2mdc_read_reg>
 8003660:	60f8      	str	r0, [r7, #12]

  return ret;
 8003662:	68fb      	ldr	r3, [r7, #12]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003678:	f107 0208 	add.w	r2, r7, #8
 800367c:	2301      	movs	r3, #1
 800367e:	2162      	movs	r1, #98	; 0x62
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff febc 	bl	80033fe <iis2mdc_read_reg>
 8003686:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10f      	bne.n	80036ae <iis2mdc_self_test_set+0x42>
  {
    reg.self_test = val;
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	b2da      	uxtb	r2, r3
 8003696:	7a3b      	ldrb	r3, [r7, #8]
 8003698:	f362 0341 	bfi	r3, r2, #1, #1
 800369c:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800369e:	f107 0208 	add.w	r2, r7, #8
 80036a2:	2301      	movs	r3, #1
 80036a4:	2162      	movs	r1, #98	; 0x62
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fec1 	bl	800342e <iis2mdc_write_reg>
 80036ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80036ae:	68fb      	ldr	r3, [r7, #12]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;

  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80036c4:	f107 0208 	add.w	r2, r7, #8
 80036c8:	2301      	movs	r3, #1
 80036ca:	2162      	movs	r1, #98	; 0x62
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff fe96 	bl	80033fe <iis2mdc_read_reg>
 80036d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10f      	bne.n	80036fa <iis2mdc_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	7a3b      	ldrb	r3, [r7, #8]
 80036e4:	f362 1345 	bfi	r3, r2, #5, #1
 80036e8:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80036ea:	f107 0208 	add.w	r2, r7, #8
 80036ee:	2301      	movs	r3, #1
 80036f0:	2162      	movs	r1, #98	; 0x62
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff fe9b 	bl	800342e <iis2mdc_write_reg>
 80036f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80036fa:	68fb      	ldr	r3, [r7, #12]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <ISM330DHCX_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d103      	bne.n	8003720 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 8003718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	e051      	b.n	80037c4 <ISM330DHCX_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	7b1a      	ldrb	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	699a      	ldr	r2, [r3, #24]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <ISM330DHCX_RegisterBusIO+0xcc>)
 800375c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <ISM330DHCX_RegisterBusIO+0xd0>)
 8003762:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <ISM330DHCX_RegisterBusIO+0x7e>
    {
      ret = ISM330DHCX_ERROR;
 800377a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	e020      	b.n	80037c4 <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4798      	blx	r3
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <ISM330DHCX_RegisterBusIO+0x92>
    {
      ret = ISM330DHCX_ERROR;
 800378e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	e016      	b.n	80037c4 <ISM330DHCX_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d112      	bne.n	80037c4 <ISM330DHCX_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10d      	bne.n	80037c4 <ISM330DHCX_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80037a8:	230c      	movs	r3, #12
 80037aa:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 80037ac:	7afb      	ldrb	r3, [r7, #11]
 80037ae:	461a      	mov	r2, r3
 80037b0:	2112      	movs	r1, #18
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fd73 	bl	800429e <ISM330DHCX_Write_Reg>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <ISM330DHCX_RegisterBusIO+0xc0>
          {
            ret = ISM330DHCX_ERROR;
 80037be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037c2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80037c4:	68fb      	ldr	r3, [r7, #12]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	0800470d 	.word	0x0800470d
 80037d4:	08004743 	.word	0x08004743

080037d8 <ISM330DHCX_Init>:
  * @brief  Initialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3320      	adds	r3, #32
 80037e4:	2101      	movs	r1, #1
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 fd32 	bl	8005250 <ism330dhcx_device_conf_set>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 80037f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037f6:	e078      	b.n	80038ea <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3320      	adds	r3, #32
 80037fc:	2101      	movs	r1, #1
 80037fe:	4618      	mov	r0, r3
 8003800:	f001 fda9 	bl	8005356 <ism330dhcx_auto_increment_set>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 800380a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800380e:	e06c      	b.n	80038ea <ISM330DHCX_Init+0x112>
  }

  /* SW reset */
  if (ism330dhcx_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3320      	adds	r3, #32
 8003814:	2101      	movs	r1, #1
 8003816:	4618      	mov	r0, r3
 8003818:	f001 fd77 	bl	800530a <ism330dhcx_reset_set>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003826:	e060      	b.n	80038ea <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3320      	adds	r3, #32
 800382c:	2101      	movs	r1, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f001 fd91 	bl	8005356 <ism330dhcx_auto_increment_set>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 800383a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800383e:	e054      	b.n	80038ea <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3320      	adds	r3, #32
 8003844:	2101      	movs	r1, #1
 8003846:	4618      	mov	r0, r3
 8003848:	f001 fc46 	bl	80050d8 <ism330dhcx_block_data_update_set>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003856:	e048      	b.n	80038ea <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3320      	adds	r3, #32
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f001 fd9f 	bl	80053a2 <ism330dhcx_fifo_mode_set>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 800386a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800386e:	e03c      	b.n	80038ea <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ACC_ODR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2204      	movs	r2, #4
 8003874:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ACC_ODR) != ISM330DHCX_OK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3320      	adds	r3, #32
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f001 f808 	bl	8004894 <ism330dhcx_xl_data_rate_set>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 800388a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800388e:	e02c      	b.n	80038ea <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ACC_SCALE) != ISM330DHCX_OK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3320      	adds	r3, #32
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f000 ff9e 	bl	80047d8 <ism330dhcx_xl_full_scale_set>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 80038a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038a6:	e020      	b.n	80038ea <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2204      	movs	r2, #4
 80038ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3320      	adds	r3, #32
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 fa3c 	bl	8004d34 <ism330dhcx_gy_data_rate_set>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 80038c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038c6:	e010      	b.n	80038ea <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3320      	adds	r3, #32
 80038cc:	210c      	movs	r1, #12
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 f9b8 	bl	8004c44 <ism330dhcx_gy_full_scale_set>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038de:	e004      	b.n	80038ea <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ISM330DHCX_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <ISM330DHCX_DeInit>:
  * @brief  Deinitialize the ISM330DHCX sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f888 	bl	8003a10 <ISM330DHCX_ACC_Disable>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800390a:	e015      	b.n	8003938 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fa92 	bl	8003e36 <ISM330DHCX_GYRO_Disable>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8003918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800391c:	e00c      	b.n	8003938 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return ISM330DHCX_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <ISM330DHCX_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3320      	adds	r3, #32
 800394e:	6839      	ldr	r1, [r7, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f001 fcc9 	bl	80052e8 <ism330dhcx_device_id_get>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 800395c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003960:	e000      	b.n	8003964 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <ISM330DHCX_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to ISM330DHCX sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2201      	movs	r2, #1
 8003980:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2200      	movs	r2, #0
 8003986:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2200      	movs	r2, #0
 800398c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003994:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2210      	movs	r2, #16
 800399a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2200      	movs	r2, #0
 80039a0:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	4a07      	ldr	r2, [pc, #28]	; (80039c4 <ISM330DHCX_GetCapabilities+0x58>)
 80039a6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	4a06      	ldr	r2, [pc, #24]	; (80039c4 <ISM330DHCX_GetCapabilities+0x58>)
 80039ac:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	45d05800 	.word	0x45d05800

080039c8 <ISM330DHCX_ACC_Enable>:
  * @brief  Enable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e014      	b.n	8003a08 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f103 0220 	add.w	r2, r3, #32
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80039ea:	4619      	mov	r1, r3
 80039ec:	4610      	mov	r0, r2
 80039ee:	f000 ff51 	bl	8004894 <ism330dhcx_xl_data_rate_set>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039fc:	e004      	b.n	8003a08 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ISM330DHCX_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <ISM330DHCX_ACC_Disable>:
  * @brief  Disable the ISM330DHCX accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e01f      	b.n	8003a66 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f103 0220 	add.w	r2, r3, #32
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3333      	adds	r3, #51	; 0x33
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f001 f89e 	bl	8004b74 <ism330dhcx_xl_data_rate_get>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a42:	e010      	b.n	8003a66 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3320      	adds	r3, #32
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 ff22 	bl	8004894 <ism330dhcx_xl_data_rate_set>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a5a:	e004      	b.n	8003a66 <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return ISM330DHCX_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <ISM330DHCX_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3320      	adds	r3, #32
 8003a82:	f107 020b 	add.w	r2, r7, #11
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fecb 	bl	8004824 <ism330dhcx_xl_full_scale_get>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a98:	e023      	b.n	8003ae2 <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003a9a:	7afb      	ldrb	r3, [r7, #11]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d81b      	bhi.n	8003ad8 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8003aa0:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 8003aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa6:	bf00      	nop
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003ad1 	.word	0x08003ad1
 8003ab0:	08003ac1 	.word	0x08003ac1
 8003ab4:	08003ac9 	.word	0x08003ac9
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8003abc:	601a      	str	r2, [r3, #0]
      break;
 8003abe:	e00f      	b.n	8003ae0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	4a0b      	ldr	r2, [pc, #44]	; (8003af0 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8003ac4:	601a      	str	r2, [r3, #0]
      break;
 8003ac6:	e00b      	b.n	8003ae0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8003acc:	601a      	str	r2, [r3, #0]
      break;
 8003ace:	e007      	b.n	8003ae0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	4a09      	ldr	r2, [pc, #36]	; (8003af8 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8003ad4:	601a      	str	r2, [r3, #0]
      break;
 8003ad6:	e003      	b.n	8003ae0 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8003ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003adc:	60fb      	str	r3, [r7, #12]
      break;
 8003ade:	bf00      	nop
  }

  return ret;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	3d79db23 	.word	0x3d79db23
 8003af0:	3df9db23 	.word	0x3df9db23
 8003af4:	3e79db23 	.word	0x3e79db23
 8003af8:	3ef9db23 	.word	0x3ef9db23

08003afc <ISM330DHCX_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3320      	adds	r3, #32
 8003b0e:	f107 020b 	add.w	r2, r7, #11
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 f82d 	bl	8004b74 <ism330dhcx_xl_data_rate_get>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b24:	e04e      	b.n	8003bc4 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003b26:	7afb      	ldrb	r3, [r7, #11]
 8003b28:	2b0a      	cmp	r3, #10
 8003b2a:	d846      	bhi.n	8003bba <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b61 	.word	0x08003b61
 8003b38:	08003b6b 	.word	0x08003b6b
 8003b3c:	08003b73 	.word	0x08003b73
 8003b40:	08003b7b 	.word	0x08003b7b
 8003b44:	08003b83 	.word	0x08003b83
 8003b48:	08003b8b 	.word	0x08003b8b
 8003b4c:	08003b93 	.word	0x08003b93
 8003b50:	08003b9b 	.word	0x08003b9b
 8003b54:	08003ba3 	.word	0x08003ba3
 8003b58:	08003bab 	.word	0x08003bab
 8003b5c:	08003bb3 	.word	0x08003bb3
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
      break;
 8003b68:	e02b      	b.n	8003bc2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8003b6e:	601a      	str	r2, [r3, #0]
      break;
 8003b70:	e027      	b.n	8003bc2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	4a16      	ldr	r2, [pc, #88]	; (8003bd0 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 8003b76:	601a      	str	r2, [r3, #0]
      break;
 8003b78:	e023      	b.n	8003bc2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8003b7e:	601a      	str	r2, [r3, #0]
      break;
 8003b80:	e01f      	b.n	8003bc2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 8003b86:	601a      	str	r2, [r3, #0]
      break;
 8003b88:	e01b      	b.n	8003bc2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8003b8e:	601a      	str	r2, [r3, #0]
      break;
 8003b90:	e017      	b.n	8003bc2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_416Hz:
      *Odr = 416.0f;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 8003b96:	601a      	str	r2, [r3, #0]
      break;
 8003b98:	e013      	b.n	8003bc2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	4a11      	ldr	r2, [pc, #68]	; (8003be4 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8003b9e:	601a      	str	r2, [r3, #0]
      break;
 8003ba0:	e00f      	b.n	8003bc2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1666Hz:
      *Odr = 1666.0f;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	4a10      	ldr	r2, [pc, #64]	; (8003be8 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 8003ba6:	601a      	str	r2, [r3, #0]
      break;
 8003ba8:	e00b      	b.n	8003bc2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3332Hz:
      *Odr = 3332.0f;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	4a0f      	ldr	r2, [pc, #60]	; (8003bec <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8003bae:	601a      	str	r2, [r3, #0]
      break;
 8003bb0:	e007      	b.n	8003bc2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	4a0e      	ldr	r2, [pc, #56]	; (8003bf0 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 8003bb6:	601a      	str	r2, [r3, #0]
      break;
 8003bb8:	e003      	b.n	8003bc2 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8003bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bbe:	60fb      	str	r3, [r7, #12]
      break;
 8003bc0:	bf00      	nop
  }

  return ret;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	41480000 	.word	0x41480000
 8003bd0:	41d00000 	.word	0x41d00000
 8003bd4:	42500000 	.word	0x42500000
 8003bd8:	42d00000 	.word	0x42d00000
 8003bdc:	43500000 	.word	0x43500000
 8003be0:	43d00000 	.word	0x43d00000
 8003be4:	44504000 	.word	0x44504000
 8003be8:	44d04000 	.word	0x44d04000
 8003bec:	45504000 	.word	0x45504000
 8003bf0:	45d05800 	.word	0x45d05800

08003bf4 <ISM330DHCX_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d106      	bne.n	8003c18 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003c0a:	ed97 0a00 	vldr	s0, [r7]
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fb60 	bl	80042d4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8003c14:	4603      	mov	r3, r0
 8003c16:	e005      	b.n	8003c24 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003c18:	ed97 0a00 	vldr	s0, [r7]
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fbe5 	bl	80043ec <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8003c22:	4603      	mov	r3, r0
  }
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <ISM330DHCX_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3320      	adds	r3, #32
 8003c3e:	f107 020b 	add.w	r2, r7, #11
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fded 	bl	8004824 <ism330dhcx_xl_full_scale_get>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c54:	e023      	b.n	8003c9e <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003c56:	7afb      	ldrb	r3, [r7, #11]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d81b      	bhi.n	8003c94 <ISM330DHCX_ACC_GetFullScale+0x68>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <ISM330DHCX_ACC_GetFullScale+0x38>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c75 	.word	0x08003c75
 8003c68:	08003c8d 	.word	0x08003c8d
 8003c6c:	08003c7d 	.word	0x08003c7d
 8003c70:	08003c85 	.word	0x08003c85
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2202      	movs	r2, #2
 8003c78:	601a      	str	r2, [r3, #0]
      break;
 8003c7a:	e00f      	b.n	8003c9c <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2204      	movs	r2, #4
 8003c80:	601a      	str	r2, [r3, #0]
      break;
 8003c82:	e00b      	b.n	8003c9c <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2208      	movs	r2, #8
 8003c88:	601a      	str	r2, [r3, #0]
      break;
 8003c8a:	e007      	b.n	8003c9c <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2210      	movs	r2, #16
 8003c90:	601a      	str	r2, [r3, #0]
      break;
 8003c92:	e003      	b.n	8003c9c <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8003c94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c98:	60fb      	str	r3, [r7, #12]
      break;
 8003c9a:	bf00      	nop
  }

  return ret;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop

08003ca8 <ISM330DHCX_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	dd0b      	ble.n	8003cd0 <ISM330DHCX_ACC_SetFullScale+0x28>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	dd06      	ble.n	8003ccc <ISM330DHCX_ACC_SetFullScale+0x24>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	dc01      	bgt.n	8003cc8 <ISM330DHCX_ACC_SetFullScale+0x20>
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e004      	b.n	8003cd2 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e002      	b.n	8003cd2 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e000      	b.n	8003cd2 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8003cd0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 8003cd2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3320      	adds	r3, #32
 8003cd8:	7bfa      	ldrb	r2, [r7, #15]
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fd7b 	bl	80047d8 <ism330dhcx_xl_full_scale_set>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8003ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cec:	e000      	b.n	8003cf0 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <ISM330DHCX_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3320      	adds	r3, #32
 8003d06:	f107 0208 	add.w	r2, r7, #8
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f001 fa54 	bl	80051ba <ism330dhcx_acceleration_raw_get>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8003d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d1c:	e00c      	b.n	8003d38 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003d1e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003d26:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003d2e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <ISM330DHCX_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3320      	adds	r3, #32
 8003d54:	f107 0210 	add.w	r2, r7, #16
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f001 fa2d 	bl	80051ba <ism330dhcx_acceleration_raw_get>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8003d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d6a:	e03c      	b.n	8003de6 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8003d6c:	f107 030c 	add.w	r3, r7, #12
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff fe7c 	bl	8003a70 <ISM330DHCX_ACC_GetSensitivity>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8003d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d82:	e030      	b.n	8003de6 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003d84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d88:	ee07 3a90 	vmov	s15, r3
 8003d8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d90:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d9c:	ee17 2a90 	vmov	r2, s15
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003da4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003da8:	ee07 3a90 	vmov	s15, r3
 8003dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003db0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dbc:	ee17 2a90 	vmov	r2, s15
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003dc4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ddc:	ee17 2a90 	vmov	r2, s15
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <ISM330DHCX_GYRO_Enable>:
  * @brief  Enable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	e014      	b.n	8003e2e <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f103 0220 	add.w	r2, r3, #32
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f000 ff8e 	bl	8004d34 <ism330dhcx_gy_data_rate_set>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8003e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e22:	e004      	b.n	8003e2e <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ISM330DHCX_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <ISM330DHCX_GYRO_Disable>:
  * @brief  Disable the ISM330DHCX gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e01f      	b.n	8003e8c <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f103 0220 	add.w	r2, r3, #32
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3334      	adds	r3, #52	; 0x34
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f001 f8db 	bl	8005014 <ism330dhcx_gy_data_rate_get>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8003e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e68:	e010      	b.n	8003e8c <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3320      	adds	r3, #32
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 ff5f 	bl	8004d34 <ism330dhcx_gy_data_rate_set>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e80:	e004      	b.n	8003e8c <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return ISM330DHCX_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <ISM330DHCX_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3320      	adds	r3, #32
 8003ea6:	f107 020b 	add.w	r2, r7, #11
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 feef 	bl	8004c90 <ism330dhcx_gy_full_scale_get>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ebc:	e03d      	b.n	8003f3a <ISM330DHCX_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003ebe:	7afb      	ldrb	r3, [r7, #11]
 8003ec0:	2b0c      	cmp	r3, #12
 8003ec2:	d835      	bhi.n	8003f30 <ISM330DHCX_GYRO_GetSensitivity+0x9c>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003f09 	.word	0x08003f09
 8003ed0:	08003f29 	.word	0x08003f29
 8003ed4:	08003f01 	.word	0x08003f01
 8003ed8:	08003f31 	.word	0x08003f31
 8003edc:	08003f11 	.word	0x08003f11
 8003ee0:	08003f31 	.word	0x08003f31
 8003ee4:	08003f31 	.word	0x08003f31
 8003ee8:	08003f31 	.word	0x08003f31
 8003eec:	08003f19 	.word	0x08003f19
 8003ef0:	08003f31 	.word	0x08003f31
 8003ef4:	08003f31 	.word	0x08003f31
 8003ef8:	08003f31 	.word	0x08003f31
 8003efc:	08003f21 	.word	0x08003f21
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	4a10      	ldr	r2, [pc, #64]	; (8003f44 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8003f04:	601a      	str	r2, [r3, #0]
      break;
 8003f06:	e017      	b.n	8003f38 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	4a0f      	ldr	r2, [pc, #60]	; (8003f48 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8003f0c:	601a      	str	r2, [r3, #0]
      break;
 8003f0e:	e013      	b.n	8003f38 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	4a0e      	ldr	r2, [pc, #56]	; (8003f4c <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8003f14:	601a      	str	r2, [r3, #0]
      break;
 8003f16:	e00f      	b.n	8003f38 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	4a0d      	ldr	r2, [pc, #52]	; (8003f50 <ISM330DHCX_GYRO_GetSensitivity+0xbc>)
 8003f1c:	601a      	str	r2, [r3, #0]
      break;
 8003f1e:	e00b      	b.n	8003f38 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	4a0c      	ldr	r2, [pc, #48]	; (8003f54 <ISM330DHCX_GYRO_GetSensitivity+0xc0>)
 8003f24:	601a      	str	r2, [r3, #0]
      break;
 8003f26:	e007      	b.n	8003f38 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    case ISM330DHCX_4000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_4000DPS;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	4a0b      	ldr	r2, [pc, #44]	; (8003f58 <ISM330DHCX_GYRO_GetSensitivity+0xc4>)
 8003f2c:	601a      	str	r2, [r3, #0]
      break;
 8003f2e:	e003      	b.n	8003f38 <ISM330DHCX_GYRO_GetSensitivity+0xa4>

    default:
      ret = ISM330DHCX_ERROR;
 8003f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f34:	60fb      	str	r3, [r7, #12]
      break;
 8003f36:	bf00      	nop
  }

  return ret;
 8003f38:	68fb      	ldr	r3, [r7, #12]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	408c0000 	.word	0x408c0000
 8003f48:	410c0000 	.word	0x410c0000
 8003f4c:	418c0000 	.word	0x418c0000
 8003f50:	420c0000 	.word	0x420c0000
 8003f54:	428c0000 	.word	0x428c0000
 8003f58:	430c0000 	.word	0x430c0000

08003f5c <ISM330DHCX_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3320      	adds	r3, #32
 8003f6e:	f107 020b 	add.w	r2, r7, #11
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f001 f84d 	bl	8005014 <ism330dhcx_gy_data_rate_get>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f84:	e04e      	b.n	8004024 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003f86:	7afb      	ldrb	r3, [r7, #11]
 8003f88:	2b0a      	cmp	r3, #10
 8003f8a:	d846      	bhi.n	800401a <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08003fc1 	.word	0x08003fc1
 8003f98:	08003fcb 	.word	0x08003fcb
 8003f9c:	08003fd3 	.word	0x08003fd3
 8003fa0:	08003fdb 	.word	0x08003fdb
 8003fa4:	08003fe3 	.word	0x08003fe3
 8003fa8:	08003feb 	.word	0x08003feb
 8003fac:	08003ff3 	.word	0x08003ff3
 8003fb0:	08003ffb 	.word	0x08003ffb
 8003fb4:	08004003 	.word	0x08004003
 8003fb8:	0800400b 	.word	0x0800400b
 8003fbc:	08004013 	.word	0x08004013
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
      break;
 8003fc8:	e02b      	b.n	8004022 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	4a17      	ldr	r2, [pc, #92]	; (800402c <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8003fce:	601a      	str	r2, [r3, #0]
      break;
 8003fd0:	e027      	b.n	8004022 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	4a16      	ldr	r2, [pc, #88]	; (8004030 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 8003fd6:	601a      	str	r2, [r3, #0]
      break;
 8003fd8:	e023      	b.n	8004022 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	4a15      	ldr	r2, [pc, #84]	; (8004034 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 8003fde:	601a      	str	r2, [r3, #0]
      break;
 8003fe0:	e01f      	b.n	8004022 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8003fe6:	601a      	str	r2, [r3, #0]
      break;
 8003fe8:	e01b      	b.n	8004022 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	4a13      	ldr	r2, [pc, #76]	; (800403c <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 8003fee:	601a      	str	r2, [r3, #0]
      break;
 8003ff0:	e017      	b.n	8004022 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_416Hz:
      *Odr = 416.0f;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	4a12      	ldr	r2, [pc, #72]	; (8004040 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8003ff6:	601a      	str	r2, [r3, #0]
      break;
 8003ff8:	e013      	b.n	8004022 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	4a11      	ldr	r2, [pc, #68]	; (8004044 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 8003ffe:	601a      	str	r2, [r3, #0]
      break;
 8004000:	e00f      	b.n	8004022 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1666Hz:
      *Odr =  1666.0f;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	4a10      	ldr	r2, [pc, #64]	; (8004048 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8004006:	601a      	str	r2, [r3, #0]
      break;
 8004008:	e00b      	b.n	8004022 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3332Hz:
      *Odr =  3332.0f;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	4a0f      	ldr	r2, [pc, #60]	; (800404c <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 800400e:	601a      	str	r2, [r3, #0]
      break;
 8004010:	e007      	b.n	8004022 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	4a0e      	ldr	r2, [pc, #56]	; (8004050 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8004016:	601a      	str	r2, [r3, #0]
      break;
 8004018:	e003      	b.n	8004022 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 800401a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800401e:	60fb      	str	r3, [r7, #12]
      break;
 8004020:	bf00      	nop
  }

  return ret;
 8004022:	68fb      	ldr	r3, [r7, #12]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	41480000 	.word	0x41480000
 8004030:	41d00000 	.word	0x41d00000
 8004034:	42500000 	.word	0x42500000
 8004038:	42d00000 	.word	0x42d00000
 800403c:	43500000 	.word	0x43500000
 8004040:	43d00000 	.word	0x43d00000
 8004044:	44504000 	.word	0x44504000
 8004048:	44d04000 	.word	0x44d04000
 800404c:	45504000 	.word	0x45504000
 8004050:	45d05800 	.word	0x45d05800

08004054 <ISM330DHCX_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004066:	2b01      	cmp	r3, #1
 8004068:	d106      	bne.n	8004078 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800406a:	ed97 0a00 	vldr	s0, [r7]
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fa3e 	bl	80044f0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8004074:	4603      	mov	r3, r0
 8004076:	e005      	b.n	8004084 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004078:	ed97 0a00 	vldr	s0, [r7]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 fac3 	bl	8004608 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 8004082:	4603      	mov	r3, r0
  }
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <ISM330DHCX_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3320      	adds	r3, #32
 800409e:	f107 020b 	add.w	r2, r7, #11
 80040a2:	4611      	mov	r1, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 fdf3 	bl	8004c90 <ism330dhcx_gy_full_scale_get>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 80040b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040b4:	e041      	b.n	800413a <ISM330DHCX_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 80040b6:	7afb      	ldrb	r3, [r7, #11]
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	d839      	bhi.n	8004130 <ISM330DHCX_GYRO_GetFullScale+0xa4>
 80040bc:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 80040be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c2:	bf00      	nop
 80040c4:	08004101 	.word	0x08004101
 80040c8:	08004127 	.word	0x08004127
 80040cc:	080040f9 	.word	0x080040f9
 80040d0:	08004131 	.word	0x08004131
 80040d4:	08004109 	.word	0x08004109
 80040d8:	08004131 	.word	0x08004131
 80040dc:	08004131 	.word	0x08004131
 80040e0:	08004131 	.word	0x08004131
 80040e4:	08004113 	.word	0x08004113
 80040e8:	08004131 	.word	0x08004131
 80040ec:	08004131 	.word	0x08004131
 80040f0:	08004131 	.word	0x08004131
 80040f4:	0800411d 	.word	0x0800411d
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	227d      	movs	r2, #125	; 0x7d
 80040fc:	601a      	str	r2, [r3, #0]
      break;
 80040fe:	e01b      	b.n	8004138 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	22fa      	movs	r2, #250	; 0xfa
 8004104:	601a      	str	r2, [r3, #0]
      break;
 8004106:	e017      	b.n	8004138 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800410e:	601a      	str	r2, [r3, #0]
      break;
 8004110:	e012      	b.n	8004138 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004118:	601a      	str	r2, [r3, #0]
      break;
 800411a:	e00d      	b.n	8004138 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004122:	601a      	str	r2, [r3, #0]
      break;
 8004124:	e008      	b.n	8004138 <ISM330DHCX_GYRO_GetFullScale+0xac>

    case ISM330DHCX_4000dps:
      *FullScale = 4000;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800412c:	601a      	str	r2, [r3, #0]
      break;
 800412e:	e003      	b.n	8004138 <ISM330DHCX_GYRO_GetFullScale+0xac>

    default:
      ret = ISM330DHCX_ERROR;
 8004130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004134:	60fb      	str	r3, [r7, #12]
      break;
 8004136:	bf00      	nop
  }

  return ret;
 8004138:	68fb      	ldr	r3, [r7, #12]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop

08004144 <ISM330DHCX_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b7d      	cmp	r3, #125	; 0x7d
 8004152:	dd18      	ble.n	8004186 <ISM330DHCX_GYRO_SetFullScale+0x42>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2bfa      	cmp	r3, #250	; 0xfa
 8004158:	dd13      	ble.n	8004182 <ISM330DHCX_GYRO_SetFullScale+0x3e>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004160:	dd0d      	ble.n	800417e <ISM330DHCX_GYRO_SetFullScale+0x3a>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004168:	dd07      	ble.n	800417a <ISM330DHCX_GYRO_SetFullScale+0x36>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004170:	dc01      	bgt.n	8004176 <ISM330DHCX_GYRO_SetFullScale+0x32>
 8004172:	230c      	movs	r3, #12
 8004174:	e008      	b.n	8004188 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004176:	2301      	movs	r3, #1
 8004178:	e006      	b.n	8004188 <ISM330DHCX_GYRO_SetFullScale+0x44>
 800417a:	2308      	movs	r3, #8
 800417c:	e004      	b.n	8004188 <ISM330DHCX_GYRO_SetFullScale+0x44>
 800417e:	2304      	movs	r3, #4
 8004180:	e002      	b.n	8004188 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004182:	2300      	movs	r3, #0
 8004184:	e000      	b.n	8004188 <ISM330DHCX_GYRO_SetFullScale+0x44>
 8004186:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8004188:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           : (FullScale <= 2000) ? ISM330DHCX_2000dps
           :                       ISM330DHCX_4000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3320      	adds	r3, #32
 800418e:	7bfa      	ldrb	r2, [r7, #15]
 8004190:	4611      	mov	r1, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fd56 	bl	8004c44 <ism330dhcx_gy_full_scale_set>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <ISM330DHCX_GYRO_SetFullScale+0x60>
  {
    return ISM330DHCX_ERROR;
 800419e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041a2:	e000      	b.n	80041a6 <ISM330DHCX_GYRO_SetFullScale+0x62>
  }

  return ISM330DHCX_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <ISM330DHCX_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3320      	adds	r3, #32
 80041bc:	f107 0208 	add.w	r2, r7, #8
 80041c0:	4611      	mov	r1, r2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 ffae 	bl	8005124 <ism330dhcx_angular_rate_raw_get>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041d2:	e00c      	b.n	80041ee <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80041d4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80041dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80041e4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <ISM330DHCX_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b086      	sub	sp, #24
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3320      	adds	r3, #32
 8004204:	f107 0210 	add.w	r2, r7, #16
 8004208:	4611      	mov	r1, r2
 800420a:	4618      	mov	r0, r3
 800420c:	f000 ff8a 	bl	8005124 <ism330dhcx_angular_rate_raw_get>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 8004216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800421a:	e03c      	b.n	8004296 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 800421c:	f107 030c 	add.w	r3, r7, #12
 8004220:	4619      	mov	r1, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff fe36 	bl	8003e94 <ISM330DHCX_GYRO_GetSensitivity>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 800422e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004232:	e030      	b.n	8004296 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004234:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004238:	ee07 3a90 	vmov	s15, r3
 800423c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004240:	edd7 7a03 	vldr	s15, [r7, #12]
 8004244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800424c:	ee17 2a90 	vmov	r2, s15
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004254:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004258:	ee07 3a90 	vmov	s15, r3
 800425c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004260:	edd7 7a03 	vldr	s15, [r7, #12]
 8004264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800426c:	ee17 2a90 	vmov	r2, s15
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004274:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004280:	edd7 7a03 	vldr	s15, [r7, #12]
 8004284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800428c:	ee17 2a90 	vmov	r2, s15
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <ISM330DHCX_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	460b      	mov	r3, r1
 80042a8:	70fb      	strb	r3, [r7, #3]
 80042aa:	4613      	mov	r3, r2
 80042ac:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f103 0020 	add.w	r0, r3, #32
 80042b4:	1cba      	adds	r2, r7, #2
 80042b6:	78f9      	ldrb	r1, [r7, #3]
 80042b8:	2301      	movs	r3, #1
 80042ba:	f000 fa75 	bl	80047a8 <ism330dhcx_write_reg>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 80042c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042c8:	e000      	b.n	80042cc <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80042e0:	edd7 7a00 	vldr	s15, [r7]
 80042e4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80042e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f0:	d801      	bhi.n	80042f6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e058      	b.n	80043a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80042f6:	edd7 7a00 	vldr	s15, [r7]
 80042fa:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80042fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004306:	d801      	bhi.n	800430c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004308:	2302      	movs	r3, #2
 800430a:	e04d      	b.n	80043a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800430c:	edd7 7a00 	vldr	s15, [r7]
 8004310:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80043d0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431c:	d801      	bhi.n	8004322 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800431e:	2303      	movs	r3, #3
 8004320:	e042      	b.n	80043a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004322:	edd7 7a00 	vldr	s15, [r7]
 8004326:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80043d4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 800432a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800432e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004332:	d801      	bhi.n	8004338 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004334:	2304      	movs	r3, #4
 8004336:	e037      	b.n	80043a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004338:	edd7 7a00 	vldr	s15, [r7]
 800433c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80043d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004348:	d801      	bhi.n	800434e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800434a:	2305      	movs	r3, #5
 800434c:	e02c      	b.n	80043a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800434e:	edd7 7a00 	vldr	s15, [r7]
 8004352:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80043dc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800435a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435e:	d801      	bhi.n	8004364 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004360:	2306      	movs	r3, #6
 8004362:	e021      	b.n	80043a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004364:	edd7 7a00 	vldr	s15, [r7]
 8004368:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80043e0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800436c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004374:	d801      	bhi.n	800437a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004376:	2307      	movs	r3, #7
 8004378:	e016      	b.n	80043a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800437a:	edd7 7a00 	vldr	s15, [r7]
 800437e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80043e4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438a:	d801      	bhi.n	8004390 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800438c:	2308      	movs	r3, #8
 800438e:	e00b      	b.n	80043a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004390:	edd7 7a00 	vldr	s15, [r7]
 8004394:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80043e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a0:	d801      	bhi.n	80043a6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80043a2:	2309      	movs	r3, #9
 80043a4:	e000      	b.n	80043a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80043a6:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80043a8:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
            :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3320      	adds	r3, #32
 80043ae:	7bfa      	ldrb	r2, [r7, #15]
 80043b0:	4611      	mov	r1, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fa6e 	bl	8004894 <ism330dhcx_xl_data_rate_set>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043c2:	e000      	b.n	80043c6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	42500000 	.word	0x42500000
 80043d4:	42d00000 	.word	0x42d00000
 80043d8:	43500000 	.word	0x43500000
 80043dc:	43d00000 	.word	0x43d00000
 80043e0:	44504000 	.word	0x44504000
 80043e4:	44d04000 	.word	0x44d04000
 80043e8:	45504000 	.word	0x45504000

080043ec <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80043f8:	edd7 7a00 	vldr	s15, [r7]
 80043fc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004408:	d801      	bhi.n	800440e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 800440a:	2301      	movs	r3, #1
 800440c:	e058      	b.n	80044c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800440e:	edd7 7a00 	vldr	s15, [r7]
 8004412:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441e:	d801      	bhi.n	8004424 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004420:	2302      	movs	r3, #2
 8004422:	e04d      	b.n	80044c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004424:	edd7 7a00 	vldr	s15, [r7]
 8004428:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80044d4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800442c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004434:	d801      	bhi.n	800443a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004436:	2303      	movs	r3, #3
 8004438:	e042      	b.n	80044c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800443a:	edd7 7a00 	vldr	s15, [r7]
 800443e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80044d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444a:	d801      	bhi.n	8004450 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 800444c:	2304      	movs	r3, #4
 800444e:	e037      	b.n	80044c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004450:	edd7 7a00 	vldr	s15, [r7]
 8004454:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80044dc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800445c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004460:	d801      	bhi.n	8004466 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004462:	2305      	movs	r3, #5
 8004464:	e02c      	b.n	80044c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004466:	edd7 7a00 	vldr	s15, [r7]
 800446a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80044e0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800446e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004476:	d801      	bhi.n	800447c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004478:	2306      	movs	r3, #6
 800447a:	e021      	b.n	80044c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800447c:	edd7 7a00 	vldr	s15, [r7]
 8004480:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80044e4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448c:	d801      	bhi.n	8004492 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800448e:	2307      	movs	r3, #7
 8004490:	e016      	b.n	80044c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004492:	edd7 7a00 	vldr	s15, [r7]
 8004496:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80044e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800449a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800449e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a2:	d801      	bhi.n	80044a8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80044a4:	2308      	movs	r3, #8
 80044a6:	e00b      	b.n	80044c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80044a8:	edd7 7a00 	vldr	s15, [r7]
 80044ac:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80044ec <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 80044b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b8:	d801      	bhi.n	80044be <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80044ba:	2309      	movs	r3, #9
 80044bc:	e000      	b.n	80044c0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80044be:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                  : (Odr <= 1666.0f) ? ISM330DHCX_XL_ODR_1666Hz
                  : (Odr <= 3332.0f) ? ISM330DHCX_XL_ODR_3332Hz
                  :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	42500000 	.word	0x42500000
 80044d8:	42d00000 	.word	0x42d00000
 80044dc:	43500000 	.word	0x43500000
 80044e0:	43d00000 	.word	0x43d00000
 80044e4:	44504000 	.word	0x44504000
 80044e8:	44d04000 	.word	0x44d04000
 80044ec:	45504000 	.word	0x45504000

080044f0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80044fc:	edd7 7a00 	vldr	s15, [r7]
 8004500:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450c:	d801      	bhi.n	8004512 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800450e:	2301      	movs	r3, #1
 8004510:	e058      	b.n	80045c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004512:	edd7 7a00 	vldr	s15, [r7]
 8004516:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800451a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800451e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004522:	d801      	bhi.n	8004528 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004524:	2302      	movs	r3, #2
 8004526:	e04d      	b.n	80045c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004528:	edd7 7a00 	vldr	s15, [r7]
 800452c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80045ec <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004538:	d801      	bhi.n	800453e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800453a:	2303      	movs	r3, #3
 800453c:	e042      	b.n	80045c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800453e:	edd7 7a00 	vldr	s15, [r7]
 8004542:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80045f0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800454a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454e:	d801      	bhi.n	8004554 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004550:	2304      	movs	r3, #4
 8004552:	e037      	b.n	80045c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004554:	edd7 7a00 	vldr	s15, [r7]
 8004558:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80045f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800455c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004564:	d801      	bhi.n	800456a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004566:	2305      	movs	r3, #5
 8004568:	e02c      	b.n	80045c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800456a:	edd7 7a00 	vldr	s15, [r7]
 800456e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80045f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457a:	d801      	bhi.n	8004580 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800457c:	2306      	movs	r3, #6
 800457e:	e021      	b.n	80045c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004580:	edd7 7a00 	vldr	s15, [r7]
 8004584:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80045fc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800458c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004590:	d801      	bhi.n	8004596 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004592:	2307      	movs	r3, #7
 8004594:	e016      	b.n	80045c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004596:	edd7 7a00 	vldr	s15, [r7]
 800459a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004600 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800459e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a6:	d801      	bhi.n	80045ac <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80045a8:	2308      	movs	r3, #8
 80045aa:	e00b      	b.n	80045c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80045ac:	edd7 7a00 	vldr	s15, [r7]
 80045b0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004604 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80045b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045bc:	d801      	bhi.n	80045c2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80045be:	2309      	movs	r3, #9
 80045c0:	e000      	b.n	80045c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80045c2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80045c4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
            : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
            :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3320      	adds	r3, #32
 80045ca:	7bfa      	ldrb	r2, [r7, #15]
 80045cc:	4611      	mov	r1, r2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fbb0 	bl	8004d34 <ism330dhcx_gy_data_rate_set>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045de:	e000      	b.n	80045e2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	42500000 	.word	0x42500000
 80045f0:	42d00000 	.word	0x42d00000
 80045f4:	43500000 	.word	0x43500000
 80045f8:	43d00000 	.word	0x43d00000
 80045fc:	44504000 	.word	0x44504000
 8004600:	44d04000 	.word	0x44d04000
 8004604:	45504000 	.word	0x45504000

08004608 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8004614:	edd7 7a00 	vldr	s15, [r7]
 8004618:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800461c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004624:	d801      	bhi.n	800462a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004626:	2301      	movs	r3, #1
 8004628:	e058      	b.n	80046dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800462a:	edd7 7a00 	vldr	s15, [r7]
 800462e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463a:	d801      	bhi.n	8004640 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800463c:	2302      	movs	r3, #2
 800463e:	e04d      	b.n	80046dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004640:	edd7 7a00 	vldr	s15, [r7]
 8004644:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80046f0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800464c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004650:	d801      	bhi.n	8004656 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004652:	2303      	movs	r3, #3
 8004654:	e042      	b.n	80046dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004656:	edd7 7a00 	vldr	s15, [r7]
 800465a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80046f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800465e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004666:	d801      	bhi.n	800466c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004668:	2304      	movs	r3, #4
 800466a:	e037      	b.n	80046dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800466c:	edd7 7a00 	vldr	s15, [r7]
 8004670:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80046f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004674:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467c:	d801      	bhi.n	8004682 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800467e:	2305      	movs	r3, #5
 8004680:	e02c      	b.n	80046dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004682:	edd7 7a00 	vldr	s15, [r7]
 8004686:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80046fc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800468a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800468e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004692:	d801      	bhi.n	8004698 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004694:	2306      	movs	r3, #6
 8004696:	e021      	b.n	80046dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004698:	edd7 7a00 	vldr	s15, [r7]
 800469c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004700 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80046a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a8:	d801      	bhi.n	80046ae <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80046aa:	2307      	movs	r3, #7
 80046ac:	e016      	b.n	80046dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80046ae:	edd7 7a00 	vldr	s15, [r7]
 80046b2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004704 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80046b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046be:	d801      	bhi.n	80046c4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80046c0:	2308      	movs	r3, #8
 80046c2:	e00b      	b.n	80046dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80046c4:	edd7 7a00 	vldr	s15, [r7]
 80046c8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004708 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80046cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d4:	d801      	bhi.n	80046da <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80046d6:	2309      	movs	r3, #9
 80046d8:	e000      	b.n	80046dc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80046da:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                   : (Odr <= 1666.0f) ? ISM330DHCX_GY_ODR_1666Hz
                   : (Odr <= 3332.0f) ? ISM330DHCX_GY_ODR_3332Hz
                   :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	42500000 	.word	0x42500000
 80046f4:	42d00000 	.word	0x42d00000
 80046f8:	43500000 	.word	0x43500000
 80046fc:	43d00000 	.word	0x43d00000
 8004700:	44504000 	.word	0x44504000
 8004704:	44d04000 	.word	0x44d04000
 8004708:	45504000 	.word	0x45504000

0800470c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	607a      	str	r2, [r7, #4]
 8004716:	461a      	mov	r2, r3
 8004718:	460b      	mov	r3, r1
 800471a:	72fb      	strb	r3, [r7, #11]
 800471c:	4613      	mov	r3, r2
 800471e:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	695c      	ldr	r4, [r3, #20]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	7b1b      	ldrb	r3, [r3, #12]
 800472c:	b298      	uxth	r0, r3
 800472e:	7afb      	ldrb	r3, [r7, #11]
 8004730:	b299      	uxth	r1, r3
 8004732:	893b      	ldrh	r3, [r7, #8]
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	47a0      	blx	r4
 8004738:	4603      	mov	r3, r0
}
 800473a:	4618      	mov	r0, r3
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	bd90      	pop	{r4, r7, pc}

08004742 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004742:	b590      	push	{r4, r7, lr}
 8004744:	b087      	sub	sp, #28
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	461a      	mov	r2, r3
 800474e:	460b      	mov	r3, r1
 8004750:	72fb      	strb	r3, [r7, #11]
 8004752:	4613      	mov	r3, r2
 8004754:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	691c      	ldr	r4, [r3, #16]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	7b1b      	ldrb	r3, [r3, #12]
 8004762:	b298      	uxth	r0, r3
 8004764:	7afb      	ldrb	r3, [r7, #11]
 8004766:	b299      	uxth	r1, r3
 8004768:	893b      	ldrh	r3, [r7, #8]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	47a0      	blx	r4
 800476e:	4603      	mov	r3, r0
}
 8004770:	4618      	mov	r0, r3
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	bd90      	pop	{r4, r7, pc}

08004778 <ism330dhcx_read_reg>:
  *
  */
int32_t __weak ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8004778:	b590      	push	{r4, r7, lr}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	461a      	mov	r2, r3
 8004784:	460b      	mov	r3, r1
 8004786:	72fb      	strb	r3, [r7, #11]
 8004788:	4613      	mov	r3, r2
 800478a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	685c      	ldr	r4, [r3, #4]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	68d8      	ldr	r0, [r3, #12]
 8004794:	893b      	ldrh	r3, [r7, #8]
 8004796:	7af9      	ldrb	r1, [r7, #11]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	47a0      	blx	r4
 800479c:	6178      	str	r0, [r7, #20]

  return ret;
 800479e:	697b      	ldr	r3, [r7, #20]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd90      	pop	{r4, r7, pc}

080047a8 <ism330dhcx_write_reg>:
  *
  */
int32_t __weak ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	607a      	str	r2, [r7, #4]
 80047b2:	461a      	mov	r2, r3
 80047b4:	460b      	mov	r3, r1
 80047b6:	72fb      	strb	r3, [r7, #11]
 80047b8:	4613      	mov	r3, r2
 80047ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681c      	ldr	r4, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	68d8      	ldr	r0, [r3, #12]
 80047c4:	893b      	ldrh	r3, [r7, #8]
 80047c6:	7af9      	ldrb	r1, [r7, #11]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	47a0      	blx	r4
 80047cc:	6178      	str	r0, [r7, #20]

  return ret;
 80047ce:	697b      	ldr	r3, [r7, #20]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd90      	pop	{r4, r7, pc}

080047d8 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80047e4:	f107 0208 	add.w	r2, r7, #8
 80047e8:	2301      	movs	r3, #1
 80047ea:	2110      	movs	r1, #16
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ffc3 	bl	8004778 <ism330dhcx_read_reg>
 80047f2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10f      	bne.n	800481a <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	b2da      	uxtb	r2, r3
 8004802:	7a3b      	ldrb	r3, [r7, #8]
 8004804:	f362 0383 	bfi	r3, r2, #2, #2
 8004808:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 800480a:	f107 0208 	add.w	r2, r7, #8
 800480e:	2301      	movs	r3, #1
 8004810:	2110      	movs	r1, #16
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff ffc8 	bl	80047a8 <ism330dhcx_write_reg>
 8004818:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800481a:	68fb      	ldr	r3, [r7, #12]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800482e:	f107 0208 	add.w	r2, r7, #8
 8004832:	2301      	movs	r3, #1
 8004834:	2110      	movs	r1, #16
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff ff9e 	bl	8004778 <ism330dhcx_read_reg>
 800483c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 800483e:	7a3b      	ldrb	r3, [r7, #8]
 8004840:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b03      	cmp	r3, #3
 8004848:	d81a      	bhi.n	8004880 <ism330dhcx_xl_full_scale_get+0x5c>
 800484a:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <ism330dhcx_xl_full_scale_get+0x2c>)
 800484c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004850:	08004861 	.word	0x08004861
 8004854:	08004869 	.word	0x08004869
 8004858:	08004871 	.word	0x08004871
 800485c:	08004879 	.word	0x08004879
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2200      	movs	r2, #0
 8004864:	701a      	strb	r2, [r3, #0]
      break;
 8004866:	e00f      	b.n	8004888 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
      break;
 800486e:	e00b      	b.n	8004888 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2202      	movs	r2, #2
 8004874:	701a      	strb	r2, [r3, #0]
      break;
 8004876:	e007      	b.n	8004888 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2203      	movs	r2, #3
 800487c:	701a      	strb	r2, [r3, #0]
      break;
 800487e:	e003      	b.n	8004888 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]
      break;
 8004886:	bf00      	nop
  }

  return ret;
 8004888:	68fb      	ldr	r3, [r7, #12]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop

08004894 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 80048a4:	f107 030c 	add.w	r3, r7, #12
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fd9f 	bl	80053ee <ism330dhcx_fsm_enable_get>
 80048b0:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f040 80c4 	bne.w	8004a42 <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80048ba:	7b3b      	ldrb	r3, [r7, #12]
 80048bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80048c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80048c2:	7b3b      	ldrb	r3, [r7, #12]
 80048c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80048c8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80048ca:	4313      	orrs	r3, r2
 80048cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80048ce:	7b3b      	ldrb	r3, [r7, #12]
 80048d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80048d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80048d6:	4313      	orrs	r3, r2
 80048d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80048da:	7b3b      	ldrb	r3, [r7, #12]
 80048dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80048e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80048e2:	4313      	orrs	r3, r2
 80048e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80048e6:	7b3b      	ldrb	r3, [r7, #12]
 80048e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80048ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80048ee:	4313      	orrs	r3, r2
 80048f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80048f2:	7b3b      	ldrb	r3, [r7, #12]
 80048f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80048f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80048fa:	4313      	orrs	r3, r2
 80048fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80048fe:	7b3b      	ldrb	r3, [r7, #12]
 8004900:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004904:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004906:	4313      	orrs	r3, r2
 8004908:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800490a:	7b3b      	ldrb	r3, [r7, #12]
 800490c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004910:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004912:	4313      	orrs	r3, r2
 8004914:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004916:	7b7b      	ldrb	r3, [r7, #13]
 8004918:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800491c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800491e:	4313      	orrs	r3, r2
 8004920:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004922:	7b7b      	ldrb	r3, [r7, #13]
 8004924:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004928:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800492a:	4313      	orrs	r3, r2
 800492c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800492e:	7b7b      	ldrb	r3, [r7, #13]
 8004930:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004934:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004936:	4313      	orrs	r3, r2
 8004938:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800493a:	7b7b      	ldrb	r3, [r7, #13]
 800493c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004940:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004942:	4313      	orrs	r3, r2
 8004944:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004946:	7b7b      	ldrb	r3, [r7, #13]
 8004948:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800494c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800494e:	4313      	orrs	r3, r2
 8004950:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004952:	7b7b      	ldrb	r3, [r7, #13]
 8004954:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004958:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800495a:	4313      	orrs	r3, r2
 800495c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800495e:	7b7b      	ldrb	r3, [r7, #13]
 8004960:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004964:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004966:	4313      	orrs	r3, r2
 8004968:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800496a:	7b7b      	ldrb	r3, [r7, #13]
 800496c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004970:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004972:	4313      	orrs	r3, r2
 8004974:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004976:	2b01      	cmp	r3, #1
 8004978:	d163      	bne.n	8004a42 <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 800497a:	f107 030b 	add.w	r3, r7, #11
 800497e:	4619      	mov	r1, r3
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fd61 	bl	8005448 <ism330dhcx_fsm_data_rate_get>
 8004986:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d159      	bne.n	8004a42 <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800498e:	7afb      	ldrb	r3, [r7, #11]
 8004990:	2b03      	cmp	r3, #3
 8004992:	d853      	bhi.n	8004a3c <ism330dhcx_xl_data_rate_set+0x1a8>
 8004994:	a201      	add	r2, pc, #4	; (adr r2, 800499c <ism330dhcx_xl_data_rate_set+0x108>)
 8004996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499a:	bf00      	nop
 800499c:	080049ad 	.word	0x080049ad
 80049a0:	080049bf 	.word	0x080049bf
 80049a4:	080049dd 	.word	0x080049dd
 80049a8:	08004a07 	.word	0x08004a07
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80049b2:	2301      	movs	r3, #1
 80049b4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80049b6:	e045      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	75fb      	strb	r3, [r7, #23]
            break;
 80049bc:	e042      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d102      	bne.n	80049ca <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80049c4:	2302      	movs	r3, #2
 80049c6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80049c8:	e03c      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d102      	bne.n	80049d6 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80049d0:	2302      	movs	r3, #2
 80049d2:	75fb      	strb	r3, [r7, #23]
            break;
 80049d4:	e036      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	75fb      	strb	r3, [r7, #23]
            break;
 80049da:	e033      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d102      	bne.n	80049e8 <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80049e2:	2303      	movs	r3, #3
 80049e4:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80049e6:	e02d      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d102      	bne.n	80049f4 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80049ee:	2303      	movs	r3, #3
 80049f0:	75fb      	strb	r3, [r7, #23]
            break;
 80049f2:	e027      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d102      	bne.n	8004a00 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80049fa:	2303      	movs	r3, #3
 80049fc:	75fb      	strb	r3, [r7, #23]
            break;
 80049fe:	e021      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	75fb      	strb	r3, [r7, #23]
            break;
 8004a04:	e01e      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004a10:	e018      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d102      	bne.n	8004a1e <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004a18:	2304      	movs	r3, #4
 8004a1a:	75fb      	strb	r3, [r7, #23]
            break;
 8004a1c:	e012      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d102      	bne.n	8004a2a <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004a24:	2304      	movs	r3, #4
 8004a26:	75fb      	strb	r3, [r7, #23]
            break;
 8004a28:	e00c      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d102      	bne.n	8004a36 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004a30:	2304      	movs	r3, #4
 8004a32:	75fb      	strb	r3, [r7, #23]
            break;
 8004a34:	e006      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	75fb      	strb	r3, [r7, #23]
            break;
 8004a3a:	e003      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	75fb      	strb	r3, [r7, #23]
            break;
 8004a40:	e000      	b.n	8004a44 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 8004a42:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8004a44:	2300      	movs	r3, #0
 8004a46:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d16d      	bne.n	8004b2a <ism330dhcx_xl_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8004a4e:	f107 030a 	add.w	r3, r7, #10
 8004a52:	4619      	mov	r1, r3
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fd3f 	bl	80054d8 <ism330dhcx_mlc_get>
 8004a5a:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8004a5c:	7abb      	ldrb	r3, [r7, #10]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d163      	bne.n	8004b2a <ism330dhcx_xl_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8004a62:	f107 0309 	add.w	r3, r7, #9
 8004a66:	4619      	mov	r1, r3
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fd5f 	bl	800552c <ism330dhcx_mlc_data_rate_get>
 8004a6e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d159      	bne.n	8004b2a <ism330dhcx_xl_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8004a76:	7a7b      	ldrb	r3, [r7, #9]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d853      	bhi.n	8004b24 <ism330dhcx_xl_data_rate_set+0x290>
 8004a7c:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <ism330dhcx_xl_data_rate_set+0x1f0>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004a95 	.word	0x08004a95
 8004a88:	08004aa7 	.word	0x08004aa7
 8004a8c:	08004ac5 	.word	0x08004ac5
 8004a90:	08004aef 	.word	0x08004aef
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <ism330dhcx_xl_data_rate_set+0x20c>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004a9e:	e045      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	75fb      	strb	r3, [r7, #23]
            break;
 8004aa4:	e042      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d102      	bne.n	8004ab2 <ism330dhcx_xl_data_rate_set+0x21e>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004aac:	2302      	movs	r3, #2
 8004aae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004ab0:	e03c      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d102      	bne.n	8004abe <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004ab8:	2302      	movs	r3, #2
 8004aba:	75fb      	strb	r3, [r7, #23]
            break;
 8004abc:	e036      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	75fb      	strb	r3, [r7, #23]
            break;
 8004ac2:	e033      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <ism330dhcx_xl_data_rate_set+0x23c>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004aca:	2303      	movs	r3, #3
 8004acc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004ace:	e02d      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d102      	bne.n	8004adc <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	75fb      	strb	r3, [r7, #23]
            break;
 8004ada:	e027      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d102      	bne.n	8004ae8 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	75fb      	strb	r3, [r7, #23]
            break;
 8004ae6:	e021      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	75fb      	strb	r3, [r7, #23]
            break;
 8004aec:	e01e      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d102      	bne.n	8004afa <ism330dhcx_xl_data_rate_set+0x266>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004af4:	2304      	movs	r3, #4
 8004af6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8004af8:	e018      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d102      	bne.n	8004b06 <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004b00:	2304      	movs	r3, #4
 8004b02:	75fb      	strb	r3, [r7, #23]
            break;
 8004b04:	e012      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d102      	bne.n	8004b12 <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	75fb      	strb	r3, [r7, #23]
            break;
 8004b10:	e00c      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d102      	bne.n	8004b1e <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004b18:	2304      	movs	r3, #4
 8004b1a:	75fb      	strb	r3, [r7, #23]
            break;
 8004b1c:	e006      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	75fb      	strb	r3, [r7, #23]
            break;
 8004b22:	e003      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	75fb      	strb	r3, [r7, #23]
            break;
 8004b28:	e000      	b.n	8004b2c <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 8004b2a:	bf00      	nop
    }
  }

  if (ret == 0)
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d107      	bne.n	8004b42 <ism330dhcx_xl_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004b32:	f107 0208 	add.w	r2, r7, #8
 8004b36:	2301      	movs	r3, #1
 8004b38:	2110      	movs	r1, #16
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff fe1c 	bl	8004778 <ism330dhcx_read_reg>
 8004b40:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10f      	bne.n	8004b68 <ism330dhcx_xl_data_rate_set+0x2d4>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8004b48:	7dfb      	ldrb	r3, [r7, #23]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	7a3b      	ldrb	r3, [r7, #8]
 8004b52:	f362 1307 	bfi	r3, r2, #4, #4
 8004b56:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004b58:	f107 0208 	add.w	r2, r7, #8
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	2110      	movs	r1, #16
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff fe21 	bl	80047a8 <ism330dhcx_write_reg>
 8004b66:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004b68:	693b      	ldr	r3, [r7, #16]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop

08004b74 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004b7e:	f107 0208 	add.w	r2, r7, #8
 8004b82:	2301      	movs	r3, #1
 8004b84:	2110      	movs	r1, #16
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fdf6 	bl	8004778 <ism330dhcx_read_reg>
 8004b8c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 8004b8e:	7a3b      	ldrb	r3, [r7, #8]
 8004b90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b0b      	cmp	r3, #11
 8004b98:	d84a      	bhi.n	8004c30 <ism330dhcx_xl_data_rate_get+0xbc>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <ism330dhcx_xl_data_rate_get+0x2c>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bd1 	.word	0x08004bd1
 8004ba4:	08004bd9 	.word	0x08004bd9
 8004ba8:	08004be1 	.word	0x08004be1
 8004bac:	08004be9 	.word	0x08004be9
 8004bb0:	08004bf1 	.word	0x08004bf1
 8004bb4:	08004bf9 	.word	0x08004bf9
 8004bb8:	08004c01 	.word	0x08004c01
 8004bbc:	08004c09 	.word	0x08004c09
 8004bc0:	08004c11 	.word	0x08004c11
 8004bc4:	08004c19 	.word	0x08004c19
 8004bc8:	08004c21 	.word	0x08004c21
 8004bcc:	08004c29 	.word	0x08004c29
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
      break;
 8004bd6:	e02f      	b.n	8004c38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	701a      	strb	r2, [r3, #0]
      break;
 8004bde:	e02b      	b.n	8004c38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2202      	movs	r2, #2
 8004be4:	701a      	strb	r2, [r3, #0]
      break;
 8004be6:	e027      	b.n	8004c38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2203      	movs	r2, #3
 8004bec:	701a      	strb	r2, [r3, #0]
      break;
 8004bee:	e023      	b.n	8004c38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	701a      	strb	r2, [r3, #0]
      break;
 8004bf6:	e01f      	b.n	8004c38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2205      	movs	r2, #5
 8004bfc:	701a      	strb	r2, [r3, #0]
      break;
 8004bfe:	e01b      	b.n	8004c38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_416Hz:
      *val = ISM330DHCX_XL_ODR_416Hz;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2206      	movs	r2, #6
 8004c04:	701a      	strb	r2, [r3, #0]
      break;
 8004c06:	e017      	b.n	8004c38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2207      	movs	r2, #7
 8004c0c:	701a      	strb	r2, [r3, #0]
      break;
 8004c0e:	e013      	b.n	8004c38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1666Hz:
      *val = ISM330DHCX_XL_ODR_1666Hz;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2208      	movs	r2, #8
 8004c14:	701a      	strb	r2, [r3, #0]
      break;
 8004c16:	e00f      	b.n	8004c38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3332Hz:
      *val = ISM330DHCX_XL_ODR_3332Hz;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2209      	movs	r2, #9
 8004c1c:	701a      	strb	r2, [r3, #0]
      break;
 8004c1e:	e00b      	b.n	8004c38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	220a      	movs	r2, #10
 8004c24:	701a      	strb	r2, [r3, #0]
      break;
 8004c26:	e007      	b.n	8004c38 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1Hz6:
      *val = ISM330DHCX_XL_ODR_1Hz6;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	220b      	movs	r2, #11
 8004c2c:	701a      	strb	r2, [r3, #0]
      break;
 8004c2e:	e003      	b.n	8004c38 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
      break;
 8004c36:	bf00      	nop
  }

  return ret;
 8004c38:	68fb      	ldr	r3, [r7, #12]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop

08004c44 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004c50:	f107 0208 	add.w	r2, r7, #8
 8004c54:	2301      	movs	r3, #1
 8004c56:	2111      	movs	r1, #17
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff fd8d 	bl	8004778 <ism330dhcx_read_reg>
 8004c5e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10f      	bne.n	8004c86 <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	7a3b      	ldrb	r3, [r7, #8]
 8004c70:	f362 0303 	bfi	r3, r2, #0, #4
 8004c74:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8004c76:	f107 0208 	add.w	r2, r7, #8
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	2111      	movs	r1, #17
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff fd92 	bl	80047a8 <ism330dhcx_write_reg>
 8004c84:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8004c86:	68fb      	ldr	r3, [r7, #12]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004c9a:	f107 0208 	add.w	r2, r7, #8
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	2111      	movs	r1, #17
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff fd68 	bl	8004778 <ism330dhcx_read_reg>
 8004ca8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 8004caa:	7a3b      	ldrb	r3, [r7, #8]
 8004cac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b0c      	cmp	r3, #12
 8004cb4:	d834      	bhi.n	8004d20 <ism330dhcx_gy_full_scale_get+0x90>
 8004cb6:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <ism330dhcx_gy_full_scale_get+0x2c>)
 8004cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbc:	08004cf9 	.word	0x08004cf9
 8004cc0:	08004d19 	.word	0x08004d19
 8004cc4:	08004cf1 	.word	0x08004cf1
 8004cc8:	08004d21 	.word	0x08004d21
 8004ccc:	08004d01 	.word	0x08004d01
 8004cd0:	08004d21 	.word	0x08004d21
 8004cd4:	08004d21 	.word	0x08004d21
 8004cd8:	08004d21 	.word	0x08004d21
 8004cdc:	08004d09 	.word	0x08004d09
 8004ce0:	08004d21 	.word	0x08004d21
 8004ce4:	08004d21 	.word	0x08004d21
 8004ce8:	08004d21 	.word	0x08004d21
 8004cec:	08004d11 	.word	0x08004d11
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	701a      	strb	r2, [r3, #0]
      break;
 8004cf6:	e017      	b.n	8004d28 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
      break;
 8004cfe:	e013      	b.n	8004d28 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2204      	movs	r2, #4
 8004d04:	701a      	strb	r2, [r3, #0]
      break;
 8004d06:	e00f      	b.n	8004d28 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	701a      	strb	r2, [r3, #0]
      break;
 8004d0e:	e00b      	b.n	8004d28 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	220c      	movs	r2, #12
 8004d14:	701a      	strb	r2, [r3, #0]
      break;
 8004d16:	e007      	b.n	8004d28 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
      break;
 8004d1e:	e003      	b.n	8004d28 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2202      	movs	r2, #2
 8004d24:	701a      	strb	r2, [r3, #0]
      break;
 8004d26:	bf00      	nop
  }

  return ret;
 8004d28:	68fb      	ldr	r3, [r7, #12]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop

08004d34 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8004d44:	f107 030c 	add.w	r3, r7, #12
 8004d48:	4619      	mov	r1, r3
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fb4f 	bl	80053ee <ism330dhcx_fsm_enable_get>
 8004d50:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f040 80c4 	bne.w	8004ee2 <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004d5a:	7b3b      	ldrb	r3, [r7, #12]
 8004d5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004d62:	7b3b      	ldrb	r3, [r7, #12]
 8004d64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004d68:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004d6e:	7b3b      	ldrb	r3, [r7, #12]
 8004d70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004d74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004d76:	4313      	orrs	r3, r2
 8004d78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004d7a:	7b3b      	ldrb	r3, [r7, #12]
 8004d7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004d80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004d82:	4313      	orrs	r3, r2
 8004d84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004d86:	7b3b      	ldrb	r3, [r7, #12]
 8004d88:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004d8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004d92:	7b3b      	ldrb	r3, [r7, #12]
 8004d94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004d98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004d9e:	7b3b      	ldrb	r3, [r7, #12]
 8004da0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004da4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004da6:	4313      	orrs	r3, r2
 8004da8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004daa:	7b3b      	ldrb	r3, [r7, #12]
 8004dac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004db0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004db2:	4313      	orrs	r3, r2
 8004db4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004db6:	7b7b      	ldrb	r3, [r7, #13]
 8004db8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004dbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004dc2:	7b7b      	ldrb	r3, [r7, #13]
 8004dc4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004dc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004dce:	7b7b      	ldrb	r3, [r7, #13]
 8004dd0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004dd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004dda:	7b7b      	ldrb	r3, [r7, #13]
 8004ddc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004de0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8004de2:	4313      	orrs	r3, r2
 8004de4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004de6:	7b7b      	ldrb	r3, [r7, #13]
 8004de8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004dec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8004dee:	4313      	orrs	r3, r2
 8004df0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004df2:	7b7b      	ldrb	r3, [r7, #13]
 8004df4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004df8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004dfe:	7b7b      	ldrb	r3, [r7, #13]
 8004e00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004e04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8004e06:	4313      	orrs	r3, r2
 8004e08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004e0a:	7b7b      	ldrb	r3, [r7, #13]
 8004e0c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004e10:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8004e12:	4313      	orrs	r3, r2
 8004e14:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d163      	bne.n	8004ee2 <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8004e1a:	f107 030b 	add.w	r3, r7, #11
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fb11 	bl	8005448 <ism330dhcx_fsm_data_rate_get>
 8004e26:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d159      	bne.n	8004ee2 <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8004e2e:	7afb      	ldrb	r3, [r7, #11]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d853      	bhi.n	8004edc <ism330dhcx_gy_data_rate_set+0x1a8>
 8004e34:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <ism330dhcx_gy_data_rate_set+0x108>)
 8004e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3a:	bf00      	nop
 8004e3c:	08004e4d 	.word	0x08004e4d
 8004e40:	08004e5f 	.word	0x08004e5f
 8004e44:	08004e7d 	.word	0x08004e7d
 8004e48:	08004ea7 	.word	0x08004ea7
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8004e52:	2301      	movs	r3, #1
 8004e54:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004e56:	e045      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	75fb      	strb	r3, [r7, #23]
            break;
 8004e5c:	e042      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d102      	bne.n	8004e6a <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004e64:	2302      	movs	r3, #2
 8004e66:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004e68:	e03c      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d102      	bne.n	8004e76 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004e70:	2302      	movs	r3, #2
 8004e72:	75fb      	strb	r3, [r7, #23]
            break;
 8004e74:	e036      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	75fb      	strb	r3, [r7, #23]
            break;
 8004e7a:	e033      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d102      	bne.n	8004e88 <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004e82:	2303      	movs	r3, #3
 8004e84:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004e86:	e02d      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d102      	bne.n	8004e94 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	75fb      	strb	r3, [r7, #23]
            break;
 8004e92:	e027      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d102      	bne.n	8004ea0 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	75fb      	strb	r3, [r7, #23]
            break;
 8004e9e:	e021      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	75fb      	strb	r3, [r7, #23]
            break;
 8004ea4:	e01e      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004eac:	2304      	movs	r3, #4
 8004eae:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004eb0:	e018      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8004eb2:	78fb      	ldrb	r3, [r7, #3]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d102      	bne.n	8004ebe <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004eb8:	2304      	movs	r3, #4
 8004eba:	75fb      	strb	r3, [r7, #23]
            break;
 8004ebc:	e012      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8004ebe:	78fb      	ldrb	r3, [r7, #3]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d102      	bne.n	8004eca <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	75fb      	strb	r3, [r7, #23]
            break;
 8004ec8:	e00c      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8004eca:	78fb      	ldrb	r3, [r7, #3]
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d102      	bne.n	8004ed6 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	75fb      	strb	r3, [r7, #23]
            break;
 8004ed4:	e006      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	75fb      	strb	r3, [r7, #23]
            break;
 8004eda:	e003      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	75fb      	strb	r3, [r7, #23]
            break;
 8004ee0:	e000      	b.n	8004ee4 <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 8004ee2:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d16d      	bne.n	8004fca <ism330dhcx_gy_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8004eee:	f107 030a 	add.w	r3, r7, #10
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 faef 	bl	80054d8 <ism330dhcx_mlc_get>
 8004efa:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8004efc:	7abb      	ldrb	r3, [r7, #10]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d163      	bne.n	8004fca <ism330dhcx_gy_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8004f02:	f107 0309 	add.w	r3, r7, #9
 8004f06:	4619      	mov	r1, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fb0f 	bl	800552c <ism330dhcx_mlc_data_rate_get>
 8004f0e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d159      	bne.n	8004fca <ism330dhcx_gy_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8004f16:	7a7b      	ldrb	r3, [r7, #9]
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d853      	bhi.n	8004fc4 <ism330dhcx_gy_data_rate_set+0x290>
 8004f1c:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <ism330dhcx_gy_data_rate_set+0x1f0>)
 8004f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f22:	bf00      	nop
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f47 	.word	0x08004f47
 8004f2c:	08004f65 	.word	0x08004f65
 8004f30:	08004f8f 	.word	0x08004f8f
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <ism330dhcx_gy_data_rate_set+0x20c>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004f3e:	e045      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	75fb      	strb	r3, [r7, #23]
            break;
 8004f44:	e042      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <ism330dhcx_gy_data_rate_set+0x21e>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004f50:	e03c      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d102      	bne.n	8004f5e <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	75fb      	strb	r3, [r7, #23]
            break;
 8004f5c:	e036      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	75fb      	strb	r3, [r7, #23]
            break;
 8004f62:	e033      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d102      	bne.n	8004f70 <ism330dhcx_gy_data_rate_set+0x23c>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004f6e:	e02d      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8004f70:	78fb      	ldrb	r3, [r7, #3]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d102      	bne.n	8004f7c <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004f76:	2303      	movs	r3, #3
 8004f78:	75fb      	strb	r3, [r7, #23]
            break;
 8004f7a:	e027      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d102      	bne.n	8004f88 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004f82:	2303      	movs	r3, #3
 8004f84:	75fb      	strb	r3, [r7, #23]
            break;
 8004f86:	e021      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	75fb      	strb	r3, [r7, #23]
            break;
 8004f8c:	e01e      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <ism330dhcx_gy_data_rate_set+0x266>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004f94:	2304      	movs	r3, #4
 8004f96:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8004f98:	e018      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d102      	bne.n	8004fa6 <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	75fb      	strb	r3, [r7, #23]
            break;
 8004fa4:	e012      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8004fa6:	78fb      	ldrb	r3, [r7, #3]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d102      	bne.n	8004fb2 <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004fac:	2304      	movs	r3, #4
 8004fae:	75fb      	strb	r3, [r7, #23]
            break;
 8004fb0:	e00c      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d102      	bne.n	8004fbe <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004fb8:	2304      	movs	r3, #4
 8004fba:	75fb      	strb	r3, [r7, #23]
            break;
 8004fbc:	e006      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8004fbe:	78fb      	ldrb	r3, [r7, #3]
 8004fc0:	75fb      	strb	r3, [r7, #23]
            break;
 8004fc2:	e003      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	75fb      	strb	r3, [r7, #23]
            break;
 8004fc8:	e000      	b.n	8004fcc <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8004fca:	bf00      	nop
    }
  }

  if (ret == 0)
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d107      	bne.n	8004fe2 <ism330dhcx_gy_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004fd2:	f107 0208 	add.w	r2, r7, #8
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	2111      	movs	r1, #17
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff fbcc 	bl	8004778 <ism330dhcx_read_reg>
 8004fe0:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10f      	bne.n	8005008 <ism330dhcx_gy_data_rate_set+0x2d4>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	7a3b      	ldrb	r3, [r7, #8]
 8004ff2:	f362 1307 	bfi	r3, r2, #4, #4
 8004ff6:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8004ff8:	f107 0208 	add.w	r2, r7, #8
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	2111      	movs	r1, #17
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff fbd1 	bl	80047a8 <ism330dhcx_write_reg>
 8005006:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8005008:	693b      	ldr	r3, [r7, #16]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop

08005014 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800501e:	f107 0208 	add.w	r2, r7, #8
 8005022:	2301      	movs	r3, #1
 8005024:	2111      	movs	r1, #17
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff fba6 	bl	8004778 <ism330dhcx_read_reg>
 800502c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 800502e:	7a3b      	ldrb	r3, [r7, #8]
 8005030:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b0a      	cmp	r3, #10
 8005038:	d844      	bhi.n	80050c4 <ism330dhcx_gy_data_rate_get+0xb0>
 800503a:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <ism330dhcx_gy_data_rate_get+0x2c>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	0800506d 	.word	0x0800506d
 8005044:	08005075 	.word	0x08005075
 8005048:	0800507d 	.word	0x0800507d
 800504c:	08005085 	.word	0x08005085
 8005050:	0800508d 	.word	0x0800508d
 8005054:	08005095 	.word	0x08005095
 8005058:	0800509d 	.word	0x0800509d
 800505c:	080050a5 	.word	0x080050a5
 8005060:	080050ad 	.word	0x080050ad
 8005064:	080050b5 	.word	0x080050b5
 8005068:	080050bd 	.word	0x080050bd
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	701a      	strb	r2, [r3, #0]
      break;
 8005072:	e02b      	b.n	80050cc <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2201      	movs	r2, #1
 8005078:	701a      	strb	r2, [r3, #0]
      break;
 800507a:	e027      	b.n	80050cc <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2202      	movs	r2, #2
 8005080:	701a      	strb	r2, [r3, #0]
      break;
 8005082:	e023      	b.n	80050cc <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2203      	movs	r2, #3
 8005088:	701a      	strb	r2, [r3, #0]
      break;
 800508a:	e01f      	b.n	80050cc <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2204      	movs	r2, #4
 8005090:	701a      	strb	r2, [r3, #0]
      break;
 8005092:	e01b      	b.n	80050cc <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2205      	movs	r2, #5
 8005098:	701a      	strb	r2, [r3, #0]
      break;
 800509a:	e017      	b.n	80050cc <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_416Hz:
      *val = ISM330DHCX_GY_ODR_416Hz;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2206      	movs	r2, #6
 80050a0:	701a      	strb	r2, [r3, #0]
      break;
 80050a2:	e013      	b.n	80050cc <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2207      	movs	r2, #7
 80050a8:	701a      	strb	r2, [r3, #0]
      break;
 80050aa:	e00f      	b.n	80050cc <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1666Hz:
      *val = ISM330DHCX_GY_ODR_1666Hz;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2208      	movs	r2, #8
 80050b0:	701a      	strb	r2, [r3, #0]
      break;
 80050b2:	e00b      	b.n	80050cc <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3332Hz:
      *val = ISM330DHCX_GY_ODR_3332Hz;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2209      	movs	r2, #9
 80050b8:	701a      	strb	r2, [r3, #0]
      break;
 80050ba:	e007      	b.n	80050cc <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	220a      	movs	r2, #10
 80050c0:	701a      	strb	r2, [r3, #0]
      break;
 80050c2:	e003      	b.n	80050cc <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	2200      	movs	r2, #0
 80050c8:	701a      	strb	r2, [r3, #0]
      break;
 80050ca:	bf00      	nop
  }

  return ret;
 80050cc:	68fb      	ldr	r3, [r7, #12]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop

080050d8 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80050e4:	f107 0208 	add.w	r2, r7, #8
 80050e8:	2301      	movs	r3, #1
 80050ea:	2112      	movs	r1, #18
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fb43 	bl	8004778 <ism330dhcx_read_reg>
 80050f2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10f      	bne.n	800511a <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 80050fa:	78fb      	ldrb	r3, [r7, #3]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	b2da      	uxtb	r2, r3
 8005102:	7a3b      	ldrb	r3, [r7, #8]
 8005104:	f362 1386 	bfi	r3, r2, #6, #1
 8005108:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800510a:	f107 0208 	add.w	r2, r7, #8
 800510e:	2301      	movs	r3, #1
 8005110:	2112      	movs	r1, #18
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff fb48 	bl	80047a8 <ism330dhcx_write_reg>
 8005118:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800511a:	68fb      	ldr	r3, [r7, #12]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 800512e:	f107 020c 	add.w	r2, r7, #12
 8005132:	2306      	movs	r3, #6
 8005134:	2122      	movs	r1, #34	; 0x22
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff fb1e 	bl	8004778 <ism330dhcx_read_reg>
 800513c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800513e:	7b7b      	ldrb	r3, [r7, #13]
 8005140:	b21a      	sxth	r2, r3
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800514c:	b29b      	uxth	r3, r3
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	b29a      	uxth	r2, r3
 8005152:	7b3b      	ldrb	r3, [r7, #12]
 8005154:	b29b      	uxth	r3, r3
 8005156:	4413      	add	r3, r2
 8005158:	b29b      	uxth	r3, r3
 800515a:	b21a      	sxth	r2, r3
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005160:	7bfa      	ldrb	r2, [r7, #15]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	3302      	adds	r3, #2
 8005166:	b212      	sxth	r2, r2
 8005168:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	3302      	adds	r3, #2
 800516e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005172:	b29b      	uxth	r3, r3
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	b29a      	uxth	r2, r3
 8005178:	7bbb      	ldrb	r3, [r7, #14]
 800517a:	b29b      	uxth	r3, r3
 800517c:	4413      	add	r3, r2
 800517e:	b29a      	uxth	r2, r3
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	3302      	adds	r3, #2
 8005184:	b212      	sxth	r2, r2
 8005186:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005188:	7c7a      	ldrb	r2, [r7, #17]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	3304      	adds	r3, #4
 800518e:	b212      	sxth	r2, r2
 8005190:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	3304      	adds	r3, #4
 8005196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800519a:	b29b      	uxth	r3, r3
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	b29a      	uxth	r2, r3
 80051a0:	7c3b      	ldrb	r3, [r7, #16]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	4413      	add	r3, r2
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	3304      	adds	r3, #4
 80051ac:	b212      	sxth	r2, r2
 80051ae:	801a      	strh	r2, [r3, #0]

  return ret;
 80051b0:	697b      	ldr	r3, [r7, #20]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b086      	sub	sp, #24
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 80051c4:	f107 020c 	add.w	r2, r7, #12
 80051c8:	2306      	movs	r3, #6
 80051ca:	2128      	movs	r1, #40	; 0x28
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff fad3 	bl	8004778 <ism330dhcx_read_reg>
 80051d2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80051d4:	7b7b      	ldrb	r3, [r7, #13]
 80051d6:	b21a      	sxth	r2, r3
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	7b3b      	ldrb	r3, [r7, #12]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	4413      	add	r3, r2
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	b21a      	sxth	r2, r3
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80051f6:	7bfa      	ldrb	r2, [r7, #15]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	3302      	adds	r3, #2
 80051fc:	b212      	sxth	r2, r2
 80051fe:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	3302      	adds	r3, #2
 8005204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005208:	b29b      	uxth	r3, r3
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	b29a      	uxth	r2, r3
 800520e:	7bbb      	ldrb	r3, [r7, #14]
 8005210:	b29b      	uxth	r3, r3
 8005212:	4413      	add	r3, r2
 8005214:	b29a      	uxth	r2, r3
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	3302      	adds	r3, #2
 800521a:	b212      	sxth	r2, r2
 800521c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800521e:	7c7a      	ldrb	r2, [r7, #17]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	3304      	adds	r3, #4
 8005224:	b212      	sxth	r2, r2
 8005226:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	3304      	adds	r3, #4
 800522c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005230:	b29b      	uxth	r3, r3
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	b29a      	uxth	r2, r3
 8005236:	7c3b      	ldrb	r3, [r7, #16]
 8005238:	b29b      	uxth	r3, r3
 800523a:	4413      	add	r3, r2
 800523c:	b29a      	uxth	r2, r3
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	3304      	adds	r3, #4
 8005242:	b212      	sxth	r2, r2
 8005244:	801a      	strh	r2, [r3, #0]

  return ret;
 8005246:	697b      	ldr	r3, [r7, #20]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 800525c:	f107 0208 	add.w	r2, r7, #8
 8005260:	2301      	movs	r3, #1
 8005262:	2118      	movs	r1, #24
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff fa87 	bl	8004778 <ism330dhcx_read_reg>
 800526a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	b2da      	uxtb	r2, r3
 800527a:	7a3b      	ldrb	r3, [r7, #8]
 800527c:	f362 0341 	bfi	r3, r2, #1, #1
 8005280:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 8005282:	f107 0208 	add.w	r2, r7, #8
 8005286:	2301      	movs	r3, #1
 8005288:	2118      	movs	r1, #24
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff fa8c 	bl	80047a8 <ism330dhcx_write_reg>
 8005290:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 8005292:	68fb      	ldr	r3, [r7, #12]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	460b      	mov	r3, r1
 80052a6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80052a8:	f107 0208 	add.w	r2, r7, #8
 80052ac:	2301      	movs	r3, #1
 80052ae:	2101      	movs	r1, #1
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff fa61 	bl	8004778 <ism330dhcx_read_reg>
 80052b6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10f      	bne.n	80052de <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	7a3b      	ldrb	r3, [r7, #8]
 80052c8:	f362 1387 	bfi	r3, r2, #6, #2
 80052cc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80052ce:	f107 0208 	add.w	r2, r7, #8
 80052d2:	2301      	movs	r3, #1
 80052d4:	2101      	movs	r1, #1
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff fa66 	bl	80047a8 <ism330dhcx_write_reg>
 80052dc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80052de:	68fb      	ldr	r3, [r7, #12]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 80052f2:	2301      	movs	r3, #1
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	210f      	movs	r1, #15
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff fa3d 	bl	8004778 <ism330dhcx_read_reg>
 80052fe:	60f8      	str	r0, [r7, #12]

  return ret;
 8005300:	68fb      	ldr	r3, [r7, #12]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	460b      	mov	r3, r1
 8005314:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005316:	f107 0208 	add.w	r2, r7, #8
 800531a:	2301      	movs	r3, #1
 800531c:	2112      	movs	r1, #18
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff fa2a 	bl	8004778 <ism330dhcx_read_reg>
 8005324:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10f      	bne.n	800534c <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	b2da      	uxtb	r2, r3
 8005334:	7a3b      	ldrb	r3, [r7, #8]
 8005336:	f362 0300 	bfi	r3, r2, #0, #1
 800533a:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800533c:	f107 0208 	add.w	r2, r7, #8
 8005340:	2301      	movs	r3, #1
 8005342:	2112      	movs	r1, #18
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff fa2f 	bl	80047a8 <ism330dhcx_write_reg>
 800534a:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800534c:	68fb      	ldr	r3, [r7, #12]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005362:	f107 0208 	add.w	r2, r7, #8
 8005366:	2301      	movs	r3, #1
 8005368:	2112      	movs	r1, #18
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff fa04 	bl	8004778 <ism330dhcx_read_reg>
 8005370:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10f      	bne.n	8005398 <ism330dhcx_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = (uint8_t)val;
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	b2da      	uxtb	r2, r3
 8005380:	7a3b      	ldrb	r3, [r7, #8]
 8005382:	f362 0382 	bfi	r3, r2, #2, #1
 8005386:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005388:	f107 0208 	add.w	r2, r7, #8
 800538c:	2301      	movs	r3, #1
 800538e:	2112      	movs	r1, #18
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fa09 	bl	80047a8 <ism330dhcx_write_reg>
 8005396:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8005398:	68fb      	ldr	r3, [r7, #12]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	460b      	mov	r3, r1
 80053ac:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80053ae:	f107 0208 	add.w	r2, r7, #8
 80053b2:	2301      	movs	r3, #1
 80053b4:	210a      	movs	r1, #10
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff f9de 	bl	8004778 <ism330dhcx_read_reg>
 80053bc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10f      	bne.n	80053e4 <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	7a3b      	ldrb	r3, [r7, #8]
 80053ce:	f362 0302 	bfi	r3, r2, #0, #3
 80053d2:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80053d4:	f107 0208 	add.w	r2, r7, #8
 80053d8:	2301      	movs	r3, #1
 80053da:	210a      	movs	r1, #10
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff f9e3 	bl	80047a8 <ism330dhcx_write_reg>
 80053e2:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 80053e4:	68fb      	ldr	r3, [r7, #12]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80053f8:	2102      	movs	r1, #2
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff ff4e 	bl	800529c <ism330dhcx_mem_bank_set>
 8005400:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 8005408:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 800540a:	2301      	movs	r3, #1
 800540c:	2146      	movs	r1, #70	; 0x46
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff f9b2 	bl	8004778 <ism330dhcx_read_reg>
 8005414:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d107      	bne.n	800542c <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8005420:	2301      	movs	r3, #1
 8005422:	2147      	movs	r1, #71	; 0x47
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7ff f9a7 	bl	8004778 <ism330dhcx_read_reg>
 800542a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005432:	2100      	movs	r1, #0
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff ff31 	bl	800529c <ism330dhcx_mem_bank_set>
 800543a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800543c:	68fb      	ldr	r3, [r7, #12]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005452:	2102      	movs	r1, #2
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff ff21 	bl	800529c <ism330dhcx_mem_bank_set>
 800545a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d107      	bne.n	8005472 <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8005462:	f107 0208 	add.w	r2, r7, #8
 8005466:	2301      	movs	r3, #1
 8005468:	215f      	movs	r1, #95	; 0x5f
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff f984 	bl	8004778 <ism330dhcx_read_reg>
 8005470:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d104      	bne.n	8005482 <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005478:	2100      	movs	r1, #0
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff ff0e 	bl	800529c <ism330dhcx_mem_bank_set>
 8005480:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8005482:	7a3b      	ldrb	r3, [r7, #8]
 8005484:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b03      	cmp	r3, #3
 800548c:	d81a      	bhi.n	80054c4 <ism330dhcx_fsm_data_rate_get+0x7c>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054a5 	.word	0x080054a5
 8005498:	080054ad 	.word	0x080054ad
 800549c:	080054b5 	.word	0x080054b5
 80054a0:	080054bd 	.word	0x080054bd
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
      break;
 80054aa:	e00f      	b.n	80054cc <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2201      	movs	r2, #1
 80054b0:	701a      	strb	r2, [r3, #0]
      break;
 80054b2:	e00b      	b.n	80054cc <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2202      	movs	r2, #2
 80054b8:	701a      	strb	r2, [r3, #0]
      break;
 80054ba:	e007      	b.n	80054cc <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2203      	movs	r2, #3
 80054c0:	701a      	strb	r2, [r3, #0]
      break;
 80054c2:	e003      	b.n	80054cc <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2200      	movs	r2, #0
 80054c8:	701a      	strb	r2, [r3, #0]
      break;
 80054ca:	bf00      	nop
  }

  return ret;
 80054cc:	68fb      	ldr	r3, [r7, #12]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop

080054d8 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80054e2:	2102      	movs	r1, #2
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff fed9 	bl	800529c <ism330dhcx_mem_bank_set>
 80054ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d107      	bne.n	8005502 <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80054f2:	f107 0208 	add.w	r2, r7, #8
 80054f6:	2301      	movs	r3, #1
 80054f8:	2105      	movs	r1, #5
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff f93c 	bl	8004778 <ism330dhcx_read_reg>
 8005500:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10b      	bne.n	8005520 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005508:	2100      	movs	r1, #0
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff fec6 	bl	800529c <ism330dhcx_mem_bank_set>
 8005510:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8005512:	7a3b      	ldrb	r3, [r7, #8]
 8005514:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005518:	b2db      	uxtb	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005520:	68fb      	ldr	r3, [r7, #12]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005536:	2102      	movs	r1, #2
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff feaf 	bl	800529c <ism330dhcx_mem_bank_set>
 800553e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d107      	bne.n	8005556 <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8005546:	f107 0208 	add.w	r2, r7, #8
 800554a:	2301      	movs	r3, #1
 800554c:	2160      	movs	r1, #96	; 0x60
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff f912 	bl	8004778 <ism330dhcx_read_reg>
 8005554:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d12a      	bne.n	80055b2 <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 800555c:	7a3b      	ldrb	r3, [r7, #8]
 800555e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b03      	cmp	r3, #3
 8005566:	d81b      	bhi.n	80055a0 <ism330dhcx_mlc_data_rate_get+0x74>
 8005568:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <ism330dhcx_mlc_data_rate_get+0x44>)
 800556a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556e:	bf00      	nop
 8005570:	08005581 	.word	0x08005581
 8005574:	08005589 	.word	0x08005589
 8005578:	08005591 	.word	0x08005591
 800557c:	08005599 	.word	0x08005599
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
        break;
 8005586:	e00f      	b.n	80055a8 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
        break;
 800558e:	e00b      	b.n	80055a8 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2202      	movs	r2, #2
 8005594:	701a      	strb	r2, [r3, #0]
        break;
 8005596:	e007      	b.n	80055a8 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2203      	movs	r2, #3
 800559c:	701a      	strb	r2, [r3, #0]
        break;
 800559e:	e003      	b.n	80055a8 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
        break;
 80055a6:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80055a8:	2100      	movs	r1, #0
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff fe76 	bl	800529c <ism330dhcx_mem_bank_set>
 80055b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055b2:	68fb      	ldr	r3, [r7, #12]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <IKS02A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS02A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08e      	sub	sp, #56	; 0x38
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80055ca:	2301      	movs	r3, #1
 80055cc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS02A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d06e      	beq.n	80056b6 <IKS02A1_MOTION_SENSOR_Init+0xfa>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	f200 809d 	bhi.w	800571a <IKS02A1_MOTION_SENSOR_Init+0x15e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <IKS02A1_MOTION_SENSOR_Init+0x32>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d032      	beq.n	8005652 <IKS02A1_MOTION_SENSOR_Init+0x96>
 80055ec:	e095      	b.n	800571a <IKS02A1_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS02A1_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case IKS02A1_ISM330DHCX_0:
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 80055ee:	6838      	ldr	r0, [r7, #0]
 80055f0:	f000 f8e0 	bl	80057b4 <ISM330DHCX_0_Probe>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <IKS02A1_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80055fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055fe:	e0cc      	b.n	800579a <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005600:	4a68      	ldr	r2, [pc, #416]	; (80057a4 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	4967      	ldr	r1, [pc, #412]	; (80057a8 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005612:	f107 010c 	add.w	r1, r7, #12
 8005616:	4610      	mov	r0, r2
 8005618:	4798      	blx	r3
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <IKS02A1_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005620:	f06f 0306 	mvn.w	r3, #6
 8005624:	e0b9      	b.n	800579a <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005626:	7b3b      	ldrb	r3, [r7, #12]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d103      	bne.n	8005634 <IKS02A1_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800562c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562e:	f043 0302 	orr.w	r3, r3, #2
 8005632:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005634:	7b7b      	ldrb	r3, [r7, #13]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d103      	bne.n	8005642 <IKS02A1_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	f043 0301 	orr.w	r3, r3, #1
 8005640:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005642:	7bbb      	ldrb	r3, [r7, #14]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d16c      	bne.n	8005722 <IKS02A1_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	f043 0304 	orr.w	r3, r3, #4
 800564e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005650:	e067      	b.n	8005722 <IKS02A1_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS02A1_MOTION_SENSOR_IIS2DLPC_0 == 1)
    case IKS02A1_IIS2DLPC_0:
      if (IIS2DLPC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005652:	6838      	ldr	r0, [r7, #0]
 8005654:	f000 f96e 	bl	8005934 <IIS2DLPC_0_Probe>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <IKS02A1_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800565e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005662:	e09a      	b.n	800579a <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005664:	4a4f      	ldr	r2, [pc, #316]	; (80057a4 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	494e      	ldr	r1, [pc, #312]	; (80057a8 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005676:	f107 010c 	add.w	r1, r7, #12
 800567a:	4610      	mov	r0, r2
 800567c:	4798      	blx	r3
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <IKS02A1_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005684:	f06f 0306 	mvn.w	r3, #6
 8005688:	e087      	b.n	800579a <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800568a:	7b3b      	ldrb	r3, [r7, #12]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d103      	bne.n	8005698 <IKS02A1_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	f043 0302 	orr.w	r3, r3, #2
 8005696:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005698:	7b7b      	ldrb	r3, [r7, #13]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d103      	bne.n	80056a6 <IKS02A1_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	f043 0301 	orr.w	r3, r3, #1
 80056a4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80056a6:	7bbb      	ldrb	r3, [r7, #14]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d13c      	bne.n	8005726 <IKS02A1_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	f043 0304 	orr.w	r3, r3, #4
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80056b4:	e037      	b.n	8005726 <IKS02A1_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS02A1_MOTION_SENSOR_IIS2MDC_0 == 1)
    case IKS02A1_IIS2MDC_0:
      if (IIS2MDC_0_Probe(Functions) != BSP_ERROR_NONE)
 80056b6:	6838      	ldr	r0, [r7, #0]
 80056b8:	f000 f9e8 	bl	8005a8c <IIS2MDC_0_Probe>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <IKS02A1_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056c6:	e068      	b.n	800579a <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80056c8:	4a36      	ldr	r2, [pc, #216]	; (80057a4 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	4935      	ldr	r1, [pc, #212]	; (80057a8 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80056da:	f107 010c 	add.w	r1, r7, #12
 80056de:	4610      	mov	r0, r2
 80056e0:	4798      	blx	r3
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <IKS02A1_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80056e8:	f06f 0306 	mvn.w	r3, #6
 80056ec:	e055      	b.n	800579a <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80056ee:	7b3b      	ldrb	r3, [r7, #12]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d103      	bne.n	80056fc <IKS02A1_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	f043 0302 	orr.w	r3, r3, #2
 80056fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80056fc:	7b7b      	ldrb	r3, [r7, #13]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d103      	bne.n	800570a <IKS02A1_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800570a:	7bbb      	ldrb	r3, [r7, #14]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d10c      	bne.n	800572a <IKS02A1_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	f043 0304 	orr.w	r3, r3, #4
 8005716:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005718:	e007      	b.n	800572a <IKS02A1_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800571a:	f06f 0301 	mvn.w	r3, #1
 800571e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005720:	e004      	b.n	800572c <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 8005722:	bf00      	nop
 8005724:	e002      	b.n	800572c <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 800572a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800572c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <IKS02A1_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8005732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005734:	e031      	b.n	800579a <IKS02A1_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 8005736:	2300      	movs	r3, #0
 8005738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800573a:	e02a      	b.n	8005792 <IKS02A1_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	4013      	ands	r3, r2
 8005742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005744:	429a      	cmp	r2, r3
 8005746:	d11e      	bne.n	8005786 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
 8005748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	4013      	ands	r3, r2
 800574e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005750:	429a      	cmp	r2, r3
 8005752:	d118      	bne.n	8005786 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005754:	4a15      	ldr	r2, [pc, #84]	; (80057ac <IKS02A1_MOTION_SENSOR_Init+0x1f0>)
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800575c:	4814      	ldr	r0, [pc, #80]	; (80057b0 <IKS02A1_MOTION_SENSOR_Init+0x1f4>)
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	4413      	add	r3, r2
 8005766:	440b      	add	r3, r1
 8005768:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	490e      	ldr	r1, [pc, #56]	; (80057a8 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005776:	4610      	mov	r0, r2
 8005778:	4798      	blx	r3
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005780:	f06f 0304 	mvn.w	r3, #4
 8005784:	e009      	b.n	800579a <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	3301      	adds	r3, #1
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	2b02      	cmp	r3, #2
 8005796:	d9d1      	bls.n	800573c <IKS02A1_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800579a:	4618      	mov	r0, r3
 800579c:	3738      	adds	r7, #56	; 0x38
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200367e4 	.word	0x200367e4
 80057a8:	200367b4 	.word	0x200367b4
 80057ac:	200004c4 	.word	0x200004c4
 80057b0:	200367c0 	.word	0x200367c0

080057b4 <ISM330DHCX_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b094      	sub	sp, #80	; 0x50
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t            io_ctx;
  uint8_t                    id;
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80057bc:	2300      	movs	r3, #0
 80057be:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = ISM330DHCX_I2C_BUS; /* I2C */
 80057c0:	2300      	movs	r3, #0
 80057c2:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = ACC_ADDRESS;
 80057c4:	23d7      	movs	r3, #215	; 0xd7
 80057c6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS02A1_I2C_Init;
 80057ca:	4b4b      	ldr	r3, [pc, #300]	; (80058f8 <ISM330DHCX_0_Probe+0x144>)
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 80057ce:	4b4b      	ldr	r3, [pc, #300]	; (80058fc <ISM330DHCX_0_Probe+0x148>)
 80057d0:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 80057d2:	4b4b      	ldr	r3, [pc, #300]	; (8005900 <ISM330DHCX_0_Probe+0x14c>)
 80057d4:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 80057d6:	4b4b      	ldr	r3, [pc, #300]	; (8005904 <ISM330DHCX_0_Probe+0x150>)
 80057d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS02A1_GetTick;
 80057da:	4b4b      	ldr	r3, [pc, #300]	; (8005908 <ISM330DHCX_0_Probe+0x154>)
 80057dc:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS02A1_Delay;
 80057de:	4b4b      	ldr	r3, [pc, #300]	; (800590c <ISM330DHCX_0_Probe+0x158>)
 80057e0:	64bb      	str	r3, [r7, #72]	; 0x48

  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 80057e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057e6:	4619      	mov	r1, r3
 80057e8:	4849      	ldr	r0, [pc, #292]	; (8005910 <ISM330DHCX_0_Probe+0x15c>)
 80057ea:	f7fd ff8b 	bl	8003704 <ISM330DHCX_RegisterBusIO>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <ISM330DHCX_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057f4:	f06f 0306 	mvn.w	r3, #6
 80057f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057fa:	e077      	b.n	80058ec <ISM330DHCX_0_Probe+0x138>
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 80057fc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005800:	4619      	mov	r1, r3
 8005802:	4843      	ldr	r0, [pc, #268]	; (8005910 <ISM330DHCX_0_Probe+0x15c>)
 8005804:	f7fe f89c 	bl	8003940 <ISM330DHCX_ReadID>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <ISM330DHCX_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800580e:	f06f 0306 	mvn.w	r3, #6
 8005812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005814:	e06a      	b.n	80058ec <ISM330DHCX_0_Probe+0x138>
  }
  else if (id != ISM330DHCX_ID)
 8005816:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800581a:	2b6b      	cmp	r3, #107	; 0x6b
 800581c:	d003      	beq.n	8005826 <ISM330DHCX_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800581e:	f06f 0306 	mvn.w	r3, #6
 8005822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005824:	e062      	b.n	80058ec <ISM330DHCX_0_Probe+0x138>
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 8005826:	f107 030c 	add.w	r3, r7, #12
 800582a:	4619      	mov	r1, r3
 800582c:	4838      	ldr	r0, [pc, #224]	; (8005910 <ISM330DHCX_0_Probe+0x15c>)
 800582e:	f7fe f89d 	bl	800396c <ISM330DHCX_GetCapabilities>
    MotionCtx[IKS02A1_ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005832:	7b7b      	ldrb	r3, [r7, #13]
 8005834:	461a      	mov	r2, r3
 8005836:	7b3b      	ldrb	r3, [r7, #12]
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	431a      	orrs	r2, r3
 800583c:	7bbb      	ldrb	r3, [r7, #14]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4313      	orrs	r3, r2
 8005842:	4a34      	ldr	r2, [pc, #208]	; (8005914 <ISM330DHCX_0_Probe+0x160>)
 8005844:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS02A1_ISM330DHCX_0] = &ism330dhcx_obj_0;
 8005846:	4b34      	ldr	r3, [pc, #208]	; (8005918 <ISM330DHCX_0_Probe+0x164>)
 8005848:	4a31      	ldr	r2, [pc, #196]	; (8005910 <ISM330DHCX_0_Probe+0x15c>)
 800584a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 800584c:	4b33      	ldr	r3, [pc, #204]	; (800591c <ISM330DHCX_0_Probe+0x168>)
 800584e:	4a34      	ldr	r2, [pc, #208]	; (8005920 <ISM330DHCX_0_Probe+0x16c>)
 8005850:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d11d      	bne.n	8005894 <ISM330DHCX_0_Probe+0xe0>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d018      	beq.n	8005894 <ISM330DHCX_0_Probe+0xe0>
 8005862:	7b7b      	ldrb	r3, [r7, #13]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d115      	bne.n	8005894 <ISM330DHCX_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8005868:	4b2e      	ldr	r3, [pc, #184]	; (8005924 <ISM330DHCX_0_Probe+0x170>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4a2e      	ldr	r2, [pc, #184]	; (8005928 <ISM330DHCX_0_Probe+0x174>)
 800586e:	492f      	ldr	r1, [pc, #188]	; (800592c <ISM330DHCX_0_Probe+0x178>)
 8005870:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 8005874:	4b29      	ldr	r3, [pc, #164]	; (800591c <ISM330DHCX_0_Probe+0x168>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a27      	ldr	r2, [pc, #156]	; (8005918 <ISM330DHCX_0_Probe+0x164>)
 800587c:	6812      	ldr	r2, [r2, #0]
 800587e:	4610      	mov	r0, r2
 8005880:	4798      	blx	r3
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <ISM330DHCX_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005888:	f06f 0304 	mvn.w	r3, #4
 800588c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800588e:	e001      	b.n	8005894 <ISM330DHCX_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005890:	2300      	movs	r3, #0
 8005892:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005896:	2b00      	cmp	r3, #0
 8005898:	d11d      	bne.n	80058d6 <ISM330DHCX_0_Probe+0x122>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d018      	beq.n	80058d6 <ISM330DHCX_0_Probe+0x122>
 80058a4:	7b3b      	ldrb	r3, [r7, #12]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d115      	bne.n	80058d6 <ISM330DHCX_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80058aa:	4b1e      	ldr	r3, [pc, #120]	; (8005924 <ISM330DHCX_0_Probe+0x170>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	4a1e      	ldr	r2, [pc, #120]	; (8005928 <ISM330DHCX_0_Probe+0x174>)
 80058b0:	491f      	ldr	r1, [pc, #124]	; (8005930 <ISM330DHCX_0_Probe+0x17c>)
 80058b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                              void *)&ISM330DHCX_ACC_Driver;

      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 80058b6:	4b19      	ldr	r3, [pc, #100]	; (800591c <ISM330DHCX_0_Probe+0x168>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a16      	ldr	r2, [pc, #88]	; (8005918 <ISM330DHCX_0_Probe+0x164>)
 80058be:	6812      	ldr	r2, [r2, #0]
 80058c0:	4610      	mov	r0, r2
 80058c2:	4798      	blx	r3
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <ISM330DHCX_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058ca:	f06f 0304 	mvn.w	r3, #4
 80058ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d0:	e001      	b.n	80058d6 <ISM330DHCX_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058d2:	2300      	movs	r3, #0
 80058d4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80058d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d107      	bne.n	80058ec <ISM330DHCX_0_Probe+0x138>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f003 0304 	and.w	r3, r3, #4
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <ISM330DHCX_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80058e6:	f06f 0304 	mvn.w	r3, #4
 80058ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 80058ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3750      	adds	r7, #80	; 0x50
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	080005b9 	.word	0x080005b9
 80058fc:	08000635 	.word	0x08000635
 8005900:	080006e9 	.word	0x080006e9
 8005904:	08000685 	.word	0x08000685
 8005908:	0800074d 	.word	0x0800074d
 800590c:	08005ca1 	.word	0x08005ca1
 8005910:	200367fc 	.word	0x200367fc
 8005914:	200367f0 	.word	0x200367f0
 8005918:	200367b4 	.word	0x200367b4
 800591c:	200367e4 	.word	0x200367e4
 8005920:	2000046c 	.word	0x2000046c
 8005924:	200004c4 	.word	0x200004c4
 8005928:	200367c0 	.word	0x200367c0
 800592c:	200004a0 	.word	0x200004a0
 8005930:	2000047c 	.word	0x2000047c

08005934 <IIS2DLPC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t IIS2DLPC_0_Probe(uint32_t Functions)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b094      	sub	sp, #80	; 0x50
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  IIS2DLPC_IO_t            io_ctx;
  uint8_t                  id;
  static IIS2DLPC_Object_t iis2dlpc_obj_0;
  IIS2DLPC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800593c:	2300      	movs	r3, #0
 800593e:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2DLPC_I2C_BUS; /* I2C */
 8005940:	2300      	movs	r3, #0
 8005942:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = IIS2DLPC_I2C_ADD_H;
 8005944:	2333      	movs	r3, #51	; 0x33
 8005946:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS02A1_I2C_Init;
 800594a:	4b42      	ldr	r3, [pc, #264]	; (8005a54 <IIS2DLPC_0_Probe+0x120>)
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 800594e:	4b42      	ldr	r3, [pc, #264]	; (8005a58 <IIS2DLPC_0_Probe+0x124>)
 8005950:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 8005952:	4b42      	ldr	r3, [pc, #264]	; (8005a5c <IIS2DLPC_0_Probe+0x128>)
 8005954:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 8005956:	4b42      	ldr	r3, [pc, #264]	; (8005a60 <IIS2DLPC_0_Probe+0x12c>)
 8005958:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS02A1_GetTick;
 800595a:	4b42      	ldr	r3, [pc, #264]	; (8005a64 <IIS2DLPC_0_Probe+0x130>)
 800595c:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS02A1_Delay;
 800595e:	4b42      	ldr	r3, [pc, #264]	; (8005a68 <IIS2DLPC_0_Probe+0x134>)
 8005960:	64bb      	str	r3, [r7, #72]	; 0x48

  if (IIS2DLPC_RegisterBusIO(&iis2dlpc_obj_0, &io_ctx) != IIS2DLPC_OK)
 8005962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005966:	4619      	mov	r1, r3
 8005968:	4840      	ldr	r0, [pc, #256]	; (8005a6c <IIS2DLPC_0_Probe+0x138>)
 800596a:	f7fb ff73 	bl	8001854 <IIS2DLPC_RegisterBusIO>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <IIS2DLPC_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005974:	f06f 0306 	mvn.w	r3, #6
 8005978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800597a:	e065      	b.n	8005a48 <IIS2DLPC_0_Probe+0x114>
  }
  else if (IIS2DLPC_ReadID(&iis2dlpc_obj_0, &id) != IIS2DLPC_OK)
 800597c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005980:	4619      	mov	r1, r3
 8005982:	483a      	ldr	r0, [pc, #232]	; (8005a6c <IIS2DLPC_0_Probe+0x138>)
 8005984:	f7fc f854 	bl	8001a30 <IIS2DLPC_ReadID>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <IIS2DLPC_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800598e:	f06f 0306 	mvn.w	r3, #6
 8005992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005994:	e058      	b.n	8005a48 <IIS2DLPC_0_Probe+0x114>
  }
  else if (id != IIS2DLPC_ID)
 8005996:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800599a:	2b44      	cmp	r3, #68	; 0x44
 800599c:	d003      	beq.n	80059a6 <IIS2DLPC_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800599e:	f06f 0306 	mvn.w	r3, #6
 80059a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a4:	e050      	b.n	8005a48 <IIS2DLPC_0_Probe+0x114>
  }
  else
  {
    (void)IIS2DLPC_GetCapabilities(&iis2dlpc_obj_0, &cap);
 80059a6:	f107 030c 	add.w	r3, r7, #12
 80059aa:	4619      	mov	r1, r3
 80059ac:	482f      	ldr	r0, [pc, #188]	; (8005a6c <IIS2DLPC_0_Probe+0x138>)
 80059ae:	f7fc f855 	bl	8001a5c <IIS2DLPC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2DLPC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80059b2:	7b7b      	ldrb	r3, [r7, #13]
 80059b4:	461a      	mov	r2, r3
 80059b6:	7b3b      	ldrb	r3, [r7, #12]
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	431a      	orrs	r2, r3
 80059bc:	7bbb      	ldrb	r3, [r7, #14]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4313      	orrs	r3, r2
 80059c2:	4a2b      	ldr	r2, [pc, #172]	; (8005a70 <IIS2DLPC_0_Probe+0x13c>)
 80059c4:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS02A1_IIS2DLPC_0] = &iis2dlpc_obj_0;
 80059c6:	4b2b      	ldr	r3, [pc, #172]	; (8005a74 <IIS2DLPC_0_Probe+0x140>)
 80059c8:	4a28      	ldr	r2, [pc, #160]	; (8005a6c <IIS2DLPC_0_Probe+0x138>)
 80059ca:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2DLPC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2DLPC_COMMON_Driver;
 80059cc:	4b2a      	ldr	r3, [pc, #168]	; (8005a78 <IIS2DLPC_0_Probe+0x144>)
 80059ce:	4a2b      	ldr	r2, [pc, #172]	; (8005a7c <IIS2DLPC_0_Probe+0x148>)
 80059d0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80059d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10a      	bne.n	80059ee <IIS2DLPC_0_Probe+0xba>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <IIS2DLPC_0_Probe+0xba>
 80059e2:	7b7b      	ldrb	r3, [r7, #13]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d102      	bne.n	80059ee <IIS2DLPC_0_Probe+0xba>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80059e8:	f06f 0304 	mvn.w	r3, #4
 80059ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80059ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d11e      	bne.n	8005a32 <IIS2DLPC_0_Probe+0xfe>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d019      	beq.n	8005a32 <IIS2DLPC_0_Probe+0xfe>
 80059fe:	7b3b      	ldrb	r3, [r7, #12]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d116      	bne.n	8005a32 <IIS2DLPC_0_Probe+0xfe>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2DLPC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005a04:	4b1e      	ldr	r3, [pc, #120]	; (8005a80 <IIS2DLPC_0_Probe+0x14c>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4a1e      	ldr	r2, [pc, #120]	; (8005a84 <IIS2DLPC_0_Probe+0x150>)
 8005a0a:	3303      	adds	r3, #3
 8005a0c:	491e      	ldr	r1, [pc, #120]	; (8005a88 <IIS2DLPC_0_Probe+0x154>)
 8005a0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&IIS2DLPC_ACC_Driver;

      if (MotionDrv[IKS02A1_IIS2DLPC_0]->Init(MotionCompObj[IKS02A1_IIS2DLPC_0]) != IIS2DLPC_OK)
 8005a12:	4b19      	ldr	r3, [pc, #100]	; (8005a78 <IIS2DLPC_0_Probe+0x144>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a16      	ldr	r2, [pc, #88]	; (8005a74 <IIS2DLPC_0_Probe+0x140>)
 8005a1a:	6852      	ldr	r2, [r2, #4]
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4798      	blx	r3
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <IIS2DLPC_0_Probe+0xfa>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a26:	f06f 0304 	mvn.w	r3, #4
 8005a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a2c:	e001      	b.n	8005a32 <IIS2DLPC_0_Probe+0xfe>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d107      	bne.n	8005a48 <IIS2DLPC_0_Probe+0x114>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <IIS2DLPC_0_Probe+0x114>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a42:	f06f 0304 	mvn.w	r3, #4
 8005a46:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 8005a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3750      	adds	r7, #80	; 0x50
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	080005b9 	.word	0x080005b9
 8005a58:	08000635 	.word	0x08000635
 8005a5c:	080006e9 	.word	0x080006e9
 8005a60:	08000685 	.word	0x08000685
 8005a64:	0800074d 	.word	0x0800074d
 8005a68:	08005ca1 	.word	0x08005ca1
 8005a6c:	20036834 	.word	0x20036834
 8005a70:	200367f0 	.word	0x200367f0
 8005a74:	200367b4 	.word	0x200367b4
 8005a78:	200367e4 	.word	0x200367e4
 8005a7c:	20000404 	.word	0x20000404
 8005a80:	200004c4 	.word	0x200004c4
 8005a84:	200367c0 	.word	0x200367c0
 8005a88:	20000414 	.word	0x20000414

08005a8c <IIS2MDC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t IIS2MDC_0_Probe(uint32_t Functions)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b094      	sub	sp, #80	; 0x50
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  IIS2MDC_IO_t            io_ctx;
  uint8_t                 id;
  static IIS2MDC_Object_t iis2mdc_obj_0;
  IIS2MDC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005a94:	2300      	movs	r3, #0
 8005a96:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 8005a98:	2300      	movs	r3, #0
 8005a9a:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 8005a9c:	233d      	movs	r3, #61	; 0x3d
 8005a9e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS02A1_I2C_Init;
 8005aa2:	4b42      	ldr	r3, [pc, #264]	; (8005bac <IIS2MDC_0_Probe+0x120>)
 8005aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 8005aa6:	4b42      	ldr	r3, [pc, #264]	; (8005bb0 <IIS2MDC_0_Probe+0x124>)
 8005aa8:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 8005aaa:	4b42      	ldr	r3, [pc, #264]	; (8005bb4 <IIS2MDC_0_Probe+0x128>)
 8005aac:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 8005aae:	4b42      	ldr	r3, [pc, #264]	; (8005bb8 <IIS2MDC_0_Probe+0x12c>)
 8005ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS02A1_GetTick;
 8005ab2:	4b42      	ldr	r3, [pc, #264]	; (8005bbc <IIS2MDC_0_Probe+0x130>)
 8005ab4:	647b      	str	r3, [r7, #68]	; 0x44
  io_ctx.Delay       = IKS02A1_Delay;
 8005ab6:	4b42      	ldr	r3, [pc, #264]	; (8005bc0 <IIS2MDC_0_Probe+0x134>)
 8005ab8:	64bb      	str	r3, [r7, #72]	; 0x48

  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8005aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4840      	ldr	r0, [pc, #256]	; (8005bc4 <IIS2MDC_0_Probe+0x138>)
 8005ac2:	f7fd f9d9 	bl	8002e78 <IIS2MDC_RegisterBusIO>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <IIS2MDC_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005acc:	f06f 0306 	mvn.w	r3, #6
 8005ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ad2:	e065      	b.n	8005ba0 <IIS2MDC_0_Probe+0x114>
  }
  else if (IIS2MDC_ReadID(&iis2mdc_obj_0, &id) != IIS2MDC_OK)
 8005ad4:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005ad8:	4619      	mov	r1, r3
 8005ada:	483a      	ldr	r0, [pc, #232]	; (8005bc4 <IIS2MDC_0_Probe+0x138>)
 8005adc:	f7fd fa87 	bl	8002fee <IIS2MDC_ReadID>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <IIS2MDC_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ae6:	f06f 0306 	mvn.w	r3, #6
 8005aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aec:	e058      	b.n	8005ba0 <IIS2MDC_0_Probe+0x114>
  }
  else if (id != IIS2MDC_ID)
 8005aee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d003      	beq.n	8005afe <IIS2MDC_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005af6:	f06f 0306 	mvn.w	r3, #6
 8005afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005afc:	e050      	b.n	8005ba0 <IIS2MDC_0_Probe+0x114>
  }
  else
  {
    (void)IIS2MDC_GetCapabilities(&iis2mdc_obj_0, &cap);
 8005afe:	f107 030c 	add.w	r3, r7, #12
 8005b02:	4619      	mov	r1, r3
 8005b04:	482f      	ldr	r0, [pc, #188]	; (8005bc4 <IIS2MDC_0_Probe+0x138>)
 8005b06:	f7fd fa89 	bl	800301c <IIS2MDC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005b0a:	7b7b      	ldrb	r3, [r7, #13]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	7b3b      	ldrb	r3, [r7, #12]
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	431a      	orrs	r2, r3
 8005b14:	7bbb      	ldrb	r3, [r7, #14]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	4a2b      	ldr	r2, [pc, #172]	; (8005bc8 <IIS2MDC_0_Probe+0x13c>)
 8005b1c:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS02A1_IIS2MDC_0] = &iis2mdc_obj_0;
 8005b1e:	4b2b      	ldr	r3, [pc, #172]	; (8005bcc <IIS2MDC_0_Probe+0x140>)
 8005b20:	4a28      	ldr	r2, [pc, #160]	; (8005bc4 <IIS2MDC_0_Probe+0x138>)
 8005b22:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2MDC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2MDC_COMMON_Driver;
 8005b24:	4b2a      	ldr	r3, [pc, #168]	; (8005bd0 <IIS2MDC_0_Probe+0x144>)
 8005b26:	4a2b      	ldr	r2, [pc, #172]	; (8005bd4 <IIS2MDC_0_Probe+0x148>)
 8005b28:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <IIS2MDC_0_Probe+0xba>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d005      	beq.n	8005b46 <IIS2MDC_0_Probe+0xba>
 8005b3a:	7b7b      	ldrb	r3, [r7, #13]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d102      	bne.n	8005b46 <IIS2MDC_0_Probe+0xba>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b40:	f06f 0304 	mvn.w	r3, #4
 8005b44:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <IIS2MDC_0_Probe+0xd6>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <IIS2MDC_0_Probe+0xd6>
 8005b56:	7b3b      	ldrb	r3, [r7, #12]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d102      	bne.n	8005b62 <IIS2MDC_0_Probe+0xd6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b5c:	f06f 0304 	mvn.w	r3, #4
 8005b60:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d11b      	bne.n	8005ba0 <IIS2MDC_0_Probe+0x114>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d016      	beq.n	8005ba0 <IIS2MDC_0_Probe+0x114>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005b72:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <IIS2MDC_0_Probe+0x14c>)
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	4a19      	ldr	r2, [pc, #100]	; (8005bdc <IIS2MDC_0_Probe+0x150>)
 8005b78:	3306      	adds	r3, #6
 8005b7a:	4919      	ldr	r1, [pc, #100]	; (8005be0 <IIS2MDC_0_Probe+0x154>)
 8005b7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&IIS2MDC_MAG_Driver;

      if (MotionDrv[IKS02A1_IIS2MDC_0]->Init(MotionCompObj[IKS02A1_IIS2MDC_0]) != IIS2MDC_OK)
 8005b80:	4b13      	ldr	r3, [pc, #76]	; (8005bd0 <IIS2MDC_0_Probe+0x144>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a11      	ldr	r2, [pc, #68]	; (8005bcc <IIS2MDC_0_Probe+0x140>)
 8005b88:	6892      	ldr	r2, [r2, #8]
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	4798      	blx	r3
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <IIS2MDC_0_Probe+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b94:	f06f 0304 	mvn.w	r3, #4
 8005b98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b9a:	e001      	b.n	8005ba0 <IIS2MDC_0_Probe+0x114>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
  }
  return ret;
 8005ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3750      	adds	r7, #80	; 0x50
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	080005b9 	.word	0x080005b9
 8005bb0:	08000635 	.word	0x08000635
 8005bb4:	080006e9 	.word	0x080006e9
 8005bb8:	08000685 	.word	0x08000685
 8005bbc:	0800074d 	.word	0x0800074d
 8005bc0:	08005ca1 	.word	0x08005ca1
 8005bc4:	20036870 	.word	0x20036870
 8005bc8:	200367f0 	.word	0x200367f0
 8005bcc:	200367b4 	.word	0x200367b4
 8005bd0:	200367e4 	.word	0x200367e4
 8005bd4:	20000438 	.word	0x20000438
 8005bd8:	200004c4 	.word	0x200004c4
 8005bdc:	200367c0 	.word	0x200367c0
 8005be0:	20000448 	.word	0x20000448

08005be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005be8:	2003      	movs	r0, #3
 8005bea:	f000 f971 	bl	8005ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005bee:	200f      	movs	r0, #15
 8005bf0:	f000 f806 	bl	8005c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005bf4:	f7fb fbdc 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005c08:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <HAL_InitTick+0x54>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <HAL_InitTick+0x58>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	4619      	mov	r1, r3
 8005c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 f999 	bl	8005f56 <HAL_SYSTICK_Config>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e00e      	b.n	8005c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b0f      	cmp	r3, #15
 8005c32:	d80a      	bhi.n	8005c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c34:	2200      	movs	r2, #0
 8005c36:	6879      	ldr	r1, [r7, #4]
 8005c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c3c:	f000 f953 	bl	8005ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c40:	4a06      	ldr	r2, [pc, #24]	; (8005c5c <HAL_InitTick+0x5c>)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e000      	b.n	8005c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20000400 	.word	0x20000400
 8005c58:	200004dc 	.word	0x200004dc
 8005c5c:	200004d8 	.word	0x200004d8

08005c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c64:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <HAL_IncTick+0x20>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <HAL_IncTick+0x24>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4413      	add	r3, r2
 8005c70:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <HAL_IncTick+0x24>)
 8005c72:	6013      	str	r3, [r2, #0]
}
 8005c74:	bf00      	nop
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	200004dc 	.word	0x200004dc
 8005c84:	200368a4 	.word	0x200368a4

08005c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8005c8c:	4b03      	ldr	r3, [pc, #12]	; (8005c9c <HAL_GetTick+0x14>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	200368a4 	.word	0x200368a4

08005ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ca8:	f7ff ffee 	bl	8005c88 <HAL_GetTick>
 8005cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cb8:	d005      	beq.n	8005cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005cba:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <HAL_Delay+0x44>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005cc6:	bf00      	nop
 8005cc8:	f7ff ffde 	bl	8005c88 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d8f7      	bhi.n	8005cc8 <HAL_Delay+0x28>
  {
  }
}
 8005cd8:	bf00      	nop
 8005cda:	bf00      	nop
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	200004dc 	.word	0x200004dc

08005ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cf8:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <__NVIC_SetPriorityGrouping+0x40>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d04:	4013      	ands	r3, r2
 8005d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d10:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <__NVIC_SetPriorityGrouping+0x44>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d16:	4a04      	ldr	r2, [pc, #16]	; (8005d28 <__NVIC_SetPriorityGrouping+0x40>)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	60d3      	str	r3, [r2, #12]
}
 8005d1c:	bf00      	nop
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	e000ed00 	.word	0xe000ed00
 8005d2c:	05fa0000 	.word	0x05fa0000

08005d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d34:	4b04      	ldr	r3, [pc, #16]	; (8005d48 <__NVIC_GetPriorityGrouping+0x18>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	0a1b      	lsrs	r3, r3, #8
 8005d3a:	f003 0307 	and.w	r3, r3, #7
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	e000ed00 	.word	0xe000ed00

08005d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	db0b      	blt.n	8005d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	f003 021f 	and.w	r2, r3, #31
 8005d64:	4907      	ldr	r1, [pc, #28]	; (8005d84 <__NVIC_EnableIRQ+0x38>)
 8005d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	e000e100 	.word	0xe000e100

08005d88 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	db12      	blt.n	8005dc0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	f003 021f 	and.w	r2, r3, #31
 8005da0:	490a      	ldr	r1, [pc, #40]	; (8005dcc <__NVIC_DisableIRQ+0x44>)
 8005da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	2001      	movs	r0, #1
 8005daa:	fa00 f202 	lsl.w	r2, r0, r2
 8005dae:	3320      	adds	r3, #32
 8005db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005db4:	f3bf 8f4f 	dsb	sy
}
 8005db8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005dba:	f3bf 8f6f 	isb	sy
}
 8005dbe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	e000e100 	.word	0xe000e100

08005dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	6039      	str	r1, [r7, #0]
 8005dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	db0a      	blt.n	8005dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	490c      	ldr	r1, [pc, #48]	; (8005e1c <__NVIC_SetPriority+0x4c>)
 8005dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dee:	0112      	lsls	r2, r2, #4
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	440b      	add	r3, r1
 8005df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005df8:	e00a      	b.n	8005e10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	4908      	ldr	r1, [pc, #32]	; (8005e20 <__NVIC_SetPriority+0x50>)
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	3b04      	subs	r3, #4
 8005e08:	0112      	lsls	r2, r2, #4
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	761a      	strb	r2, [r3, #24]
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	e000e100 	.word	0xe000e100
 8005e20:	e000ed00 	.word	0xe000ed00

08005e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b089      	sub	sp, #36	; 0x24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f1c3 0307 	rsb	r3, r3, #7
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	bf28      	it	cs
 8005e42:	2304      	movcs	r3, #4
 8005e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	3304      	adds	r3, #4
 8005e4a:	2b06      	cmp	r3, #6
 8005e4c:	d902      	bls.n	8005e54 <NVIC_EncodePriority+0x30>
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	3b03      	subs	r3, #3
 8005e52:	e000      	b.n	8005e56 <NVIC_EncodePriority+0x32>
 8005e54:	2300      	movs	r3, #0
 8005e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	43da      	mvns	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	401a      	ands	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	43d9      	mvns	r1, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e7c:	4313      	orrs	r3, r2
         );
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3724      	adds	r7, #36	; 0x24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
	...

08005e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e9c:	d301      	bcc.n	8005ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e00f      	b.n	8005ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ea2:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <SysTick_Config+0x40>)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005eaa:	210f      	movs	r1, #15
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eb0:	f7ff ff8e 	bl	8005dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005eb4:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <SysTick_Config+0x40>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005eba:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <SysTick_Config+0x40>)
 8005ebc:	2207      	movs	r2, #7
 8005ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	e000e010 	.word	0xe000e010

08005ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ff05 	bl	8005ce8 <__NVIC_SetPriorityGrouping>
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b086      	sub	sp, #24
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	4603      	mov	r3, r0
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]
 8005ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ef8:	f7ff ff1a 	bl	8005d30 <__NVIC_GetPriorityGrouping>
 8005efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	68b9      	ldr	r1, [r7, #8]
 8005f02:	6978      	ldr	r0, [r7, #20]
 8005f04:	f7ff ff8e 	bl	8005e24 <NVIC_EncodePriority>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f0e:	4611      	mov	r1, r2
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff ff5d 	bl	8005dd0 <__NVIC_SetPriority>
}
 8005f16:	bf00      	nop
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	4603      	mov	r3, r0
 8005f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7ff ff0d 	bl	8005d4c <__NVIC_EnableIRQ>
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	4603      	mov	r3, r0
 8005f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff ff1d 	bl	8005d88 <__NVIC_DisableIRQ>
}
 8005f4e:	bf00      	nop
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b082      	sub	sp, #8
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff ff94 	bl	8005e8c <SysTick_Config>
 8005f64:	4603      	mov	r3, r0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e054      	b.n	800602c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	7f5b      	ldrb	r3, [r3, #29]
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d105      	bne.n	8005f98 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fa faf0 	bl	8000578 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	791b      	ldrb	r3, [r3, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10c      	bne.n	8005fc0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a22      	ldr	r2, [pc, #136]	; (8006034 <HAL_CRC_Init+0xc4>)
 8005fac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0218 	bic.w	r2, r2, #24
 8005fbc:	609a      	str	r2, [r3, #8]
 8005fbe:	e00c      	b.n	8005fda <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6899      	ldr	r1, [r3, #8]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f834 	bl	8006038 <HAL_CRCEx_Polynomial_Set>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e028      	b.n	800602c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	795b      	ldrb	r3, [r3, #5]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d105      	bne.n	8005fee <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fea:	611a      	str	r2, [r3, #16]
 8005fec:	e004      	b.n	8005ff8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6912      	ldr	r2, [r2, #16]
 8005ff6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695a      	ldr	r2, [r3, #20]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699a      	ldr	r2, [r3, #24]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	04c11db7 	.word	0x04c11db7

08006038 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006048:	231f      	movs	r3, #31
 800604a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800604c:	bf00      	nop
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1e5a      	subs	r2, r3, #1
 8006052:	613a      	str	r2, [r7, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d009      	beq.n	800606c <HAL_CRCEx_Polynomial_Set+0x34>
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f003 031f 	and.w	r3, r3, #31
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	fa22 f303 	lsr.w	r3, r2, r3
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b00      	cmp	r3, #0
 800606a:	d0f0      	beq.n	800604e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b18      	cmp	r3, #24
 8006070:	d846      	bhi.n	8006100 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006072:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	08006107 	.word	0x08006107
 800607c:	08006101 	.word	0x08006101
 8006080:	08006101 	.word	0x08006101
 8006084:	08006101 	.word	0x08006101
 8006088:	08006101 	.word	0x08006101
 800608c:	08006101 	.word	0x08006101
 8006090:	08006101 	.word	0x08006101
 8006094:	08006101 	.word	0x08006101
 8006098:	080060f5 	.word	0x080060f5
 800609c:	08006101 	.word	0x08006101
 80060a0:	08006101 	.word	0x08006101
 80060a4:	08006101 	.word	0x08006101
 80060a8:	08006101 	.word	0x08006101
 80060ac:	08006101 	.word	0x08006101
 80060b0:	08006101 	.word	0x08006101
 80060b4:	08006101 	.word	0x08006101
 80060b8:	080060e9 	.word	0x080060e9
 80060bc:	08006101 	.word	0x08006101
 80060c0:	08006101 	.word	0x08006101
 80060c4:	08006101 	.word	0x08006101
 80060c8:	08006101 	.word	0x08006101
 80060cc:	08006101 	.word	0x08006101
 80060d0:	08006101 	.word	0x08006101
 80060d4:	08006101 	.word	0x08006101
 80060d8:	080060dd 	.word	0x080060dd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b06      	cmp	r3, #6
 80060e0:	d913      	bls.n	800610a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80060e6:	e010      	b.n	800610a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	2b07      	cmp	r3, #7
 80060ec:	d90f      	bls.n	800610e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80060f2:	e00c      	b.n	800610e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	d90b      	bls.n	8006112 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80060fe:	e008      	b.n	8006112 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	75fb      	strb	r3, [r7, #23]
      break;
 8006104:	e006      	b.n	8006114 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006106:	bf00      	nop
 8006108:	e004      	b.n	8006114 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800610a:	bf00      	nop
 800610c:	e002      	b.n	8006114 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800610e:	bf00      	nop
 8006110:	e000      	b.n	8006114 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006112:	bf00      	nop
  }
  if (status == HAL_OK)
 8006114:	7dfb      	ldrb	r3, [r7, #23]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10d      	bne.n	8006136 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f023 0118 	bic.w	r1, r3, #24
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	430a      	orrs	r2, r1
 8006134:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006136:	7dfb      	ldrb	r3, [r7, #23]
}
 8006138:	4618      	mov	r0, r3
 800613a:	371c      	adds	r7, #28
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006150:	f7ff fd9a 	bl	8005c88 <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e099      	b.n	8006294 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0201 	bic.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006180:	e00f      	b.n	80061a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006182:	f7ff fd81 	bl	8005c88 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b05      	cmp	r3, #5
 800618e:	d908      	bls.n	80061a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2203      	movs	r2, #3
 800619a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e078      	b.n	8006294 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e8      	bne.n	8006182 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4b38      	ldr	r3, [pc, #224]	; (800629c <HAL_DMA_Init+0x158>)
 80061bc:	4013      	ands	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d107      	bne.n	800620c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	4313      	orrs	r3, r2
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0307 	bic.w	r3, r3, #7
 8006222:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	2b04      	cmp	r3, #4
 8006234:	d117      	bne.n	8006266 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00e      	beq.n	8006266 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fb17 	bl	800687c <DMA_CheckFifoParam>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d008      	beq.n	8006266 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2240      	movs	r2, #64	; 0x40
 8006258:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006262:	2301      	movs	r3, #1
 8006264:	e016      	b.n	8006294 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 face 	bl	8006810 <DMA_CalcBaseAndBitshift>
 8006274:	4603      	mov	r3, r0
 8006276:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800627c:	223f      	movs	r2, #63	; 0x3f
 800627e:	409a      	lsls	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	f010803f 	.word	0xf010803f

080062a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <HAL_DMA_Start_IT+0x26>
 80062c2:	2302      	movs	r3, #2
 80062c4:	e048      	b.n	8006358 <HAL_DMA_Start_IT+0xb8>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d137      	bne.n	800634a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2202      	movs	r2, #2
 80062de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	68b9      	ldr	r1, [r7, #8]
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 fa60 	bl	80067b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f8:	223f      	movs	r2, #63	; 0x3f
 80062fa:	409a      	lsls	r2, r3
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0216 	orr.w	r2, r2, #22
 800630e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695a      	ldr	r2, [r3, #20]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800631e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	2b00      	cmp	r3, #0
 8006326:	d007      	beq.n	8006338 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0208 	orr.w	r2, r2, #8
 8006336:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]
 8006348:	e005      	b.n	8006356 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006352:	2302      	movs	r3, #2
 8006354:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006356:	7dfb      	ldrb	r3, [r7, #23]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800636e:	f7ff fc8b 	bl	8005c88 <HAL_GetTick>
 8006372:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d008      	beq.n	8006392 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2280      	movs	r2, #128	; 0x80
 8006384:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e052      	b.n	8006438 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0216 	bic.w	r2, r2, #22
 80063a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695a      	ldr	r2, [r3, #20]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d103      	bne.n	80063c2 <HAL_DMA_Abort+0x62>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0208 	bic.w	r2, r2, #8
 80063d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0201 	bic.w	r2, r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063e2:	e013      	b.n	800640c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063e4:	f7ff fc50 	bl	8005c88 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b05      	cmp	r3, #5
 80063f0:	d90c      	bls.n	800640c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2220      	movs	r2, #32
 80063f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2203      	movs	r2, #3
 80063fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e015      	b.n	8006438 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e4      	bne.n	80063e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641e:	223f      	movs	r2, #63	; 0x3f
 8006420:	409a      	lsls	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b02      	cmp	r3, #2
 8006452:	d004      	beq.n	800645e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2280      	movs	r2, #128	; 0x80
 8006458:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e00c      	b.n	8006478 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2205      	movs	r2, #5
 8006462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0201 	bic.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006490:	4b8e      	ldr	r3, [pc, #568]	; (80066cc <HAL_DMA_IRQHandler+0x248>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a8e      	ldr	r2, [pc, #568]	; (80066d0 <HAL_DMA_IRQHandler+0x24c>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	0a9b      	lsrs	r3, r3, #10
 800649c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ae:	2208      	movs	r2, #8
 80064b0:	409a      	lsls	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4013      	ands	r3, r2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01a      	beq.n	80064f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d013      	beq.n	80064f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0204 	bic.w	r2, r2, #4
 80064d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064dc:	2208      	movs	r2, #8
 80064de:	409a      	lsls	r2, r3
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e8:	f043 0201 	orr.w	r2, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f4:	2201      	movs	r2, #1
 80064f6:	409a      	lsls	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d012      	beq.n	8006526 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00b      	beq.n	8006526 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006512:	2201      	movs	r2, #1
 8006514:	409a      	lsls	r2, r3
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651e:	f043 0202 	orr.w	r2, r3, #2
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652a:	2204      	movs	r2, #4
 800652c:	409a      	lsls	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4013      	ands	r3, r2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d012      	beq.n	800655c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00b      	beq.n	800655c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006548:	2204      	movs	r2, #4
 800654a:	409a      	lsls	r2, r3
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006554:	f043 0204 	orr.w	r2, r3, #4
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006560:	2210      	movs	r2, #16
 8006562:	409a      	lsls	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4013      	ands	r3, r2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d043      	beq.n	80065f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d03c      	beq.n	80065f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657e:	2210      	movs	r2, #16
 8006580:	409a      	lsls	r2, r3
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d018      	beq.n	80065c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d108      	bne.n	80065b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d024      	beq.n	80065f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
 80065b2:	e01f      	b.n	80065f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01b      	beq.n	80065f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	4798      	blx	r3
 80065c4:	e016      	b.n	80065f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d107      	bne.n	80065e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0208 	bic.w	r2, r2, #8
 80065e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f8:	2220      	movs	r2, #32
 80065fa:	409a      	lsls	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4013      	ands	r3, r2
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 808f 	beq.w	8006724 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 8087 	beq.w	8006724 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800661a:	2220      	movs	r2, #32
 800661c:	409a      	lsls	r2, r3
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b05      	cmp	r3, #5
 800662c:	d136      	bne.n	800669c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0216 	bic.w	r2, r2, #22
 800663c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695a      	ldr	r2, [r3, #20]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800664c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	d103      	bne.n	800665e <HAL_DMA_IRQHandler+0x1da>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665a:	2b00      	cmp	r3, #0
 800665c:	d007      	beq.n	800666e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0208 	bic.w	r2, r2, #8
 800666c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006672:	223f      	movs	r2, #63	; 0x3f
 8006674:	409a      	lsls	r2, r3
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800668e:	2b00      	cmp	r3, #0
 8006690:	d07e      	beq.n	8006790 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	4798      	blx	r3
        }
        return;
 800669a:	e079      	b.n	8006790 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d01d      	beq.n	80066e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10d      	bne.n	80066d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d031      	beq.n	8006724 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
 80066c8:	e02c      	b.n	8006724 <HAL_DMA_IRQHandler+0x2a0>
 80066ca:	bf00      	nop
 80066cc:	20000400 	.word	0x20000400
 80066d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d023      	beq.n	8006724 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
 80066e4:	e01e      	b.n	8006724 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10f      	bne.n	8006714 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0210 	bic.w	r2, r2, #16
 8006702:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006728:	2b00      	cmp	r3, #0
 800672a:	d032      	beq.n	8006792 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d022      	beq.n	800677e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2205      	movs	r2, #5
 800673c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0201 	bic.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	3301      	adds	r3, #1
 8006754:	60bb      	str	r3, [r7, #8]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	429a      	cmp	r2, r3
 800675a:	d307      	bcc.n	800676c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1f2      	bne.n	8006750 <HAL_DMA_IRQHandler+0x2cc>
 800676a:	e000      	b.n	800676e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800676c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3
 800678e:	e000      	b.n	8006792 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006790:	bf00      	nop
    }
  }
}
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067a6:	b2db      	uxtb	r3, r3
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
 80067c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b40      	cmp	r3, #64	; 0x40
 80067e0:	d108      	bne.n	80067f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80067f2:	e007      	b.n	8006804 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	60da      	str	r2, [r3, #12]
}
 8006804:	bf00      	nop
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	3b10      	subs	r3, #16
 8006820:	4a13      	ldr	r2, [pc, #76]	; (8006870 <DMA_CalcBaseAndBitshift+0x60>)
 8006822:	fba2 2303 	umull	r2, r3, r2, r3
 8006826:	091b      	lsrs	r3, r3, #4
 8006828:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800682a:	4a12      	ldr	r2, [pc, #72]	; (8006874 <DMA_CalcBaseAndBitshift+0x64>)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b03      	cmp	r3, #3
 800683c:	d908      	bls.n	8006850 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <DMA_CalcBaseAndBitshift+0x68>)
 8006846:	4013      	ands	r3, r2
 8006848:	1d1a      	adds	r2, r3, #4
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	659a      	str	r2, [r3, #88]	; 0x58
 800684e:	e006      	b.n	800685e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	461a      	mov	r2, r3
 8006856:	4b08      	ldr	r3, [pc, #32]	; (8006878 <DMA_CalcBaseAndBitshift+0x68>)
 8006858:	4013      	ands	r3, r2
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	aaaaaaab 	.word	0xaaaaaaab
 8006874:	0800f1dc 	.word	0x0800f1dc
 8006878:	fffffc00 	.word	0xfffffc00

0800687c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d11f      	bne.n	80068d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b03      	cmp	r3, #3
 800689a:	d856      	bhi.n	800694a <DMA_CheckFifoParam+0xce>
 800689c:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <DMA_CheckFifoParam+0x28>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068b5 	.word	0x080068b5
 80068a8:	080068c7 	.word	0x080068c7
 80068ac:	080068b5 	.word	0x080068b5
 80068b0:	0800694b 	.word	0x0800694b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d046      	beq.n	800694e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068c4:	e043      	b.n	800694e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068ce:	d140      	bne.n	8006952 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068d4:	e03d      	b.n	8006952 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068de:	d121      	bne.n	8006924 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d837      	bhi.n	8006956 <DMA_CheckFifoParam+0xda>
 80068e6:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <DMA_CheckFifoParam+0x70>)
 80068e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ec:	080068fd 	.word	0x080068fd
 80068f0:	08006903 	.word	0x08006903
 80068f4:	080068fd 	.word	0x080068fd
 80068f8:	08006915 	.word	0x08006915
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006900:	e030      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d025      	beq.n	800695a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006912:	e022      	b.n	800695a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006918:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800691c:	d11f      	bne.n	800695e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006922:	e01c      	b.n	800695e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d903      	bls.n	8006932 <DMA_CheckFifoParam+0xb6>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b03      	cmp	r3, #3
 800692e:	d003      	beq.n	8006938 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006930:	e018      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	73fb      	strb	r3, [r7, #15]
      break;
 8006936:	e015      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00e      	beq.n	8006962 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	73fb      	strb	r3, [r7, #15]
      break;
 8006948:	e00b      	b.n	8006962 <DMA_CheckFifoParam+0xe6>
      break;
 800694a:	bf00      	nop
 800694c:	e00a      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 800694e:	bf00      	nop
 8006950:	e008      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 8006952:	bf00      	nop
 8006954:	e006      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 8006956:	bf00      	nop
 8006958:	e004      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 800695a:	bf00      	nop
 800695c:	e002      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;   
 800695e:	bf00      	nop
 8006960:	e000      	b.n	8006964 <DMA_CheckFifoParam+0xe8>
      break;
 8006962:	bf00      	nop
    }
  } 
  
  return status; 
 8006964:	7bfb      	ldrb	r3, [r7, #15]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop

08006974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006974:	b480      	push	{r7}
 8006976:	b089      	sub	sp, #36	; 0x24
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800697e:	2300      	movs	r3, #0
 8006980:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006986:	2300      	movs	r3, #0
 8006988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800698a:	2300      	movs	r3, #0
 800698c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800698e:	2300      	movs	r3, #0
 8006990:	61fb      	str	r3, [r7, #28]
 8006992:	e175      	b.n	8006c80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006994:	2201      	movs	r2, #1
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4013      	ands	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	f040 8164 	bne.w	8006c7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f003 0303 	and.w	r3, r3, #3
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d005      	beq.n	80069ca <HAL_GPIO_Init+0x56>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d130      	bne.n	8006a2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	2203      	movs	r2, #3
 80069d6:	fa02 f303 	lsl.w	r3, r2, r3
 80069da:	43db      	mvns	r3, r3
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	4013      	ands	r3, r2
 80069e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	fa02 f303 	lsl.w	r3, r2, r3
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	69ba      	ldr	r2, [r7, #24]
 80069f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a00:	2201      	movs	r2, #1
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	fa02 f303 	lsl.w	r3, r2, r3
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	091b      	lsrs	r3, r3, #4
 8006a16:	f003 0201 	and.w	r2, r3, #1
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f003 0303 	and.w	r3, r3, #3
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d017      	beq.n	8006a68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	2203      	movs	r2, #3
 8006a44:	fa02 f303 	lsl.w	r3, r2, r3
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d123      	bne.n	8006abc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	08da      	lsrs	r2, r3, #3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3208      	adds	r2, #8
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	220f      	movs	r2, #15
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	43db      	mvns	r3, r3
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	4013      	ands	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	f003 0307 	and.w	r3, r3, #7
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	08da      	lsrs	r2, r3, #3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3208      	adds	r2, #8
 8006ab6:	69b9      	ldr	r1, [r7, #24]
 8006ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	43db      	mvns	r3, r3
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f003 0203 	and.w	r2, r3, #3
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80be 	beq.w	8006c7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006afe:	4b66      	ldr	r3, [pc, #408]	; (8006c98 <HAL_GPIO_Init+0x324>)
 8006b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b02:	4a65      	ldr	r2, [pc, #404]	; (8006c98 <HAL_GPIO_Init+0x324>)
 8006b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b08:	6453      	str	r3, [r2, #68]	; 0x44
 8006b0a:	4b63      	ldr	r3, [pc, #396]	; (8006c98 <HAL_GPIO_Init+0x324>)
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b12:	60fb      	str	r3, [r7, #12]
 8006b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006b16:	4a61      	ldr	r2, [pc, #388]	; (8006c9c <HAL_GPIO_Init+0x328>)
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	089b      	lsrs	r3, r3, #2
 8006b1c:	3302      	adds	r3, #2
 8006b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	220f      	movs	r2, #15
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	43db      	mvns	r3, r3
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	4013      	ands	r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a58      	ldr	r2, [pc, #352]	; (8006ca0 <HAL_GPIO_Init+0x32c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d037      	beq.n	8006bb2 <HAL_GPIO_Init+0x23e>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a57      	ldr	r2, [pc, #348]	; (8006ca4 <HAL_GPIO_Init+0x330>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d031      	beq.n	8006bae <HAL_GPIO_Init+0x23a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a56      	ldr	r2, [pc, #344]	; (8006ca8 <HAL_GPIO_Init+0x334>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d02b      	beq.n	8006baa <HAL_GPIO_Init+0x236>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a55      	ldr	r2, [pc, #340]	; (8006cac <HAL_GPIO_Init+0x338>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d025      	beq.n	8006ba6 <HAL_GPIO_Init+0x232>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a54      	ldr	r2, [pc, #336]	; (8006cb0 <HAL_GPIO_Init+0x33c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d01f      	beq.n	8006ba2 <HAL_GPIO_Init+0x22e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a53      	ldr	r2, [pc, #332]	; (8006cb4 <HAL_GPIO_Init+0x340>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d019      	beq.n	8006b9e <HAL_GPIO_Init+0x22a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a52      	ldr	r2, [pc, #328]	; (8006cb8 <HAL_GPIO_Init+0x344>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d013      	beq.n	8006b9a <HAL_GPIO_Init+0x226>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a51      	ldr	r2, [pc, #324]	; (8006cbc <HAL_GPIO_Init+0x348>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00d      	beq.n	8006b96 <HAL_GPIO_Init+0x222>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a50      	ldr	r2, [pc, #320]	; (8006cc0 <HAL_GPIO_Init+0x34c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d007      	beq.n	8006b92 <HAL_GPIO_Init+0x21e>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a4f      	ldr	r2, [pc, #316]	; (8006cc4 <HAL_GPIO_Init+0x350>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d101      	bne.n	8006b8e <HAL_GPIO_Init+0x21a>
 8006b8a:	2309      	movs	r3, #9
 8006b8c:	e012      	b.n	8006bb4 <HAL_GPIO_Init+0x240>
 8006b8e:	230a      	movs	r3, #10
 8006b90:	e010      	b.n	8006bb4 <HAL_GPIO_Init+0x240>
 8006b92:	2308      	movs	r3, #8
 8006b94:	e00e      	b.n	8006bb4 <HAL_GPIO_Init+0x240>
 8006b96:	2307      	movs	r3, #7
 8006b98:	e00c      	b.n	8006bb4 <HAL_GPIO_Init+0x240>
 8006b9a:	2306      	movs	r3, #6
 8006b9c:	e00a      	b.n	8006bb4 <HAL_GPIO_Init+0x240>
 8006b9e:	2305      	movs	r3, #5
 8006ba0:	e008      	b.n	8006bb4 <HAL_GPIO_Init+0x240>
 8006ba2:	2304      	movs	r3, #4
 8006ba4:	e006      	b.n	8006bb4 <HAL_GPIO_Init+0x240>
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e004      	b.n	8006bb4 <HAL_GPIO_Init+0x240>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e002      	b.n	8006bb4 <HAL_GPIO_Init+0x240>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e000      	b.n	8006bb4 <HAL_GPIO_Init+0x240>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	f002 0203 	and.w	r2, r2, #3
 8006bba:	0092      	lsls	r2, r2, #2
 8006bbc:	4093      	lsls	r3, r2
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006bc4:	4935      	ldr	r1, [pc, #212]	; (8006c9c <HAL_GPIO_Init+0x328>)
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	089b      	lsrs	r3, r3, #2
 8006bca:	3302      	adds	r3, #2
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006bd2:	4b3d      	ldr	r3, [pc, #244]	; (8006cc8 <HAL_GPIO_Init+0x354>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	43db      	mvns	r3, r3
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	4013      	ands	r3, r2
 8006be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d003      	beq.n	8006bf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006bf6:	4a34      	ldr	r2, [pc, #208]	; (8006cc8 <HAL_GPIO_Init+0x354>)
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006bfc:	4b32      	ldr	r3, [pc, #200]	; (8006cc8 <HAL_GPIO_Init+0x354>)
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	43db      	mvns	r3, r3
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c20:	4a29      	ldr	r2, [pc, #164]	; (8006cc8 <HAL_GPIO_Init+0x354>)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006c26:	4b28      	ldr	r3, [pc, #160]	; (8006cc8 <HAL_GPIO_Init+0x354>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	43db      	mvns	r3, r3
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	4013      	ands	r3, r2
 8006c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c4a:	4a1f      	ldr	r2, [pc, #124]	; (8006cc8 <HAL_GPIO_Init+0x354>)
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c50:	4b1d      	ldr	r3, [pc, #116]	; (8006cc8 <HAL_GPIO_Init+0x354>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	43db      	mvns	r3, r3
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c74:	4a14      	ldr	r2, [pc, #80]	; (8006cc8 <HAL_GPIO_Init+0x354>)
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	2b0f      	cmp	r3, #15
 8006c84:	f67f ae86 	bls.w	8006994 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	3724      	adds	r7, #36	; 0x24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	40013800 	.word	0x40013800
 8006ca0:	40020000 	.word	0x40020000
 8006ca4:	40020400 	.word	0x40020400
 8006ca8:	40020800 	.word	0x40020800
 8006cac:	40020c00 	.word	0x40020c00
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	40021400 	.word	0x40021400
 8006cb8:	40021800 	.word	0x40021800
 8006cbc:	40021c00 	.word	0x40021c00
 8006cc0:	40022000 	.word	0x40022000
 8006cc4:	40022400 	.word	0x40022400
 8006cc8:	40013c00 	.word	0x40013c00

08006ccc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	e0d9      	b.n	8006e9c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006ce8:	2201      	movs	r2, #1
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	f040 80c9 	bne.w	8006e96 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006d04:	4a6b      	ldr	r2, [pc, #428]	; (8006eb4 <HAL_GPIO_DeInit+0x1e8>)
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	089b      	lsrs	r3, r3, #2
 8006d0a:	3302      	adds	r3, #2
 8006d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d10:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f003 0303 	and.w	r3, r3, #3
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	220f      	movs	r2, #15
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	4013      	ands	r3, r2
 8006d24:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a63      	ldr	r2, [pc, #396]	; (8006eb8 <HAL_GPIO_DeInit+0x1ec>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d037      	beq.n	8006d9e <HAL_GPIO_DeInit+0xd2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a62      	ldr	r2, [pc, #392]	; (8006ebc <HAL_GPIO_DeInit+0x1f0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d031      	beq.n	8006d9a <HAL_GPIO_DeInit+0xce>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a61      	ldr	r2, [pc, #388]	; (8006ec0 <HAL_GPIO_DeInit+0x1f4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d02b      	beq.n	8006d96 <HAL_GPIO_DeInit+0xca>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a60      	ldr	r2, [pc, #384]	; (8006ec4 <HAL_GPIO_DeInit+0x1f8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d025      	beq.n	8006d92 <HAL_GPIO_DeInit+0xc6>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a5f      	ldr	r2, [pc, #380]	; (8006ec8 <HAL_GPIO_DeInit+0x1fc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d01f      	beq.n	8006d8e <HAL_GPIO_DeInit+0xc2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a5e      	ldr	r2, [pc, #376]	; (8006ecc <HAL_GPIO_DeInit+0x200>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d019      	beq.n	8006d8a <HAL_GPIO_DeInit+0xbe>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a5d      	ldr	r2, [pc, #372]	; (8006ed0 <HAL_GPIO_DeInit+0x204>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <HAL_GPIO_DeInit+0xba>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a5c      	ldr	r2, [pc, #368]	; (8006ed4 <HAL_GPIO_DeInit+0x208>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00d      	beq.n	8006d82 <HAL_GPIO_DeInit+0xb6>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a5b      	ldr	r2, [pc, #364]	; (8006ed8 <HAL_GPIO_DeInit+0x20c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d007      	beq.n	8006d7e <HAL_GPIO_DeInit+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a5a      	ldr	r2, [pc, #360]	; (8006edc <HAL_GPIO_DeInit+0x210>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d101      	bne.n	8006d7a <HAL_GPIO_DeInit+0xae>
 8006d76:	2309      	movs	r3, #9
 8006d78:	e012      	b.n	8006da0 <HAL_GPIO_DeInit+0xd4>
 8006d7a:	230a      	movs	r3, #10
 8006d7c:	e010      	b.n	8006da0 <HAL_GPIO_DeInit+0xd4>
 8006d7e:	2308      	movs	r3, #8
 8006d80:	e00e      	b.n	8006da0 <HAL_GPIO_DeInit+0xd4>
 8006d82:	2307      	movs	r3, #7
 8006d84:	e00c      	b.n	8006da0 <HAL_GPIO_DeInit+0xd4>
 8006d86:	2306      	movs	r3, #6
 8006d88:	e00a      	b.n	8006da0 <HAL_GPIO_DeInit+0xd4>
 8006d8a:	2305      	movs	r3, #5
 8006d8c:	e008      	b.n	8006da0 <HAL_GPIO_DeInit+0xd4>
 8006d8e:	2304      	movs	r3, #4
 8006d90:	e006      	b.n	8006da0 <HAL_GPIO_DeInit+0xd4>
 8006d92:	2303      	movs	r3, #3
 8006d94:	e004      	b.n	8006da0 <HAL_GPIO_DeInit+0xd4>
 8006d96:	2302      	movs	r3, #2
 8006d98:	e002      	b.n	8006da0 <HAL_GPIO_DeInit+0xd4>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e000      	b.n	8006da0 <HAL_GPIO_DeInit+0xd4>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	f002 0203 	and.w	r2, r2, #3
 8006da6:	0092      	lsls	r2, r2, #2
 8006da8:	4093      	lsls	r3, r2
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d132      	bne.n	8006e16 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006db0:	4b4b      	ldr	r3, [pc, #300]	; (8006ee0 <HAL_GPIO_DeInit+0x214>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	43db      	mvns	r3, r3
 8006db8:	4949      	ldr	r1, [pc, #292]	; (8006ee0 <HAL_GPIO_DeInit+0x214>)
 8006dba:	4013      	ands	r3, r2
 8006dbc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006dbe:	4b48      	ldr	r3, [pc, #288]	; (8006ee0 <HAL_GPIO_DeInit+0x214>)
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	43db      	mvns	r3, r3
 8006dc6:	4946      	ldr	r1, [pc, #280]	; (8006ee0 <HAL_GPIO_DeInit+0x214>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006dcc:	4b44      	ldr	r3, [pc, #272]	; (8006ee0 <HAL_GPIO_DeInit+0x214>)
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	43db      	mvns	r3, r3
 8006dd4:	4942      	ldr	r1, [pc, #264]	; (8006ee0 <HAL_GPIO_DeInit+0x214>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006dda:	4b41      	ldr	r3, [pc, #260]	; (8006ee0 <HAL_GPIO_DeInit+0x214>)
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	43db      	mvns	r3, r3
 8006de2:	493f      	ldr	r1, [pc, #252]	; (8006ee0 <HAL_GPIO_DeInit+0x214>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f003 0303 	and.w	r3, r3, #3
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	220f      	movs	r2, #15
 8006df2:	fa02 f303 	lsl.w	r3, r2, r3
 8006df6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006df8:	4a2e      	ldr	r2, [pc, #184]	; (8006eb4 <HAL_GPIO_DeInit+0x1e8>)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	089b      	lsrs	r3, r3, #2
 8006dfe:	3302      	adds	r3, #2
 8006e00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	43da      	mvns	r2, r3
 8006e08:	482a      	ldr	r0, [pc, #168]	; (8006eb4 <HAL_GPIO_DeInit+0x1e8>)
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	089b      	lsrs	r3, r3, #2
 8006e0e:	400a      	ands	r2, r1
 8006e10:	3302      	adds	r3, #2
 8006e12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	2103      	movs	r1, #3
 8006e20:	fa01 f303 	lsl.w	r3, r1, r3
 8006e24:	43db      	mvns	r3, r3
 8006e26:	401a      	ands	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	08da      	lsrs	r2, r3, #3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3208      	adds	r2, #8
 8006e34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	220f      	movs	r2, #15
 8006e42:	fa02 f303 	lsl.w	r3, r2, r3
 8006e46:	43db      	mvns	r3, r3
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	08d2      	lsrs	r2, r2, #3
 8006e4c:	4019      	ands	r1, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3208      	adds	r2, #8
 8006e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	2103      	movs	r1, #3
 8006e60:	fa01 f303 	lsl.w	r3, r1, r3
 8006e64:	43db      	mvns	r3, r3
 8006e66:	401a      	ands	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	2101      	movs	r1, #1
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	fa01 f303 	lsl.w	r3, r1, r3
 8006e78:	43db      	mvns	r3, r3
 8006e7a:	401a      	ands	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	2103      	movs	r1, #3
 8006e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8e:	43db      	mvns	r3, r3
 8006e90:	401a      	ands	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	617b      	str	r3, [r7, #20]
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	2b0f      	cmp	r3, #15
 8006ea0:	f67f af22 	bls.w	8006ce8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop
 8006ea8:	371c      	adds	r7, #28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	40013800 	.word	0x40013800
 8006eb8:	40020000 	.word	0x40020000
 8006ebc:	40020400 	.word	0x40020400
 8006ec0:	40020800 	.word	0x40020800
 8006ec4:	40020c00 	.word	0x40020c00
 8006ec8:	40021000 	.word	0x40021000
 8006ecc:	40021400 	.word	0x40021400
 8006ed0:	40021800 	.word	0x40021800
 8006ed4:	40021c00 	.word	0x40021c00
 8006ed8:	40022000 	.word	0x40022000
 8006edc:	40022400 	.word	0x40022400
 8006ee0:	40013c00 	.word	0x40013c00

08006ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e07f      	b.n	8006ff6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d106      	bne.n	8006f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7f9 fdc8 	bl	8000aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2224      	movs	r2, #36	; 0x24
 8006f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0201 	bic.w	r2, r2, #1
 8006f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d107      	bne.n	8006f5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f5a:	609a      	str	r2, [r3, #8]
 8006f5c:	e006      	b.n	8006f6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006f6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d104      	bne.n	8006f7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6859      	ldr	r1, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	4b1d      	ldr	r3, [pc, #116]	; (8007000 <HAL_I2C_Init+0x11c>)
 8006f8a:	430b      	orrs	r3, r1
 8006f8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691a      	ldr	r2, [r3, #16]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	69d9      	ldr	r1, [r3, #28]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a1a      	ldr	r2, [r3, #32]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0201 	orr.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	02008000 	.word	0x02008000

08007004 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e021      	b.n	800705a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2224      	movs	r2, #36	; 0x24
 800701a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f022 0201 	bic.w	r2, r2, #1
 800702c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7f9 fda4 	bl	8000b7c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
	...

08007064 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af02      	add	r7, sp, #8
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	4608      	mov	r0, r1
 800706e:	4611      	mov	r1, r2
 8007070:	461a      	mov	r2, r3
 8007072:	4603      	mov	r3, r0
 8007074:	817b      	strh	r3, [r7, #10]
 8007076:	460b      	mov	r3, r1
 8007078:	813b      	strh	r3, [r7, #8]
 800707a:	4613      	mov	r3, r2
 800707c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b20      	cmp	r3, #32
 8007088:	f040 80f9 	bne.w	800727e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <HAL_I2C_Mem_Write+0x34>
 8007092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007094:	2b00      	cmp	r3, #0
 8007096:	d105      	bne.n	80070a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800709e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e0ed      	b.n	8007280 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d101      	bne.n	80070b2 <HAL_I2C_Mem_Write+0x4e>
 80070ae:	2302      	movs	r3, #2
 80070b0:	e0e6      	b.n	8007280 <HAL_I2C_Mem_Write+0x21c>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80070ba:	f7fe fde5 	bl	8005c88 <HAL_GetTick>
 80070be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	2319      	movs	r3, #25
 80070c6:	2201      	movs	r2, #1
 80070c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f001 fc9c 	bl	8008a0a <I2C_WaitOnFlagUntilTimeout>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e0d1      	b.n	8007280 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2221      	movs	r2, #33	; 0x21
 80070e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2240      	movs	r2, #64	; 0x40
 80070e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6a3a      	ldr	r2, [r7, #32]
 80070f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007104:	88f8      	ldrh	r0, [r7, #6]
 8007106:	893a      	ldrh	r2, [r7, #8]
 8007108:	8979      	ldrh	r1, [r7, #10]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	4603      	mov	r3, r0
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 ff4d 	bl	8007fb4 <I2C_RequestMemoryWrite>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d005      	beq.n	800712c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e0a9      	b.n	8007280 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007130:	b29b      	uxth	r3, r3
 8007132:	2bff      	cmp	r3, #255	; 0xff
 8007134:	d90e      	bls.n	8007154 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	22ff      	movs	r2, #255	; 0xff
 800713a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007140:	b2da      	uxtb	r2, r3
 8007142:	8979      	ldrh	r1, [r7, #10]
 8007144:	2300      	movs	r3, #0
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f001 fdf9 	bl	8008d44 <I2C_TransferConfig>
 8007152:	e00f      	b.n	8007174 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007158:	b29a      	uxth	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007162:	b2da      	uxtb	r2, r3
 8007164:	8979      	ldrh	r1, [r7, #10]
 8007166:	2300      	movs	r3, #0
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f001 fde8 	bl	8008d44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f001 fc86 	bl	8008a8a <I2C_WaitOnTXISFlagUntilTimeout>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e07b      	b.n	8007280 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	781a      	ldrb	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	1c5a      	adds	r2, r3, #1
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	3b01      	subs	r3, #1
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b0:	3b01      	subs	r3, #1
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071bc:	b29b      	uxth	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d034      	beq.n	800722c <HAL_I2C_Mem_Write+0x1c8>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d130      	bne.n	800722c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d0:	2200      	movs	r2, #0
 80071d2:	2180      	movs	r1, #128	; 0x80
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f001 fc18 	bl	8008a0a <I2C_WaitOnFlagUntilTimeout>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e04d      	b.n	8007280 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	2bff      	cmp	r3, #255	; 0xff
 80071ec:	d90e      	bls.n	800720c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	22ff      	movs	r2, #255	; 0xff
 80071f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	8979      	ldrh	r1, [r7, #10]
 80071fc:	2300      	movs	r3, #0
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f001 fd9d 	bl	8008d44 <I2C_TransferConfig>
 800720a:	e00f      	b.n	800722c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007210:	b29a      	uxth	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800721a:	b2da      	uxtb	r2, r3
 800721c:	8979      	ldrh	r1, [r7, #10]
 800721e:	2300      	movs	r3, #0
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f001 fd8c 	bl	8008d44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d19e      	bne.n	8007174 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f001 fc65 	bl	8008b0a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e01a      	b.n	8007280 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2220      	movs	r2, #32
 8007250:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6859      	ldr	r1, [r3, #4]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <HAL_I2C_Mem_Write+0x224>)
 800725e:	400b      	ands	r3, r1
 8007260:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2220      	movs	r2, #32
 8007266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	e000      	b.n	8007280 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800727e:	2302      	movs	r3, #2
  }
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	fe00e800 	.word	0xfe00e800

0800728c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b088      	sub	sp, #32
 8007290:	af02      	add	r7, sp, #8
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	4608      	mov	r0, r1
 8007296:	4611      	mov	r1, r2
 8007298:	461a      	mov	r2, r3
 800729a:	4603      	mov	r3, r0
 800729c:	817b      	strh	r3, [r7, #10]
 800729e:	460b      	mov	r3, r1
 80072a0:	813b      	strh	r3, [r7, #8]
 80072a2:	4613      	mov	r3, r2
 80072a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	f040 80fd 	bne.w	80074ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_I2C_Mem_Read+0x34>
 80072ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d105      	bne.n	80072cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e0f1      	b.n	80074b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d101      	bne.n	80072da <HAL_I2C_Mem_Read+0x4e>
 80072d6:	2302      	movs	r3, #2
 80072d8:	e0ea      	b.n	80074b0 <HAL_I2C_Mem_Read+0x224>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072e2:	f7fe fcd1 	bl	8005c88 <HAL_GetTick>
 80072e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	2319      	movs	r3, #25
 80072ee:	2201      	movs	r2, #1
 80072f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f001 fb88 	bl	8008a0a <I2C_WaitOnFlagUntilTimeout>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e0d5      	b.n	80074b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2222      	movs	r2, #34	; 0x22
 8007308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2240      	movs	r2, #64	; 0x40
 8007310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a3a      	ldr	r2, [r7, #32]
 800731e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800732c:	88f8      	ldrh	r0, [r7, #6]
 800732e:	893a      	ldrh	r2, [r7, #8]
 8007330:	8979      	ldrh	r1, [r7, #10]
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	4603      	mov	r3, r0
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 fe8d 	bl	800805c <I2C_RequestMemoryRead>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e0ad      	b.n	80074b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007358:	b29b      	uxth	r3, r3
 800735a:	2bff      	cmp	r3, #255	; 0xff
 800735c:	d90e      	bls.n	800737c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	22ff      	movs	r2, #255	; 0xff
 8007362:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007368:	b2da      	uxtb	r2, r3
 800736a:	8979      	ldrh	r1, [r7, #10]
 800736c:	4b52      	ldr	r3, [pc, #328]	; (80074b8 <HAL_I2C_Mem_Read+0x22c>)
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f001 fce5 	bl	8008d44 <I2C_TransferConfig>
 800737a:	e00f      	b.n	800739c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007380:	b29a      	uxth	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800738a:	b2da      	uxtb	r2, r3
 800738c:	8979      	ldrh	r1, [r7, #10]
 800738e:	4b4a      	ldr	r3, [pc, #296]	; (80074b8 <HAL_I2C_Mem_Read+0x22c>)
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f001 fcd4 	bl	8008d44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a2:	2200      	movs	r2, #0
 80073a4:	2104      	movs	r1, #4
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f001 fb2f 	bl	8008a0a <I2C_WaitOnFlagUntilTimeout>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d001      	beq.n	80073b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e07c      	b.n	80074b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d034      	beq.n	800745c <HAL_I2C_Mem_Read+0x1d0>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d130      	bne.n	800745c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	2200      	movs	r2, #0
 8007402:	2180      	movs	r1, #128	; 0x80
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f001 fb00 	bl	8008a0a <I2C_WaitOnFlagUntilTimeout>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e04d      	b.n	80074b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007418:	b29b      	uxth	r3, r3
 800741a:	2bff      	cmp	r3, #255	; 0xff
 800741c:	d90e      	bls.n	800743c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	22ff      	movs	r2, #255	; 0xff
 8007422:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007428:	b2da      	uxtb	r2, r3
 800742a:	8979      	ldrh	r1, [r7, #10]
 800742c:	2300      	movs	r3, #0
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f001 fc85 	bl	8008d44 <I2C_TransferConfig>
 800743a:	e00f      	b.n	800745c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800744a:	b2da      	uxtb	r2, r3
 800744c:	8979      	ldrh	r1, [r7, #10]
 800744e:	2300      	movs	r3, #0
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f001 fc74 	bl	8008d44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d19a      	bne.n	800739c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f001 fb4d 	bl	8008b0a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e01a      	b.n	80074b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2220      	movs	r2, #32
 8007480:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6859      	ldr	r1, [r3, #4]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	4b0b      	ldr	r3, [pc, #44]	; (80074bc <HAL_I2C_Mem_Read+0x230>)
 800748e:	400b      	ands	r3, r1
 8007490:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2220      	movs	r2, #32
 8007496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	e000      	b.n	80074b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80074ae:	2302      	movs	r3, #2
  }
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	80002400 	.word	0x80002400
 80074bc:	fe00e800 	.word	0xfe00e800

080074c0 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af02      	add	r7, sp, #8
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	4608      	mov	r0, r1
 80074ca:	4611      	mov	r1, r2
 80074cc:	461a      	mov	r2, r3
 80074ce:	4603      	mov	r3, r0
 80074d0:	817b      	strh	r3, [r7, #10]
 80074d2:	460b      	mov	r3, r1
 80074d4:	813b      	strh	r3, [r7, #8]
 80074d6:	4613      	mov	r3, r2
 80074d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b20      	cmp	r3, #32
 80074e4:	d166      	bne.n	80075b4 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <HAL_I2C_Mem_Read_IT+0x32>
 80074ec:	8bbb      	ldrh	r3, [r7, #28]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d105      	bne.n	80074fe <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074f8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e05b      	b.n	80075b6 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800750c:	d101      	bne.n	8007512 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800750e:	2302      	movs	r3, #2
 8007510:	e051      	b.n	80075b6 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007518:	2b01      	cmp	r3, #1
 800751a:	d101      	bne.n	8007520 <HAL_I2C_Mem_Read_IT+0x60>
 800751c:	2302      	movs	r3, #2
 800751e:	e04a      	b.n	80075b6 <HAL_I2C_Mem_Read_IT+0xf6>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2222      	movs	r2, #34	; 0x22
 800752c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2240      	movs	r2, #64	; 0x40
 8007534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8bba      	ldrh	r2, [r7, #28]
 8007548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4a1c      	ldr	r2, [pc, #112]	; (80075c0 <HAL_I2C_Mem_Read_IT+0x100>)
 800754e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4a1c      	ldr	r2, [pc, #112]	; (80075c4 <HAL_I2C_Mem_Read_IT+0x104>)
 8007554:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8007556:	897a      	ldrh	r2, [r7, #10]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800755c:	88fb      	ldrh	r3, [r7, #6]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d109      	bne.n	8007576 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007562:	893b      	ldrh	r3, [r7, #8]
 8007564:	b2da      	uxtb	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007572:	651a      	str	r2, [r3, #80]	; 0x50
 8007574:	e00b      	b.n	800758e <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007576:	893b      	ldrh	r3, [r7, #8]
 8007578:	0a1b      	lsrs	r3, r3, #8
 800757a:	b29b      	uxth	r3, r3
 800757c:	b2da      	uxtb	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8007584:	893b      	ldrh	r3, [r7, #8]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	461a      	mov	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800758e:	88fb      	ldrh	r3, [r7, #6]
 8007590:	b2da      	uxtb	r2, r3
 8007592:	8979      	ldrh	r1, [r7, #10]
 8007594:	4b0c      	ldr	r3, [pc, #48]	; (80075c8 <HAL_I2C_Mem_Read_IT+0x108>)
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	2300      	movs	r3, #0
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f001 fbd2 	bl	8008d44 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, (I2C_XFER_TX_IT | I2C_XFER_RX_IT));
 80075a8:	2103      	movs	r1, #3
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f001 fbfc 	bl	8008da8 <I2C_Enable_IRQ>

    return HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	e000      	b.n	80075b6 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 80075b4:	2302      	movs	r3, #2
  }
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	ffff0000 	.word	0xffff0000
 80075c4:	080077b5 	.word	0x080077b5
 80075c8:	80002000 	.word	0x80002000

080075cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	68f9      	ldr	r1, [r7, #12]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	4798      	blx	r3
  }
}
 80075f8:	bf00      	nop
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	0a1b      	lsrs	r3, r3, #8
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b00      	cmp	r3, #0
 8007622:	d010      	beq.n	8007646 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	09db      	lsrs	r3, r3, #7
 8007628:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00a      	beq.n	8007646 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007634:	f043 0201 	orr.w	r2, r3, #1
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007644:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	0a9b      	lsrs	r3, r3, #10
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d010      	beq.n	8007674 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	09db      	lsrs	r3, r3, #7
 8007656:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007662:	f043 0208 	orr.w	r2, r3, #8
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007672:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	0a5b      	lsrs	r3, r3, #9
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d010      	beq.n	80076a2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	09db      	lsrs	r3, r3, #7
 8007684:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007690:	f043 0202 	orr.w	r2, r3, #2
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076a0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f003 030b 	and.w	r3, r3, #11
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80076b2:	68f9      	ldr	r1, [r7, #12]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f001 f86f 	bl	8008798 <I2C_ITError>
  }
}
 80076ba:	bf00      	nop
 80076bc:	3718      	adds	r7, #24
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80076ca:	bf00      	nop
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80076de:	bf00      	nop
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	70fb      	strb	r3, [r7, #3]
 800771e:	4613      	mov	r3, r2
 8007720:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007736:	bf00      	nop
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800775e:	bf00      	nop
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800778c:	b2db      	uxtb	r3, r3
}
 800778e:	4618      	mov	r0, r3
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
	...

080077b4 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80077c0:	4b8f      	ldr	r3, [pc, #572]	; (8007a00 <I2C_Mem_ISR_IT+0x24c>)
 80077c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <I2C_Mem_ISR_IT+0x22>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e110      	b.n	80079f8 <I2C_Mem_ISR_IT+0x244>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	091b      	lsrs	r3, r3, #4
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d013      	beq.n	8007812 <I2C_Mem_ISR_IT+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	091b      	lsrs	r3, r3, #4
 80077ee:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00d      	beq.n	8007812 <I2C_Mem_ISR_IT+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2210      	movs	r2, #16
 80077fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007802:	f043 0204 	orr.w	r2, r3, #4
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f001 f8bb 	bl	8008986 <I2C_Flush_TXDR>
 8007810:	e0dd      	b.n	80079ce <I2C_Mem_ISR_IT+0x21a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	089b      	lsrs	r3, r3, #2
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d023      	beq.n	8007866 <I2C_Mem_ISR_IT+0xb2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	089b      	lsrs	r3, r3, #2
 8007822:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007826:	2b00      	cmp	r3, #0
 8007828:	d01d      	beq.n	8007866 <I2C_Mem_ISR_IT+0xb2>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f023 0304 	bic.w	r3, r3, #4
 8007830:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	b2d2      	uxtb	r2, r2
 800783e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785a:	b29b      	uxth	r3, r3
 800785c:	3b01      	subs	r3, #1
 800785e:	b29a      	uxth	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007864:	e0b3      	b.n	80079ce <I2C_Mem_ISR_IT+0x21a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	085b      	lsrs	r3, r3, #1
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d02d      	beq.n	80078ce <I2C_Mem_ISR_IT+0x11a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800787a:	2b00      	cmp	r3, #0
 800787c:	d027      	beq.n	80078ce <I2C_Mem_ISR_IT+0x11a>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007886:	d118      	bne.n	80078ba <I2C_Mem_ISR_IT+0x106>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	781a      	ldrb	r2, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a2:	3b01      	subs	r3, #1
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80078b8:	e089      	b.n	80079ce <I2C_Mem_ISR_IT+0x21a>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80078c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078ca:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80078cc:	e07f      	b.n	80079ce <I2C_Mem_ISR_IT+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	09db      	lsrs	r3, r3, #7
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d03d      	beq.n	8007956 <I2C_Mem_ISR_IT+0x1a2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	099b      	lsrs	r3, r3, #6
 80078de:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d037      	beq.n	8007956 <I2C_Mem_ISR_IT+0x1a2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d02c      	beq.n	800794a <I2C_Mem_ISR_IT+0x196>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d128      	bne.n	800794a <I2C_Mem_ISR_IT+0x196>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2bff      	cmp	r3, #255	; 0xff
 8007900:	d910      	bls.n	8007924 <I2C_Mem_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	22ff      	movs	r2, #255	; 0xff
 8007906:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800790c:	b299      	uxth	r1, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007912:	b2da      	uxtb	r2, r3
 8007914:	2300      	movs	r3, #0
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f001 fa11 	bl	8008d44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007922:	e017      	b.n	8007954 <I2C_Mem_ISR_IT+0x1a0>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007928:	b29a      	uxth	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007932:	b299      	uxth	r1, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007938:	b2da      	uxtb	r2, r3
 800793a:	2300      	movs	r3, #0
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f001 f9fe 	bl	8008d44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007948:	e004      	b.n	8007954 <I2C_Mem_ISR_IT+0x1a0>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800794a:	2140      	movs	r1, #64	; 0x40
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 ff23 	bl	8008798 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007952:	e03c      	b.n	80079ce <I2C_Mem_ISR_IT+0x21a>
 8007954:	e03b      	b.n	80079ce <I2C_Mem_ISR_IT+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	099b      	lsrs	r3, r3, #6
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d035      	beq.n	80079ce <I2C_Mem_ISR_IT+0x21a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	099b      	lsrs	r3, r3, #6
 8007966:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800796a:	2b00      	cmp	r3, #0
 800796c:	d02f      	beq.n	80079ce <I2C_Mem_ISR_IT+0x21a>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b22      	cmp	r3, #34	; 0x22
 8007978:	d101      	bne.n	800797e <I2C_Mem_ISR_IT+0x1ca>
    {
      direction = I2C_GENERATE_START_READ;
 800797a:	4b22      	ldr	r3, [pc, #136]	; (8007a04 <I2C_Mem_ISR_IT+0x250>)
 800797c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007982:	b29b      	uxth	r3, r3
 8007984:	2bff      	cmp	r3, #255	; 0xff
 8007986:	d910      	bls.n	80079aa <I2C_Mem_ISR_IT+0x1f6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	22ff      	movs	r2, #255	; 0xff
 800798c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007992:	b299      	uxth	r1, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007998:	b2da      	uxtb	r2, r3
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f001 f9ce 	bl	8008d44 <I2C_TransferConfig>
 80079a8:	e011      	b.n	80079ce <I2C_Mem_ISR_IT+0x21a>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b8:	b299      	uxth	r1, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f001 f9bb 	bl	8008d44 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	095b      	lsrs	r3, r3, #5
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d009      	beq.n	80079ee <I2C_Mem_ISR_IT+0x23a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	095b      	lsrs	r3, r3, #5
 80079de:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d003      	beq.n	80079ee <I2C_Mem_ISR_IT+0x23a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80079e6:	6939      	ldr	r1, [r7, #16]
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 fcab 	bl	8008344 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	80002000 	.word	0x80002000
 8007a04:	80002400 	.word	0x80002400

08007a08 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d101      	bne.n	8007a2c <I2C_Slave_ISR_IT+0x24>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	e0ec      	b.n	8007c06 <I2C_Slave_ISR_IT+0x1fe>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d009      	beq.n	8007a54 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	095b      	lsrs	r3, r3, #5
 8007a44:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007a4c:	6939      	ldr	r1, [r7, #16]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 fd42 	bl	80084d8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	091b      	lsrs	r3, r3, #4
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d04d      	beq.n	8007afc <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	091b      	lsrs	r3, r3, #4
 8007a64:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d047      	beq.n	8007afc <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d128      	bne.n	8007ac8 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b28      	cmp	r3, #40	; 0x28
 8007a80:	d108      	bne.n	8007a94 <I2C_Slave_ISR_IT+0x8c>
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a88:	d104      	bne.n	8007a94 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007a8a:	6939      	ldr	r1, [r7, #16]
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f000 fe2d 	bl	80086ec <I2C_ITListenCplt>
 8007a92:	e032      	b.n	8007afa <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b29      	cmp	r3, #41	; 0x29
 8007a9e:	d10e      	bne.n	8007abe <I2C_Slave_ISR_IT+0xb6>
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007aa6:	d00a      	beq.n	8007abe <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2210      	movs	r2, #16
 8007aae:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 ff68 	bl	8008986 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 fbe5 	bl	8008286 <I2C_ITSlaveSeqCplt>
 8007abc:	e01d      	b.n	8007afa <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2210      	movs	r2, #16
 8007ac4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007ac6:	e096      	b.n	8007bf6 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2210      	movs	r2, #16
 8007ace:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad4:	f043 0204 	orr.w	r2, r3, #4
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d004      	beq.n	8007aec <I2C_Slave_ISR_IT+0xe4>
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ae8:	f040 8085 	bne.w	8007bf6 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af0:	4619      	mov	r1, r3
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 fe50 	bl	8008798 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007af8:	e07d      	b.n	8007bf6 <I2C_Slave_ISR_IT+0x1ee>
 8007afa:	e07c      	b.n	8007bf6 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	089b      	lsrs	r3, r3, #2
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d030      	beq.n	8007b6a <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	089b      	lsrs	r3, r3, #2
 8007b0c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d02a      	beq.n	8007b6a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d018      	beq.n	8007b50 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	b2d2      	uxtb	r2, r2
 8007b2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d14f      	bne.n	8007bfa <I2C_Slave_ISR_IT+0x1f2>
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b60:	d04b      	beq.n	8007bfa <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 fb8f 	bl	8008286 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007b68:	e047      	b.n	8007bfa <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	08db      	lsrs	r3, r3, #3
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	08db      	lsrs	r3, r3, #3
 8007b7a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007b82:	6939      	ldr	r1, [r7, #16]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 fabd 	bl	8008104 <I2C_ITAddrCplt>
 8007b8a:	e037      	b.n	8007bfc <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	085b      	lsrs	r3, r3, #1
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d031      	beq.n	8007bfc <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	085b      	lsrs	r3, r3, #1
 8007b9c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d02b      	beq.n	8007bfc <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d018      	beq.n	8007be0 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	781a      	ldrb	r2, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	851a      	strh	r2, [r3, #40]	; 0x28
 8007bde:	e00d      	b.n	8007bfc <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007be6:	d002      	beq.n	8007bee <I2C_Slave_ISR_IT+0x1e6>
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d106      	bne.n	8007bfc <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f000 fb49 	bl	8008286 <I2C_ITSlaveSeqCplt>
 8007bf4:	e002      	b.n	8007bfc <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8007bf6:	bf00      	nop
 8007bf8:	e000      	b.n	8007bfc <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8007bfa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b088      	sub	sp, #32
 8007c12:	af02      	add	r7, sp, #8
 8007c14:	60f8      	str	r0, [r7, #12]
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d101      	bne.n	8007c28 <I2C_Master_ISR_DMA+0x1a>
 8007c24:	2302      	movs	r3, #2
 8007c26:	e0e1      	b.n	8007dec <I2C_Master_ISR_DMA+0x1de>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	091b      	lsrs	r3, r3, #4
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d017      	beq.n	8007c6c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	091b      	lsrs	r3, r3, #4
 8007c40:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d011      	beq.n	8007c6c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2210      	movs	r2, #16
 8007c4e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c54:	f043 0204 	orr.w	r2, r3, #4
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007c5c:	2120      	movs	r1, #32
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f001 f8a2 	bl	8008da8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 fe8e 	bl	8008986 <I2C_Flush_TXDR>
 8007c6a:	e0ba      	b.n	8007de2 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	09db      	lsrs	r3, r3, #7
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d072      	beq.n	8007d5e <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	099b      	lsrs	r3, r3, #6
 8007c7c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d06c      	beq.n	8007d5e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c92:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d04e      	beq.n	8007d3c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007caa:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2bff      	cmp	r3, #255	; 0xff
 8007cb4:	d906      	bls.n	8007cc4 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	22ff      	movs	r2, #255	; 0xff
 8007cba:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8007cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	e010      	b.n	8007ce6 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cd6:	d003      	beq.n	8007ce0 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	e002      	b.n	8007ce6 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007ce0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ce4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	8a79      	ldrh	r1, [r7, #18]
 8007cee:	2300      	movs	r3, #0
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f001 f825 	bl	8008d44 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b22      	cmp	r3, #34	; 0x22
 8007d16:	d108      	bne.n	8007d2a <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d26:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007d28:	e05b      	b.n	8007de2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d38:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007d3a:	e052      	b.n	8007de2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d4a:	d003      	beq.n	8007d54 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 fa5d 	bl	800820c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007d52:	e046      	b.n	8007de2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007d54:	2140      	movs	r1, #64	; 0x40
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 fd1e 	bl	8008798 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007d5c:	e041      	b.n	8007de2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	099b      	lsrs	r3, r3, #6
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d029      	beq.n	8007dbe <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	099b      	lsrs	r3, r3, #6
 8007d6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d023      	beq.n	8007dbe <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d119      	bne.n	8007db4 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d8e:	d027      	beq.n	8007de0 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d98:	d108      	bne.n	8007dac <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007da8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007daa:	e019      	b.n	8007de0 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 fa2d 	bl	800820c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007db2:	e015      	b.n	8007de0 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007db4:	2140      	movs	r1, #64	; 0x40
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 fcee 	bl	8008798 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007dbc:	e010      	b.n	8007de0 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	095b      	lsrs	r3, r3, #5
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00b      	beq.n	8007de2 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	095b      	lsrs	r3, r3, #5
 8007dce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d005      	beq.n	8007de2 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007dd6:	68b9      	ldr	r1, [r7, #8]
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fab3 	bl	8008344 <I2C_ITMasterCplt>
 8007dde:	e000      	b.n	8007de2 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8007de0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3718      	adds	r7, #24
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b088      	sub	sp, #32
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e04:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007e06:	2300      	movs	r3, #0
 8007e08:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d101      	bne.n	8007e18 <I2C_Slave_ISR_DMA+0x24>
 8007e14:	2302      	movs	r3, #2
 8007e16:	e0c9      	b.n	8007fac <I2C_Slave_ISR_DMA+0x1b8>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	095b      	lsrs	r3, r3, #5
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d009      	beq.n	8007e40 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	095b      	lsrs	r3, r3, #5
 8007e30:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d003      	beq.n	8007e40 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 fb4c 	bl	80084d8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	091b      	lsrs	r3, r3, #4
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 809a 	beq.w	8007f82 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	091b      	lsrs	r3, r3, #4
 8007e52:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 8093 	beq.w	8007f82 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	0b9b      	lsrs	r3, r3, #14
 8007e60:	f003 0301 	and.w	r3, r3, #1
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d105      	bne.n	8007e74 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	0bdb      	lsrs	r3, r3, #15
 8007e6c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d07f      	beq.n	8007f74 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00d      	beq.n	8007e98 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	0bdb      	lsrs	r3, r3, #15
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d007      	beq.n	8007e98 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8007e94:	2301      	movs	r3, #1
 8007e96:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00d      	beq.n	8007ebc <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	0b9b      	lsrs	r3, r3, #14
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d007      	beq.n	8007ebc <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d128      	bne.n	8007f14 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b28      	cmp	r3, #40	; 0x28
 8007ecc:	d108      	bne.n	8007ee0 <I2C_Slave_ISR_DMA+0xec>
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ed4:	d104      	bne.n	8007ee0 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007ed6:	68b9      	ldr	r1, [r7, #8]
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 fc07 	bl	80086ec <I2C_ITListenCplt>
 8007ede:	e048      	b.n	8007f72 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b29      	cmp	r3, #41	; 0x29
 8007eea:	d10e      	bne.n	8007f0a <I2C_Slave_ISR_DMA+0x116>
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ef2:	d00a      	beq.n	8007f0a <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2210      	movs	r2, #16
 8007efa:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 fd42 	bl	8008986 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f000 f9bf 	bl	8008286 <I2C_ITSlaveSeqCplt>
 8007f08:	e033      	b.n	8007f72 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2210      	movs	r2, #16
 8007f10:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007f12:	e034      	b.n	8007f7e <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2210      	movs	r2, #16
 8007f1a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f20:	f043 0204 	orr.w	r2, r3, #4
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f2e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <I2C_Slave_ISR_DMA+0x14a>
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f3c:	d11f      	bne.n	8007f7e <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
 8007f40:	2b21      	cmp	r3, #33	; 0x21
 8007f42:	d002      	beq.n	8007f4a <I2C_Slave_ISR_DMA+0x156>
 8007f44:	7dfb      	ldrb	r3, [r7, #23]
 8007f46:	2b29      	cmp	r3, #41	; 0x29
 8007f48:	d103      	bne.n	8007f52 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2221      	movs	r2, #33	; 0x21
 8007f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8007f50:	e008      	b.n	8007f64 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	2b22      	cmp	r3, #34	; 0x22
 8007f56:	d002      	beq.n	8007f5e <I2C_Slave_ISR_DMA+0x16a>
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f5c:	d102      	bne.n	8007f64 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2222      	movs	r2, #34	; 0x22
 8007f62:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f68:	4619      	mov	r1, r3
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 fc14 	bl	8008798 <I2C_ITError>
      if (treatdmanack == 1U)
 8007f70:	e005      	b.n	8007f7e <I2C_Slave_ISR_DMA+0x18a>
 8007f72:	e004      	b.n	8007f7e <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2210      	movs	r2, #16
 8007f7a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f7c:	e011      	b.n	8007fa2 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8007f7e:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007f80:	e00f      	b.n	8007fa2 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	08db      	lsrs	r3, r3, #3
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d009      	beq.n	8007fa2 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	08db      	lsrs	r3, r3, #3
 8007f92:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 f8b1 	bl	8008104 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3720      	adds	r7, #32
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af02      	add	r7, sp, #8
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	817b      	strh	r3, [r7, #10]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	813b      	strh	r3, [r7, #8]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007fce:	88fb      	ldrh	r3, [r7, #6]
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	8979      	ldrh	r1, [r7, #10]
 8007fd4:	4b20      	ldr	r3, [pc, #128]	; (8008058 <I2C_RequestMemoryWrite+0xa4>)
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 feb1 	bl	8008d44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	69b9      	ldr	r1, [r7, #24]
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 fd4f 	bl	8008a8a <I2C_WaitOnTXISFlagUntilTimeout>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e02c      	b.n	8008050 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ff6:	88fb      	ldrh	r3, [r7, #6]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d105      	bne.n	8008008 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ffc:	893b      	ldrh	r3, [r7, #8]
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	629a      	str	r2, [r3, #40]	; 0x28
 8008006:	e015      	b.n	8008034 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008008:	893b      	ldrh	r3, [r7, #8]
 800800a:	0a1b      	lsrs	r3, r3, #8
 800800c:	b29b      	uxth	r3, r3
 800800e:	b2da      	uxtb	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008016:	69fa      	ldr	r2, [r7, #28]
 8008018:	69b9      	ldr	r1, [r7, #24]
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 fd35 	bl	8008a8a <I2C_WaitOnTXISFlagUntilTimeout>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e012      	b.n	8008050 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800802a:	893b      	ldrh	r3, [r7, #8]
 800802c:	b2da      	uxtb	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	2200      	movs	r2, #0
 800803c:	2180      	movs	r1, #128	; 0x80
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 fce3 	bl	8008a0a <I2C_WaitOnFlagUntilTimeout>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e000      	b.n	8008050 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	80002000 	.word	0x80002000

0800805c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af02      	add	r7, sp, #8
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	4608      	mov	r0, r1
 8008066:	4611      	mov	r1, r2
 8008068:	461a      	mov	r2, r3
 800806a:	4603      	mov	r3, r0
 800806c:	817b      	strh	r3, [r7, #10]
 800806e:	460b      	mov	r3, r1
 8008070:	813b      	strh	r3, [r7, #8]
 8008072:	4613      	mov	r3, r2
 8008074:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008076:	88fb      	ldrh	r3, [r7, #6]
 8008078:	b2da      	uxtb	r2, r3
 800807a:	8979      	ldrh	r1, [r7, #10]
 800807c:	4b20      	ldr	r3, [pc, #128]	; (8008100 <I2C_RequestMemoryRead+0xa4>)
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	2300      	movs	r3, #0
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 fe5e 	bl	8008d44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008088:	69fa      	ldr	r2, [r7, #28]
 800808a:	69b9      	ldr	r1, [r7, #24]
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 fcfc 	bl	8008a8a <I2C_WaitOnTXISFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e02c      	b.n	80080f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800809c:	88fb      	ldrh	r3, [r7, #6]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d105      	bne.n	80080ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080a2:	893b      	ldrh	r3, [r7, #8]
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	629a      	str	r2, [r3, #40]	; 0x28
 80080ac:	e015      	b.n	80080da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80080ae:	893b      	ldrh	r3, [r7, #8]
 80080b0:	0a1b      	lsrs	r3, r3, #8
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080bc:	69fa      	ldr	r2, [r7, #28]
 80080be:	69b9      	ldr	r1, [r7, #24]
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 fce2 	bl	8008a8a <I2C_WaitOnTXISFlagUntilTimeout>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e012      	b.n	80080f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080d0:	893b      	ldrh	r3, [r7, #8]
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	2200      	movs	r2, #0
 80080e2:	2140      	movs	r1, #64	; 0x40
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 fc90 	bl	8008a0a <I2C_WaitOnFlagUntilTimeout>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e000      	b.n	80080f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	80002000 	.word	0x80002000

08008104 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008114:	b2db      	uxtb	r3, r3
 8008116:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800811a:	2b28      	cmp	r3, #40	; 0x28
 800811c:	d16a      	bne.n	80081f4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	0c1b      	lsrs	r3, r3, #16
 8008126:	b2db      	uxtb	r3, r3
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	0c1b      	lsrs	r3, r3, #16
 8008136:	b29b      	uxth	r3, r3
 8008138:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800813c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	b29b      	uxth	r3, r3
 8008146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800814a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	b29b      	uxth	r3, r3
 8008154:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008158:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	2b02      	cmp	r3, #2
 8008160:	d138      	bne.n	80081d4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008162:	897b      	ldrh	r3, [r7, #10]
 8008164:	09db      	lsrs	r3, r3, #7
 8008166:	b29a      	uxth	r2, r3
 8008168:	89bb      	ldrh	r3, [r7, #12]
 800816a:	4053      	eors	r3, r2
 800816c:	b29b      	uxth	r3, r3
 800816e:	f003 0306 	and.w	r3, r3, #6
 8008172:	2b00      	cmp	r3, #0
 8008174:	d11c      	bne.n	80081b0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008176:	897b      	ldrh	r3, [r7, #10]
 8008178:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008188:	2b02      	cmp	r3, #2
 800818a:	d13b      	bne.n	8008204 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2208      	movs	r2, #8
 8008198:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80081a2:	89ba      	ldrh	r2, [r7, #12]
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff fab2 	bl	8007712 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80081ae:	e029      	b.n	8008204 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80081b0:	893b      	ldrh	r3, [r7, #8]
 80081b2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80081b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fe5f 	bl	8008e7c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80081c6:	89ba      	ldrh	r2, [r7, #12]
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7ff faa0 	bl	8007712 <HAL_I2C_AddrCallback>
}
 80081d2:	e017      	b.n	8008204 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80081d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fe4f 	bl	8008e7c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80081e6:	89ba      	ldrh	r2, [r7, #12]
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f7ff fa90 	bl	8007712 <HAL_I2C_AddrCallback>
}
 80081f2:	e007      	b.n	8008204 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2208      	movs	r2, #8
 80081fa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008204:	bf00      	nop
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b21      	cmp	r3, #33	; 0x21
 8008226:	d115      	bne.n	8008254 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2220      	movs	r2, #32
 800822c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2211      	movs	r2, #17
 8008234:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800823c:	2101      	movs	r1, #1
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fe1c 	bl	8008e7c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7ff fa38 	bl	80076c2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008252:	e014      	b.n	800827e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2212      	movs	r2, #18
 8008260:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008268:	2102      	movs	r1, #2
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 fe06 	bl	8008e7c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7ff fa2c 	bl	80076d6 <HAL_I2C_MasterRxCpltCallback>
}
 800827e:	bf00      	nop
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	0b9b      	lsrs	r3, r3, #14
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d008      	beq.n	80082bc <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	e00d      	b.n	80082d8 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	0bdb      	lsrs	r3, r3, #15
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d007      	beq.n	80082d8 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082d6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b29      	cmp	r3, #41	; 0x29
 80082e2:	d112      	bne.n	800830a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2228      	movs	r2, #40	; 0x28
 80082e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2221      	movs	r2, #33	; 0x21
 80082f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80082f2:	2101      	movs	r1, #1
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fdc1 	bl	8008e7c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7ff f9f1 	bl	80076ea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008308:	e017      	b.n	800833a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b2a      	cmp	r3, #42	; 0x2a
 8008314:	d111      	bne.n	800833a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2228      	movs	r2, #40	; 0x28
 800831a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2222      	movs	r2, #34	; 0x22
 8008322:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008324:	2102      	movs	r1, #2
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fda8 	bl	8008e7c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff f9e2 	bl	80076fe <HAL_I2C_SlaveRxCpltCallback>
}
 800833a:	bf00      	nop
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
	...

08008344 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2220      	movs	r2, #32
 8008358:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b21      	cmp	r3, #33	; 0x21
 8008364:	d107      	bne.n	8008376 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008366:	2101      	movs	r1, #1
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fd87 	bl	8008e7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2211      	movs	r2, #17
 8008372:	631a      	str	r2, [r3, #48]	; 0x30
 8008374:	e00c      	b.n	8008390 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b22      	cmp	r3, #34	; 0x22
 8008380:	d106      	bne.n	8008390 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008382:	2102      	movs	r1, #2
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fd79 	bl	8008e7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2212      	movs	r2, #18
 800838e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6859      	ldr	r1, [r3, #4]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	4b4d      	ldr	r3, [pc, #308]	; (80084d0 <I2C_ITMasterCplt+0x18c>)
 800839c:	400b      	ands	r3, r1
 800839e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a4a      	ldr	r2, [pc, #296]	; (80084d4 <I2C_ITMasterCplt+0x190>)
 80083aa:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	091b      	lsrs	r3, r3, #4
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d009      	beq.n	80083cc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2210      	movs	r2, #16
 80083be:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c4:	f043 0204 	orr.w	r2, r3, #4
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b60      	cmp	r3, #96	; 0x60
 80083d6:	d10b      	bne.n	80083f0 <I2C_ITMasterCplt+0xac>
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	089b      	lsrs	r3, r3, #2
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d005      	beq.n	80083f0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80083ee:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fac8 	bl	8008986 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b60      	cmp	r3, #96	; 0x60
 8008406:	d002      	beq.n	800840e <I2C_ITMasterCplt+0xca>
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d006      	beq.n	800841c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f9bf 	bl	8008798 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800841a:	e054      	b.n	80084c6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b21      	cmp	r3, #33	; 0x21
 8008426:	d124      	bne.n	8008472 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b40      	cmp	r3, #64	; 0x40
 8008440:	d10b      	bne.n	800845a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f7ff f975 	bl	8007742 <HAL_I2C_MemTxCpltCallback>
}
 8008458:	e035      	b.n	80084c6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff f929 	bl	80076c2 <HAL_I2C_MasterTxCpltCallback>
}
 8008470:	e029      	b.n	80084c6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b22      	cmp	r3, #34	; 0x22
 800847c:	d123      	bne.n	80084c6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2220      	movs	r2, #32
 8008482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b40      	cmp	r3, #64	; 0x40
 8008496:	d10b      	bne.n	80084b0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7f8 fc01 	bl	8000cb0 <HAL_I2C_MemRxCpltCallback>
}
 80084ae:	e00a      	b.n	80084c6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff f908 	bl	80076d6 <HAL_I2C_MasterRxCpltCallback>
}
 80084c6:	bf00      	nop
 80084c8:	3718      	adds	r7, #24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	fe00e800 	.word	0xfe00e800
 80084d4:	ffff0000 	.word	0xffff0000

080084d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084f4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2220      	movs	r2, #32
 80084fc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	2b21      	cmp	r3, #33	; 0x21
 8008502:	d002      	beq.n	800850a <I2C_ITSlaveCplt+0x32>
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	2b29      	cmp	r3, #41	; 0x29
 8008508:	d108      	bne.n	800851c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800850a:	f248 0101 	movw	r1, #32769	; 0x8001
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fcb4 	bl	8008e7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2221      	movs	r2, #33	; 0x21
 8008518:	631a      	str	r2, [r3, #48]	; 0x30
 800851a:	e00d      	b.n	8008538 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	2b22      	cmp	r3, #34	; 0x22
 8008520:	d002      	beq.n	8008528 <I2C_ITSlaveCplt+0x50>
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	2b2a      	cmp	r3, #42	; 0x2a
 8008526:	d107      	bne.n	8008538 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008528:	f248 0102 	movw	r1, #32770	; 0x8002
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fca5 	bl	8008e7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2222      	movs	r2, #34	; 0x22
 8008536:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008546:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6859      	ldr	r1, [r3, #4]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	4b64      	ldr	r3, [pc, #400]	; (80086e4 <I2C_ITSlaveCplt+0x20c>)
 8008554:	400b      	ands	r3, r1
 8008556:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fa14 	bl	8008986 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	0b9b      	lsrs	r3, r3, #14
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b00      	cmp	r3, #0
 8008568:	d013      	beq.n	8008592 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008578:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857e:	2b00      	cmp	r3, #0
 8008580:	d020      	beq.n	80085c4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	b29a      	uxth	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008590:	e018      	b.n	80085c4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	0bdb      	lsrs	r3, r3, #15
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	2b00      	cmp	r3, #0
 800859c:	d012      	beq.n	80085c4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085ac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d006      	beq.n	80085c4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	b29a      	uxth	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	089b      	lsrs	r3, r3, #2
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d020      	beq.n	8008612 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f023 0304 	bic.w	r3, r3, #4
 80085d6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	b2d2      	uxtb	r2, r2
 80085e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00c      	beq.n	8008612 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085fc:	3b01      	subs	r3, #1
 80085fe:	b29a      	uxth	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008608:	b29b      	uxth	r3, r3
 800860a:	3b01      	subs	r3, #1
 800860c:	b29a      	uxth	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008616:	b29b      	uxth	r3, r3
 8008618:	2b00      	cmp	r3, #0
 800861a:	d005      	beq.n	8008628 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008620:	f043 0204 	orr.w	r2, r3, #4
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863a:	2b00      	cmp	r3, #0
 800863c:	d010      	beq.n	8008660 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f8a7 	bl	8008798 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b28      	cmp	r3, #40	; 0x28
 8008654:	d141      	bne.n	80086da <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008656:	6979      	ldr	r1, [r7, #20]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f847 	bl	80086ec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800865e:	e03c      	b.n	80086da <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008664:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008668:	d014      	beq.n	8008694 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff fe0b 	bl	8008286 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a1d      	ldr	r2, [pc, #116]	; (80086e8 <I2C_ITSlaveCplt+0x210>)
 8008674:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff f84e 	bl	800772e <HAL_I2C_ListenCpltCallback>
}
 8008692:	e022      	b.n	80086da <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b22      	cmp	r3, #34	; 0x22
 800869e:	d10e      	bne.n	80086be <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff f821 	bl	80076fe <HAL_I2C_SlaveRxCpltCallback>
}
 80086bc:	e00d      	b.n	80086da <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2220      	movs	r2, #32
 80086c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7ff f808 	bl	80076ea <HAL_I2C_SlaveTxCpltCallback>
}
 80086da:	bf00      	nop
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	fe00e800 	.word	0xfe00e800
 80086e8:	ffff0000 	.word	0xffff0000

080086ec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a26      	ldr	r2, [pc, #152]	; (8008794 <I2C_ITListenCplt+0xa8>)
 80086fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2220      	movs	r2, #32
 8008706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	089b      	lsrs	r3, r3, #2
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b00      	cmp	r3, #0
 8008722:	d022      	beq.n	800876a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	b2d2      	uxtb	r2, r2
 8008730:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008740:	2b00      	cmp	r3, #0
 8008742:	d012      	beq.n	800876a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008748:	3b01      	subs	r3, #1
 800874a:	b29a      	uxth	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008754:	b29b      	uxth	r3, r3
 8008756:	3b01      	subs	r3, #1
 8008758:	b29a      	uxth	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008762:	f043 0204 	orr.w	r2, r3, #4
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800876a:	f248 0103 	movw	r1, #32771	; 0x8003
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fb84 	bl	8008e7c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2210      	movs	r2, #16
 800877a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f7fe ffd2 	bl	800772e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	ffff0000 	.word	0xffff0000

08008798 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a5d      	ldr	r2, [pc, #372]	; (800892c <I2C_ITError+0x194>)
 80087b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	431a      	orrs	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	2b28      	cmp	r3, #40	; 0x28
 80087ce:	d005      	beq.n	80087dc <I2C_ITError+0x44>
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
 80087d2:	2b29      	cmp	r3, #41	; 0x29
 80087d4:	d002      	beq.n	80087dc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	2b2a      	cmp	r3, #42	; 0x2a
 80087da:	d10b      	bne.n	80087f4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80087dc:	2103      	movs	r1, #3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fb4c 	bl	8008e7c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2228      	movs	r2, #40	; 0x28
 80087e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a50      	ldr	r2, [pc, #320]	; (8008930 <I2C_ITError+0x198>)
 80087f0:	635a      	str	r2, [r3, #52]	; 0x34
 80087f2:	e011      	b.n	8008818 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80087f4:	f248 0103 	movw	r1, #32771	; 0x8003
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fb3f 	bl	8008e7c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008804:	b2db      	uxtb	r3, r3
 8008806:	2b60      	cmp	r3, #96	; 0x60
 8008808:	d003      	beq.n	8008812 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2220      	movs	r2, #32
 800880e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	2b00      	cmp	r3, #0
 8008824:	d039      	beq.n	800889a <I2C_ITError+0x102>
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b11      	cmp	r3, #17
 800882a:	d002      	beq.n	8008832 <I2C_ITError+0x9a>
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b21      	cmp	r3, #33	; 0x21
 8008830:	d133      	bne.n	800889a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800883c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008840:	d107      	bne.n	8008852 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008850:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008856:	4618      	mov	r0, r3
 8008858:	f7fd ff9e 	bl	8006798 <HAL_DMA_GetState>
 800885c:	4603      	mov	r3, r0
 800885e:	2b01      	cmp	r3, #1
 8008860:	d017      	beq.n	8008892 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008866:	4a33      	ldr	r2, [pc, #204]	; (8008934 <I2C_ITError+0x19c>)
 8008868:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008876:	4618      	mov	r0, r3
 8008878:	f7fd fde2 	bl	8006440 <HAL_DMA_Abort_IT>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d04d      	beq.n	800891e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800888c:	4610      	mov	r0, r2
 800888e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008890:	e045      	b.n	800891e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f850 	bl	8008938 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008898:	e041      	b.n	800891e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d039      	beq.n	8008916 <I2C_ITError+0x17e>
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b12      	cmp	r3, #18
 80088a6:	d002      	beq.n	80088ae <I2C_ITError+0x116>
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2b22      	cmp	r3, #34	; 0x22
 80088ac:	d133      	bne.n	8008916 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088bc:	d107      	bne.n	80088ce <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fd ff60 	bl	8006798 <HAL_DMA_GetState>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d017      	beq.n	800890e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e2:	4a14      	ldr	r2, [pc, #80]	; (8008934 <I2C_ITError+0x19c>)
 80088e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fd fda4 	bl	8006440 <HAL_DMA_Abort_IT>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d011      	beq.n	8008922 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008908:	4610      	mov	r0, r2
 800890a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800890c:	e009      	b.n	8008922 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f812 	bl	8008938 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008914:	e005      	b.n	8008922 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f80e 	bl	8008938 <I2C_TreatErrorCallback>
  }
}
 800891c:	e002      	b.n	8008924 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800891e:	bf00      	nop
 8008920:	e000      	b.n	8008924 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008922:	bf00      	nop
}
 8008924:	bf00      	nop
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	ffff0000 	.word	0xffff0000
 8008930:	08007a09 	.word	0x08007a09
 8008934:	080089cf 	.word	0x080089cf

08008938 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b60      	cmp	r3, #96	; 0x60
 800894a:	d10e      	bne.n	800896a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2220      	movs	r2, #32
 8008950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7fe ff01 	bl	800776a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008968:	e009      	b.n	800897e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7fe feec 	bl	8007756 <HAL_I2C_ErrorCallback>
}
 800897e:	bf00      	nop
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008986:	b480      	push	{r7}
 8008988:	b083      	sub	sp, #12
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	f003 0302 	and.w	r3, r3, #2
 8008998:	2b02      	cmp	r3, #2
 800899a:	d103      	bne.n	80089a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2200      	movs	r2, #0
 80089a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d007      	beq.n	80089c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	699a      	ldr	r2, [r3, #24]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f042 0201 	orr.w	r2, r2, #1
 80089c0:	619a      	str	r2, [r3, #24]
  }
}
 80089c2:	bf00      	nop
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d003      	beq.n	80089ec <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e8:	2200      	movs	r2, #0
 80089ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f8:	2200      	movs	r2, #0
 80089fa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f7ff ff9b 	bl	8008938 <I2C_TreatErrorCallback>
}
 8008a02:	bf00      	nop
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	603b      	str	r3, [r7, #0]
 8008a16:	4613      	mov	r3, r2
 8008a18:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a1a:	e022      	b.n	8008a62 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a22:	d01e      	beq.n	8008a62 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a24:	f7fd f930 	bl	8005c88 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d302      	bcc.n	8008a3a <I2C_WaitOnFlagUntilTimeout+0x30>
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d113      	bne.n	8008a62 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a3e:	f043 0220 	orr.w	r2, r3, #32
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e00f      	b.n	8008a82 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	699a      	ldr	r2, [r3, #24]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	bf0c      	ite	eq
 8008a72:	2301      	moveq	r3, #1
 8008a74:	2300      	movne	r3, #0
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	461a      	mov	r2, r3
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d0cd      	beq.n	8008a1c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a96:	e02c      	b.n	8008af2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	68b9      	ldr	r1, [r7, #8]
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 f871 	bl	8008b84 <I2C_IsErrorOccurred>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e02a      	b.n	8008b02 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ab2:	d01e      	beq.n	8008af2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab4:	f7fd f8e8 	bl	8005c88 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d302      	bcc.n	8008aca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d113      	bne.n	8008af2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ace:	f043 0220 	orr.w	r2, r3, #32
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e007      	b.n	8008b02 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d1cb      	bne.n	8008a98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	60f8      	str	r0, [r7, #12]
 8008b12:	60b9      	str	r1, [r7, #8]
 8008b14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b16:	e028      	b.n	8008b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	68b9      	ldr	r1, [r7, #8]
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 f831 	bl	8008b84 <I2C_IsErrorOccurred>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e026      	b.n	8008b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b2c:	f7fd f8ac 	bl	8005c88 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d302      	bcc.n	8008b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d113      	bne.n	8008b6a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b46:	f043 0220 	orr.w	r2, r3, #32
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2220      	movs	r2, #32
 8008b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e007      	b.n	8008b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	f003 0320 	and.w	r3, r3, #32
 8008b74:	2b20      	cmp	r3, #32
 8008b76:	d1cf      	bne.n	8008b18 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b08a      	sub	sp, #40	; 0x28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	f003 0310 	and.w	r3, r3, #16
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d068      	beq.n	8008c82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2210      	movs	r2, #16
 8008bb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008bb8:	e049      	b.n	8008c4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bc0:	d045      	beq.n	8008c4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008bc2:	f7fd f861 	bl	8005c88 <HAL_GetTick>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d302      	bcc.n	8008bd8 <I2C_IsErrorOccurred+0x54>
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d13a      	bne.n	8008c4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008be2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bfa:	d121      	bne.n	8008c40 <I2C_IsErrorOccurred+0xbc>
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c02:	d01d      	beq.n	8008c40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008c04:	7cfb      	ldrb	r3, [r7, #19]
 8008c06:	2b20      	cmp	r3, #32
 8008c08:	d01a      	beq.n	8008c40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008c1a:	f7fd f835 	bl	8005c88 <HAL_GetTick>
 8008c1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c20:	e00e      	b.n	8008c40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008c22:	f7fd f831 	bl	8005c88 <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	2b19      	cmp	r3, #25
 8008c2e:	d907      	bls.n	8008c40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	f043 0320 	orr.w	r3, r3, #32
 8008c36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008c3e:	e006      	b.n	8008c4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	f003 0320 	and.w	r3, r3, #32
 8008c4a:	2b20      	cmp	r3, #32
 8008c4c:	d1e9      	bne.n	8008c22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	f003 0320 	and.w	r3, r3, #32
 8008c58:	2b20      	cmp	r3, #32
 8008c5a:	d003      	beq.n	8008c64 <I2C_IsErrorOccurred+0xe0>
 8008c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d0aa      	beq.n	8008bba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d103      	bne.n	8008c74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2220      	movs	r2, #32
 8008c72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	f043 0304 	orr.w	r3, r3, #4
 8008c7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00b      	beq.n	8008cac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008c94:	6a3b      	ldr	r3, [r7, #32]
 8008c96:	f043 0301 	orr.w	r3, r3, #1
 8008c9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ca4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00b      	beq.n	8008cce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	f043 0308 	orr.w	r3, r3, #8
 8008cbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008cc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00b      	beq.n	8008cf0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	f043 0302 	orr.w	r3, r3, #2
 8008cde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ce8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d01c      	beq.n	8008d32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f7ff fe44 	bl	8008986 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6859      	ldr	r1, [r3, #4]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <I2C_IsErrorOccurred+0x1bc>)
 8008d0a:	400b      	ands	r3, r1
 8008d0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d12:	6a3b      	ldr	r3, [r7, #32]
 8008d14:	431a      	orrs	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2220      	movs	r2, #32
 8008d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008d32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3728      	adds	r7, #40	; 0x28
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	fe00e800 	.word	0xfe00e800

08008d44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	607b      	str	r3, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	817b      	strh	r3, [r7, #10]
 8008d52:	4613      	mov	r3, r2
 8008d54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d56:	897b      	ldrh	r3, [r7, #10]
 8008d58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d5c:	7a7b      	ldrb	r3, [r7, #9]
 8008d5e:	041b      	lsls	r3, r3, #16
 8008d60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	0d5b      	lsrs	r3, r3, #21
 8008d7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008d82:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <I2C_TransferConfig+0x60>)
 8008d84:	430b      	orrs	r3, r1
 8008d86:	43db      	mvns	r3, r3
 8008d88:	ea02 0103 	and.w	r1, r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008d96:	bf00      	nop
 8008d98:	371c      	adds	r7, #28
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	03ff63ff 	.word	0x03ff63ff

08008da8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dbc:	4a2d      	ldr	r2, [pc, #180]	; (8008e74 <I2C_Enable_IRQ+0xcc>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d004      	beq.n	8008dcc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008dc6:	4a2c      	ldr	r2, [pc, #176]	; (8008e78 <I2C_Enable_IRQ+0xd0>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d11d      	bne.n	8008e08 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008dcc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	da03      	bge.n	8008ddc <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008dda:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008ddc:	887b      	ldrh	r3, [r7, #2]
 8008dde:	2b10      	cmp	r3, #16
 8008de0:	d103      	bne.n	8008dea <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008de8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008dea:	887b      	ldrh	r3, [r7, #2]
 8008dec:	2b20      	cmp	r3, #32
 8008dee:	d103      	bne.n	8008df8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008df6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008df8:	887b      	ldrh	r3, [r7, #2]
 8008dfa:	2b40      	cmp	r3, #64	; 0x40
 8008dfc:	d12c      	bne.n	8008e58 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e04:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008e06:	e027      	b.n	8008e58 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008e08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	da03      	bge.n	8008e18 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008e16:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008e18:	887b      	ldrh	r3, [r7, #2]
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d003      	beq.n	8008e2a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008e28:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008e2a:	887b      	ldrh	r3, [r7, #2]
 8008e2c:	f003 0302 	and.w	r3, r3, #2
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008e3a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008e3c:	887b      	ldrh	r3, [r7, #2]
 8008e3e:	2b10      	cmp	r3, #16
 8008e40:	d103      	bne.n	8008e4a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008e48:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008e4a:	887b      	ldrh	r3, [r7, #2]
 8008e4c:	2b20      	cmp	r3, #32
 8008e4e:	d103      	bne.n	8008e58 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f043 0320 	orr.w	r3, r3, #32
 8008e56:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6819      	ldr	r1, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	601a      	str	r2, [r3, #0]
}
 8008e68:	bf00      	nop
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	08007c0f 	.word	0x08007c0f
 8008e78:	08007df5 	.word	0x08007df5

08008e7c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008e8c:	887b      	ldrh	r3, [r7, #2]
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00f      	beq.n	8008eb6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008e9c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008eaa:	2b28      	cmp	r3, #40	; 0x28
 8008eac:	d003      	beq.n	8008eb6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008eb4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008eb6:	887b      	ldrh	r3, [r7, #2]
 8008eb8:	f003 0302 	and.w	r3, r3, #2
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00f      	beq.n	8008ee0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008ec6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008ed4:	2b28      	cmp	r3, #40	; 0x28
 8008ed6:	d003      	beq.n	8008ee0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008ede:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008ee0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	da03      	bge.n	8008ef0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008eee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008ef0:	887b      	ldrh	r3, [r7, #2]
 8008ef2:	2b10      	cmp	r3, #16
 8008ef4:	d103      	bne.n	8008efe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008efc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008efe:	887b      	ldrh	r3, [r7, #2]
 8008f00:	2b20      	cmp	r3, #32
 8008f02:	d103      	bne.n	8008f0c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f043 0320 	orr.w	r3, r3, #32
 8008f0a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008f0c:	887b      	ldrh	r3, [r7, #2]
 8008f0e:	2b40      	cmp	r3, #64	; 0x40
 8008f10:	d103      	bne.n	8008f1a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f18:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6819      	ldr	r1, [r3, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	43da      	mvns	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	400a      	ands	r2, r1
 8008f2a:	601a      	str	r2, [r3, #0]
}
 8008f2c:	bf00      	nop
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b20      	cmp	r3, #32
 8008f4c:	d138      	bne.n	8008fc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e032      	b.n	8008fc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2224      	movs	r2, #36	; 0x24
 8008f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 0201 	bic.w	r2, r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6819      	ldr	r1, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f042 0201 	orr.w	r2, r2, #1
 8008faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2220      	movs	r2, #32
 8008fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	e000      	b.n	8008fc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fc0:	2302      	movs	r3, #2
  }
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	370c      	adds	r7, #12
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b085      	sub	sp, #20
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b20      	cmp	r3, #32
 8008fe2:	d139      	bne.n	8009058 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d101      	bne.n	8008ff2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008fee:	2302      	movs	r3, #2
 8008ff0:	e033      	b.n	800905a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2224      	movs	r2, #36	; 0x24
 8008ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 0201 	bic.w	r2, r2, #1
 8009010:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009020:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	021b      	lsls	r3, r3, #8
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	4313      	orrs	r3, r2
 800902a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f042 0201 	orr.w	r2, r2, #1
 8009042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2220      	movs	r2, #32
 8009048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	e000      	b.n	800905a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009058:	2302      	movs	r3, #2
  }
}
 800905a:	4618      	mov	r0, r3
 800905c:	3714      	adds	r7, #20
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
	...

08009068 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009070:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009074:	4a0a      	ldr	r2, [pc, #40]	; (80090a0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800907a:	6453      	str	r3, [r2, #68]	; 0x44
 800907c:	4b08      	ldr	r3, [pc, #32]	; (80090a0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800907e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009084:	60fb      	str	r3, [r7, #12]
 8009086:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 8009088:	4b06      	ldr	r3, [pc, #24]	; (80090a4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	4905      	ldr	r1, [pc, #20]	; (80090a4 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4313      	orrs	r3, r2
 8009092:	604b      	str	r3, [r1, #4]
}
 8009094:	bf00      	nop
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	40023800 	.word	0x40023800
 80090a4:	40013800 	.word	0x40013800

080090a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80090b0:	2300      	movs	r3, #0
 80090b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e291      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 8087 	beq.w	80091da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80090cc:	4b96      	ldr	r3, [pc, #600]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f003 030c 	and.w	r3, r3, #12
 80090d4:	2b04      	cmp	r3, #4
 80090d6:	d00c      	beq.n	80090f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80090d8:	4b93      	ldr	r3, [pc, #588]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f003 030c 	and.w	r3, r3, #12
 80090e0:	2b08      	cmp	r3, #8
 80090e2:	d112      	bne.n	800910a <HAL_RCC_OscConfig+0x62>
 80090e4:	4b90      	ldr	r3, [pc, #576]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090f0:	d10b      	bne.n	800910a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090f2:	4b8d      	ldr	r3, [pc, #564]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d06c      	beq.n	80091d8 <HAL_RCC_OscConfig+0x130>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d168      	bne.n	80091d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e26b      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009112:	d106      	bne.n	8009122 <HAL_RCC_OscConfig+0x7a>
 8009114:	4b84      	ldr	r3, [pc, #528]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a83      	ldr	r2, [pc, #524]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 800911a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	e02e      	b.n	8009180 <HAL_RCC_OscConfig+0xd8>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10c      	bne.n	8009144 <HAL_RCC_OscConfig+0x9c>
 800912a:	4b7f      	ldr	r3, [pc, #508]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a7e      	ldr	r2, [pc, #504]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009134:	6013      	str	r3, [r2, #0]
 8009136:	4b7c      	ldr	r3, [pc, #496]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a7b      	ldr	r2, [pc, #492]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 800913c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009140:	6013      	str	r3, [r2, #0]
 8009142:	e01d      	b.n	8009180 <HAL_RCC_OscConfig+0xd8>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800914c:	d10c      	bne.n	8009168 <HAL_RCC_OscConfig+0xc0>
 800914e:	4b76      	ldr	r3, [pc, #472]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a75      	ldr	r2, [pc, #468]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	4b73      	ldr	r3, [pc, #460]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a72      	ldr	r2, [pc, #456]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009164:	6013      	str	r3, [r2, #0]
 8009166:	e00b      	b.n	8009180 <HAL_RCC_OscConfig+0xd8>
 8009168:	4b6f      	ldr	r3, [pc, #444]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a6e      	ldr	r2, [pc, #440]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 800916e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	4b6c      	ldr	r3, [pc, #432]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a6b      	ldr	r2, [pc, #428]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 800917a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800917e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d013      	beq.n	80091b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009188:	f7fc fd7e 	bl	8005c88 <HAL_GetTick>
 800918c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800918e:	e008      	b.n	80091a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009190:	f7fc fd7a 	bl	8005c88 <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b64      	cmp	r3, #100	; 0x64
 800919c:	d901      	bls.n	80091a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e21f      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091a2:	4b61      	ldr	r3, [pc, #388]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0f0      	beq.n	8009190 <HAL_RCC_OscConfig+0xe8>
 80091ae:	e014      	b.n	80091da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b0:	f7fc fd6a 	bl	8005c88 <HAL_GetTick>
 80091b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091b6:	e008      	b.n	80091ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091b8:	f7fc fd66 	bl	8005c88 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b64      	cmp	r3, #100	; 0x64
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e20b      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091ca:	4b57      	ldr	r3, [pc, #348]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1f0      	bne.n	80091b8 <HAL_RCC_OscConfig+0x110>
 80091d6:	e000      	b.n	80091da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d069      	beq.n	80092ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80091e6:	4b50      	ldr	r3, [pc, #320]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f003 030c 	and.w	r3, r3, #12
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80091f2:	4b4d      	ldr	r3, [pc, #308]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f003 030c 	and.w	r3, r3, #12
 80091fa:	2b08      	cmp	r3, #8
 80091fc:	d11c      	bne.n	8009238 <HAL_RCC_OscConfig+0x190>
 80091fe:	4b4a      	ldr	r3, [pc, #296]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d116      	bne.n	8009238 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800920a:	4b47      	ldr	r3, [pc, #284]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d005      	beq.n	8009222 <HAL_RCC_OscConfig+0x17a>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d001      	beq.n	8009222 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e1df      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009222:	4b41      	ldr	r3, [pc, #260]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	493d      	ldr	r1, [pc, #244]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009232:	4313      	orrs	r3, r2
 8009234:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009236:	e040      	b.n	80092ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d023      	beq.n	8009288 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009240:	4b39      	ldr	r3, [pc, #228]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a38      	ldr	r2, [pc, #224]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009246:	f043 0301 	orr.w	r3, r3, #1
 800924a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800924c:	f7fc fd1c 	bl	8005c88 <HAL_GetTick>
 8009250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009252:	e008      	b.n	8009266 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009254:	f7fc fd18 	bl	8005c88 <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	2b02      	cmp	r3, #2
 8009260:	d901      	bls.n	8009266 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e1bd      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009266:	4b30      	ldr	r3, [pc, #192]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0302 	and.w	r3, r3, #2
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0f0      	beq.n	8009254 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009272:	4b2d      	ldr	r3, [pc, #180]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	00db      	lsls	r3, r3, #3
 8009280:	4929      	ldr	r1, [pc, #164]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009282:	4313      	orrs	r3, r2
 8009284:	600b      	str	r3, [r1, #0]
 8009286:	e018      	b.n	80092ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009288:	4b27      	ldr	r3, [pc, #156]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a26      	ldr	r2, [pc, #152]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 800928e:	f023 0301 	bic.w	r3, r3, #1
 8009292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009294:	f7fc fcf8 	bl	8005c88 <HAL_GetTick>
 8009298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800929a:	e008      	b.n	80092ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800929c:	f7fc fcf4 	bl	8005c88 <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d901      	bls.n	80092ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e199      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092ae:	4b1e      	ldr	r3, [pc, #120]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0302 	and.w	r3, r3, #2
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1f0      	bne.n	800929c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0308 	and.w	r3, r3, #8
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d038      	beq.n	8009338 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d019      	beq.n	8009302 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092ce:	4b16      	ldr	r3, [pc, #88]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 80092d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092d2:	4a15      	ldr	r2, [pc, #84]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 80092d4:	f043 0301 	orr.w	r3, r3, #1
 80092d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092da:	f7fc fcd5 	bl	8005c88 <HAL_GetTick>
 80092de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092e0:	e008      	b.n	80092f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092e2:	f7fc fcd1 	bl	8005c88 <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d901      	bls.n	80092f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e176      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092f4:	4b0c      	ldr	r3, [pc, #48]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 80092f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092f8:	f003 0302 	and.w	r3, r3, #2
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0f0      	beq.n	80092e2 <HAL_RCC_OscConfig+0x23a>
 8009300:	e01a      	b.n	8009338 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009302:	4b09      	ldr	r3, [pc, #36]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009306:	4a08      	ldr	r2, [pc, #32]	; (8009328 <HAL_RCC_OscConfig+0x280>)
 8009308:	f023 0301 	bic.w	r3, r3, #1
 800930c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800930e:	f7fc fcbb 	bl	8005c88 <HAL_GetTick>
 8009312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009314:	e00a      	b.n	800932c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009316:	f7fc fcb7 	bl	8005c88 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d903      	bls.n	800932c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e15c      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
 8009328:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800932c:	4b91      	ldr	r3, [pc, #580]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 800932e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1ee      	bne.n	8009316 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0304 	and.w	r3, r3, #4
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 80a4 	beq.w	800948e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009346:	4b8b      	ldr	r3, [pc, #556]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10d      	bne.n	800936e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009352:	4b88      	ldr	r3, [pc, #544]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009356:	4a87      	ldr	r2, [pc, #540]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800935c:	6413      	str	r3, [r2, #64]	; 0x40
 800935e:	4b85      	ldr	r3, [pc, #532]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009366:	60bb      	str	r3, [r7, #8]
 8009368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800936a:	2301      	movs	r3, #1
 800936c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800936e:	4b82      	ldr	r3, [pc, #520]	; (8009578 <HAL_RCC_OscConfig+0x4d0>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009376:	2b00      	cmp	r3, #0
 8009378:	d118      	bne.n	80093ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800937a:	4b7f      	ldr	r3, [pc, #508]	; (8009578 <HAL_RCC_OscConfig+0x4d0>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a7e      	ldr	r2, [pc, #504]	; (8009578 <HAL_RCC_OscConfig+0x4d0>)
 8009380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009386:	f7fc fc7f 	bl	8005c88 <HAL_GetTick>
 800938a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800938c:	e008      	b.n	80093a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800938e:	f7fc fc7b 	bl	8005c88 <HAL_GetTick>
 8009392:	4602      	mov	r2, r0
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	2b64      	cmp	r3, #100	; 0x64
 800939a:	d901      	bls.n	80093a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	e120      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80093a0:	4b75      	ldr	r3, [pc, #468]	; (8009578 <HAL_RCC_OscConfig+0x4d0>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0f0      	beq.n	800938e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d106      	bne.n	80093c2 <HAL_RCC_OscConfig+0x31a>
 80093b4:	4b6f      	ldr	r3, [pc, #444]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 80093b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b8:	4a6e      	ldr	r2, [pc, #440]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 80093ba:	f043 0301 	orr.w	r3, r3, #1
 80093be:	6713      	str	r3, [r2, #112]	; 0x70
 80093c0:	e02d      	b.n	800941e <HAL_RCC_OscConfig+0x376>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10c      	bne.n	80093e4 <HAL_RCC_OscConfig+0x33c>
 80093ca:	4b6a      	ldr	r3, [pc, #424]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 80093cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ce:	4a69      	ldr	r2, [pc, #420]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 80093d0:	f023 0301 	bic.w	r3, r3, #1
 80093d4:	6713      	str	r3, [r2, #112]	; 0x70
 80093d6:	4b67      	ldr	r3, [pc, #412]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 80093d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093da:	4a66      	ldr	r2, [pc, #408]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 80093dc:	f023 0304 	bic.w	r3, r3, #4
 80093e0:	6713      	str	r3, [r2, #112]	; 0x70
 80093e2:	e01c      	b.n	800941e <HAL_RCC_OscConfig+0x376>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	2b05      	cmp	r3, #5
 80093ea:	d10c      	bne.n	8009406 <HAL_RCC_OscConfig+0x35e>
 80093ec:	4b61      	ldr	r3, [pc, #388]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 80093ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f0:	4a60      	ldr	r2, [pc, #384]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 80093f2:	f043 0304 	orr.w	r3, r3, #4
 80093f6:	6713      	str	r3, [r2, #112]	; 0x70
 80093f8:	4b5e      	ldr	r3, [pc, #376]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 80093fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fc:	4a5d      	ldr	r2, [pc, #372]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 80093fe:	f043 0301 	orr.w	r3, r3, #1
 8009402:	6713      	str	r3, [r2, #112]	; 0x70
 8009404:	e00b      	b.n	800941e <HAL_RCC_OscConfig+0x376>
 8009406:	4b5b      	ldr	r3, [pc, #364]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800940a:	4a5a      	ldr	r2, [pc, #360]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 800940c:	f023 0301 	bic.w	r3, r3, #1
 8009410:	6713      	str	r3, [r2, #112]	; 0x70
 8009412:	4b58      	ldr	r3, [pc, #352]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009416:	4a57      	ldr	r2, [pc, #348]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009418:	f023 0304 	bic.w	r3, r3, #4
 800941c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d015      	beq.n	8009452 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009426:	f7fc fc2f 	bl	8005c88 <HAL_GetTick>
 800942a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800942c:	e00a      	b.n	8009444 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800942e:	f7fc fc2b 	bl	8005c88 <HAL_GetTick>
 8009432:	4602      	mov	r2, r0
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	f241 3288 	movw	r2, #5000	; 0x1388
 800943c:	4293      	cmp	r3, r2
 800943e:	d901      	bls.n	8009444 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e0ce      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009444:	4b4b      	ldr	r3, [pc, #300]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d0ee      	beq.n	800942e <HAL_RCC_OscConfig+0x386>
 8009450:	e014      	b.n	800947c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009452:	f7fc fc19 	bl	8005c88 <HAL_GetTick>
 8009456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009458:	e00a      	b.n	8009470 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800945a:	f7fc fc15 	bl	8005c88 <HAL_GetTick>
 800945e:	4602      	mov	r2, r0
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	f241 3288 	movw	r2, #5000	; 0x1388
 8009468:	4293      	cmp	r3, r2
 800946a:	d901      	bls.n	8009470 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800946c:	2303      	movs	r3, #3
 800946e:	e0b8      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009470:	4b40      	ldr	r3, [pc, #256]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009474:	f003 0302 	and.w	r3, r3, #2
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1ee      	bne.n	800945a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800947c:	7dfb      	ldrb	r3, [r7, #23]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d105      	bne.n	800948e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009482:	4b3c      	ldr	r3, [pc, #240]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009486:	4a3b      	ldr	r2, [pc, #236]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800948c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 80a4 	beq.w	80095e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009498:	4b36      	ldr	r3, [pc, #216]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f003 030c 	and.w	r3, r3, #12
 80094a0:	2b08      	cmp	r3, #8
 80094a2:	d06b      	beq.n	800957c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d149      	bne.n	8009540 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094ac:	4b31      	ldr	r3, [pc, #196]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a30      	ldr	r2, [pc, #192]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 80094b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b8:	f7fc fbe6 	bl	8005c88 <HAL_GetTick>
 80094bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094be:	e008      	b.n	80094d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094c0:	f7fc fbe2 	bl	8005c88 <HAL_GetTick>
 80094c4:	4602      	mov	r2, r0
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d901      	bls.n	80094d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e087      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094d2:	4b28      	ldr	r3, [pc, #160]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1f0      	bne.n	80094c0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	69da      	ldr	r2, [r3, #28]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	431a      	orrs	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	019b      	lsls	r3, r3, #6
 80094ee:	431a      	orrs	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f4:	085b      	lsrs	r3, r3, #1
 80094f6:	3b01      	subs	r3, #1
 80094f8:	041b      	lsls	r3, r3, #16
 80094fa:	431a      	orrs	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009500:	061b      	lsls	r3, r3, #24
 8009502:	4313      	orrs	r3, r2
 8009504:	4a1b      	ldr	r2, [pc, #108]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009506:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800950a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800950c:	4b19      	ldr	r3, [pc, #100]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a18      	ldr	r2, [pc, #96]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009518:	f7fc fbb6 	bl	8005c88 <HAL_GetTick>
 800951c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800951e:	e008      	b.n	8009532 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009520:	f7fc fbb2 	bl	8005c88 <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	2b02      	cmp	r3, #2
 800952c:	d901      	bls.n	8009532 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e057      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009532:	4b10      	ldr	r3, [pc, #64]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d0f0      	beq.n	8009520 <HAL_RCC_OscConfig+0x478>
 800953e:	e04f      	b.n	80095e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009540:	4b0c      	ldr	r3, [pc, #48]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a0b      	ldr	r2, [pc, #44]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800954a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800954c:	f7fc fb9c 	bl	8005c88 <HAL_GetTick>
 8009550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009552:	e008      	b.n	8009566 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009554:	f7fc fb98 	bl	8005c88 <HAL_GetTick>
 8009558:	4602      	mov	r2, r0
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	2b02      	cmp	r3, #2
 8009560:	d901      	bls.n	8009566 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e03d      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009566:	4b03      	ldr	r3, [pc, #12]	; (8009574 <HAL_RCC_OscConfig+0x4cc>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1f0      	bne.n	8009554 <HAL_RCC_OscConfig+0x4ac>
 8009572:	e035      	b.n	80095e0 <HAL_RCC_OscConfig+0x538>
 8009574:	40023800 	.word	0x40023800
 8009578:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800957c:	4b1b      	ldr	r3, [pc, #108]	; (80095ec <HAL_RCC_OscConfig+0x544>)
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d028      	beq.n	80095dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009594:	429a      	cmp	r2, r3
 8009596:	d121      	bne.n	80095dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d11a      	bne.n	80095dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80095ac:	4013      	ands	r3, r2
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80095b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d111      	bne.n	80095dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c2:	085b      	lsrs	r3, r3, #1
 80095c4:	3b01      	subs	r3, #1
 80095c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d107      	bne.n	80095dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80095d8:	429a      	cmp	r2, r3
 80095da:	d001      	beq.n	80095e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	e000      	b.n	80095e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	40023800 	.word	0x40023800

080095f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80095fa:	2300      	movs	r3, #0
 80095fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d101      	bne.n	8009608 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e0d0      	b.n	80097aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009608:	4b6a      	ldr	r3, [pc, #424]	; (80097b4 <HAL_RCC_ClockConfig+0x1c4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 030f 	and.w	r3, r3, #15
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d910      	bls.n	8009638 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009616:	4b67      	ldr	r3, [pc, #412]	; (80097b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f023 020f 	bic.w	r2, r3, #15
 800961e:	4965      	ldr	r1, [pc, #404]	; (80097b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	4313      	orrs	r3, r2
 8009624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009626:	4b63      	ldr	r3, [pc, #396]	; (80097b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 030f 	and.w	r3, r3, #15
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	429a      	cmp	r2, r3
 8009632:	d001      	beq.n	8009638 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e0b8      	b.n	80097aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0302 	and.w	r3, r3, #2
 8009640:	2b00      	cmp	r3, #0
 8009642:	d020      	beq.n	8009686 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0304 	and.w	r3, r3, #4
 800964c:	2b00      	cmp	r3, #0
 800964e:	d005      	beq.n	800965c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009650:	4b59      	ldr	r3, [pc, #356]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	4a58      	ldr	r2, [pc, #352]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800965a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0308 	and.w	r3, r3, #8
 8009664:	2b00      	cmp	r3, #0
 8009666:	d005      	beq.n	8009674 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009668:	4b53      	ldr	r3, [pc, #332]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	4a52      	ldr	r2, [pc, #328]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 800966e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009672:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009674:	4b50      	ldr	r3, [pc, #320]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	494d      	ldr	r1, [pc, #308]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009682:	4313      	orrs	r3, r2
 8009684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b00      	cmp	r3, #0
 8009690:	d040      	beq.n	8009714 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	2b01      	cmp	r3, #1
 8009698:	d107      	bne.n	80096aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800969a:	4b47      	ldr	r3, [pc, #284]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d115      	bne.n	80096d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e07f      	b.n	80097aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d107      	bne.n	80096c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096b2:	4b41      	ldr	r3, [pc, #260]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d109      	bne.n	80096d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e073      	b.n	80097aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096c2:	4b3d      	ldr	r3, [pc, #244]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0302 	and.w	r3, r3, #2
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d101      	bne.n	80096d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e06b      	b.n	80097aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096d2:	4b39      	ldr	r3, [pc, #228]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f023 0203 	bic.w	r2, r3, #3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	4936      	ldr	r1, [pc, #216]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 80096e0:	4313      	orrs	r3, r2
 80096e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096e4:	f7fc fad0 	bl	8005c88 <HAL_GetTick>
 80096e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096ea:	e00a      	b.n	8009702 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096ec:	f7fc facc 	bl	8005c88 <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d901      	bls.n	8009702 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e053      	b.n	80097aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009702:	4b2d      	ldr	r3, [pc, #180]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	f003 020c 	and.w	r2, r3, #12
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	429a      	cmp	r2, r3
 8009712:	d1eb      	bne.n	80096ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009714:	4b27      	ldr	r3, [pc, #156]	; (80097b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f003 030f 	and.w	r3, r3, #15
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	429a      	cmp	r2, r3
 8009720:	d210      	bcs.n	8009744 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009722:	4b24      	ldr	r3, [pc, #144]	; (80097b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f023 020f 	bic.w	r2, r3, #15
 800972a:	4922      	ldr	r1, [pc, #136]	; (80097b4 <HAL_RCC_ClockConfig+0x1c4>)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	4313      	orrs	r3, r2
 8009730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009732:	4b20      	ldr	r3, [pc, #128]	; (80097b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 030f 	and.w	r3, r3, #15
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	429a      	cmp	r2, r3
 800973e:	d001      	beq.n	8009744 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e032      	b.n	80097aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0304 	and.w	r3, r3, #4
 800974c:	2b00      	cmp	r3, #0
 800974e:	d008      	beq.n	8009762 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009750:	4b19      	ldr	r3, [pc, #100]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	4916      	ldr	r1, [pc, #88]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 800975e:	4313      	orrs	r3, r2
 8009760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 0308 	and.w	r3, r3, #8
 800976a:	2b00      	cmp	r3, #0
 800976c:	d009      	beq.n	8009782 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800976e:	4b12      	ldr	r3, [pc, #72]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	490e      	ldr	r1, [pc, #56]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 800977e:	4313      	orrs	r3, r2
 8009780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009782:	f000 f821 	bl	80097c8 <HAL_RCC_GetSysClockFreq>
 8009786:	4602      	mov	r2, r0
 8009788:	4b0b      	ldr	r3, [pc, #44]	; (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	091b      	lsrs	r3, r3, #4
 800978e:	f003 030f 	and.w	r3, r3, #15
 8009792:	490a      	ldr	r1, [pc, #40]	; (80097bc <HAL_RCC_ClockConfig+0x1cc>)
 8009794:	5ccb      	ldrb	r3, [r1, r3]
 8009796:	fa22 f303 	lsr.w	r3, r2, r3
 800979a:	4a09      	ldr	r2, [pc, #36]	; (80097c0 <HAL_RCC_ClockConfig+0x1d0>)
 800979c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800979e:	4b09      	ldr	r3, [pc, #36]	; (80097c4 <HAL_RCC_ClockConfig+0x1d4>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fc fa2c 	bl	8005c00 <HAL_InitTick>

  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	40023c00 	.word	0x40023c00
 80097b8:	40023800 	.word	0x40023800
 80097bc:	0800f1c4 	.word	0x0800f1c4
 80097c0:	20000400 	.word	0x20000400
 80097c4:	200004d8 	.word	0x200004d8

080097c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097cc:	b094      	sub	sp, #80	; 0x50
 80097ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80097d0:	2300      	movs	r3, #0
 80097d2:	647b      	str	r3, [r7, #68]	; 0x44
 80097d4:	2300      	movs	r3, #0
 80097d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097d8:	2300      	movs	r3, #0
 80097da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097e0:	4b79      	ldr	r3, [pc, #484]	; (80099c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f003 030c 	and.w	r3, r3, #12
 80097e8:	2b08      	cmp	r3, #8
 80097ea:	d00d      	beq.n	8009808 <HAL_RCC_GetSysClockFreq+0x40>
 80097ec:	2b08      	cmp	r3, #8
 80097ee:	f200 80e1 	bhi.w	80099b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d002      	beq.n	80097fc <HAL_RCC_GetSysClockFreq+0x34>
 80097f6:	2b04      	cmp	r3, #4
 80097f8:	d003      	beq.n	8009802 <HAL_RCC_GetSysClockFreq+0x3a>
 80097fa:	e0db      	b.n	80099b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80097fc:	4b73      	ldr	r3, [pc, #460]	; (80099cc <HAL_RCC_GetSysClockFreq+0x204>)
 80097fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009800:	e0db      	b.n	80099ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009802:	4b72      	ldr	r3, [pc, #456]	; (80099cc <HAL_RCC_GetSysClockFreq+0x204>)
 8009804:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009806:	e0d8      	b.n	80099ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009808:	4b6f      	ldr	r3, [pc, #444]	; (80099c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009810:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009812:	4b6d      	ldr	r3, [pc, #436]	; (80099c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800981a:	2b00      	cmp	r3, #0
 800981c:	d063      	beq.n	80098e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800981e:	4b6a      	ldr	r3, [pc, #424]	; (80099c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	099b      	lsrs	r3, r3, #6
 8009824:	2200      	movs	r2, #0
 8009826:	63bb      	str	r3, [r7, #56]	; 0x38
 8009828:	63fa      	str	r2, [r7, #60]	; 0x3c
 800982a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800982c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009830:	633b      	str	r3, [r7, #48]	; 0x30
 8009832:	2300      	movs	r3, #0
 8009834:	637b      	str	r3, [r7, #52]	; 0x34
 8009836:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800983a:	4622      	mov	r2, r4
 800983c:	462b      	mov	r3, r5
 800983e:	f04f 0000 	mov.w	r0, #0
 8009842:	f04f 0100 	mov.w	r1, #0
 8009846:	0159      	lsls	r1, r3, #5
 8009848:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800984c:	0150      	lsls	r0, r2, #5
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	4621      	mov	r1, r4
 8009854:	1a51      	subs	r1, r2, r1
 8009856:	6139      	str	r1, [r7, #16]
 8009858:	4629      	mov	r1, r5
 800985a:	eb63 0301 	sbc.w	r3, r3, r1
 800985e:	617b      	str	r3, [r7, #20]
 8009860:	f04f 0200 	mov.w	r2, #0
 8009864:	f04f 0300 	mov.w	r3, #0
 8009868:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800986c:	4659      	mov	r1, fp
 800986e:	018b      	lsls	r3, r1, #6
 8009870:	4651      	mov	r1, sl
 8009872:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009876:	4651      	mov	r1, sl
 8009878:	018a      	lsls	r2, r1, #6
 800987a:	4651      	mov	r1, sl
 800987c:	ebb2 0801 	subs.w	r8, r2, r1
 8009880:	4659      	mov	r1, fp
 8009882:	eb63 0901 	sbc.w	r9, r3, r1
 8009886:	f04f 0200 	mov.w	r2, #0
 800988a:	f04f 0300 	mov.w	r3, #0
 800988e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800989a:	4690      	mov	r8, r2
 800989c:	4699      	mov	r9, r3
 800989e:	4623      	mov	r3, r4
 80098a0:	eb18 0303 	adds.w	r3, r8, r3
 80098a4:	60bb      	str	r3, [r7, #8]
 80098a6:	462b      	mov	r3, r5
 80098a8:	eb49 0303 	adc.w	r3, r9, r3
 80098ac:	60fb      	str	r3, [r7, #12]
 80098ae:	f04f 0200 	mov.w	r2, #0
 80098b2:	f04f 0300 	mov.w	r3, #0
 80098b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80098ba:	4629      	mov	r1, r5
 80098bc:	028b      	lsls	r3, r1, #10
 80098be:	4621      	mov	r1, r4
 80098c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80098c4:	4621      	mov	r1, r4
 80098c6:	028a      	lsls	r2, r1, #10
 80098c8:	4610      	mov	r0, r2
 80098ca:	4619      	mov	r1, r3
 80098cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ce:	2200      	movs	r2, #0
 80098d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80098d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80098d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098d8:	f7f6 fc96 	bl	8000208 <__aeabi_uldivmod>
 80098dc:	4602      	mov	r2, r0
 80098de:	460b      	mov	r3, r1
 80098e0:	4613      	mov	r3, r2
 80098e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098e4:	e058      	b.n	8009998 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098e6:	4b38      	ldr	r3, [pc, #224]	; (80099c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	099b      	lsrs	r3, r3, #6
 80098ec:	2200      	movs	r2, #0
 80098ee:	4618      	mov	r0, r3
 80098f0:	4611      	mov	r1, r2
 80098f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80098f6:	623b      	str	r3, [r7, #32]
 80098f8:	2300      	movs	r3, #0
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
 80098fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009900:	4642      	mov	r2, r8
 8009902:	464b      	mov	r3, r9
 8009904:	f04f 0000 	mov.w	r0, #0
 8009908:	f04f 0100 	mov.w	r1, #0
 800990c:	0159      	lsls	r1, r3, #5
 800990e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009912:	0150      	lsls	r0, r2, #5
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	4641      	mov	r1, r8
 800991a:	ebb2 0a01 	subs.w	sl, r2, r1
 800991e:	4649      	mov	r1, r9
 8009920:	eb63 0b01 	sbc.w	fp, r3, r1
 8009924:	f04f 0200 	mov.w	r2, #0
 8009928:	f04f 0300 	mov.w	r3, #0
 800992c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009930:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009934:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009938:	ebb2 040a 	subs.w	r4, r2, sl
 800993c:	eb63 050b 	sbc.w	r5, r3, fp
 8009940:	f04f 0200 	mov.w	r2, #0
 8009944:	f04f 0300 	mov.w	r3, #0
 8009948:	00eb      	lsls	r3, r5, #3
 800994a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800994e:	00e2      	lsls	r2, r4, #3
 8009950:	4614      	mov	r4, r2
 8009952:	461d      	mov	r5, r3
 8009954:	4643      	mov	r3, r8
 8009956:	18e3      	adds	r3, r4, r3
 8009958:	603b      	str	r3, [r7, #0]
 800995a:	464b      	mov	r3, r9
 800995c:	eb45 0303 	adc.w	r3, r5, r3
 8009960:	607b      	str	r3, [r7, #4]
 8009962:	f04f 0200 	mov.w	r2, #0
 8009966:	f04f 0300 	mov.w	r3, #0
 800996a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800996e:	4629      	mov	r1, r5
 8009970:	028b      	lsls	r3, r1, #10
 8009972:	4621      	mov	r1, r4
 8009974:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009978:	4621      	mov	r1, r4
 800997a:	028a      	lsls	r2, r1, #10
 800997c:	4610      	mov	r0, r2
 800997e:	4619      	mov	r1, r3
 8009980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009982:	2200      	movs	r2, #0
 8009984:	61bb      	str	r3, [r7, #24]
 8009986:	61fa      	str	r2, [r7, #28]
 8009988:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800998c:	f7f6 fc3c 	bl	8000208 <__aeabi_uldivmod>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4613      	mov	r3, r2
 8009996:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009998:	4b0b      	ldr	r3, [pc, #44]	; (80099c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	0c1b      	lsrs	r3, r3, #16
 800999e:	f003 0303 	and.w	r3, r3, #3
 80099a2:	3301      	adds	r3, #1
 80099a4:	005b      	lsls	r3, r3, #1
 80099a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80099a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80099aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80099b2:	e002      	b.n	80099ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80099b4:	4b05      	ldr	r3, [pc, #20]	; (80099cc <HAL_RCC_GetSysClockFreq+0x204>)
 80099b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80099b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80099ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3750      	adds	r7, #80	; 0x50
 80099c0:	46bd      	mov	sp, r7
 80099c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099c6:	bf00      	nop
 80099c8:	40023800 	.word	0x40023800
 80099cc:	00f42400 	.word	0x00f42400

080099d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099d0:	b480      	push	{r7}
 80099d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099d4:	4b03      	ldr	r3, [pc, #12]	; (80099e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80099d6:	681b      	ldr	r3, [r3, #0]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	20000400 	.word	0x20000400

080099e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80099ec:	f7ff fff0 	bl	80099d0 <HAL_RCC_GetHCLKFreq>
 80099f0:	4602      	mov	r2, r0
 80099f2:	4b05      	ldr	r3, [pc, #20]	; (8009a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	0a9b      	lsrs	r3, r3, #10
 80099f8:	f003 0307 	and.w	r3, r3, #7
 80099fc:	4903      	ldr	r1, [pc, #12]	; (8009a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80099fe:	5ccb      	ldrb	r3, [r1, r3]
 8009a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	40023800 	.word	0x40023800
 8009a0c:	0800f1d4 	.word	0x0800f1d4

08009a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009a14:	f7ff ffdc 	bl	80099d0 <HAL_RCC_GetHCLKFreq>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	4b05      	ldr	r3, [pc, #20]	; (8009a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	0b5b      	lsrs	r3, r3, #13
 8009a20:	f003 0307 	and.w	r3, r3, #7
 8009a24:	4903      	ldr	r1, [pc, #12]	; (8009a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a26:	5ccb      	ldrb	r3, [r1, r3]
 8009a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	40023800 	.word	0x40023800
 8009a34:	0800f1d4 	.word	0x0800f1d4

08009a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009a44:	2300      	movs	r3, #0
 8009a46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009a50:	2300      	movs	r3, #0
 8009a52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 0301 	and.w	r3, r3, #1
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d012      	beq.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009a60:	4b69      	ldr	r3, [pc, #420]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	4a68      	ldr	r2, [pc, #416]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a66:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009a6a:	6093      	str	r3, [r2, #8]
 8009a6c:	4b66      	ldr	r3, [pc, #408]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a74:	4964      	ldr	r1, [pc, #400]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d101      	bne.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009a82:	2301      	movs	r3, #1
 8009a84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d017      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009a92:	4b5d      	ldr	r3, [pc, #372]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa0:	4959      	ldr	r1, [pc, #356]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ab0:	d101      	bne.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d017      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009ace:	4b4e      	ldr	r3, [pc, #312]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ad4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009adc:	494a      	ldr	r1, [pc, #296]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009aec:	d101      	bne.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009aee:	2301      	movs	r3, #1
 8009af0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009afa:	2301      	movs	r3, #1
 8009afc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 0320 	and.w	r3, r3, #32
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f000 808b 	beq.w	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009b1c:	4b3a      	ldr	r3, [pc, #232]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b20:	4a39      	ldr	r2, [pc, #228]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b26:	6413      	str	r3, [r2, #64]	; 0x40
 8009b28:	4b37      	ldr	r3, [pc, #220]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b30:	60bb      	str	r3, [r7, #8]
 8009b32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009b34:	4b35      	ldr	r3, [pc, #212]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a34      	ldr	r2, [pc, #208]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b40:	f7fc f8a2 	bl	8005c88 <HAL_GetTick>
 8009b44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009b46:	e008      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b48:	f7fc f89e 	bl	8005c88 <HAL_GetTick>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	2b64      	cmp	r3, #100	; 0x64
 8009b54:	d901      	bls.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e357      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009b5a:	4b2c      	ldr	r3, [pc, #176]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0f0      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009b66:	4b28      	ldr	r3, [pc, #160]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d035      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d02e      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b84:	4b20      	ldr	r3, [pc, #128]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009b8e:	4b1e      	ldr	r3, [pc, #120]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b92:	4a1d      	ldr	r2, [pc, #116]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009b9a:	4b1b      	ldr	r3, [pc, #108]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b9e:	4a1a      	ldr	r2, [pc, #104]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ba4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009ba6:	4a18      	ldr	r2, [pc, #96]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009bac:	4b16      	ldr	r3, [pc, #88]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb0:	f003 0301 	and.w	r3, r3, #1
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d114      	bne.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb8:	f7fc f866 	bl	8005c88 <HAL_GetTick>
 8009bbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bbe:	e00a      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bc0:	f7fc f862 	bl	8005c88 <HAL_GetTick>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d901      	bls.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e319      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bd6:	4b0c      	ldr	r3, [pc, #48]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bda:	f003 0302 	and.w	r3, r3, #2
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0ee      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bee:	d111      	bne.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009bf0:	4b05      	ldr	r3, [pc, #20]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009bfc:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009bfe:	400b      	ands	r3, r1
 8009c00:	4901      	ldr	r1, [pc, #4]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c02:	4313      	orrs	r3, r2
 8009c04:	608b      	str	r3, [r1, #8]
 8009c06:	e00b      	b.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009c08:	40023800 	.word	0x40023800
 8009c0c:	40007000 	.word	0x40007000
 8009c10:	0ffffcff 	.word	0x0ffffcff
 8009c14:	4baa      	ldr	r3, [pc, #680]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	4aa9      	ldr	r2, [pc, #676]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009c1e:	6093      	str	r3, [r2, #8]
 8009c20:	4ba7      	ldr	r3, [pc, #668]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c2c:	49a4      	ldr	r1, [pc, #656]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 0310 	and.w	r3, r3, #16
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d010      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c3e:	4ba0      	ldr	r3, [pc, #640]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c44:	4a9e      	ldr	r2, [pc, #632]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009c4e:	4b9c      	ldr	r3, [pc, #624]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c58:	4999      	ldr	r1, [pc, #612]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00a      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c6c:	4b94      	ldr	r3, [pc, #592]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c7a:	4991      	ldr	r1, [pc, #580]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00a      	beq.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009c8e:	4b8c      	ldr	r3, [pc, #560]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c9c:	4988      	ldr	r1, [pc, #544]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00a      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009cb0:	4b83      	ldr	r3, [pc, #524]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cbe:	4980      	ldr	r1, [pc, #512]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00a      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009cd2:	4b7b      	ldr	r3, [pc, #492]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce0:	4977      	ldr	r1, [pc, #476]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00a      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009cf4:	4b72      	ldr	r3, [pc, #456]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cfa:	f023 0203 	bic.w	r2, r3, #3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d02:	496f      	ldr	r1, [pc, #444]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d04:	4313      	orrs	r3, r2
 8009d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00a      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009d16:	4b6a      	ldr	r3, [pc, #424]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d1c:	f023 020c 	bic.w	r2, r3, #12
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d24:	4966      	ldr	r1, [pc, #408]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d26:	4313      	orrs	r3, r2
 8009d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00a      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009d38:	4b61      	ldr	r3, [pc, #388]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d46:	495e      	ldr	r1, [pc, #376]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00a      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009d5a:	4b59      	ldr	r3, [pc, #356]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d68:	4955      	ldr	r1, [pc, #340]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00a      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009d7c:	4b50      	ldr	r3, [pc, #320]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d8a:	494d      	ldr	r1, [pc, #308]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00a      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009d9e:	4b48      	ldr	r3, [pc, #288]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009da4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dac:	4944      	ldr	r1, [pc, #272]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00a      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009dc0:	4b3f      	ldr	r3, [pc, #252]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dce:	493c      	ldr	r1, [pc, #240]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00a      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009de2:	4b37      	ldr	r3, [pc, #220]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009de8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009df0:	4933      	ldr	r1, [pc, #204]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009df2:	4313      	orrs	r3, r2
 8009df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00a      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e04:	4b2e      	ldr	r3, [pc, #184]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e12:	492b      	ldr	r1, [pc, #172]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e14:	4313      	orrs	r3, r2
 8009e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d011      	beq.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009e26:	4b26      	ldr	r3, [pc, #152]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e34:	4922      	ldr	r1, [pc, #136]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e44:	d101      	bne.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009e46:	2301      	movs	r3, #1
 8009e48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 0308 	and.w	r3, r3, #8
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009e56:	2301      	movs	r3, #1
 8009e58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00a      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e66:	4b16      	ldr	r3, [pc, #88]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e74:	4912      	ldr	r1, [pc, #72]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00b      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009e88:	4b0d      	ldr	r3, [pc, #52]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e98:	4909      	ldr	r1, [pc, #36]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d006      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f000 80d9 	beq.w	800a066 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009eb4:	4b02      	ldr	r3, [pc, #8]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a01      	ldr	r2, [pc, #4]	; (8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009eba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ebe:	e001      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009ec0:	40023800 	.word	0x40023800
 8009ec4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ec6:	f7fb fedf 	bl	8005c88 <HAL_GetTick>
 8009eca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ecc:	e008      	b.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009ece:	f7fb fedb 	bl	8005c88 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	2b64      	cmp	r3, #100	; 0x64
 8009eda:	d901      	bls.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e194      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ee0:	4b6c      	ldr	r3, [pc, #432]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1f0      	bne.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0301 	and.w	r3, r3, #1
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d021      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d11d      	bne.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009f00:	4b64      	ldr	r3, [pc, #400]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f06:	0c1b      	lsrs	r3, r3, #16
 8009f08:	f003 0303 	and.w	r3, r3, #3
 8009f0c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009f0e:	4b61      	ldr	r3, [pc, #388]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f14:	0e1b      	lsrs	r3, r3, #24
 8009f16:	f003 030f 	and.w	r3, r3, #15
 8009f1a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	019a      	lsls	r2, r3, #6
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	041b      	lsls	r3, r3, #16
 8009f26:	431a      	orrs	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	061b      	lsls	r3, r3, #24
 8009f2c:	431a      	orrs	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	071b      	lsls	r3, r3, #28
 8009f34:	4957      	ldr	r1, [pc, #348]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f36:	4313      	orrs	r3, r2
 8009f38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d004      	beq.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f50:	d00a      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d02e      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f66:	d129      	bne.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009f68:	4b4a      	ldr	r3, [pc, #296]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f6e:	0c1b      	lsrs	r3, r3, #16
 8009f70:	f003 0303 	and.w	r3, r3, #3
 8009f74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009f76:	4b47      	ldr	r3, [pc, #284]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f7c:	0f1b      	lsrs	r3, r3, #28
 8009f7e:	f003 0307 	and.w	r3, r3, #7
 8009f82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	019a      	lsls	r2, r3, #6
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	041b      	lsls	r3, r3, #16
 8009f8e:	431a      	orrs	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	061b      	lsls	r3, r3, #24
 8009f96:	431a      	orrs	r2, r3
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	071b      	lsls	r3, r3, #28
 8009f9c:	493d      	ldr	r1, [pc, #244]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009fa4:	4b3b      	ldr	r3, [pc, #236]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009faa:	f023 021f 	bic.w	r2, r3, #31
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	4937      	ldr	r1, [pc, #220]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d01d      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009fc8:	4b32      	ldr	r3, [pc, #200]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fce:	0e1b      	lsrs	r3, r3, #24
 8009fd0:	f003 030f 	and.w	r3, r3, #15
 8009fd4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009fd6:	4b2f      	ldr	r3, [pc, #188]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fdc:	0f1b      	lsrs	r3, r3, #28
 8009fde:	f003 0307 	and.w	r3, r3, #7
 8009fe2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	019a      	lsls	r2, r3, #6
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	041b      	lsls	r3, r3, #16
 8009ff0:	431a      	orrs	r2, r3
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	061b      	lsls	r3, r3, #24
 8009ff6:	431a      	orrs	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	071b      	lsls	r3, r3, #28
 8009ffc:	4925      	ldr	r1, [pc, #148]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ffe:	4313      	orrs	r3, r2
 800a000:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d011      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	019a      	lsls	r2, r3, #6
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	041b      	lsls	r3, r3, #16
 800a01c:	431a      	orrs	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	061b      	lsls	r3, r3, #24
 800a024:	431a      	orrs	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	071b      	lsls	r3, r3, #28
 800a02c:	4919      	ldr	r1, [pc, #100]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a02e:	4313      	orrs	r3, r2
 800a030:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a034:	4b17      	ldr	r3, [pc, #92]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a16      	ldr	r2, [pc, #88]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a03a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a03e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a040:	f7fb fe22 	bl	8005c88 <HAL_GetTick>
 800a044:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a046:	e008      	b.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a048:	f7fb fe1e 	bl	8005c88 <HAL_GetTick>
 800a04c:	4602      	mov	r2, r0
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	2b64      	cmp	r3, #100	; 0x64
 800a054:	d901      	bls.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e0d7      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a05a:	4b0e      	ldr	r3, [pc, #56]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a062:	2b00      	cmp	r3, #0
 800a064:	d0f0      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	f040 80cd 	bne.w	800a208 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a06e:	4b09      	ldr	r3, [pc, #36]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a08      	ldr	r2, [pc, #32]	; (800a094 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a07a:	f7fb fe05 	bl	8005c88 <HAL_GetTick>
 800a07e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a080:	e00a      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a082:	f7fb fe01 	bl	8005c88 <HAL_GetTick>
 800a086:	4602      	mov	r2, r0
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	2b64      	cmp	r3, #100	; 0x64
 800a08e:	d903      	bls.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a090:	2303      	movs	r3, #3
 800a092:	e0ba      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a094:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a098:	4b5e      	ldr	r3, [pc, #376]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0a4:	d0ed      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d009      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d02e      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d12a      	bne.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a0ce:	4b51      	ldr	r3, [pc, #324]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d4:	0c1b      	lsrs	r3, r3, #16
 800a0d6:	f003 0303 	and.w	r3, r3, #3
 800a0da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a0dc:	4b4d      	ldr	r3, [pc, #308]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a0de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e2:	0f1b      	lsrs	r3, r3, #28
 800a0e4:	f003 0307 	and.w	r3, r3, #7
 800a0e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	695b      	ldr	r3, [r3, #20]
 800a0ee:	019a      	lsls	r2, r3, #6
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	041b      	lsls	r3, r3, #16
 800a0f4:	431a      	orrs	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	061b      	lsls	r3, r3, #24
 800a0fc:	431a      	orrs	r2, r3
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	071b      	lsls	r3, r3, #28
 800a102:	4944      	ldr	r1, [pc, #272]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a104:	4313      	orrs	r3, r2
 800a106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a10a:	4b42      	ldr	r3, [pc, #264]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a10c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a110:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a118:	3b01      	subs	r3, #1
 800a11a:	021b      	lsls	r3, r3, #8
 800a11c:	493d      	ldr	r1, [pc, #244]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d022      	beq.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a134:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a138:	d11d      	bne.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a13a:	4b36      	ldr	r3, [pc, #216]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a13c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a140:	0e1b      	lsrs	r3, r3, #24
 800a142:	f003 030f 	and.w	r3, r3, #15
 800a146:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a148:	4b32      	ldr	r3, [pc, #200]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a14e:	0f1b      	lsrs	r3, r3, #28
 800a150:	f003 0307 	and.w	r3, r3, #7
 800a154:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	019a      	lsls	r2, r3, #6
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a1b      	ldr	r3, [r3, #32]
 800a160:	041b      	lsls	r3, r3, #16
 800a162:	431a      	orrs	r2, r3
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	061b      	lsls	r3, r3, #24
 800a168:	431a      	orrs	r2, r3
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	071b      	lsls	r3, r3, #28
 800a16e:	4929      	ldr	r1, [pc, #164]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a170:	4313      	orrs	r3, r2
 800a172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 0308 	and.w	r3, r3, #8
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d028      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a182:	4b24      	ldr	r3, [pc, #144]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a188:	0e1b      	lsrs	r3, r3, #24
 800a18a:	f003 030f 	and.w	r3, r3, #15
 800a18e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a190:	4b20      	ldr	r3, [pc, #128]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a196:	0c1b      	lsrs	r3, r3, #16
 800a198:	f003 0303 	and.w	r3, r3, #3
 800a19c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	019a      	lsls	r2, r3, #6
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	041b      	lsls	r3, r3, #16
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	061b      	lsls	r3, r3, #24
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	69db      	ldr	r3, [r3, #28]
 800a1b4:	071b      	lsls	r3, r3, #28
 800a1b6:	4917      	ldr	r1, [pc, #92]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a1be:	4b15      	ldr	r3, [pc, #84]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a1c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1cc:	4911      	ldr	r1, [pc, #68]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a1d4:	4b0f      	ldr	r3, [pc, #60]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a0e      	ldr	r2, [pc, #56]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a1da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1e0:	f7fb fd52 	bl	8005c88 <HAL_GetTick>
 800a1e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a1e6:	e008      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a1e8:	f7fb fd4e 	bl	8005c88 <HAL_GetTick>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	2b64      	cmp	r3, #100	; 0x64
 800a1f4:	d901      	bls.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e007      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a1fa:	4b06      	ldr	r3, [pc, #24]	; (800a214 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a206:	d1ef      	bne.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3720      	adds	r7, #32
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	40023800 	.word	0x40023800

0800a218 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e09d      	b.n	800a366 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d108      	bne.n	800a244 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a23a:	d009      	beq.n	800a250 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	61da      	str	r2, [r3, #28]
 800a242:	e005      	b.n	800a250 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d106      	bne.n	800a270 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7f7 f802 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2202      	movs	r2, #2
 800a274:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a286:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a290:	d902      	bls.n	800a298 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a292:	2300      	movs	r3, #0
 800a294:	60fb      	str	r3, [r7, #12]
 800a296:	e002      	b.n	800a29e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a29c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a2a6:	d007      	beq.n	800a2b8 <HAL_SPI_Init+0xa0>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2b0:	d002      	beq.n	800a2b8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a2c8:	431a      	orrs	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	431a      	orrs	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	695b      	ldr	r3, [r3, #20]
 800a2d8:	f003 0301 	and.w	r3, r3, #1
 800a2dc:	431a      	orrs	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2e6:	431a      	orrs	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	69db      	ldr	r3, [r3, #28]
 800a2ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2f0:	431a      	orrs	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2fa:	ea42 0103 	orr.w	r1, r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a302:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	430a      	orrs	r2, r1
 800a30c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	0c1b      	lsrs	r3, r3, #16
 800a314:	f003 0204 	and.w	r2, r3, #4
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	f003 0310 	and.w	r3, r3, #16
 800a320:	431a      	orrs	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a326:	f003 0308 	and.w	r3, r3, #8
 800a32a:	431a      	orrs	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a334:	ea42 0103 	orr.w	r1, r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	430a      	orrs	r2, r1
 800a344:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	69da      	ldr	r2, [r3, #28]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a354:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2201      	movs	r2, #1
 800a360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
	...

0800a370 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	4613      	mov	r3, r2
 800a37c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d110      	bne.n	800a3ac <HAL_SPI_Receive_DMA+0x3c>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a392:	d10b      	bne.n	800a3ac <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2204      	movs	r2, #4
 800a398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800a39c:	88fb      	ldrh	r3, [r7, #6]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	68b9      	ldr	r1, [r7, #8]
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f000 f908 	bl	800a5b8 <HAL_SPI_TransmitReceive_DMA>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	e0fb      	b.n	800a5a4 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d101      	bne.n	800a3ba <HAL_SPI_Receive_DMA+0x4a>
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	e0f4      	b.n	800a5a4 <HAL_SPI_Receive_DMA+0x234>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d002      	beq.n	800a3d4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800a3ce:	2302      	movs	r3, #2
 800a3d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a3d2:	e0e2      	b.n	800a59a <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <HAL_SPI_Receive_DMA+0x70>
 800a3da:	88fb      	ldrh	r3, [r7, #6]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d102      	bne.n	800a3e6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a3e4:	e0d9      	b.n	800a59a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2204      	movs	r2, #4
 800a3ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	88fa      	ldrh	r2, [r7, #6]
 800a3fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	88fa      	ldrh	r2, [r7, #6]
 800a406:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a42a:	d10f      	bne.n	800a44c <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a43a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a44a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	685a      	ldr	r2, [r3, #4]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a45a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a464:	d908      	bls.n	800a478 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a474:	605a      	str	r2, [r3, #4]
 800a476:	e042      	b.n	800a4fe <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685a      	ldr	r2, [r3, #4]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a486:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a492:	d134      	bne.n	800a4fe <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	685a      	ldr	r2, [r3, #4]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a4a2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d111      	bne.n	800a4d8 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4c2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	085b      	lsrs	r3, r3, #1
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a4d6:	e012      	b.n	800a4fe <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4e6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	085b      	lsrs	r3, r3, #1
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a502:	4a2a      	ldr	r2, [pc, #168]	; (800a5ac <HAL_SPI_Receive_DMA+0x23c>)
 800a504:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a50a:	4a29      	ldr	r2, [pc, #164]	; (800a5b0 <HAL_SPI_Receive_DMA+0x240>)
 800a50c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a512:	4a28      	ldr	r2, [pc, #160]	; (800a5b4 <HAL_SPI_Receive_DMA+0x244>)
 800a514:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a51a:	2200      	movs	r2, #0
 800a51c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	330c      	adds	r3, #12
 800a528:	4619      	mov	r1, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a536:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a538:	f7fb feb2 	bl	80062a0 <HAL_DMA_Start_IT>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00c      	beq.n	800a55c <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a546:	f043 0210 	orr.w	r2, r3, #16
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2201      	movs	r2, #1
 800a556:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a55a:	e01e      	b.n	800a59a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a566:	2b40      	cmp	r3, #64	; 0x40
 800a568:	d007      	beq.n	800a57a <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a578:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f042 0220 	orr.w	r2, r2, #32
 800a588:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	685a      	ldr	r2, [r3, #4]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f042 0201 	orr.w	r2, r2, #1
 800a598:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	0800ac49 	.word	0x0800ac49
 800a5b0:	0800ab0d 	.word	0x0800ab0d
 800a5b4:	0800ac81 	.word	0x0800ac81

0800a5b8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
 800a5c4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d101      	bne.n	800a5d8 <HAL_SPI_TransmitReceive_DMA+0x20>
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	e16c      	b.n	800a8b2 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5e6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a5ee:	7dbb      	ldrb	r3, [r7, #22]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d00d      	beq.n	800a610 <HAL_SPI_TransmitReceive_DMA+0x58>
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5fa:	d106      	bne.n	800a60a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d102      	bne.n	800a60a <HAL_SPI_TransmitReceive_DMA+0x52>
 800a604:	7dbb      	ldrb	r3, [r7, #22]
 800a606:	2b04      	cmp	r3, #4
 800a608:	d002      	beq.n	800a610 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800a60a:	2302      	movs	r3, #2
 800a60c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a60e:	e14b      	b.n	800a8a8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d005      	beq.n	800a622 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a61c:	887b      	ldrh	r3, [r7, #2]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d102      	bne.n	800a628 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a626:	e13f      	b.n	800a8a8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	2b04      	cmp	r3, #4
 800a632:	d003      	beq.n	800a63c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2205      	movs	r2, #5
 800a638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	887a      	ldrh	r2, [r7, #2]
 800a64c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	887a      	ldrh	r2, [r7, #2]
 800a652:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	887a      	ldrh	r2, [r7, #2]
 800a65e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	887a      	ldrh	r2, [r7, #2]
 800a666:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2200      	movs	r2, #0
 800a66e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800a684:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a68e:	d908      	bls.n	800a6a2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a69e:	605a      	str	r2, [r3, #4]
 800a6a0:	e06f      	b.n	800a782 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a6b0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6bc:	d126      	bne.n	800a70c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10f      	bne.n	800a6ea <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a6d8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	085b      	lsrs	r3, r3, #1
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a6e8:	e010      	b.n	800a70c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6f8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	085b      	lsrs	r3, r3, #1
 800a702:	b29b      	uxth	r3, r3
 800a704:	3301      	adds	r3, #1
 800a706:	b29a      	uxth	r2, r3
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a716:	d134      	bne.n	800a782 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a726:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a72e:	b29b      	uxth	r3, r3
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	2b00      	cmp	r3, #0
 800a736:	d111      	bne.n	800a75c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a746:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a74e:	b29b      	uxth	r3, r3
 800a750:	085b      	lsrs	r3, r3, #1
 800a752:	b29a      	uxth	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a75a:	e012      	b.n	800a782 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a76a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a772:	b29b      	uxth	r3, r3
 800a774:	085b      	lsrs	r3, r3, #1
 800a776:	b29b      	uxth	r3, r3
 800a778:	3301      	adds	r3, #1
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	d108      	bne.n	800a7a0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a792:	4a4a      	ldr	r2, [pc, #296]	; (800a8bc <HAL_SPI_TransmitReceive_DMA+0x304>)
 800a794:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a79a:	4a49      	ldr	r2, [pc, #292]	; (800a8c0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800a79c:	63da      	str	r2, [r3, #60]	; 0x3c
 800a79e:	e007      	b.n	800a7b0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7a4:	4a47      	ldr	r2, [pc, #284]	; (800a8c4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800a7a6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ac:	4a46      	ldr	r2, [pc, #280]	; (800a8c8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800a7ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7b4:	4a45      	ldr	r2, [pc, #276]	; (800a8cc <HAL_SPI_TransmitReceive_DMA+0x314>)
 800a7b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7bc:	2200      	movs	r2, #0
 800a7be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	330c      	adds	r3, #12
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7d8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a7da:	f7fb fd61 	bl	80062a0 <HAL_DMA_Start_IT>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00c      	beq.n	800a7fe <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7e8:	f043 0210 	orr.w	r2, r3, #16
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a7fc:	e054      	b.n	800a8a8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f042 0201 	orr.w	r2, r2, #1
 800a80c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a812:	2200      	movs	r2, #0
 800a814:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a81a:	2200      	movs	r2, #0
 800a81c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a822:	2200      	movs	r2, #0
 800a824:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a82a:	2200      	movs	r2, #0
 800a82c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a836:	4619      	mov	r1, r3
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	330c      	adds	r3, #12
 800a83e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a844:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a846:	f7fb fd2b 	bl	80062a0 <HAL_DMA_Start_IT>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00c      	beq.n	800a86a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a854:	f043 0210 	orr.w	r2, r3, #16
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a868:	e01e      	b.n	800a8a8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a874:	2b40      	cmp	r3, #64	; 0x40
 800a876:	d007      	beq.n	800a888 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a886:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685a      	ldr	r2, [r3, #4]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f042 0220 	orr.w	r2, r2, #32
 800a896:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f042 0202 	orr.w	r2, r2, #2
 800a8a6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	0800ac49 	.word	0x0800ac49
 800a8c0:	0800ab0d 	.word	0x0800ab0d
 800a8c4:	0800ac65 	.word	0x0800ac65
 800a8c8:	0800abb7 	.word	0x0800abb7
 800a8cc:	0800ac81 	.word	0x0800ac81

0800a8d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b088      	sub	sp, #32
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	099b      	lsrs	r3, r3, #6
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10f      	bne.n	800a914 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00a      	beq.n	800a914 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	099b      	lsrs	r3, r3, #6
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	2b00      	cmp	r3, #0
 800a908:	d004      	beq.n	800a914 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	4798      	blx	r3
    return;
 800a912:	e0d7      	b.n	800aac4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	085b      	lsrs	r3, r3, #1
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00a      	beq.n	800a936 <HAL_SPI_IRQHandler+0x66>
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	09db      	lsrs	r3, r3, #7
 800a924:	f003 0301 	and.w	r3, r3, #1
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d004      	beq.n	800a936 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	4798      	blx	r3
    return;
 800a934:	e0c6      	b.n	800aac4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	095b      	lsrs	r3, r3, #5
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10c      	bne.n	800a95c <HAL_SPI_IRQHandler+0x8c>
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	099b      	lsrs	r3, r3, #6
 800a946:	f003 0301 	and.w	r3, r3, #1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d106      	bne.n	800a95c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	0a1b      	lsrs	r3, r3, #8
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	f000 80b4 	beq.w	800aac4 <HAL_SPI_IRQHandler+0x1f4>
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	095b      	lsrs	r3, r3, #5
 800a960:	f003 0301 	and.w	r3, r3, #1
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 80ad 	beq.w	800aac4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	099b      	lsrs	r3, r3, #6
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d023      	beq.n	800a9be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d011      	beq.n	800a9a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a986:	f043 0204 	orr.w	r2, r3, #4
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a98e:	2300      	movs	r3, #0
 800a990:	617b      	str	r3, [r7, #20]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	617b      	str	r3, [r7, #20]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	617b      	str	r3, [r7, #20]
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	e00b      	b.n	800a9be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	613b      	str	r3, [r7, #16]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	613b      	str	r3, [r7, #16]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	613b      	str	r3, [r7, #16]
 800a9ba:	693b      	ldr	r3, [r7, #16]
        return;
 800a9bc:	e082      	b.n	800aac4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	095b      	lsrs	r3, r3, #5
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d014      	beq.n	800a9f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9ce:	f043 0201 	orr.w	r2, r3, #1
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	60fb      	str	r3, [r7, #12]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	60fb      	str	r3, [r7, #12]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9f0:	601a      	str	r2, [r3, #0]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	0a1b      	lsrs	r3, r3, #8
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00c      	beq.n	800aa1a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa04:	f043 0208 	orr.w	r2, r3, #8
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	60bb      	str	r3, [r7, #8]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	60bb      	str	r3, [r7, #8]
 800aa18:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d04f      	beq.n	800aac2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aa30:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	f003 0302 	and.w	r3, r3, #2
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d104      	bne.n	800aa4e <HAL_SPI_IRQHandler+0x17e>
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d034      	beq.n	800aab8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	685a      	ldr	r2, [r3, #4]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f022 0203 	bic.w	r2, r2, #3
 800aa5c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d011      	beq.n	800aa8a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa6a:	4a18      	ldr	r2, [pc, #96]	; (800aacc <HAL_SPI_IRQHandler+0x1fc>)
 800aa6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fb fce4 	bl	8006440 <HAL_DMA_Abort_IT>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d005      	beq.n	800aa8a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d016      	beq.n	800aac0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa96:	4a0d      	ldr	r2, [pc, #52]	; (800aacc <HAL_SPI_IRQHandler+0x1fc>)
 800aa98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fb fcce 	bl	8006440 <HAL_DMA_Abort_IT>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00a      	beq.n	800aac0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aaae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800aab6:	e003      	b.n	800aac0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f81d 	bl	800aaf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800aabe:	e000      	b.n	800aac2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800aac0:	bf00      	nop
    return;
 800aac2:	bf00      	nop
  }
}
 800aac4:	3720      	adds	r7, #32
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	0800acc1 	.word	0x0800acc1

0800aad0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab18:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab1a:	f7fb f8b5 	bl	8005c88 <HAL_GetTick>
 800ab1e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab2e:	d03c      	beq.n	800abaa <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	685a      	ldr	r2, [r3, #4]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f022 0220 	bic.w	r2, r2, #32
 800ab3e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10d      	bne.n	800ab64 <SPI_DMAReceiveCplt+0x58>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab50:	d108      	bne.n	800ab64 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	685a      	ldr	r2, [r3, #4]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f022 0203 	bic.w	r2, r2, #3
 800ab60:	605a      	str	r2, [r3, #4]
 800ab62:	e007      	b.n	800ab74 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	685a      	ldr	r2, [r3, #4]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f022 0201 	bic.w	r2, r2, #1
 800ab72:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ab74:	68ba      	ldr	r2, [r7, #8]
 800ab76:	2164      	movs	r1, #100	; 0x64
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f000 f9d5 	bl	800af28 <SPI_EndRxTransaction>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d002      	beq.n	800ab8a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2220      	movs	r2, #32
 800ab88:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d003      	beq.n	800abaa <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f7ff ffa8 	bl	800aaf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800aba8:	e002      	b.n	800abb0 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f7f6 f850 	bl	8000c50 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b084      	sub	sp, #16
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc2:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abc4:	f7fb f860 	bl	8005c88 <HAL_GetTick>
 800abc8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abd8:	d030      	beq.n	800ac3c <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f022 0220 	bic.w	r2, r2, #32
 800abe8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800abea:	68ba      	ldr	r2, [r7, #8]
 800abec:	2164      	movs	r1, #100	; 0x64
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f000 fa16 	bl	800b020 <SPI_EndRxTxTransaction>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d005      	beq.n	800ac06 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abfe:	f043 0220 	orr.w	r2, r3, #32
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f022 0203 	bic.w	r2, r2, #3
 800ac14:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d003      	beq.n	800ac3c <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f7ff ff5f 	bl	800aaf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ac3a:	e002      	b.n	800ac42 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f7ff ff47 	bl	800aad0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac54:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f7f5 ffe4 	bl	8000c24 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac5c:	bf00      	nop
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac70:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f7ff ff36 	bl	800aae4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac78:	bf00      	nop
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f022 0203 	bic.w	r2, r2, #3
 800ac9c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aca2:	f043 0210 	orr.w	r2, r3, #16
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2201      	movs	r2, #1
 800acae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f7ff ff20 	bl	800aaf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800acb8:	bf00      	nop
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800accc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f7ff ff0b 	bl	800aaf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ace2:	bf00      	nop
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
	...

0800acec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b088      	sub	sp, #32
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	603b      	str	r3, [r7, #0]
 800acf8:	4613      	mov	r3, r2
 800acfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800acfc:	f7fa ffc4 	bl	8005c88 <HAL_GetTick>
 800ad00:	4602      	mov	r2, r0
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	1a9b      	subs	r3, r3, r2
 800ad06:	683a      	ldr	r2, [r7, #0]
 800ad08:	4413      	add	r3, r2
 800ad0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad0c:	f7fa ffbc 	bl	8005c88 <HAL_GetTick>
 800ad10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad12:	4b39      	ldr	r3, [pc, #228]	; (800adf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	015b      	lsls	r3, r3, #5
 800ad18:	0d1b      	lsrs	r3, r3, #20
 800ad1a:	69fa      	ldr	r2, [r7, #28]
 800ad1c:	fb02 f303 	mul.w	r3, r2, r3
 800ad20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad22:	e054      	b.n	800adce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad2a:	d050      	beq.n	800adce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad2c:	f7fa ffac 	bl	8005c88 <HAL_GetTick>
 800ad30:	4602      	mov	r2, r0
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	1ad3      	subs	r3, r2, r3
 800ad36:	69fa      	ldr	r2, [r7, #28]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d902      	bls.n	800ad42 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d13d      	bne.n	800adbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	685a      	ldr	r2, [r3, #4]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad5a:	d111      	bne.n	800ad80 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad64:	d004      	beq.n	800ad70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad6e:	d107      	bne.n	800ad80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad88:	d10f      	bne.n	800adaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad98:	601a      	str	r2, [r3, #0]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ada8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2201      	movs	r2, #1
 800adae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800adba:	2303      	movs	r3, #3
 800adbc:	e017      	b.n	800adee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d101      	bne.n	800adc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800adc4:	2300      	movs	r3, #0
 800adc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	3b01      	subs	r3, #1
 800adcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689a      	ldr	r2, [r3, #8]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	4013      	ands	r3, r2
 800add8:	68ba      	ldr	r2, [r7, #8]
 800adda:	429a      	cmp	r2, r3
 800addc:	bf0c      	ite	eq
 800adde:	2301      	moveq	r3, #1
 800ade0:	2300      	movne	r3, #0
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	461a      	mov	r2, r3
 800ade6:	79fb      	ldrb	r3, [r7, #7]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d19b      	bne.n	800ad24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3720      	adds	r7, #32
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20000400 	.word	0x20000400

0800adfc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b08a      	sub	sp, #40	; 0x28
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
 800ae08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ae0e:	f7fa ff3b 	bl	8005c88 <HAL_GetTick>
 800ae12:	4602      	mov	r2, r0
 800ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae16:	1a9b      	subs	r3, r3, r2
 800ae18:	683a      	ldr	r2, [r7, #0]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ae1e:	f7fa ff33 	bl	8005c88 <HAL_GetTick>
 800ae22:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	330c      	adds	r3, #12
 800ae2a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ae2c:	4b3d      	ldr	r3, [pc, #244]	; (800af24 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	4613      	mov	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	00da      	lsls	r2, r3, #3
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	0d1b      	lsrs	r3, r3, #20
 800ae3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae3e:	fb02 f303 	mul.w	r3, r2, r3
 800ae42:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ae44:	e060      	b.n	800af08 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ae4c:	d107      	bne.n	800ae5e <SPI_WaitFifoStateUntilTimeout+0x62>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d104      	bne.n	800ae5e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae64:	d050      	beq.n	800af08 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ae66:	f7fa ff0f 	bl	8005c88 <HAL_GetTick>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d902      	bls.n	800ae7c <SPI_WaitFifoStateUntilTimeout+0x80>
 800ae76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d13d      	bne.n	800aef8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685a      	ldr	r2, [r3, #4]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ae8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae94:	d111      	bne.n	800aeba <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae9e:	d004      	beq.n	800aeaa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aea8:	d107      	bne.n	800aeba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aeb8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aec2:	d10f      	bne.n	800aee4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aed2:	601a      	str	r2, [r3, #0]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aee2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800aef4:	2303      	movs	r3, #3
 800aef6:	e010      	b.n	800af1a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800aefe:	2300      	movs	r3, #0
 800af00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	3b01      	subs	r3, #1
 800af06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	689a      	ldr	r2, [r3, #8]
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	4013      	ands	r3, r2
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	429a      	cmp	r2, r3
 800af16:	d196      	bne.n	800ae46 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3728      	adds	r7, #40	; 0x28
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20000400 	.word	0x20000400

0800af28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b088      	sub	sp, #32
 800af2c:	af02      	add	r7, sp, #8
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af3c:	d111      	bne.n	800af62 <SPI_EndRxTransaction+0x3a>
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af46:	d004      	beq.n	800af52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af50:	d107      	bne.n	800af62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af6a:	d112      	bne.n	800af92 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	2200      	movs	r2, #0
 800af74:	2180      	movs	r1, #128	; 0x80
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f7ff feb8 	bl	800acec <SPI_WaitFlagStateUntilTimeout>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d021      	beq.n	800afc6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af86:	f043 0220 	orr.w	r2, r3, #32
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800af8e:	2303      	movs	r3, #3
 800af90:	e03d      	b.n	800b00e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800af92:	4b21      	ldr	r3, [pc, #132]	; (800b018 <SPI_EndRxTransaction+0xf0>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a21      	ldr	r2, [pc, #132]	; (800b01c <SPI_EndRxTransaction+0xf4>)
 800af98:	fba2 2303 	umull	r2, r3, r2, r3
 800af9c:	0d5b      	lsrs	r3, r3, #21
 800af9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800afa2:	fb02 f303 	mul.w	r3, r2, r3
 800afa6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00a      	beq.n	800afc4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	3b01      	subs	r3, #1
 800afb2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afbe:	2b80      	cmp	r3, #128	; 0x80
 800afc0:	d0f2      	beq.n	800afa8 <SPI_EndRxTransaction+0x80>
 800afc2:	e000      	b.n	800afc6 <SPI_EndRxTransaction+0x9e>
        break;
 800afc4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afce:	d11d      	bne.n	800b00c <SPI_EndRxTransaction+0xe4>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afd8:	d004      	beq.n	800afe4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afe2:	d113      	bne.n	800b00c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	2200      	movs	r2, #0
 800afec:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f7ff ff03 	bl	800adfc <SPI_WaitFifoStateUntilTimeout>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d007      	beq.n	800b00c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b000:	f043 0220 	orr.w	r2, r3, #32
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b008:	2303      	movs	r3, #3
 800b00a:	e000      	b.n	800b00e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3718      	adds	r7, #24
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	20000400 	.word	0x20000400
 800b01c:	165e9f81 	.word	0x165e9f81

0800b020 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b088      	sub	sp, #32
 800b024:	af02      	add	r7, sp, #8
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	2200      	movs	r2, #0
 800b034:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f7ff fedf 	bl	800adfc <SPI_WaitFifoStateUntilTimeout>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d007      	beq.n	800b054 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b048:	f043 0220 	orr.w	r2, r3, #32
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	e046      	b.n	800b0e2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b054:	4b25      	ldr	r3, [pc, #148]	; (800b0ec <SPI_EndRxTxTransaction+0xcc>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a25      	ldr	r2, [pc, #148]	; (800b0f0 <SPI_EndRxTxTransaction+0xd0>)
 800b05a:	fba2 2303 	umull	r2, r3, r2, r3
 800b05e:	0d5b      	lsrs	r3, r3, #21
 800b060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b064:	fb02 f303 	mul.w	r3, r2, r3
 800b068:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b072:	d112      	bne.n	800b09a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2200      	movs	r2, #0
 800b07c:	2180      	movs	r1, #128	; 0x80
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f7ff fe34 	bl	800acec <SPI_WaitFlagStateUntilTimeout>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d016      	beq.n	800b0b8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b08e:	f043 0220 	orr.w	r2, r3, #32
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	e023      	b.n	800b0e2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00a      	beq.n	800b0b6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	3b01      	subs	r3, #1
 800b0a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0b0:	2b80      	cmp	r3, #128	; 0x80
 800b0b2:	d0f2      	beq.n	800b09a <SPI_EndRxTxTransaction+0x7a>
 800b0b4:	e000      	b.n	800b0b8 <SPI_EndRxTxTransaction+0x98>
        break;
 800b0b6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f7ff fe99 	bl	800adfc <SPI_WaitFifoStateUntilTimeout>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d007      	beq.n	800b0e0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0d4:	f043 0220 	orr.w	r2, r3, #32
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	e000      	b.n	800b0e2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	20000400 	.word	0x20000400
 800b0f0:	165e9f81 	.word	0x165e9f81

0800b0f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e049      	b.n	800b19a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d106      	bne.n	800b120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7f6 fa78 	bl	8001610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2202      	movs	r2, #2
 800b124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	3304      	adds	r3, #4
 800b130:	4619      	mov	r1, r3
 800b132:	4610      	mov	r0, r2
 800b134:	f000 fac0 	bl	800b6b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2201      	movs	r2, #1
 800b15c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2201      	movs	r2, #1
 800b184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2201      	movs	r2, #1
 800b194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
	...

0800b1a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d001      	beq.n	800b1bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e054      	b.n	800b266 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2202      	movs	r2, #2
 800b1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	68da      	ldr	r2, [r3, #12]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f042 0201 	orr.w	r2, r2, #1
 800b1d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a26      	ldr	r2, [pc, #152]	; (800b274 <HAL_TIM_Base_Start_IT+0xd0>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d022      	beq.n	800b224 <HAL_TIM_Base_Start_IT+0x80>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1e6:	d01d      	beq.n	800b224 <HAL_TIM_Base_Start_IT+0x80>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a22      	ldr	r2, [pc, #136]	; (800b278 <HAL_TIM_Base_Start_IT+0xd4>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d018      	beq.n	800b224 <HAL_TIM_Base_Start_IT+0x80>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a21      	ldr	r2, [pc, #132]	; (800b27c <HAL_TIM_Base_Start_IT+0xd8>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d013      	beq.n	800b224 <HAL_TIM_Base_Start_IT+0x80>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a1f      	ldr	r2, [pc, #124]	; (800b280 <HAL_TIM_Base_Start_IT+0xdc>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d00e      	beq.n	800b224 <HAL_TIM_Base_Start_IT+0x80>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a1e      	ldr	r2, [pc, #120]	; (800b284 <HAL_TIM_Base_Start_IT+0xe0>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d009      	beq.n	800b224 <HAL_TIM_Base_Start_IT+0x80>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a1c      	ldr	r2, [pc, #112]	; (800b288 <HAL_TIM_Base_Start_IT+0xe4>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d004      	beq.n	800b224 <HAL_TIM_Base_Start_IT+0x80>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a1b      	ldr	r2, [pc, #108]	; (800b28c <HAL_TIM_Base_Start_IT+0xe8>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d115      	bne.n	800b250 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	689a      	ldr	r2, [r3, #8]
 800b22a:	4b19      	ldr	r3, [pc, #100]	; (800b290 <HAL_TIM_Base_Start_IT+0xec>)
 800b22c:	4013      	ands	r3, r2
 800b22e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2b06      	cmp	r3, #6
 800b234:	d015      	beq.n	800b262 <HAL_TIM_Base_Start_IT+0xbe>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b23c:	d011      	beq.n	800b262 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f042 0201 	orr.w	r2, r2, #1
 800b24c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b24e:	e008      	b.n	800b262 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f042 0201 	orr.w	r2, r2, #1
 800b25e:	601a      	str	r2, [r3, #0]
 800b260:	e000      	b.n	800b264 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b262:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	40010000 	.word	0x40010000
 800b278:	40000400 	.word	0x40000400
 800b27c:	40000800 	.word	0x40000800
 800b280:	40000c00 	.word	0x40000c00
 800b284:	40010400 	.word	0x40010400
 800b288:	40014000 	.word	0x40014000
 800b28c:	40001800 	.word	0x40001800
 800b290:	00010007 	.word	0x00010007

0800b294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	f003 0302 	and.w	r3, r3, #2
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d122      	bne.n	800b2f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	f003 0302 	and.w	r3, r3, #2
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d11b      	bne.n	800b2f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f06f 0202 	mvn.w	r2, #2
 800b2c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	699b      	ldr	r3, [r3, #24]
 800b2ce:	f003 0303 	and.w	r3, r3, #3
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f9d0 	bl	800b67c <HAL_TIM_IC_CaptureCallback>
 800b2dc:	e005      	b.n	800b2ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 f9c2 	bl	800b668 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f9d3 	bl	800b690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	f003 0304 	and.w	r3, r3, #4
 800b2fa:	2b04      	cmp	r3, #4
 800b2fc:	d122      	bne.n	800b344 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	f003 0304 	and.w	r3, r3, #4
 800b308:	2b04      	cmp	r3, #4
 800b30a:	d11b      	bne.n	800b344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f06f 0204 	mvn.w	r2, #4
 800b314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2202      	movs	r2, #2
 800b31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	699b      	ldr	r3, [r3, #24]
 800b322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f9a6 	bl	800b67c <HAL_TIM_IC_CaptureCallback>
 800b330:	e005      	b.n	800b33e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 f998 	bl	800b668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f9a9 	bl	800b690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	f003 0308 	and.w	r3, r3, #8
 800b34e:	2b08      	cmp	r3, #8
 800b350:	d122      	bne.n	800b398 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	f003 0308 	and.w	r3, r3, #8
 800b35c:	2b08      	cmp	r3, #8
 800b35e:	d11b      	bne.n	800b398 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f06f 0208 	mvn.w	r2, #8
 800b368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2204      	movs	r2, #4
 800b36e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	69db      	ldr	r3, [r3, #28]
 800b376:	f003 0303 	and.w	r3, r3, #3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d003      	beq.n	800b386 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f97c 	bl	800b67c <HAL_TIM_IC_CaptureCallback>
 800b384:	e005      	b.n	800b392 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f96e 	bl	800b668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 f97f 	bl	800b690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	691b      	ldr	r3, [r3, #16]
 800b39e:	f003 0310 	and.w	r3, r3, #16
 800b3a2:	2b10      	cmp	r3, #16
 800b3a4:	d122      	bne.n	800b3ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	f003 0310 	and.w	r3, r3, #16
 800b3b0:	2b10      	cmp	r3, #16
 800b3b2:	d11b      	bne.n	800b3ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f06f 0210 	mvn.w	r2, #16
 800b3bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2208      	movs	r2, #8
 800b3c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	69db      	ldr	r3, [r3, #28]
 800b3ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d003      	beq.n	800b3da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 f952 	bl	800b67c <HAL_TIM_IC_CaptureCallback>
 800b3d8:	e005      	b.n	800b3e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 f944 	bl	800b668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 f955 	bl	800b690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d10e      	bne.n	800b418 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	f003 0301 	and.w	r3, r3, #1
 800b404:	2b01      	cmp	r3, #1
 800b406:	d107      	bne.n	800b418 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f06f 0201 	mvn.w	r2, #1
 800b410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7f5 fc32 	bl	8000c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b422:	2b80      	cmp	r3, #128	; 0x80
 800b424:	d10e      	bne.n	800b444 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b430:	2b80      	cmp	r3, #128	; 0x80
 800b432:	d107      	bne.n	800b444 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b43c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 fb0c 	bl	800ba5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	691b      	ldr	r3, [r3, #16]
 800b44a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b44e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b452:	d10e      	bne.n	800b472 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b45e:	2b80      	cmp	r3, #128	; 0x80
 800b460:	d107      	bne.n	800b472 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b46a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 faff 	bl	800ba70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	691b      	ldr	r3, [r3, #16]
 800b478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b47c:	2b40      	cmp	r3, #64	; 0x40
 800b47e:	d10e      	bne.n	800b49e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b48a:	2b40      	cmp	r3, #64	; 0x40
 800b48c:	d107      	bne.n	800b49e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 f903 	bl	800b6a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	691b      	ldr	r3, [r3, #16]
 800b4a4:	f003 0320 	and.w	r3, r3, #32
 800b4a8:	2b20      	cmp	r3, #32
 800b4aa:	d10e      	bne.n	800b4ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	f003 0320 	and.w	r3, r3, #32
 800b4b6:	2b20      	cmp	r3, #32
 800b4b8:	d107      	bne.n	800b4ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f06f 0220 	mvn.w	r2, #32
 800b4c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fabf 	bl	800ba48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b4ca:	bf00      	nop
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
	...

0800b4d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d101      	bne.n	800b4f0 <HAL_TIM_ConfigClockSource+0x1c>
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	e0b4      	b.n	800b65a <HAL_TIM_ConfigClockSource+0x186>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2202      	movs	r2, #2
 800b4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	4b56      	ldr	r3, [pc, #344]	; (800b664 <HAL_TIM_ConfigClockSource+0x190>)
 800b50c:	4013      	ands	r3, r2
 800b50e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b516:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b528:	d03e      	beq.n	800b5a8 <HAL_TIM_ConfigClockSource+0xd4>
 800b52a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b52e:	f200 8087 	bhi.w	800b640 <HAL_TIM_ConfigClockSource+0x16c>
 800b532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b536:	f000 8086 	beq.w	800b646 <HAL_TIM_ConfigClockSource+0x172>
 800b53a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b53e:	d87f      	bhi.n	800b640 <HAL_TIM_ConfigClockSource+0x16c>
 800b540:	2b70      	cmp	r3, #112	; 0x70
 800b542:	d01a      	beq.n	800b57a <HAL_TIM_ConfigClockSource+0xa6>
 800b544:	2b70      	cmp	r3, #112	; 0x70
 800b546:	d87b      	bhi.n	800b640 <HAL_TIM_ConfigClockSource+0x16c>
 800b548:	2b60      	cmp	r3, #96	; 0x60
 800b54a:	d050      	beq.n	800b5ee <HAL_TIM_ConfigClockSource+0x11a>
 800b54c:	2b60      	cmp	r3, #96	; 0x60
 800b54e:	d877      	bhi.n	800b640 <HAL_TIM_ConfigClockSource+0x16c>
 800b550:	2b50      	cmp	r3, #80	; 0x50
 800b552:	d03c      	beq.n	800b5ce <HAL_TIM_ConfigClockSource+0xfa>
 800b554:	2b50      	cmp	r3, #80	; 0x50
 800b556:	d873      	bhi.n	800b640 <HAL_TIM_ConfigClockSource+0x16c>
 800b558:	2b40      	cmp	r3, #64	; 0x40
 800b55a:	d058      	beq.n	800b60e <HAL_TIM_ConfigClockSource+0x13a>
 800b55c:	2b40      	cmp	r3, #64	; 0x40
 800b55e:	d86f      	bhi.n	800b640 <HAL_TIM_ConfigClockSource+0x16c>
 800b560:	2b30      	cmp	r3, #48	; 0x30
 800b562:	d064      	beq.n	800b62e <HAL_TIM_ConfigClockSource+0x15a>
 800b564:	2b30      	cmp	r3, #48	; 0x30
 800b566:	d86b      	bhi.n	800b640 <HAL_TIM_ConfigClockSource+0x16c>
 800b568:	2b20      	cmp	r3, #32
 800b56a:	d060      	beq.n	800b62e <HAL_TIM_ConfigClockSource+0x15a>
 800b56c:	2b20      	cmp	r3, #32
 800b56e:	d867      	bhi.n	800b640 <HAL_TIM_ConfigClockSource+0x16c>
 800b570:	2b00      	cmp	r3, #0
 800b572:	d05c      	beq.n	800b62e <HAL_TIM_ConfigClockSource+0x15a>
 800b574:	2b10      	cmp	r3, #16
 800b576:	d05a      	beq.n	800b62e <HAL_TIM_ConfigClockSource+0x15a>
 800b578:	e062      	b.n	800b640 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6818      	ldr	r0, [r3, #0]
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	6899      	ldr	r1, [r3, #8]
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	f000 f9af 	bl	800b8ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b59c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	68ba      	ldr	r2, [r7, #8]
 800b5a4:	609a      	str	r2, [r3, #8]
      break;
 800b5a6:	e04f      	b.n	800b648 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	6899      	ldr	r1, [r3, #8]
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	685a      	ldr	r2, [r3, #4]
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	f000 f998 	bl	800b8ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	689a      	ldr	r2, [r3, #8]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5ca:	609a      	str	r2, [r3, #8]
      break;
 800b5cc:	e03c      	b.n	800b648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6818      	ldr	r0, [r3, #0]
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	6859      	ldr	r1, [r3, #4]
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	f000 f90c 	bl	800b7f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2150      	movs	r1, #80	; 0x50
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f000 f965 	bl	800b8b6 <TIM_ITRx_SetConfig>
      break;
 800b5ec:	e02c      	b.n	800b648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6818      	ldr	r0, [r3, #0]
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	6859      	ldr	r1, [r3, #4]
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	f000 f92b 	bl	800b856 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2160      	movs	r1, #96	; 0x60
 800b606:	4618      	mov	r0, r3
 800b608:	f000 f955 	bl	800b8b6 <TIM_ITRx_SetConfig>
      break;
 800b60c:	e01c      	b.n	800b648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6818      	ldr	r0, [r3, #0]
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	6859      	ldr	r1, [r3, #4]
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	68db      	ldr	r3, [r3, #12]
 800b61a:	461a      	mov	r2, r3
 800b61c:	f000 f8ec 	bl	800b7f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2140      	movs	r1, #64	; 0x40
 800b626:	4618      	mov	r0, r3
 800b628:	f000 f945 	bl	800b8b6 <TIM_ITRx_SetConfig>
      break;
 800b62c:	e00c      	b.n	800b648 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4619      	mov	r1, r3
 800b638:	4610      	mov	r0, r2
 800b63a:	f000 f93c 	bl	800b8b6 <TIM_ITRx_SetConfig>
      break;
 800b63e:	e003      	b.n	800b648 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b640:	2301      	movs	r3, #1
 800b642:	73fb      	strb	r3, [r7, #15]
      break;
 800b644:	e000      	b.n	800b648 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b658:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	fffeff88 	.word	0xfffeff88

0800b668 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b684:	bf00      	nop
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b698:	bf00      	nop
 800b69a:	370c      	adds	r7, #12
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6ac:	bf00      	nop
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a40      	ldr	r2, [pc, #256]	; (800b7cc <TIM_Base_SetConfig+0x114>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d013      	beq.n	800b6f8 <TIM_Base_SetConfig+0x40>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6d6:	d00f      	beq.n	800b6f8 <TIM_Base_SetConfig+0x40>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a3d      	ldr	r2, [pc, #244]	; (800b7d0 <TIM_Base_SetConfig+0x118>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d00b      	beq.n	800b6f8 <TIM_Base_SetConfig+0x40>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4a3c      	ldr	r2, [pc, #240]	; (800b7d4 <TIM_Base_SetConfig+0x11c>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d007      	beq.n	800b6f8 <TIM_Base_SetConfig+0x40>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4a3b      	ldr	r2, [pc, #236]	; (800b7d8 <TIM_Base_SetConfig+0x120>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d003      	beq.n	800b6f8 <TIM_Base_SetConfig+0x40>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a3a      	ldr	r2, [pc, #232]	; (800b7dc <TIM_Base_SetConfig+0x124>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d108      	bne.n	800b70a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	68fa      	ldr	r2, [r7, #12]
 800b706:	4313      	orrs	r3, r2
 800b708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a2f      	ldr	r2, [pc, #188]	; (800b7cc <TIM_Base_SetConfig+0x114>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d02b      	beq.n	800b76a <TIM_Base_SetConfig+0xb2>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b718:	d027      	beq.n	800b76a <TIM_Base_SetConfig+0xb2>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a2c      	ldr	r2, [pc, #176]	; (800b7d0 <TIM_Base_SetConfig+0x118>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d023      	beq.n	800b76a <TIM_Base_SetConfig+0xb2>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a2b      	ldr	r2, [pc, #172]	; (800b7d4 <TIM_Base_SetConfig+0x11c>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d01f      	beq.n	800b76a <TIM_Base_SetConfig+0xb2>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a2a      	ldr	r2, [pc, #168]	; (800b7d8 <TIM_Base_SetConfig+0x120>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d01b      	beq.n	800b76a <TIM_Base_SetConfig+0xb2>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a29      	ldr	r2, [pc, #164]	; (800b7dc <TIM_Base_SetConfig+0x124>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d017      	beq.n	800b76a <TIM_Base_SetConfig+0xb2>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a28      	ldr	r2, [pc, #160]	; (800b7e0 <TIM_Base_SetConfig+0x128>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d013      	beq.n	800b76a <TIM_Base_SetConfig+0xb2>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4a27      	ldr	r2, [pc, #156]	; (800b7e4 <TIM_Base_SetConfig+0x12c>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d00f      	beq.n	800b76a <TIM_Base_SetConfig+0xb2>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a26      	ldr	r2, [pc, #152]	; (800b7e8 <TIM_Base_SetConfig+0x130>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d00b      	beq.n	800b76a <TIM_Base_SetConfig+0xb2>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a25      	ldr	r2, [pc, #148]	; (800b7ec <TIM_Base_SetConfig+0x134>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d007      	beq.n	800b76a <TIM_Base_SetConfig+0xb2>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a24      	ldr	r2, [pc, #144]	; (800b7f0 <TIM_Base_SetConfig+0x138>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d003      	beq.n	800b76a <TIM_Base_SetConfig+0xb2>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4a23      	ldr	r2, [pc, #140]	; (800b7f4 <TIM_Base_SetConfig+0x13c>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d108      	bne.n	800b77c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	4313      	orrs	r3, r2
 800b77a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	4313      	orrs	r3, r2
 800b788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	689a      	ldr	r2, [r3, #8]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a0a      	ldr	r2, [pc, #40]	; (800b7cc <TIM_Base_SetConfig+0x114>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d003      	beq.n	800b7b0 <TIM_Base_SetConfig+0xf8>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4a0c      	ldr	r2, [pc, #48]	; (800b7dc <TIM_Base_SetConfig+0x124>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d103      	bne.n	800b7b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	691a      	ldr	r2, [r3, #16]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	615a      	str	r2, [r3, #20]
}
 800b7be:	bf00      	nop
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	40010000 	.word	0x40010000
 800b7d0:	40000400 	.word	0x40000400
 800b7d4:	40000800 	.word	0x40000800
 800b7d8:	40000c00 	.word	0x40000c00
 800b7dc:	40010400 	.word	0x40010400
 800b7e0:	40014000 	.word	0x40014000
 800b7e4:	40014400 	.word	0x40014400
 800b7e8:	40014800 	.word	0x40014800
 800b7ec:	40001800 	.word	0x40001800
 800b7f0:	40001c00 	.word	0x40001c00
 800b7f4:	40002000 	.word	0x40002000

0800b7f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b087      	sub	sp, #28
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6a1b      	ldr	r3, [r3, #32]
 800b808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6a1b      	ldr	r3, [r3, #32]
 800b80e:	f023 0201 	bic.w	r2, r3, #1
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	011b      	lsls	r3, r3, #4
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	4313      	orrs	r3, r2
 800b82c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	f023 030a 	bic.w	r3, r3, #10
 800b834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	4313      	orrs	r3, r2
 800b83c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	697a      	ldr	r2, [r7, #20]
 800b848:	621a      	str	r2, [r3, #32]
}
 800b84a:	bf00      	nop
 800b84c:	371c      	adds	r7, #28
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b856:	b480      	push	{r7}
 800b858:	b087      	sub	sp, #28
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	60f8      	str	r0, [r7, #12]
 800b85e:	60b9      	str	r1, [r7, #8]
 800b860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	f023 0210 	bic.w	r2, r3, #16
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	699b      	ldr	r3, [r3, #24]
 800b872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6a1b      	ldr	r3, [r3, #32]
 800b878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	031b      	lsls	r3, r3, #12
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	4313      	orrs	r3, r2
 800b88a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	011b      	lsls	r3, r3, #4
 800b898:	693a      	ldr	r2, [r7, #16]
 800b89a:	4313      	orrs	r3, r2
 800b89c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	697a      	ldr	r2, [r7, #20]
 800b8a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	693a      	ldr	r2, [r7, #16]
 800b8a8:	621a      	str	r2, [r3, #32]
}
 800b8aa:	bf00      	nop
 800b8ac:	371c      	adds	r7, #28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr

0800b8b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8b6:	b480      	push	{r7}
 800b8b8:	b085      	sub	sp, #20
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	f043 0307 	orr.w	r3, r3, #7
 800b8d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	609a      	str	r2, [r3, #8]
}
 800b8e0:	bf00      	nop
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	607a      	str	r2, [r7, #4]
 800b8f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	021a      	lsls	r2, r3, #8
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	431a      	orrs	r2, r3
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	4313      	orrs	r3, r2
 800b914:	697a      	ldr	r2, [r7, #20]
 800b916:	4313      	orrs	r3, r2
 800b918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	697a      	ldr	r2, [r7, #20]
 800b91e:	609a      	str	r2, [r3, #8]
}
 800b920:	bf00      	nop
 800b922:	371c      	adds	r7, #28
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d101      	bne.n	800b944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b940:	2302      	movs	r3, #2
 800b942:	e06d      	b.n	800ba20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2202      	movs	r2, #2
 800b950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a30      	ldr	r2, [pc, #192]	; (800ba2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d004      	beq.n	800b978 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a2f      	ldr	r2, [pc, #188]	; (800ba30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d108      	bne.n	800b98a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b97e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	4313      	orrs	r3, r2
 800b988:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b990:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	4313      	orrs	r3, r2
 800b99a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a20      	ldr	r2, [pc, #128]	; (800ba2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d022      	beq.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9b6:	d01d      	beq.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a1d      	ldr	r2, [pc, #116]	; (800ba34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d018      	beq.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a1c      	ldr	r2, [pc, #112]	; (800ba38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d013      	beq.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a1a      	ldr	r2, [pc, #104]	; (800ba3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d00e      	beq.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a15      	ldr	r2, [pc, #84]	; (800ba30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d009      	beq.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a16      	ldr	r2, [pc, #88]	; (800ba40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d004      	beq.n	800b9f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a15      	ldr	r2, [pc, #84]	; (800ba44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d10c      	bne.n	800ba0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr
 800ba2c:	40010000 	.word	0x40010000
 800ba30:	40010400 	.word	0x40010400
 800ba34:	40000400 	.word	0x40000400
 800ba38:	40000800 	.word	0x40000800
 800ba3c:	40000c00 	.word	0x40000c00
 800ba40:	40014000 	.word	0x40014000
 800ba44:	40001800 	.word	0x40001800

0800ba48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba50:	bf00      	nop
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba64:	bf00      	nop
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ba78:	bf00      	nop
 800ba7a:	370c      	adds	r7, #12
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d101      	bne.n	800ba96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	e040      	b.n	800bb18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d106      	bne.n	800baac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7f5 fe20 	bl	80016ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2224      	movs	r2, #36	; 0x24
 800bab0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f022 0201 	bic.w	r2, r2, #1
 800bac0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 fba2 	bl	800c20c <UART_SetConfig>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b01      	cmp	r3, #1
 800bacc:	d101      	bne.n	800bad2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	e022      	b.n	800bb18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 fdfa 	bl	800c6d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	685a      	ldr	r2, [r3, #4]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800baee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	689a      	ldr	r2, [r3, #8]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bafe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f042 0201 	orr.w	r2, r2, #1
 800bb0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 fe81 	bl	800c818 <UART_CheckIdleState>
 800bb16:	4603      	mov	r3, r0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b08a      	sub	sp, #40	; 0x28
 800bb24:	af02      	add	r7, sp, #8
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	603b      	str	r3, [r7, #0]
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb34:	2b20      	cmp	r3, #32
 800bb36:	d171      	bne.n	800bc1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <HAL_UART_Transmit+0x24>
 800bb3e:	88fb      	ldrh	r3, [r7, #6]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d101      	bne.n	800bb48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800bb44:	2301      	movs	r3, #1
 800bb46:	e06a      	b.n	800bc1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2221      	movs	r2, #33	; 0x21
 800bb54:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb56:	f7fa f897 	bl	8005c88 <HAL_GetTick>
 800bb5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	88fa      	ldrh	r2, [r7, #6]
 800bb60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	88fa      	ldrh	r2, [r7, #6]
 800bb68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb74:	d108      	bne.n	800bb88 <HAL_UART_Transmit+0x68>
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d104      	bne.n	800bb88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	61bb      	str	r3, [r7, #24]
 800bb86:	e003      	b.n	800bb90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bb90:	e02c      	b.n	800bbec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	2180      	movs	r1, #128	; 0x80
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f000 fe72 	bl	800c886 <UART_WaitOnFlagUntilTimeout>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d001      	beq.n	800bbac <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	e038      	b.n	800bc1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10b      	bne.n	800bbca <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	881b      	ldrh	r3, [r3, #0]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bbc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	3302      	adds	r3, #2
 800bbc6:	61bb      	str	r3, [r7, #24]
 800bbc8:	e007      	b.n	800bbda <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	781a      	ldrb	r2, [r3, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d1cc      	bne.n	800bb92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	2140      	movs	r1, #64	; 0x40
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f000 fe3f 	bl	800c886 <UART_WaitOnFlagUntilTimeout>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d001      	beq.n	800bc12 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	e005      	b.n	800bc1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2220      	movs	r2, #32
 800bc16:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	e000      	b.n	800bc1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800bc1c:	2302      	movs	r3, #2
  }
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3720      	adds	r7, #32
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
	...

0800bc28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b0ba      	sub	sp, #232	; 0xe8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	69db      	ldr	r3, [r3, #28]
 800bc36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bc4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bc52:	f640 030f 	movw	r3, #2063	; 0x80f
 800bc56:	4013      	ands	r3, r2
 800bc58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bc5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d115      	bne.n	800bc90 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bc64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc68:	f003 0320 	and.w	r3, r3, #32
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00f      	beq.n	800bc90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bc70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc74:	f003 0320 	and.w	r3, r3, #32
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d009      	beq.n	800bc90 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f000 8297 	beq.w	800c1b4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	4798      	blx	r3
      }
      return;
 800bc8e:	e291      	b.n	800c1b4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bc90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f000 8117 	beq.w	800bec8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800bc9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc9e:	f003 0301 	and.w	r3, r3, #1
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d106      	bne.n	800bcb4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800bca6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bcaa:	4b85      	ldr	r3, [pc, #532]	; (800bec0 <HAL_UART_IRQHandler+0x298>)
 800bcac:	4013      	ands	r3, r2
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f000 810a 	beq.w	800bec8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bcb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcb8:	f003 0301 	and.w	r3, r3, #1
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d011      	beq.n	800bce4 <HAL_UART_IRQHandler+0xbc>
 800bcc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00b      	beq.n	800bce4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcda:	f043 0201 	orr.w	r2, r3, #1
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bce8:	f003 0302 	and.w	r3, r3, #2
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d011      	beq.n	800bd14 <HAL_UART_IRQHandler+0xec>
 800bcf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcf4:	f003 0301 	and.w	r3, r3, #1
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00b      	beq.n	800bd14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2202      	movs	r2, #2
 800bd02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd0a:	f043 0204 	orr.w	r2, r3, #4
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bd14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd18:	f003 0304 	and.w	r3, r3, #4
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d011      	beq.n	800bd44 <HAL_UART_IRQHandler+0x11c>
 800bd20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd24:	f003 0301 	and.w	r3, r3, #1
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00b      	beq.n	800bd44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2204      	movs	r2, #4
 800bd32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd3a:	f043 0202 	orr.w	r2, r3, #2
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bd44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd48:	f003 0308 	and.w	r3, r3, #8
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d017      	beq.n	800bd80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bd50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd54:	f003 0320 	and.w	r3, r3, #32
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d105      	bne.n	800bd68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bd5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00b      	beq.n	800bd80 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2208      	movs	r2, #8
 800bd6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd76:	f043 0208 	orr.w	r2, r3, #8
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bd80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d012      	beq.n	800bdb2 <HAL_UART_IRQHandler+0x18a>
 800bd8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00c      	beq.n	800bdb2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bda0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bda8:	f043 0220 	orr.w	r2, r3, #32
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 81fd 	beq.w	800c1b8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bdbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdc2:	f003 0320 	and.w	r3, r3, #32
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d00d      	beq.n	800bde6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bdca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bdce:	f003 0320 	and.w	r3, r3, #32
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d007      	beq.n	800bde6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d003      	beq.n	800bde6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdfa:	2b40      	cmp	r3, #64	; 0x40
 800bdfc:	d005      	beq.n	800be0a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bdfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800be06:	2b00      	cmp	r3, #0
 800be08:	d04f      	beq.n	800beaa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fe01 	bl	800ca12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be1a:	2b40      	cmp	r3, #64	; 0x40
 800be1c:	d141      	bne.n	800bea2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3308      	adds	r3, #8
 800be24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be2c:	e853 3f00 	ldrex	r3, [r3]
 800be30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800be34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800be38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	3308      	adds	r3, #8
 800be46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800be4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800be4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800be56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800be5a:	e841 2300 	strex	r3, r2, [r1]
 800be5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800be62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1d9      	bne.n	800be1e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d013      	beq.n	800be9a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be76:	4a13      	ldr	r2, [pc, #76]	; (800bec4 <HAL_UART_IRQHandler+0x29c>)
 800be78:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be7e:	4618      	mov	r0, r3
 800be80:	f7fa fade 	bl	8006440 <HAL_DMA_Abort_IT>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d017      	beq.n	800beba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800be94:	4610      	mov	r0, r2
 800be96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be98:	e00f      	b.n	800beba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 f9a0 	bl	800c1e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bea0:	e00b      	b.n	800beba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f99c 	bl	800c1e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bea8:	e007      	b.n	800beba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 f998 	bl	800c1e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800beb8:	e17e      	b.n	800c1b8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800beba:	bf00      	nop
    return;
 800bebc:	e17c      	b.n	800c1b8 <HAL_UART_IRQHandler+0x590>
 800bebe:	bf00      	nop
 800bec0:	04000120 	.word	0x04000120
 800bec4:	0800cadb 	.word	0x0800cadb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800becc:	2b01      	cmp	r3, #1
 800bece:	f040 814c 	bne.w	800c16a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bed6:	f003 0310 	and.w	r3, r3, #16
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f000 8145 	beq.w	800c16a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bee4:	f003 0310 	and.w	r3, r3, #16
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f000 813e 	beq.w	800c16a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2210      	movs	r2, #16
 800bef4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf00:	2b40      	cmp	r3, #64	; 0x40
 800bf02:	f040 80b6 	bne.w	800c072 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 8150 	beq.w	800c1bc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bf22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf26:	429a      	cmp	r2, r3
 800bf28:	f080 8148 	bcs.w	800c1bc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf3a:	69db      	ldr	r3, [r3, #28]
 800bf3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf40:	f000 8086 	beq.w	800c050 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf50:	e853 3f00 	ldrex	r3, [r3]
 800bf54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bf58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	461a      	mov	r2, r3
 800bf6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bf6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bf7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf7e:	e841 2300 	strex	r3, r2, [r1]
 800bf82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1da      	bne.n	800bf44 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	3308      	adds	r3, #8
 800bf94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf98:	e853 3f00 	ldrex	r3, [r3]
 800bf9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bfa0:	f023 0301 	bic.w	r3, r3, #1
 800bfa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3308      	adds	r3, #8
 800bfae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bfb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bfb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bfba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bfbe:	e841 2300 	strex	r3, r2, [r1]
 800bfc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bfc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1e1      	bne.n	800bf8e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	3308      	adds	r3, #8
 800bfd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfd4:	e853 3f00 	ldrex	r3, [r3]
 800bfd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bfda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	3308      	adds	r3, #8
 800bfea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bfee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bff0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bff4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bff6:	e841 2300 	strex	r3, r2, [r1]
 800bffa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1e3      	bne.n	800bfca <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2220      	movs	r2, #32
 800c006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c018:	e853 3f00 	ldrex	r3, [r3]
 800c01c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c01e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c020:	f023 0310 	bic.w	r3, r3, #16
 800c024:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	461a      	mov	r2, r3
 800c02e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c032:	65bb      	str	r3, [r7, #88]	; 0x58
 800c034:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c036:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c038:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c03a:	e841 2300 	strex	r3, r2, [r1]
 800c03e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1e4      	bne.n	800c010 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fa f988 	bl	8006360 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2202      	movs	r2, #2
 800c054:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c062:	b29b      	uxth	r3, r3
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	b29b      	uxth	r3, r3
 800c068:	4619      	mov	r1, r3
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f8c2 	bl	800c1f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c070:	e0a4      	b.n	800c1bc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c07e:	b29b      	uxth	r3, r3
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f000 8096 	beq.w	800c1c0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800c094:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 8091 	beq.w	800c1c0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	e853 3f00 	ldrex	r3, [r3]
 800c0aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c0c0:	647b      	str	r3, [r7, #68]	; 0x44
 800c0c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c0c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0c8:	e841 2300 	strex	r3, r2, [r1]
 800c0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d1e4      	bne.n	800c09e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	3308      	adds	r3, #8
 800c0da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0de:	e853 3f00 	ldrex	r3, [r3]
 800c0e2:	623b      	str	r3, [r7, #32]
   return(result);
 800c0e4:	6a3b      	ldr	r3, [r7, #32]
 800c0e6:	f023 0301 	bic.w	r3, r3, #1
 800c0ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3308      	adds	r3, #8
 800c0f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c0f8:	633a      	str	r2, [r7, #48]	; 0x30
 800c0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c100:	e841 2300 	strex	r3, r2, [r1]
 800c104:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1e3      	bne.n	800c0d4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2220      	movs	r2, #32
 800c110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	e853 3f00 	ldrex	r3, [r3]
 800c12c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f023 0310 	bic.w	r3, r3, #16
 800c134:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	461a      	mov	r2, r3
 800c13e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c142:	61fb      	str	r3, [r7, #28]
 800c144:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c146:	69b9      	ldr	r1, [r7, #24]
 800c148:	69fa      	ldr	r2, [r7, #28]
 800c14a:	e841 2300 	strex	r3, r2, [r1]
 800c14e:	617b      	str	r3, [r7, #20]
   return(result);
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1e4      	bne.n	800c120 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2202      	movs	r2, #2
 800c15a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c15c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 f846 	bl	800c1f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c168:	e02a      	b.n	800c1c0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c16a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c16e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00e      	beq.n	800c194 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d008      	beq.n	800c194 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c186:	2b00      	cmp	r3, #0
 800c188:	d01c      	beq.n	800c1c4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	4798      	blx	r3
    }
    return;
 800c192:	e017      	b.n	800c1c4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d012      	beq.n	800c1c6 <HAL_UART_IRQHandler+0x59e>
 800c1a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00c      	beq.n	800c1c6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fcaa 	bl	800cb06 <UART_EndTransmit_IT>
    return;
 800c1b2:	e008      	b.n	800c1c6 <HAL_UART_IRQHandler+0x59e>
      return;
 800c1b4:	bf00      	nop
 800c1b6:	e006      	b.n	800c1c6 <HAL_UART_IRQHandler+0x59e>
    return;
 800c1b8:	bf00      	nop
 800c1ba:	e004      	b.n	800c1c6 <HAL_UART_IRQHandler+0x59e>
      return;
 800c1bc:	bf00      	nop
 800c1be:	e002      	b.n	800c1c6 <HAL_UART_IRQHandler+0x59e>
      return;
 800c1c0:	bf00      	nop
 800c1c2:	e000      	b.n	800c1c6 <HAL_UART_IRQHandler+0x59e>
    return;
 800c1c4:	bf00      	nop
  }

}
 800c1c6:	37e8      	adds	r7, #232	; 0xe8
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c1d4:	bf00      	nop
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b088      	sub	sp, #32
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c214:	2300      	movs	r3, #0
 800c216:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	431a      	orrs	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	695b      	ldr	r3, [r3, #20]
 800c226:	431a      	orrs	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	69db      	ldr	r3, [r3, #28]
 800c22c:	4313      	orrs	r3, r2
 800c22e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	4ba6      	ldr	r3, [pc, #664]	; (800c4d0 <UART_SetConfig+0x2c4>)
 800c238:	4013      	ands	r3, r2
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	6812      	ldr	r2, [r2, #0]
 800c23e:	6979      	ldr	r1, [r7, #20]
 800c240:	430b      	orrs	r3, r1
 800c242:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	68da      	ldr	r2, [r3, #12]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	430a      	orrs	r2, r1
 800c258:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	699b      	ldr	r3, [r3, #24]
 800c25e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6a1b      	ldr	r3, [r3, #32]
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	4313      	orrs	r3, r2
 800c268:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	697a      	ldr	r2, [r7, #20]
 800c27a:	430a      	orrs	r2, r1
 800c27c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a94      	ldr	r2, [pc, #592]	; (800c4d4 <UART_SetConfig+0x2c8>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d120      	bne.n	800c2ca <UART_SetConfig+0xbe>
 800c288:	4b93      	ldr	r3, [pc, #588]	; (800c4d8 <UART_SetConfig+0x2cc>)
 800c28a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c28e:	f003 0303 	and.w	r3, r3, #3
 800c292:	2b03      	cmp	r3, #3
 800c294:	d816      	bhi.n	800c2c4 <UART_SetConfig+0xb8>
 800c296:	a201      	add	r2, pc, #4	; (adr r2, 800c29c <UART_SetConfig+0x90>)
 800c298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c29c:	0800c2ad 	.word	0x0800c2ad
 800c2a0:	0800c2b9 	.word	0x0800c2b9
 800c2a4:	0800c2b3 	.word	0x0800c2b3
 800c2a8:	0800c2bf 	.word	0x0800c2bf
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	77fb      	strb	r3, [r7, #31]
 800c2b0:	e150      	b.n	800c554 <UART_SetConfig+0x348>
 800c2b2:	2302      	movs	r3, #2
 800c2b4:	77fb      	strb	r3, [r7, #31]
 800c2b6:	e14d      	b.n	800c554 <UART_SetConfig+0x348>
 800c2b8:	2304      	movs	r3, #4
 800c2ba:	77fb      	strb	r3, [r7, #31]
 800c2bc:	e14a      	b.n	800c554 <UART_SetConfig+0x348>
 800c2be:	2308      	movs	r3, #8
 800c2c0:	77fb      	strb	r3, [r7, #31]
 800c2c2:	e147      	b.n	800c554 <UART_SetConfig+0x348>
 800c2c4:	2310      	movs	r3, #16
 800c2c6:	77fb      	strb	r3, [r7, #31]
 800c2c8:	e144      	b.n	800c554 <UART_SetConfig+0x348>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a83      	ldr	r2, [pc, #524]	; (800c4dc <UART_SetConfig+0x2d0>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d132      	bne.n	800c33a <UART_SetConfig+0x12e>
 800c2d4:	4b80      	ldr	r3, [pc, #512]	; (800c4d8 <UART_SetConfig+0x2cc>)
 800c2d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2da:	f003 030c 	and.w	r3, r3, #12
 800c2de:	2b0c      	cmp	r3, #12
 800c2e0:	d828      	bhi.n	800c334 <UART_SetConfig+0x128>
 800c2e2:	a201      	add	r2, pc, #4	; (adr r2, 800c2e8 <UART_SetConfig+0xdc>)
 800c2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e8:	0800c31d 	.word	0x0800c31d
 800c2ec:	0800c335 	.word	0x0800c335
 800c2f0:	0800c335 	.word	0x0800c335
 800c2f4:	0800c335 	.word	0x0800c335
 800c2f8:	0800c329 	.word	0x0800c329
 800c2fc:	0800c335 	.word	0x0800c335
 800c300:	0800c335 	.word	0x0800c335
 800c304:	0800c335 	.word	0x0800c335
 800c308:	0800c323 	.word	0x0800c323
 800c30c:	0800c335 	.word	0x0800c335
 800c310:	0800c335 	.word	0x0800c335
 800c314:	0800c335 	.word	0x0800c335
 800c318:	0800c32f 	.word	0x0800c32f
 800c31c:	2300      	movs	r3, #0
 800c31e:	77fb      	strb	r3, [r7, #31]
 800c320:	e118      	b.n	800c554 <UART_SetConfig+0x348>
 800c322:	2302      	movs	r3, #2
 800c324:	77fb      	strb	r3, [r7, #31]
 800c326:	e115      	b.n	800c554 <UART_SetConfig+0x348>
 800c328:	2304      	movs	r3, #4
 800c32a:	77fb      	strb	r3, [r7, #31]
 800c32c:	e112      	b.n	800c554 <UART_SetConfig+0x348>
 800c32e:	2308      	movs	r3, #8
 800c330:	77fb      	strb	r3, [r7, #31]
 800c332:	e10f      	b.n	800c554 <UART_SetConfig+0x348>
 800c334:	2310      	movs	r3, #16
 800c336:	77fb      	strb	r3, [r7, #31]
 800c338:	e10c      	b.n	800c554 <UART_SetConfig+0x348>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a68      	ldr	r2, [pc, #416]	; (800c4e0 <UART_SetConfig+0x2d4>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d120      	bne.n	800c386 <UART_SetConfig+0x17a>
 800c344:	4b64      	ldr	r3, [pc, #400]	; (800c4d8 <UART_SetConfig+0x2cc>)
 800c346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c34a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c34e:	2b30      	cmp	r3, #48	; 0x30
 800c350:	d013      	beq.n	800c37a <UART_SetConfig+0x16e>
 800c352:	2b30      	cmp	r3, #48	; 0x30
 800c354:	d814      	bhi.n	800c380 <UART_SetConfig+0x174>
 800c356:	2b20      	cmp	r3, #32
 800c358:	d009      	beq.n	800c36e <UART_SetConfig+0x162>
 800c35a:	2b20      	cmp	r3, #32
 800c35c:	d810      	bhi.n	800c380 <UART_SetConfig+0x174>
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d002      	beq.n	800c368 <UART_SetConfig+0x15c>
 800c362:	2b10      	cmp	r3, #16
 800c364:	d006      	beq.n	800c374 <UART_SetConfig+0x168>
 800c366:	e00b      	b.n	800c380 <UART_SetConfig+0x174>
 800c368:	2300      	movs	r3, #0
 800c36a:	77fb      	strb	r3, [r7, #31]
 800c36c:	e0f2      	b.n	800c554 <UART_SetConfig+0x348>
 800c36e:	2302      	movs	r3, #2
 800c370:	77fb      	strb	r3, [r7, #31]
 800c372:	e0ef      	b.n	800c554 <UART_SetConfig+0x348>
 800c374:	2304      	movs	r3, #4
 800c376:	77fb      	strb	r3, [r7, #31]
 800c378:	e0ec      	b.n	800c554 <UART_SetConfig+0x348>
 800c37a:	2308      	movs	r3, #8
 800c37c:	77fb      	strb	r3, [r7, #31]
 800c37e:	e0e9      	b.n	800c554 <UART_SetConfig+0x348>
 800c380:	2310      	movs	r3, #16
 800c382:	77fb      	strb	r3, [r7, #31]
 800c384:	e0e6      	b.n	800c554 <UART_SetConfig+0x348>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a56      	ldr	r2, [pc, #344]	; (800c4e4 <UART_SetConfig+0x2d8>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d120      	bne.n	800c3d2 <UART_SetConfig+0x1c6>
 800c390:	4b51      	ldr	r3, [pc, #324]	; (800c4d8 <UART_SetConfig+0x2cc>)
 800c392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c396:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c39a:	2bc0      	cmp	r3, #192	; 0xc0
 800c39c:	d013      	beq.n	800c3c6 <UART_SetConfig+0x1ba>
 800c39e:	2bc0      	cmp	r3, #192	; 0xc0
 800c3a0:	d814      	bhi.n	800c3cc <UART_SetConfig+0x1c0>
 800c3a2:	2b80      	cmp	r3, #128	; 0x80
 800c3a4:	d009      	beq.n	800c3ba <UART_SetConfig+0x1ae>
 800c3a6:	2b80      	cmp	r3, #128	; 0x80
 800c3a8:	d810      	bhi.n	800c3cc <UART_SetConfig+0x1c0>
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d002      	beq.n	800c3b4 <UART_SetConfig+0x1a8>
 800c3ae:	2b40      	cmp	r3, #64	; 0x40
 800c3b0:	d006      	beq.n	800c3c0 <UART_SetConfig+0x1b4>
 800c3b2:	e00b      	b.n	800c3cc <UART_SetConfig+0x1c0>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	77fb      	strb	r3, [r7, #31]
 800c3b8:	e0cc      	b.n	800c554 <UART_SetConfig+0x348>
 800c3ba:	2302      	movs	r3, #2
 800c3bc:	77fb      	strb	r3, [r7, #31]
 800c3be:	e0c9      	b.n	800c554 <UART_SetConfig+0x348>
 800c3c0:	2304      	movs	r3, #4
 800c3c2:	77fb      	strb	r3, [r7, #31]
 800c3c4:	e0c6      	b.n	800c554 <UART_SetConfig+0x348>
 800c3c6:	2308      	movs	r3, #8
 800c3c8:	77fb      	strb	r3, [r7, #31]
 800c3ca:	e0c3      	b.n	800c554 <UART_SetConfig+0x348>
 800c3cc:	2310      	movs	r3, #16
 800c3ce:	77fb      	strb	r3, [r7, #31]
 800c3d0:	e0c0      	b.n	800c554 <UART_SetConfig+0x348>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a44      	ldr	r2, [pc, #272]	; (800c4e8 <UART_SetConfig+0x2dc>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d125      	bne.n	800c428 <UART_SetConfig+0x21c>
 800c3dc:	4b3e      	ldr	r3, [pc, #248]	; (800c4d8 <UART_SetConfig+0x2cc>)
 800c3de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3ea:	d017      	beq.n	800c41c <UART_SetConfig+0x210>
 800c3ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3f0:	d817      	bhi.n	800c422 <UART_SetConfig+0x216>
 800c3f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3f6:	d00b      	beq.n	800c410 <UART_SetConfig+0x204>
 800c3f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3fc:	d811      	bhi.n	800c422 <UART_SetConfig+0x216>
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d003      	beq.n	800c40a <UART_SetConfig+0x1fe>
 800c402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c406:	d006      	beq.n	800c416 <UART_SetConfig+0x20a>
 800c408:	e00b      	b.n	800c422 <UART_SetConfig+0x216>
 800c40a:	2300      	movs	r3, #0
 800c40c:	77fb      	strb	r3, [r7, #31]
 800c40e:	e0a1      	b.n	800c554 <UART_SetConfig+0x348>
 800c410:	2302      	movs	r3, #2
 800c412:	77fb      	strb	r3, [r7, #31]
 800c414:	e09e      	b.n	800c554 <UART_SetConfig+0x348>
 800c416:	2304      	movs	r3, #4
 800c418:	77fb      	strb	r3, [r7, #31]
 800c41a:	e09b      	b.n	800c554 <UART_SetConfig+0x348>
 800c41c:	2308      	movs	r3, #8
 800c41e:	77fb      	strb	r3, [r7, #31]
 800c420:	e098      	b.n	800c554 <UART_SetConfig+0x348>
 800c422:	2310      	movs	r3, #16
 800c424:	77fb      	strb	r3, [r7, #31]
 800c426:	e095      	b.n	800c554 <UART_SetConfig+0x348>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a2f      	ldr	r2, [pc, #188]	; (800c4ec <UART_SetConfig+0x2e0>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d125      	bne.n	800c47e <UART_SetConfig+0x272>
 800c432:	4b29      	ldr	r3, [pc, #164]	; (800c4d8 <UART_SetConfig+0x2cc>)
 800c434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c438:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c43c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c440:	d017      	beq.n	800c472 <UART_SetConfig+0x266>
 800c442:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c446:	d817      	bhi.n	800c478 <UART_SetConfig+0x26c>
 800c448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c44c:	d00b      	beq.n	800c466 <UART_SetConfig+0x25a>
 800c44e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c452:	d811      	bhi.n	800c478 <UART_SetConfig+0x26c>
 800c454:	2b00      	cmp	r3, #0
 800c456:	d003      	beq.n	800c460 <UART_SetConfig+0x254>
 800c458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c45c:	d006      	beq.n	800c46c <UART_SetConfig+0x260>
 800c45e:	e00b      	b.n	800c478 <UART_SetConfig+0x26c>
 800c460:	2301      	movs	r3, #1
 800c462:	77fb      	strb	r3, [r7, #31]
 800c464:	e076      	b.n	800c554 <UART_SetConfig+0x348>
 800c466:	2302      	movs	r3, #2
 800c468:	77fb      	strb	r3, [r7, #31]
 800c46a:	e073      	b.n	800c554 <UART_SetConfig+0x348>
 800c46c:	2304      	movs	r3, #4
 800c46e:	77fb      	strb	r3, [r7, #31]
 800c470:	e070      	b.n	800c554 <UART_SetConfig+0x348>
 800c472:	2308      	movs	r3, #8
 800c474:	77fb      	strb	r3, [r7, #31]
 800c476:	e06d      	b.n	800c554 <UART_SetConfig+0x348>
 800c478:	2310      	movs	r3, #16
 800c47a:	77fb      	strb	r3, [r7, #31]
 800c47c:	e06a      	b.n	800c554 <UART_SetConfig+0x348>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a1b      	ldr	r2, [pc, #108]	; (800c4f0 <UART_SetConfig+0x2e4>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d138      	bne.n	800c4fa <UART_SetConfig+0x2ee>
 800c488:	4b13      	ldr	r3, [pc, #76]	; (800c4d8 <UART_SetConfig+0x2cc>)
 800c48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c48e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c492:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c496:	d017      	beq.n	800c4c8 <UART_SetConfig+0x2bc>
 800c498:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c49c:	d82a      	bhi.n	800c4f4 <UART_SetConfig+0x2e8>
 800c49e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4a2:	d00b      	beq.n	800c4bc <UART_SetConfig+0x2b0>
 800c4a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4a8:	d824      	bhi.n	800c4f4 <UART_SetConfig+0x2e8>
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d003      	beq.n	800c4b6 <UART_SetConfig+0x2aa>
 800c4ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4b2:	d006      	beq.n	800c4c2 <UART_SetConfig+0x2b6>
 800c4b4:	e01e      	b.n	800c4f4 <UART_SetConfig+0x2e8>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	77fb      	strb	r3, [r7, #31]
 800c4ba:	e04b      	b.n	800c554 <UART_SetConfig+0x348>
 800c4bc:	2302      	movs	r3, #2
 800c4be:	77fb      	strb	r3, [r7, #31]
 800c4c0:	e048      	b.n	800c554 <UART_SetConfig+0x348>
 800c4c2:	2304      	movs	r3, #4
 800c4c4:	77fb      	strb	r3, [r7, #31]
 800c4c6:	e045      	b.n	800c554 <UART_SetConfig+0x348>
 800c4c8:	2308      	movs	r3, #8
 800c4ca:	77fb      	strb	r3, [r7, #31]
 800c4cc:	e042      	b.n	800c554 <UART_SetConfig+0x348>
 800c4ce:	bf00      	nop
 800c4d0:	efff69f3 	.word	0xefff69f3
 800c4d4:	40011000 	.word	0x40011000
 800c4d8:	40023800 	.word	0x40023800
 800c4dc:	40004400 	.word	0x40004400
 800c4e0:	40004800 	.word	0x40004800
 800c4e4:	40004c00 	.word	0x40004c00
 800c4e8:	40005000 	.word	0x40005000
 800c4ec:	40011400 	.word	0x40011400
 800c4f0:	40007800 	.word	0x40007800
 800c4f4:	2310      	movs	r3, #16
 800c4f6:	77fb      	strb	r3, [r7, #31]
 800c4f8:	e02c      	b.n	800c554 <UART_SetConfig+0x348>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4a72      	ldr	r2, [pc, #456]	; (800c6c8 <UART_SetConfig+0x4bc>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d125      	bne.n	800c550 <UART_SetConfig+0x344>
 800c504:	4b71      	ldr	r3, [pc, #452]	; (800c6cc <UART_SetConfig+0x4c0>)
 800c506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c50a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c50e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c512:	d017      	beq.n	800c544 <UART_SetConfig+0x338>
 800c514:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c518:	d817      	bhi.n	800c54a <UART_SetConfig+0x33e>
 800c51a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c51e:	d00b      	beq.n	800c538 <UART_SetConfig+0x32c>
 800c520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c524:	d811      	bhi.n	800c54a <UART_SetConfig+0x33e>
 800c526:	2b00      	cmp	r3, #0
 800c528:	d003      	beq.n	800c532 <UART_SetConfig+0x326>
 800c52a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c52e:	d006      	beq.n	800c53e <UART_SetConfig+0x332>
 800c530:	e00b      	b.n	800c54a <UART_SetConfig+0x33e>
 800c532:	2300      	movs	r3, #0
 800c534:	77fb      	strb	r3, [r7, #31]
 800c536:	e00d      	b.n	800c554 <UART_SetConfig+0x348>
 800c538:	2302      	movs	r3, #2
 800c53a:	77fb      	strb	r3, [r7, #31]
 800c53c:	e00a      	b.n	800c554 <UART_SetConfig+0x348>
 800c53e:	2304      	movs	r3, #4
 800c540:	77fb      	strb	r3, [r7, #31]
 800c542:	e007      	b.n	800c554 <UART_SetConfig+0x348>
 800c544:	2308      	movs	r3, #8
 800c546:	77fb      	strb	r3, [r7, #31]
 800c548:	e004      	b.n	800c554 <UART_SetConfig+0x348>
 800c54a:	2310      	movs	r3, #16
 800c54c:	77fb      	strb	r3, [r7, #31]
 800c54e:	e001      	b.n	800c554 <UART_SetConfig+0x348>
 800c550:	2310      	movs	r3, #16
 800c552:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	69db      	ldr	r3, [r3, #28]
 800c558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c55c:	d15b      	bne.n	800c616 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c55e:	7ffb      	ldrb	r3, [r7, #31]
 800c560:	2b08      	cmp	r3, #8
 800c562:	d828      	bhi.n	800c5b6 <UART_SetConfig+0x3aa>
 800c564:	a201      	add	r2, pc, #4	; (adr r2, 800c56c <UART_SetConfig+0x360>)
 800c566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c56a:	bf00      	nop
 800c56c:	0800c591 	.word	0x0800c591
 800c570:	0800c599 	.word	0x0800c599
 800c574:	0800c5a1 	.word	0x0800c5a1
 800c578:	0800c5b7 	.word	0x0800c5b7
 800c57c:	0800c5a7 	.word	0x0800c5a7
 800c580:	0800c5b7 	.word	0x0800c5b7
 800c584:	0800c5b7 	.word	0x0800c5b7
 800c588:	0800c5b7 	.word	0x0800c5b7
 800c58c:	0800c5af 	.word	0x0800c5af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c590:	f7fd fa2a 	bl	80099e8 <HAL_RCC_GetPCLK1Freq>
 800c594:	61b8      	str	r0, [r7, #24]
        break;
 800c596:	e013      	b.n	800c5c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c598:	f7fd fa3a 	bl	8009a10 <HAL_RCC_GetPCLK2Freq>
 800c59c:	61b8      	str	r0, [r7, #24]
        break;
 800c59e:	e00f      	b.n	800c5c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c5a0:	4b4b      	ldr	r3, [pc, #300]	; (800c6d0 <UART_SetConfig+0x4c4>)
 800c5a2:	61bb      	str	r3, [r7, #24]
        break;
 800c5a4:	e00c      	b.n	800c5c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c5a6:	f7fd f90f 	bl	80097c8 <HAL_RCC_GetSysClockFreq>
 800c5aa:	61b8      	str	r0, [r7, #24]
        break;
 800c5ac:	e008      	b.n	800c5c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5b2:	61bb      	str	r3, [r7, #24]
        break;
 800c5b4:	e004      	b.n	800c5c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	77bb      	strb	r3, [r7, #30]
        break;
 800c5be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d074      	beq.n	800c6b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	005a      	lsls	r2, r3, #1
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	085b      	lsrs	r3, r3, #1
 800c5d0:	441a      	add	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	2b0f      	cmp	r3, #15
 800c5e0:	d916      	bls.n	800c610 <UART_SetConfig+0x404>
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5e8:	d212      	bcs.n	800c610 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	f023 030f 	bic.w	r3, r3, #15
 800c5f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	085b      	lsrs	r3, r3, #1
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	f003 0307 	and.w	r3, r3, #7
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	89fb      	ldrh	r3, [r7, #14]
 800c602:	4313      	orrs	r3, r2
 800c604:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	89fa      	ldrh	r2, [r7, #14]
 800c60c:	60da      	str	r2, [r3, #12]
 800c60e:	e04f      	b.n	800c6b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	77bb      	strb	r3, [r7, #30]
 800c614:	e04c      	b.n	800c6b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c616:	7ffb      	ldrb	r3, [r7, #31]
 800c618:	2b08      	cmp	r3, #8
 800c61a:	d828      	bhi.n	800c66e <UART_SetConfig+0x462>
 800c61c:	a201      	add	r2, pc, #4	; (adr r2, 800c624 <UART_SetConfig+0x418>)
 800c61e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c622:	bf00      	nop
 800c624:	0800c649 	.word	0x0800c649
 800c628:	0800c651 	.word	0x0800c651
 800c62c:	0800c659 	.word	0x0800c659
 800c630:	0800c66f 	.word	0x0800c66f
 800c634:	0800c65f 	.word	0x0800c65f
 800c638:	0800c66f 	.word	0x0800c66f
 800c63c:	0800c66f 	.word	0x0800c66f
 800c640:	0800c66f 	.word	0x0800c66f
 800c644:	0800c667 	.word	0x0800c667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c648:	f7fd f9ce 	bl	80099e8 <HAL_RCC_GetPCLK1Freq>
 800c64c:	61b8      	str	r0, [r7, #24]
        break;
 800c64e:	e013      	b.n	800c678 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c650:	f7fd f9de 	bl	8009a10 <HAL_RCC_GetPCLK2Freq>
 800c654:	61b8      	str	r0, [r7, #24]
        break;
 800c656:	e00f      	b.n	800c678 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c658:	4b1d      	ldr	r3, [pc, #116]	; (800c6d0 <UART_SetConfig+0x4c4>)
 800c65a:	61bb      	str	r3, [r7, #24]
        break;
 800c65c:	e00c      	b.n	800c678 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c65e:	f7fd f8b3 	bl	80097c8 <HAL_RCC_GetSysClockFreq>
 800c662:	61b8      	str	r0, [r7, #24]
        break;
 800c664:	e008      	b.n	800c678 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c66a:	61bb      	str	r3, [r7, #24]
        break;
 800c66c:	e004      	b.n	800c678 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c66e:	2300      	movs	r3, #0
 800c670:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c672:	2301      	movs	r3, #1
 800c674:	77bb      	strb	r3, [r7, #30]
        break;
 800c676:	bf00      	nop
    }

    if (pclk != 0U)
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d018      	beq.n	800c6b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	085a      	lsrs	r2, r3, #1
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	441a      	add	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c690:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	2b0f      	cmp	r3, #15
 800c696:	d909      	bls.n	800c6ac <UART_SetConfig+0x4a0>
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c69e:	d205      	bcs.n	800c6ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	b29a      	uxth	r2, r3
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	60da      	str	r2, [r3, #12]
 800c6aa:	e001      	b.n	800c6b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800c6bc:	7fbb      	ldrb	r3, [r7, #30]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3720      	adds	r7, #32
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	40007c00 	.word	0x40007c00
 800c6cc:	40023800 	.word	0x40023800
 800c6d0:	00f42400 	.word	0x00f42400

0800c6d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e0:	f003 0301 	and.w	r3, r3, #1
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00a      	beq.n	800c6fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	430a      	orrs	r2, r1
 800c6fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c702:	f003 0302 	and.w	r3, r3, #2
 800c706:	2b00      	cmp	r3, #0
 800c708:	d00a      	beq.n	800c720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	430a      	orrs	r2, r1
 800c71e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c724:	f003 0304 	and.w	r3, r3, #4
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00a      	beq.n	800c742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	430a      	orrs	r2, r1
 800c740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c746:	f003 0308 	and.w	r3, r3, #8
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00a      	beq.n	800c764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	430a      	orrs	r2, r1
 800c762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c768:	f003 0310 	and.w	r3, r3, #16
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00a      	beq.n	800c786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	689b      	ldr	r3, [r3, #8]
 800c776:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	430a      	orrs	r2, r1
 800c784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c78a:	f003 0320 	and.w	r3, r3, #32
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00a      	beq.n	800c7a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	430a      	orrs	r2, r1
 800c7a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d01a      	beq.n	800c7ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	430a      	orrs	r2, r1
 800c7c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7d2:	d10a      	bne.n	800c7ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00a      	beq.n	800c80c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	430a      	orrs	r2, r1
 800c80a:	605a      	str	r2, [r3, #4]
  }
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b086      	sub	sp, #24
 800c81c:	af02      	add	r7, sp, #8
 800c81e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c828:	f7f9 fa2e 	bl	8005c88 <HAL_GetTick>
 800c82c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f003 0308 	and.w	r3, r3, #8
 800c838:	2b08      	cmp	r3, #8
 800c83a:	d10e      	bne.n	800c85a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c83c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c840:	9300      	str	r3, [sp, #0]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2200      	movs	r2, #0
 800c846:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f81b 	bl	800c886 <UART_WaitOnFlagUntilTimeout>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d001      	beq.n	800c85a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c856:	2303      	movs	r3, #3
 800c858:	e011      	b.n	800c87e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2220      	movs	r2, #32
 800c85e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2220      	movs	r2, #32
 800c864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2200      	movs	r2, #0
 800c86c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b09c      	sub	sp, #112	; 0x70
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	60b9      	str	r1, [r7, #8]
 800c890:	603b      	str	r3, [r7, #0]
 800c892:	4613      	mov	r3, r2
 800c894:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c896:	e0a7      	b.n	800c9e8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c89a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c89e:	f000 80a3 	beq.w	800c9e8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8a2:	f7f9 f9f1 	bl	8005c88 <HAL_GetTick>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d302      	bcc.n	800c8b8 <UART_WaitOnFlagUntilTimeout+0x32>
 800c8b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d13f      	bne.n	800c938 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8c0:	e853 3f00 	ldrex	r3, [r3]
 800c8c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c8cc:	667b      	str	r3, [r7, #100]	; 0x64
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c8d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c8dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8de:	e841 2300 	strex	r3, r2, [r1]
 800c8e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c8e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1e6      	bne.n	800c8b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3308      	adds	r3, #8
 800c8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8f4:	e853 3f00 	ldrex	r3, [r3]
 800c8f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fc:	f023 0301 	bic.w	r3, r3, #1
 800c900:	663b      	str	r3, [r7, #96]	; 0x60
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	3308      	adds	r3, #8
 800c908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c90a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c90c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c912:	e841 2300 	strex	r3, r2, [r1]
 800c916:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1e5      	bne.n	800c8ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2220      	movs	r2, #32
 800c922:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2220      	movs	r2, #32
 800c928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800c934:	2303      	movs	r3, #3
 800c936:	e068      	b.n	800ca0a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f003 0304 	and.w	r3, r3, #4
 800c942:	2b00      	cmp	r3, #0
 800c944:	d050      	beq.n	800c9e8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	69db      	ldr	r3, [r3, #28]
 800c94c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c954:	d148      	bne.n	800c9e8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c95e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c968:	e853 3f00 	ldrex	r3, [r3]
 800c96c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c974:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	461a      	mov	r2, r3
 800c97c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c97e:	637b      	str	r3, [r7, #52]	; 0x34
 800c980:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c986:	e841 2300 	strex	r3, r2, [r1]
 800c98a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1e6      	bne.n	800c960 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	3308      	adds	r3, #8
 800c998:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	e853 3f00 	ldrex	r3, [r3]
 800c9a0:	613b      	str	r3, [r7, #16]
   return(result);
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f023 0301 	bic.w	r3, r3, #1
 800c9a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	3308      	adds	r3, #8
 800c9b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c9b2:	623a      	str	r2, [r7, #32]
 800c9b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b6:	69f9      	ldr	r1, [r7, #28]
 800c9b8:	6a3a      	ldr	r2, [r7, #32]
 800c9ba:	e841 2300 	strex	r3, r2, [r1]
 800c9be:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1e5      	bne.n	800c992 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2220      	movs	r2, #32
 800c9ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2220      	movs	r2, #32
 800c9d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2220      	movs	r2, #32
 800c9d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800c9e4:	2303      	movs	r3, #3
 800c9e6:	e010      	b.n	800ca0a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	69da      	ldr	r2, [r3, #28]
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	4013      	ands	r3, r2
 800c9f2:	68ba      	ldr	r2, [r7, #8]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	bf0c      	ite	eq
 800c9f8:	2301      	moveq	r3, #1
 800c9fa:	2300      	movne	r3, #0
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	461a      	mov	r2, r3
 800ca00:	79fb      	ldrb	r3, [r7, #7]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	f43f af48 	beq.w	800c898 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3770      	adds	r7, #112	; 0x70
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}

0800ca12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca12:	b480      	push	{r7}
 800ca14:	b095      	sub	sp, #84	; 0x54
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca22:	e853 3f00 	ldrex	r3, [r3]
 800ca26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ca28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	461a      	mov	r2, r3
 800ca36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca38:	643b      	str	r3, [r7, #64]	; 0x40
 800ca3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ca3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ca40:	e841 2300 	strex	r3, r2, [r1]
 800ca44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ca46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1e6      	bne.n	800ca1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	3308      	adds	r3, #8
 800ca52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca54:	6a3b      	ldr	r3, [r7, #32]
 800ca56:	e853 3f00 	ldrex	r3, [r3]
 800ca5a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	f023 0301 	bic.w	r3, r3, #1
 800ca62:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	3308      	adds	r3, #8
 800ca6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca74:	e841 2300 	strex	r3, r2, [r1]
 800ca78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d1e5      	bne.n	800ca4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d118      	bne.n	800caba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	e853 3f00 	ldrex	r3, [r3]
 800ca94:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	f023 0310 	bic.w	r3, r3, #16
 800ca9c:	647b      	str	r3, [r7, #68]	; 0x44
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	461a      	mov	r2, r3
 800caa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caa6:	61bb      	str	r3, [r7, #24]
 800caa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caaa:	6979      	ldr	r1, [r7, #20]
 800caac:	69ba      	ldr	r2, [r7, #24]
 800caae:	e841 2300 	strex	r3, r2, [r1]
 800cab2:	613b      	str	r3, [r7, #16]
   return(result);
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d1e6      	bne.n	800ca88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2220      	movs	r2, #32
 800cabe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	669a      	str	r2, [r3, #104]	; 0x68
}
 800cace:	bf00      	nop
 800cad0:	3754      	adds	r7, #84	; 0x54
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b084      	sub	sp, #16
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800caf8:	68f8      	ldr	r0, [r7, #12]
 800cafa:	f7ff fb71 	bl	800c1e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cafe:	bf00      	nop
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b088      	sub	sp, #32
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	e853 3f00 	ldrex	r3, [r3]
 800cb1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb22:	61fb      	str	r3, [r7, #28]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	461a      	mov	r2, r3
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	61bb      	str	r3, [r7, #24]
 800cb2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb30:	6979      	ldr	r1, [r7, #20]
 800cb32:	69ba      	ldr	r2, [r7, #24]
 800cb34:	e841 2300 	strex	r3, r2, [r1]
 800cb38:	613b      	str	r3, [r7, #16]
   return(result);
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d1e6      	bne.n	800cb0e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2220      	movs	r2, #32
 800cb44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7ff fb3d 	bl	800c1cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb52:	bf00      	nop
 800cb54:	3720      	adds	r7, #32
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <MX_MEMS_Init>:
static void Magneto_Sensor_Handler(uint32_t Instance);
static void MX_IKS02A1_DataLogTerminal_Init(void);
static void MX_IKS02A1_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS02A1_DataLogTerminal_Init();
 800cb5e:	f000 f802 	bl	800cb66 <MX_IKS02A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800cb62:	bf00      	nop
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <MX_IKS02A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS02A1_DataLogTerminal_Init(void)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	af00      	add	r7, sp, #0


  IKS02A1_MOTION_SENSOR_Init(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO);
 800cb6a:	2102      	movs	r1, #2
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	f7f8 fd25 	bl	80055bc <IKS02A1_MOTION_SENSOR_Init>


}
 800cb72:	bf00      	nop
 800cb74:	bd80      	pop	{r7, pc}
	...

0800cb78 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 800cb7c:	4b10      	ldr	r3, [pc, #64]	; (800cbc0 <MX_PDM2PCM_Init+0x48>)
 800cb7e:	2201      	movs	r2, #1
 800cb80:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800cb82:	4b0f      	ldr	r3, [pc, #60]	; (800cbc0 <MX_PDM2PCM_Init+0x48>)
 800cb84:	2201      	movs	r2, #1
 800cb86:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2147483647;
 800cb88:	4b0d      	ldr	r3, [pc, #52]	; (800cbc0 <MX_PDM2PCM_Init+0x48>)
 800cb8a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800cb8e:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800cb90:	4b0b      	ldr	r3, [pc, #44]	; (800cbc0 <MX_PDM2PCM_Init+0x48>)
 800cb92:	2201      	movs	r2, #1
 800cb94:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800cb96:	4b0a      	ldr	r3, [pc, #40]	; (800cbc0 <MX_PDM2PCM_Init+0x48>)
 800cb98:	2201      	movs	r2, #1
 800cb9a:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800cb9c:	4808      	ldr	r0, [pc, #32]	; (800cbc0 <MX_PDM2PCM_Init+0x48>)
 800cb9e:	f001 fd23 	bl	800e5e8 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_32;
 800cba2:	4b08      	ldr	r3, [pc, #32]	; (800cbc4 <MX_PDM2PCM_Init+0x4c>)
 800cba4:	2207      	movs	r2, #7
 800cba6:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 24;
 800cba8:	4b06      	ldr	r3, [pc, #24]	; (800cbc4 <MX_PDM2PCM_Init+0x4c>)
 800cbaa:	2218      	movs	r2, #24
 800cbac:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 20;
 800cbae:	4b05      	ldr	r3, [pc, #20]	; (800cbc4 <MX_PDM2PCM_Init+0x4c>)
 800cbb0:	2214      	movs	r2, #20
 800cbb2:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800cbb4:	4903      	ldr	r1, [pc, #12]	; (800cbc4 <MX_PDM2PCM_Init+0x4c>)
 800cbb6:	4802      	ldr	r0, [pc, #8]	; (800cbc0 <MX_PDM2PCM_Init+0x48>)
 800cbb8:	f001 fd9c 	bl	800e6f4 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800cbbc:	bf00      	nop
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	200368a8 	.word	0x200368a8
 800cbc4:	200368f4 	.word	0x200368f4

0800cbc8 <D16_GENERIC>:
 800cbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbcc:	b087      	sub	sp, #28
 800cbce:	6993      	ldr	r3, [r2, #24]
 800cbd0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800cbd2:	9101      	str	r1, [sp, #4]
 800cbd4:	68d1      	ldr	r1, [r2, #12]
 800cbd6:	9304      	str	r3, [sp, #16]
 800cbd8:	9105      	str	r1, [sp, #20]
 800cbda:	6914      	ldr	r4, [r2, #16]
 800cbdc:	f8d2 a014 	ldr.w	sl, [r2, #20]
 800cbe0:	69d3      	ldr	r3, [r2, #28]
 800cbe2:	f8d2 e008 	ldr.w	lr, [r2, #8]
 800cbe6:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
 800cbea:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800cbec:	2d00      	cmp	r5, #0
 800cbee:	d05e      	beq.n	800ccae <D16_GENERIC+0xe6>
 800cbf0:	f001 0510 	and.w	r5, r1, #16
 800cbf4:	f001 0120 	and.w	r1, r1, #32
 800cbf8:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 800ccd4 <D16_GENERIC+0x10c>
 800cbfc:	46c1      	mov	r9, r8
 800cbfe:	9103      	str	r1, [sp, #12]
 800cc00:	2100      	movs	r1, #0
 800cc02:	9502      	str	r5, [sp, #8]
 800cc04:	e048      	b.n	800cc98 <D16_GENERIC+0xd0>
 800cc06:	5d87      	ldrb	r7, [r0, r6]
 800cc08:	7805      	ldrb	r5, [r0, #0]
 800cc0a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800cc0e:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800cc12:	b2fe      	uxtb	r6, r7
 800cc14:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800cc18:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
 800cc1c:	f85c 6027 	ldr.w	r6, [ip, r7, lsl #2]
 800cc20:	441d      	add	r5, r3
 800cc22:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800cc26:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800cc2a:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800cc2e:	0a9b      	lsrs	r3, r3, #10
 800cc30:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800cc34:	4d25      	ldr	r5, [pc, #148]	; (800cccc <D16_GENERIC+0x104>)
 800cc36:	fb26 e505 	smlad	r5, r6, r5, lr
 800cc3a:	4f25      	ldr	r7, [pc, #148]	; (800ccd0 <D16_GENERIC+0x108>)
 800cc3c:	fb26 fe07 	smuad	lr, r6, r7
 800cc40:	9e02      	ldr	r6, [sp, #8]
 800cc42:	f101 0801 	add.w	r8, r1, #1
 800cc46:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800cc4a:	b186      	cbz	r6, 800cc6e <D16_GENERIC+0xa6>
 800cc4c:	442c      	add	r4, r5
 800cc4e:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800cc52:	eba4 040a 	sub.w	r4, r4, sl
 800cc56:	46aa      	mov	sl, r5
 800cc58:	17e7      	asrs	r7, r4, #31
 800cc5a:	fba4 450b 	umull	r4, r5, r4, fp
 800cc5e:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800cc62:	fb0b 5507 	mla	r5, fp, r7, r5
 800cc66:	f145 0500 	adc.w	r5, r5, #0
 800cc6a:	006c      	lsls	r4, r5, #1
 800cc6c:	4625      	mov	r5, r4
 800cc6e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800cc72:	042d      	lsls	r5, r5, #16
 800cc74:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cc78:	2700      	movs	r7, #0
 800cc7a:	fb01 fb0b 	mul.w	fp, r1, fp
 800cc7e:	fa1f f188 	uxth.w	r1, r8
 800cc82:	fbc9 6705 	smlal	r6, r7, r9, r5
 800cc86:	9e01      	ldr	r6, [sp, #4]
 800cc88:	10bd      	asrs	r5, r7, #2
 800cc8a:	f305 050f 	ssat	r5, #16, r5
 800cc8e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800cc92:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800cc94:	428d      	cmp	r5, r1
 800cc96:	d90a      	bls.n	800ccae <D16_GENERIC+0xe6>
 800cc98:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800cc9a:	2d01      	cmp	r5, #1
 800cc9c:	b2ee      	uxtb	r6, r5
 800cc9e:	d1b2      	bne.n	800cc06 <D16_GENERIC+0x3e>
 800cca0:	9d03      	ldr	r5, [sp, #12]
 800cca2:	f850 7b02 	ldr.w	r7, [r0], #2
 800cca6:	2d00      	cmp	r5, #0
 800cca8:	d0b3      	beq.n	800cc12 <D16_GENERIC+0x4a>
 800ccaa:	ba7f      	rev16	r7, r7
 800ccac:	e7b1      	b.n	800cc12 <D16_GENERIC+0x4a>
 800ccae:	2000      	movs	r0, #0
 800ccb0:	9905      	ldr	r1, [sp, #20]
 800ccb2:	61d3      	str	r3, [r2, #28]
 800ccb4:	9b04      	ldr	r3, [sp, #16]
 800ccb6:	f8c2 e008 	str.w	lr, [r2, #8]
 800ccba:	60d1      	str	r1, [r2, #12]
 800ccbc:	6114      	str	r4, [r2, #16]
 800ccbe:	f8c2 a014 	str.w	sl, [r2, #20]
 800ccc2:	6193      	str	r3, [r2, #24]
 800ccc4:	b007      	add	sp, #28
 800ccc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccca:	bf00      	nop
 800cccc:	00030001 	.word	0x00030001
 800ccd0:	00010003 	.word	0x00010003
 800ccd4:	20000000 	.word	0x20000000

0800ccd8 <D24_GENERIC>:
 800ccd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccdc:	6953      	ldr	r3, [r2, #20]
 800ccde:	b087      	sub	sp, #28
 800cce0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800cce2:	9301      	str	r3, [sp, #4]
 800cce4:	6993      	ldr	r3, [r2, #24]
 800cce6:	9102      	str	r1, [sp, #8]
 800cce8:	9305      	str	r3, [sp, #20]
 800ccea:	6914      	ldr	r4, [r2, #16]
 800ccec:	69d1      	ldr	r1, [r2, #28]
 800ccee:	6893      	ldr	r3, [r2, #8]
 800ccf0:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800ccf4:	f8d2 a030 	ldr.w	sl, [r2, #48]	; 0x30
 800ccf8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800ccfa:	2e00      	cmp	r6, #0
 800ccfc:	f000 808c 	beq.w	800ce18 <D24_GENERIC+0x140>
 800cd00:	f005 0610 	and.w	r6, r5, #16
 800cd04:	f005 0520 	and.w	r5, r5, #32
 800cd08:	f04f 0e00 	mov.w	lr, #0
 800cd0c:	f8df c140 	ldr.w	ip, [pc, #320]	; 800ce50 <D24_GENERIC+0x178>
 800cd10:	9603      	str	r6, [sp, #12]
 800cd12:	9504      	str	r5, [sp, #16]
 800cd14:	e061      	b.n	800cdda <D24_GENERIC+0x102>
 800cd16:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800cd1a:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800cd1e:	f810 b007 	ldrb.w	fp, [r0, r7]
 800cd22:	042d      	lsls	r5, r5, #16
 800cd24:	f890 9000 	ldrb.w	r9, [r0]
 800cd28:	19f0      	adds	r0, r6, r7
 800cd2a:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800cd2e:	44a9      	add	r9, r5
 800cd30:	fa5f f689 	uxtb.w	r6, r9
 800cd34:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800cd38:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800cd3c:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800cd40:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800cd44:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800cd48:	f85c 1029 	ldr.w	r1, [ip, r9, lsl #2]
 800cd4c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800cd50:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800cd54:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800cd58:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800cd5c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800cd60:	4d39      	ldr	r5, [pc, #228]	; (800ce48 <D24_GENERIC+0x170>)
 800cd62:	fb26 8705 	smlad	r7, r6, r5, r8
 800cd66:	4d39      	ldr	r5, [pc, #228]	; (800ce4c <D24_GENERIC+0x174>)
 800cd68:	fb26 3805 	smlad	r8, r6, r5, r3
 800cd6c:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800cd70:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800cd74:	2301      	movs	r3, #1
 800cd76:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800cd7a:	fb26 f603 	smuad	r6, r6, r3
 800cd7e:	eb0e 0903 	add.w	r9, lr, r3
 800cd82:	eb0b 0306 	add.w	r3, fp, r6
 800cd86:	9e03      	ldr	r6, [sp, #12]
 800cd88:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800cd8c:	b186      	cbz	r6, 800cdb0 <D24_GENERIC+0xd8>
 800cd8e:	442c      	add	r4, r5
 800cd90:	9e01      	ldr	r6, [sp, #4]
 800cd92:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800cd96:	1ba4      	subs	r4, r4, r6
 800cd98:	9501      	str	r5, [sp, #4]
 800cd9a:	17e7      	asrs	r7, r4, #31
 800cd9c:	fba4 450b 	umull	r4, r5, r4, fp
 800cda0:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800cda4:	fb0b 5507 	mla	r5, fp, r7, r5
 800cda8:	f145 0500 	adc.w	r5, r5, #0
 800cdac:	006c      	lsls	r4, r5, #1
 800cdae:	4625      	mov	r5, r4
 800cdb0:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800cdb4:	03ad      	lsls	r5, r5, #14
 800cdb6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cdba:	2700      	movs	r7, #0
 800cdbc:	fb0e fb0b 	mul.w	fp, lr, fp
 800cdc0:	fa1f fe89 	uxth.w	lr, r9
 800cdc4:	fbca 6705 	smlal	r6, r7, sl, r5
 800cdc8:	9e02      	ldr	r6, [sp, #8]
 800cdca:	10bd      	asrs	r5, r7, #2
 800cdcc:	f305 050f 	ssat	r5, #16, r5
 800cdd0:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800cdd4:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800cdd6:	4575      	cmp	r5, lr
 800cdd8:	d91e      	bls.n	800ce18 <D24_GENERIC+0x140>
 800cdda:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800cddc:	b2ef      	uxtb	r7, r5
 800cdde:	2d01      	cmp	r5, #1
 800cde0:	b23e      	sxth	r6, r7
 800cde2:	d198      	bne.n	800cd16 <D24_GENERIC+0x3e>
 800cde4:	9d04      	ldr	r5, [sp, #16]
 800cde6:	b16d      	cbz	r5, 800ce04 <D24_GENERIC+0x12c>
 800cde8:	f01e 0f01 	tst.w	lr, #1
 800cdec:	d121      	bne.n	800ce32 <D24_GENERIC+0x15a>
 800cdee:	7805      	ldrb	r5, [r0, #0]
 800cdf0:	3002      	adds	r0, #2
 800cdf2:	f890 9001 	ldrb.w	r9, [r0, #1]
 800cdf6:	022d      	lsls	r5, r5, #8
 800cdf8:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800cdfc:	eb05 4909 	add.w	r9, r5, r9, lsl #16
 800ce00:	44b1      	add	r9, r6
 800ce02:	e795      	b.n	800cd30 <D24_GENERIC+0x58>
 800ce04:	7846      	ldrb	r6, [r0, #1]
 800ce06:	f890 9002 	ldrb.w	r9, [r0, #2]
 800ce0a:	0236      	lsls	r6, r6, #8
 800ce0c:	f810 5b03 	ldrb.w	r5, [r0], #3
 800ce10:	eb06 4909 	add.w	r9, r6, r9, lsl #16
 800ce14:	44a9      	add	r9, r5
 800ce16:	e78b      	b.n	800cd30 <D24_GENERIC+0x58>
 800ce18:	6093      	str	r3, [r2, #8]
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	9b01      	ldr	r3, [sp, #4]
 800ce1e:	f8c2 800c 	str.w	r8, [r2, #12]
 800ce22:	6153      	str	r3, [r2, #20]
 800ce24:	9b05      	ldr	r3, [sp, #20]
 800ce26:	61d1      	str	r1, [r2, #28]
 800ce28:	6114      	str	r4, [r2, #16]
 800ce2a:	6193      	str	r3, [r2, #24]
 800ce2c:	b007      	add	sp, #28
 800ce2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce32:	78c5      	ldrb	r5, [r0, #3]
 800ce34:	f890 9002 	ldrb.w	r9, [r0, #2]
 800ce38:	022d      	lsls	r5, r5, #8
 800ce3a:	f810 6b04 	ldrb.w	r6, [r0], #4
 800ce3e:	eb05 4909 	add.w	r9, r5, r9, lsl #16
 800ce42:	44b1      	add	r9, r6
 800ce44:	e774      	b.n	800cd30 <D24_GENERIC+0x58>
 800ce46:	bf00      	nop
 800ce48:	00030001 	.word	0x00030001
 800ce4c:	00060007 	.word	0x00060007
 800ce50:	20000000 	.word	0x20000000

0800ce54 <D32_GENERIC>:
 800ce54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce58:	6953      	ldr	r3, [r2, #20]
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800ce62:	6993      	ldr	r3, [r2, #24]
 800ce64:	9102      	str	r1, [sp, #8]
 800ce66:	9305      	str	r3, [sp, #20]
 800ce68:	9501      	str	r5, [sp, #4]
 800ce6a:	6914      	ldr	r4, [r2, #16]
 800ce6c:	69d1      	ldr	r1, [r2, #28]
 800ce6e:	6893      	ldr	r3, [r2, #8]
 800ce70:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800ce74:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800ce76:	2e00      	cmp	r6, #0
 800ce78:	f000 8098 	beq.w	800cfac <D32_GENERIC+0x158>
 800ce7c:	f005 0610 	and.w	r6, r5, #16
 800ce80:	f005 0520 	and.w	r5, r5, #32
 800ce84:	f04f 0c00 	mov.w	ip, #0
 800ce88:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800cfd8 <D32_GENERIC+0x184>
 800ce8c:	9603      	str	r6, [sp, #12]
 800ce8e:	9504      	str	r5, [sp, #16]
 800ce90:	e078      	b.n	800cf84 <D32_GENERIC+0x130>
 800ce92:	eb00 0905 	add.w	r9, r0, r5
 800ce96:	f810 b005 	ldrb.w	fp, [r0, r5]
 800ce9a:	f810 a006 	ldrb.w	sl, [r0, r6]
 800ce9e:	f819 5007 	ldrb.w	r5, [r9, r7]
 800cea2:	444f      	add	r7, r9
 800cea4:	f890 9000 	ldrb.w	r9, [r0]
 800cea8:	042d      	lsls	r5, r5, #16
 800ceaa:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800ceae:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800ceb2:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800ceb6:	44a9      	add	r9, r5
 800ceb8:	fa5f f789 	uxtb.w	r7, r9
 800cebc:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800cec0:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800cec4:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800cec8:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800cecc:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 800ced0:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800ced4:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800ced8:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
 800cedc:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800cee0:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800cee4:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800cee8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ceec:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800cef0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800cef4:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800cef8:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800cefc:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800cf00:	4d31      	ldr	r5, [pc, #196]	; (800cfc8 <D32_GENERIC+0x174>)
 800cf02:	fb29 8805 	smlad	r8, r9, r5, r8
 800cf06:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800cf0a:	fb26 8705 	smlad	r7, r6, r5, r8
 800cf0e:	4d2f      	ldr	r5, [pc, #188]	; (800cfcc <D32_GENERIC+0x178>)
 800cf10:	fb29 3305 	smlad	r3, r9, r5, r3
 800cf14:	4d2e      	ldr	r5, [pc, #184]	; (800cfd0 <D32_GENERIC+0x17c>)
 800cf16:	fb26 3805 	smlad	r8, r6, r5, r3
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	fb29 f903 	smuad	r9, r9, r3
 800cf20:	4b2c      	ldr	r3, [pc, #176]	; (800cfd4 <D32_GENERIC+0x180>)
 800cf22:	fb26 9303 	smlad	r3, r6, r3, r9
 800cf26:	9e03      	ldr	r6, [sp, #12]
 800cf28:	f10c 0901 	add.w	r9, ip, #1
 800cf2c:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800cf30:	b186      	cbz	r6, 800cf54 <D32_GENERIC+0x100>
 800cf32:	442c      	add	r4, r5
 800cf34:	9e00      	ldr	r6, [sp, #0]
 800cf36:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800cf3a:	1ba4      	subs	r4, r4, r6
 800cf3c:	9500      	str	r5, [sp, #0]
 800cf3e:	17e7      	asrs	r7, r4, #31
 800cf40:	fba4 450a 	umull	r4, r5, r4, sl
 800cf44:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800cf48:	fb0a 5507 	mla	r5, sl, r7, r5
 800cf4c:	f145 0500 	adc.w	r5, r5, #0
 800cf50:	006c      	lsls	r4, r5, #1
 800cf52:	4625      	mov	r5, r4
 800cf54:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800cf58:	036d      	lsls	r5, r5, #13
 800cf5a:	9f01      	ldr	r7, [sp, #4]
 800cf5c:	fb0c fb0a 	mul.w	fp, ip, sl
 800cf60:	fa1f fc89 	uxth.w	ip, r9
 800cf64:	f04f 0a00 	mov.w	sl, #0
 800cf68:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800cf6c:	9e02      	ldr	r6, [sp, #8]
 800cf6e:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800cf72:	4657      	mov	r7, sl
 800cf74:	10bd      	asrs	r5, r7, #2
 800cf76:	f305 050f 	ssat	r5, #16, r5
 800cf7a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800cf7e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800cf80:	4565      	cmp	r5, ip
 800cf82:	d913      	bls.n	800cfac <D32_GENERIC+0x158>
 800cf84:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800cf86:	b2ee      	uxtb	r6, r5
 800cf88:	2d01      	cmp	r5, #1
 800cf8a:	f1c6 0700 	rsb	r7, r6, #0
 800cf8e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 800cf92:	f47f af7e 	bne.w	800ce92 <D32_GENERIC+0x3e>
 800cf96:	1d05      	adds	r5, r0, #4
 800cf98:	f8d0 9000 	ldr.w	r9, [r0]
 800cf9c:	9804      	ldr	r0, [sp, #16]
 800cf9e:	b118      	cbz	r0, 800cfa8 <D32_GENERIC+0x154>
 800cfa0:	fa99 f999 	rev16.w	r9, r9
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	e787      	b.n	800ceb8 <D32_GENERIC+0x64>
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	e785      	b.n	800ceb8 <D32_GENERIC+0x64>
 800cfac:	6093      	str	r3, [r2, #8]
 800cfae:	2000      	movs	r0, #0
 800cfb0:	9b00      	ldr	r3, [sp, #0]
 800cfb2:	f8c2 800c 	str.w	r8, [r2, #12]
 800cfb6:	6153      	str	r3, [r2, #20]
 800cfb8:	9b05      	ldr	r3, [sp, #20]
 800cfba:	61d1      	str	r1, [r2, #28]
 800cfbc:	6114      	str	r4, [r2, #16]
 800cfbe:	6193      	str	r3, [r2, #24]
 800cfc0:	b007      	add	sp, #28
 800cfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc6:	bf00      	nop
 800cfc8:	00060003 	.word	0x00060003
 800cfcc:	000a000c 	.word	0x000a000c
 800cfd0:	000c000a 	.word	0x000c000a
 800cfd4:	00030006 	.word	0x00030006
 800cfd8:	20000000 	.word	0x20000000

0800cfdc <D48_GENERIC>:
 800cfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe0:	6913      	ldr	r3, [r2, #16]
 800cfe2:	b08b      	sub	sp, #44	; 0x2c
 800cfe4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800cfe6:	9106      	str	r1, [sp, #24]
 800cfe8:	9303      	str	r3, [sp, #12]
 800cfea:	68d1      	ldr	r1, [r2, #12]
 800cfec:	6953      	ldr	r3, [r2, #20]
 800cfee:	9101      	str	r1, [sp, #4]
 800cff0:	9304      	str	r3, [sp, #16]
 800cff2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800cff4:	6993      	ldr	r3, [r2, #24]
 800cff6:	9105      	str	r1, [sp, #20]
 800cff8:	9309      	str	r3, [sp, #36]	; 0x24
 800cffa:	69d6      	ldr	r6, [r2, #28]
 800cffc:	6893      	ldr	r3, [r2, #8]
 800cffe:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800d000:	2c00      	cmp	r4, #0
 800d002:	f000 80c6 	beq.w	800d192 <D48_GENERIC+0x1b6>
 800d006:	f001 0410 	and.w	r4, r1, #16
 800d00a:	f001 0120 	and.w	r1, r1, #32
 800d00e:	2700      	movs	r7, #0
 800d010:	9302      	str	r3, [sp, #8]
 800d012:	9108      	str	r1, [sp, #32]
 800d014:	9407      	str	r4, [sp, #28]
 800d016:	4966      	ldr	r1, [pc, #408]	; (800d1b0 <D48_GENERIC+0x1d4>)
 800d018:	e0a6      	b.n	800d168 <D48_GENERIC+0x18c>
 800d01a:	eb00 0e08 	add.w	lr, r0, r8
 800d01e:	f810 a008 	ldrb.w	sl, [r0, r8]
 800d022:	f810 9005 	ldrb.w	r9, [r0, r5]
 800d026:	f81e 400c 	ldrb.w	r4, [lr, ip]
 800d02a:	44e6      	add	lr, ip
 800d02c:	f890 b000 	ldrb.w	fp, [r0]
 800d030:	0420      	lsls	r0, r4, #16
 800d032:	eb0e 0408 	add.w	r4, lr, r8
 800d036:	f81e e008 	ldrb.w	lr, [lr, r8]
 800d03a:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800d03e:	f814 800c 	ldrb.w	r8, [r4, ip]
 800d042:	44a4      	add	ip, r4
 800d044:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800d048:	eb08 2e0e 	add.w	lr, r8, lr, lsl #8
 800d04c:	eb0a 040b 	add.w	r4, sl, fp
 800d050:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800d054:	fa5f f884 	uxtb.w	r8, r4
 800d058:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800d05c:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800d060:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800d064:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800d068:	fa5f fc8e 	uxtb.w	ip, lr
 800d06c:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800d070:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 800d074:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 800d078:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 800d07c:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800d080:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800d084:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800d088:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 800d08c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d090:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800d094:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d098:	9b01      	ldr	r3, [sp, #4]
 800d09a:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800d09e:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800d0a2:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800d0a6:	eb0c 2c94 	add.w	ip, ip, r4, lsr #10
 800d0aa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d0ae:	eb0e 269c 	add.w	r6, lr, ip, lsr #10
 800d0b2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d0b6:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800d0ba:	f3c6 0509 	ubfx	r5, r6, #0, #10
 800d0be:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800d0c2:	4d3c      	ldr	r5, [pc, #240]	; (800d1b4 <D48_GENERIC+0x1d8>)
 800d0c4:	fb28 3a05 	smlad	sl, r8, r5, r3
 800d0c8:	4b3b      	ldr	r3, [pc, #236]	; (800d1b8 <D48_GENERIC+0x1dc>)
 800d0ca:	fb24 aa03 	smlad	sl, r4, r3, sl
 800d0ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d0d2:	fb2c aa03 	smlad	sl, ip, r3, sl
 800d0d6:	4b39      	ldr	r3, [pc, #228]	; (800d1bc <D48_GENERIC+0x1e0>)
 800d0d8:	9d02      	ldr	r5, [sp, #8]
 800d0da:	fb28 5303 	smlad	r3, r8, r3, r5
 800d0de:	f04f 151b 	mov.w	r5, #1769499	; 0x1b001b
 800d0e2:	fb24 3305 	smlad	r3, r4, r5, r3
 800d0e6:	4d36      	ldr	r5, [pc, #216]	; (800d1c0 <D48_GENERIC+0x1e4>)
 800d0e8:	fb2c 3305 	smlad	r3, ip, r5, r3
 800d0ec:	2501      	movs	r5, #1
 800d0ee:	9301      	str	r3, [sp, #4]
 800d0f0:	fb28 f805 	smuad	r8, r8, r5
 800d0f4:	4b33      	ldr	r3, [pc, #204]	; (800d1c4 <D48_GENERIC+0x1e8>)
 800d0f6:	fb24 8403 	smlad	r4, r4, r3, r8
 800d0fa:	4b33      	ldr	r3, [pc, #204]	; (800d1c8 <D48_GENERIC+0x1ec>)
 800d0fc:	fb2c 4303 	smlad	r3, ip, r3, r4
 800d100:	9302      	str	r3, [sp, #8]
 800d102:	eb07 0e05 	add.w	lr, r7, r5
 800d106:	9b07      	ldr	r3, [sp, #28]
 800d108:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800d10c:	b1ab      	cbz	r3, 800d13a <D48_GENERIC+0x15e>
 800d10e:	9b03      	ldr	r3, [sp, #12]
 800d110:	f8d2 c020 	ldr.w	ip, [r2, #32]
 800d114:	4453      	add	r3, sl
 800d116:	461c      	mov	r4, r3
 800d118:	9b04      	ldr	r3, [sp, #16]
 800d11a:	f8cd a010 	str.w	sl, [sp, #16]
 800d11e:	1ae4      	subs	r4, r4, r3
 800d120:	ea4f 79e4 	mov.w	r9, r4, asr #31
 800d124:	fba4 450c 	umull	r4, r5, r4, ip
 800d128:	fb0c 5509 	mla	r5, ip, r9, r5
 800d12c:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800d130:	f145 0500 	adc.w	r5, r5, #0
 800d134:	006b      	lsls	r3, r5, #1
 800d136:	469a      	mov	sl, r3
 800d138:	9303      	str	r3, [sp, #12]
 800d13a:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800d13e:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800d142:	9b05      	ldr	r3, [sp, #20]
 800d144:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d148:	2500      	movs	r5, #0
 800d14a:	fb07 fc0c 	mul.w	ip, r7, ip
 800d14e:	fa1f f78e 	uxth.w	r7, lr
 800d152:	fbc3 450a 	smlal	r4, r5, r3, sl
 800d156:	9b06      	ldr	r3, [sp, #24]
 800d158:	10ac      	asrs	r4, r5, #2
 800d15a:	f304 040f 	ssat	r4, #16, r4
 800d15e:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800d162:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800d164:	42bc      	cmp	r4, r7
 800d166:	d913      	bls.n	800d190 <D48_GENERIC+0x1b4>
 800d168:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800d16a:	b2e5      	uxtb	r5, r4
 800d16c:	2c01      	cmp	r4, #1
 800d16e:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800d172:	f1c5 0c00 	rsb	ip, r5, #0
 800d176:	f47f af50 	bne.w	800d01a <D48_GENERIC+0x3e>
 800d17a:	9b08      	ldr	r3, [sp, #32]
 800d17c:	e890 4010 	ldmia.w	r0, {r4, lr}
 800d180:	3006      	adds	r0, #6
 800d182:	2b00      	cmp	r3, #0
 800d184:	f43f af66 	beq.w	800d054 <D48_GENERIC+0x78>
 800d188:	ba64      	rev16	r4, r4
 800d18a:	fa9e fe9e 	rev16.w	lr, lr
 800d18e:	e761      	b.n	800d054 <D48_GENERIC+0x78>
 800d190:	9b02      	ldr	r3, [sp, #8]
 800d192:	6093      	str	r3, [r2, #8]
 800d194:	2000      	movs	r0, #0
 800d196:	9b01      	ldr	r3, [sp, #4]
 800d198:	61d6      	str	r6, [r2, #28]
 800d19a:	60d3      	str	r3, [r2, #12]
 800d19c:	9b03      	ldr	r3, [sp, #12]
 800d19e:	6113      	str	r3, [r2, #16]
 800d1a0:	9b04      	ldr	r3, [sp, #16]
 800d1a2:	6153      	str	r3, [r2, #20]
 800d1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1a6:	6193      	str	r3, [r2, #24]
 800d1a8:	b00b      	add	sp, #44	; 0x2c
 800d1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ae:	bf00      	nop
 800d1b0:	20000000 	.word	0x20000000
 800d1b4:	000f000a 	.word	0x000f000a
 800d1b8:	00060003 	.word	0x00060003
 800d1bc:	00150019 	.word	0x00150019
 800d1c0:	00190015 	.word	0x00190015
 800d1c4:	00030006 	.word	0x00030006
 800d1c8:	000a000f 	.word	0x000a000f

0800d1cc <D64_GENERIC>:
 800d1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d0:	6913      	ldr	r3, [r2, #16]
 800d1d2:	b089      	sub	sp, #36	; 0x24
 800d1d4:	68d5      	ldr	r5, [r2, #12]
 800d1d6:	9302      	str	r3, [sp, #8]
 800d1d8:	6953      	ldr	r3, [r2, #20]
 800d1da:	462e      	mov	r6, r5
 800d1dc:	9105      	str	r1, [sp, #20]
 800d1de:	9303      	str	r3, [sp, #12]
 800d1e0:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800d1e2:	6993      	ldr	r3, [r2, #24]
 800d1e4:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800d1e6:	9307      	str	r3, [sp, #28]
 800d1e8:	69d4      	ldr	r4, [r2, #28]
 800d1ea:	6893      	ldr	r3, [r2, #8]
 800d1ec:	9504      	str	r5, [sp, #16]
 800d1ee:	2900      	cmp	r1, #0
 800d1f0:	f000 80e5 	beq.w	800d3be <D64_GENERIC+0x1f2>
 800d1f4:	6a11      	ldr	r1, [r2, #32]
 800d1f6:	2500      	movs	r5, #0
 800d1f8:	46b3      	mov	fp, r6
 800d1fa:	9301      	str	r3, [sp, #4]
 800d1fc:	9106      	str	r1, [sp, #24]
 800d1fe:	4976      	ldr	r1, [pc, #472]	; (800d3d8 <D64_GENERIC+0x20c>)
 800d200:	e0c7      	b.n	800d392 <D64_GENERIC+0x1c6>
 800d202:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800d206:	f1cc 0e00 	rsb	lr, ip, #0
 800d20a:	f890 9000 	ldrb.w	r9, [r0]
 800d20e:	eb00 0708 	add.w	r7, r0, r8
 800d212:	f810 6008 	ldrb.w	r6, [r0, r8]
 800d216:	eb07 0a4e 	add.w	sl, r7, lr, lsl #1
 800d21a:	f817 000e 	ldrb.w	r0, [r7, lr]
 800d21e:	f817 301e 	ldrb.w	r3, [r7, lr, lsl #1]
 800d222:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800d226:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800d22a:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800d22e:	f817 000e 	ldrb.w	r0, [r7, lr]
 800d232:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800d236:	f817 801e 	ldrb.w	r8, [r7, lr, lsl #1]
 800d23a:	0400      	lsls	r0, r0, #16
 800d23c:	4477      	add	r7, lr
 800d23e:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800d242:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800d246:	f817 a01e 	ldrb.w	sl, [r7, lr, lsl #1]
 800d24a:	eb07 074e 	add.w	r7, r7, lr, lsl #1
 800d24e:	444e      	add	r6, r9
 800d250:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800d254:	eb07 008c 	add.w	r0, r7, ip, lsl #2
 800d258:	44c2      	add	sl, r8
 800d25a:	b2f7      	uxtb	r7, r6
 800d25c:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800d260:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800d264:	0e36      	lsrs	r6, r6, #24
 800d266:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800d26a:	fa5f fe8a 	uxtb.w	lr, sl
 800d26e:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800d272:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800d276:	443c      	add	r4, r7
 800d278:	f851 702c 	ldr.w	r7, [r1, ip, lsl #2]
 800d27c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800d280:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800d284:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 800d288:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d28c:	4b53      	ldr	r3, [pc, #332]	; (800d3dc <D64_GENERIC+0x210>)
 800d28e:	eb07 2c98 	add.w	ip, r7, r8, lsr #10
 800d292:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d296:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800d29a:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800d29e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d2a2:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800d2a6:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800d2aa:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800d2ae:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d2b2:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800d2b6:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800d2ba:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800d2be:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d2c2:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800d2c6:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 800d2ca:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800d2ce:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d2d2:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800d2d6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d2da:	ea47 4e0e 	orr.w	lr, r7, lr, lsl #16
 800d2de:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800d2e2:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800d2e6:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800d2ea:	fb28 b903 	smlad	r9, r8, r3, fp
 800d2ee:	4b3c      	ldr	r3, [pc, #240]	; (800d3e0 <D64_GENERIC+0x214>)
 800d2f0:	fb26 9903 	smlad	r9, r6, r3, r9
 800d2f4:	4b3b      	ldr	r3, [pc, #236]	; (800d3e4 <D64_GENERIC+0x218>)
 800d2f6:	fb2e 9703 	smlad	r7, lr, r3, r9
 800d2fa:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800d2fe:	fb2a 7909 	smlad	r9, sl, r9, r7
 800d302:	4b39      	ldr	r3, [pc, #228]	; (800d3e8 <D64_GENERIC+0x21c>)
 800d304:	9f01      	ldr	r7, [sp, #4]
 800d306:	fb28 7303 	smlad	r3, r8, r3, r7
 800d30a:	4f37      	ldr	r7, [pc, #220]	; (800d3e8 <D64_GENERIC+0x21c>)
 800d30c:	fb2a 3317 	smladx	r3, sl, r7, r3
 800d310:	4f36      	ldr	r7, [pc, #216]	; (800d3ec <D64_GENERIC+0x220>)
 800d312:	fb26 3307 	smlad	r3, r6, r7, r3
 800d316:	fb2e 3b17 	smladx	fp, lr, r7, r3
 800d31a:	f04f 0c01 	mov.w	ip, #1
 800d31e:	fb28 f80c 	smuad	r8, r8, ip
 800d322:	4b33      	ldr	r3, [pc, #204]	; (800d3f0 <D64_GENERIC+0x224>)
 800d324:	fb26 8603 	smlad	r6, r6, r3, r8
 800d328:	4b32      	ldr	r3, [pc, #200]	; (800d3f4 <D64_GENERIC+0x228>)
 800d32a:	fb2e 6e03 	smlad	lr, lr, r3, r6
 800d32e:	4b32      	ldr	r3, [pc, #200]	; (800d3f8 <D64_GENERIC+0x22c>)
 800d330:	fb2a e303 	smlad	r3, sl, r3, lr
 800d334:	9301      	str	r3, [sp, #4]
 800d336:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800d33a:	9b06      	ldr	r3, [sp, #24]
 800d33c:	b19b      	cbz	r3, 800d366 <D64_GENERIC+0x19a>
 800d33e:	9e02      	ldr	r6, [sp, #8]
 800d340:	9f03      	ldr	r7, [sp, #12]
 800d342:	444e      	add	r6, r9
 800d344:	f8cd 900c 	str.w	r9, [sp, #12]
 800d348:	1bf6      	subs	r6, r6, r7
 800d34a:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800d34e:	fba6 6703 	umull	r6, r7, r6, r3
 800d352:	fb03 7709 	mla	r7, r3, r9, r7
 800d356:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800d35a:	f147 0700 	adc.w	r7, r7, #0
 800d35e:	fa07 f30c 	lsl.w	r3, r7, ip
 800d362:	4699      	mov	r9, r3
 800d364:	9302      	str	r3, [sp, #8]
 800d366:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800d36a:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800d36e:	9b04      	ldr	r3, [sp, #16]
 800d370:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d374:	2700      	movs	r7, #0
 800d376:	fb05 fe0e 	mul.w	lr, r5, lr
 800d37a:	3501      	adds	r5, #1
 800d37c:	fbc3 6709 	smlal	r6, r7, r3, r9
 800d380:	9b05      	ldr	r3, [sp, #20]
 800d382:	10be      	asrs	r6, r7, #2
 800d384:	f306 060f 	ssat	r6, #16, r6
 800d388:	f823 601e 	strh.w	r6, [r3, lr, lsl #1]
 800d38c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800d38e:	42ae      	cmp	r6, r5
 800d390:	dd13      	ble.n	800d3ba <D64_GENERIC+0x1ee>
 800d392:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
 800d396:	f1bc 0f01 	cmp.w	ip, #1
 800d39a:	f47f af32 	bne.w	800d202 <D64_GENERIC+0x36>
 800d39e:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800d3a0:	f100 0e08 	add.w	lr, r0, #8
 800d3a4:	06bb      	lsls	r3, r7, #26
 800d3a6:	e890 0440 	ldmia.w	r0, {r6, sl}
 800d3aa:	d504      	bpl.n	800d3b6 <D64_GENERIC+0x1ea>
 800d3ac:	ba76      	rev16	r6, r6
 800d3ae:	fa9a fa9a 	rev16.w	sl, sl
 800d3b2:	4670      	mov	r0, lr
 800d3b4:	e751      	b.n	800d25a <D64_GENERIC+0x8e>
 800d3b6:	4670      	mov	r0, lr
 800d3b8:	e74f      	b.n	800d25a <D64_GENERIC+0x8e>
 800d3ba:	465e      	mov	r6, fp
 800d3bc:	9b01      	ldr	r3, [sp, #4]
 800d3be:	6093      	str	r3, [r2, #8]
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	9b02      	ldr	r3, [sp, #8]
 800d3c4:	60d6      	str	r6, [r2, #12]
 800d3c6:	6113      	str	r3, [r2, #16]
 800d3c8:	9b03      	ldr	r3, [sp, #12]
 800d3ca:	61d4      	str	r4, [r2, #28]
 800d3cc:	6153      	str	r3, [r2, #20]
 800d3ce:	9b07      	ldr	r3, [sp, #28]
 800d3d0:	6193      	str	r3, [r2, #24]
 800d3d2:	b009      	add	sp, #36	; 0x24
 800d3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3d8:	20000000 	.word	0x20000000
 800d3dc:	001c0015 	.word	0x001c0015
 800d3e0:	000f000a 	.word	0x000f000a
 800d3e4:	00060003 	.word	0x00060003
 800d3e8:	0024002a 	.word	0x0024002a
 800d3ec:	002e0030 	.word	0x002e0030
 800d3f0:	00030006 	.word	0x00030006
 800d3f4:	000a000f 	.word	0x000a000f
 800d3f8:	0015001c 	.word	0x0015001c

0800d3fc <D80_GENERIC>:
 800d3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d400:	b08b      	sub	sp, #44	; 0x2c
 800d402:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d404:	9107      	str	r1, [sp, #28]
 800d406:	6911      	ldr	r1, [r2, #16]
 800d408:	9104      	str	r1, [sp, #16]
 800d40a:	6951      	ldr	r1, [r2, #20]
 800d40c:	9105      	str	r1, [sp, #20]
 800d40e:	6991      	ldr	r1, [r2, #24]
 800d410:	9109      	str	r1, [sp, #36]	; 0x24
 800d412:	69d1      	ldr	r1, [r2, #28]
 800d414:	9101      	str	r1, [sp, #4]
 800d416:	6891      	ldr	r1, [r2, #8]
 800d418:	9103      	str	r1, [sp, #12]
 800d41a:	68d1      	ldr	r1, [r2, #12]
 800d41c:	9102      	str	r1, [sp, #8]
 800d41e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d420:	9106      	str	r1, [sp, #24]
 800d422:	2b00      	cmp	r3, #0
 800d424:	f000 810d 	beq.w	800d642 <D80_GENERIC+0x246>
 800d428:	6a13      	ldr	r3, [r2, #32]
 800d42a:	f04f 0800 	mov.w	r8, #0
 800d42e:	f8df e264 	ldr.w	lr, [pc, #612]	; 800d694 <D80_GENERIC+0x298>
 800d432:	9308      	str	r3, [sp, #32]
 800d434:	9200      	str	r2, [sp, #0]
 800d436:	e0ee      	b.n	800d616 <D80_GENERIC+0x21a>
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	f890 c000 	ldrb.w	ip, [r0]
 800d43e:	b219      	sxth	r1, r3
 800d440:	425c      	negs	r4, r3
 800d442:	f810 9003 	ldrb.w	r9, [r0, r3]
 800d446:	004e      	lsls	r6, r1, #1
 800d448:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800d44c:	4431      	add	r1, r6
 800d44e:	1843      	adds	r3, r0, r1
 800d450:	f810 b001 	ldrb.w	fp, [r0, r1]
 800d454:	1919      	adds	r1, r3, r4
 800d456:	5d1b      	ldrb	r3, [r3, r4]
 800d458:	1948      	adds	r0, r1, r5
 800d45a:	f811 a005 	ldrb.w	sl, [r1, r5]
 800d45e:	041b      	lsls	r3, r3, #16
 800d460:	1907      	adds	r7, r0, r4
 800d462:	5d01      	ldrb	r1, [r0, r4]
 800d464:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800d468:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800d46c:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800d470:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800d474:	0409      	lsls	r1, r1, #16
 800d476:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800d47a:	eb0b 0905 	add.w	r9, fp, r5
 800d47e:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800d482:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800d486:	eb09 0b04 	add.w	fp, r9, r4
 800d48a:	f819 4004 	ldrb.w	r4, [r9, r4]
 800d48e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800d492:	4463      	add	r3, ip
 800d494:	eb0b 0006 	add.w	r0, fp, r6
 800d498:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800d49c:	4439      	add	r1, r7
 800d49e:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800d4a2:	b2df      	uxtb	r7, r3
 800d4a4:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800d4a8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 800d4ac:	f85e 3027 	ldr.w	r3, [lr, r7, lsl #2]
 800d4b0:	fa5f fa81 	uxtb.w	sl, r1
 800d4b4:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800d4b8:	9c01      	ldr	r4, [sp, #4]
 800d4ba:	f85e 9026 	ldr.w	r9, [lr, r6, lsl #2]
 800d4be:	441c      	add	r4, r3
 800d4c0:	f85e 602c 	ldr.w	r6, [lr, ip, lsl #2]
 800d4c4:	f85e c02a 	ldr.w	ip, [lr, sl, lsl #2]
 800d4c8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800d4cc:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800d4d0:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800d4d4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d4d8:	b2ed      	uxtb	r5, r5
 800d4da:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800d4de:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d4e2:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 800d4e6:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800d4ea:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 800d4ee:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800d4f2:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800d4f6:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800d4fa:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 800d4fe:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800d502:	0e09      	lsrs	r1, r1, #24
 800d504:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800d508:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800d50c:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800d510:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d514:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800d518:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d51c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d520:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800d524:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d528:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800d52c:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800d530:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d534:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800d538:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800d53c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d540:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800d544:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800d548:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800d54c:	9201      	str	r2, [sp, #4]
 800d54e:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800d552:	4a44      	ldr	r2, [pc, #272]	; (800d664 <D80_GENERIC+0x268>)
 800d554:	9f02      	ldr	r7, [sp, #8]
 800d556:	fb23 7a02 	smlad	sl, r3, r2, r7
 800d55a:	4a43      	ldr	r2, [pc, #268]	; (800d668 <D80_GENERIC+0x26c>)
 800d55c:	fb26 aa02 	smlad	sl, r6, r2, sl
 800d560:	4a42      	ldr	r2, [pc, #264]	; (800d66c <D80_GENERIC+0x270>)
 800d562:	fb24 aa02 	smlad	sl, r4, r2, sl
 800d566:	4a42      	ldr	r2, [pc, #264]	; (800d670 <D80_GENERIC+0x274>)
 800d568:	fb21 a702 	smlad	r7, r1, r2, sl
 800d56c:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800d570:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800d574:	4a3f      	ldr	r2, [pc, #252]	; (800d674 <D80_GENERIC+0x278>)
 800d576:	9f03      	ldr	r7, [sp, #12]
 800d578:	fb23 7c02 	smlad	ip, r3, r2, r7
 800d57c:	4a3e      	ldr	r2, [pc, #248]	; (800d678 <D80_GENERIC+0x27c>)
 800d57e:	fb26 cc02 	smlad	ip, r6, r2, ip
 800d582:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800d586:	fb24 c707 	smlad	r7, r4, r7, ip
 800d58a:	4a3c      	ldr	r2, [pc, #240]	; (800d67c <D80_GENERIC+0x280>)
 800d58c:	fb21 7702 	smlad	r7, r1, r2, r7
 800d590:	4a3b      	ldr	r2, [pc, #236]	; (800d680 <D80_GENERIC+0x284>)
 800d592:	fb25 7202 	smlad	r2, r5, r2, r7
 800d596:	f04f 0901 	mov.w	r9, #1
 800d59a:	9202      	str	r2, [sp, #8]
 800d59c:	fb23 f909 	smuad	r9, r3, r9
 800d5a0:	4b38      	ldr	r3, [pc, #224]	; (800d684 <D80_GENERIC+0x288>)
 800d5a2:	fb26 9603 	smlad	r6, r6, r3, r9
 800d5a6:	4f38      	ldr	r7, [pc, #224]	; (800d688 <D80_GENERIC+0x28c>)
 800d5a8:	fb24 6407 	smlad	r4, r4, r7, r6
 800d5ac:	4f37      	ldr	r7, [pc, #220]	; (800d68c <D80_GENERIC+0x290>)
 800d5ae:	fb21 4707 	smlad	r7, r1, r7, r4
 800d5b2:	4937      	ldr	r1, [pc, #220]	; (800d690 <D80_GENERIC+0x294>)
 800d5b4:	fb25 7301 	smlad	r3, r5, r1, r7
 800d5b8:	9303      	str	r3, [sp, #12]
 800d5ba:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800d5be:	9b08      	ldr	r3, [sp, #32]
 800d5c0:	b193      	cbz	r3, 800d5e8 <D80_GENERIC+0x1ec>
 800d5c2:	9a04      	ldr	r2, [sp, #16]
 800d5c4:	4452      	add	r2, sl
 800d5c6:	4614      	mov	r4, r2
 800d5c8:	9a05      	ldr	r2, [sp, #20]
 800d5ca:	f8cd a014 	str.w	sl, [sp, #20]
 800d5ce:	1aa4      	subs	r4, r4, r2
 800d5d0:	17e7      	asrs	r7, r4, #31
 800d5d2:	fba4 4503 	umull	r4, r5, r4, r3
 800d5d6:	fb03 5507 	mla	r5, r3, r7, r5
 800d5da:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800d5de:	f145 0500 	adc.w	r5, r5, #0
 800d5e2:	006b      	lsls	r3, r5, #1
 800d5e4:	469a      	mov	sl, r3
 800d5e6:	9304      	str	r3, [sp, #16]
 800d5e8:	9e00      	ldr	r6, [sp, #0]
 800d5ea:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800d5ee:	9a06      	ldr	r2, [sp, #24]
 800d5f0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d5f4:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800d5f6:	2500      	movs	r5, #0
 800d5f8:	fb08 f303 	mul.w	r3, r8, r3
 800d5fc:	fbc2 450a 	smlal	r4, r5, r2, sl
 800d600:	9a07      	ldr	r2, [sp, #28]
 800d602:	f108 0801 	add.w	r8, r8, #1
 800d606:	10a9      	asrs	r1, r5, #2
 800d608:	f301 010f 	ssat	r1, #16, r1
 800d60c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800d610:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800d612:	4543      	cmp	r3, r8
 800d614:	dd14      	ble.n	800d640 <D80_GENERIC+0x244>
 800d616:	9b00      	ldr	r3, [sp, #0]
 800d618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	f47f af0c 	bne.w	800d438 <D80_GENERIC+0x3c>
 800d620:	9b00      	ldr	r3, [sp, #0]
 800d622:	300a      	adds	r0, #10
 800d624:	f850 1c06 	ldr.w	r1, [r0, #-6]
 800d628:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800d62a:	f850 5c02 	ldr.w	r5, [r0, #-2]
 800d62e:	06b2      	lsls	r2, r6, #26
 800d630:	f850 3c0a 	ldr.w	r3, [r0, #-10]
 800d634:	f57f af33 	bpl.w	800d49e <D80_GENERIC+0xa2>
 800d638:	ba5b      	rev16	r3, r3
 800d63a:	ba49      	rev16	r1, r1
 800d63c:	ba6d      	rev16	r5, r5
 800d63e:	e72e      	b.n	800d49e <D80_GENERIC+0xa2>
 800d640:	4632      	mov	r2, r6
 800d642:	9b03      	ldr	r3, [sp, #12]
 800d644:	2000      	movs	r0, #0
 800d646:	6093      	str	r3, [r2, #8]
 800d648:	9b02      	ldr	r3, [sp, #8]
 800d64a:	60d3      	str	r3, [r2, #12]
 800d64c:	9b01      	ldr	r3, [sp, #4]
 800d64e:	61d3      	str	r3, [r2, #28]
 800d650:	9b04      	ldr	r3, [sp, #16]
 800d652:	6113      	str	r3, [r2, #16]
 800d654:	9b05      	ldr	r3, [sp, #20]
 800d656:	6153      	str	r3, [r2, #20]
 800d658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d65a:	6193      	str	r3, [r2, #24]
 800d65c:	b00b      	add	sp, #44	; 0x2c
 800d65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d662:	bf00      	nop
 800d664:	002d0024 	.word	0x002d0024
 800d668:	001c0015 	.word	0x001c0015
 800d66c:	000f000a 	.word	0x000f000a
 800d670:	00060003 	.word	0x00060003
 800d674:	0037003f 	.word	0x0037003f
 800d678:	00450049 	.word	0x00450049
 800d67c:	00490045 	.word	0x00490045
 800d680:	003f0037 	.word	0x003f0037
 800d684:	00030006 	.word	0x00030006
 800d688:	000a000f 	.word	0x000a000f
 800d68c:	0015001c 	.word	0x0015001c
 800d690:	0024002d 	.word	0x0024002d
 800d694:	20000000 	.word	0x20000000

0800d698 <D128_GENERIC>:
 800d698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69c:	b08d      	sub	sp, #52	; 0x34
 800d69e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d6a0:	9201      	str	r2, [sp, #4]
 800d6a2:	9109      	str	r1, [sp, #36]	; 0x24
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	6912      	ldr	r2, [r2, #16]
 800d6a8:	9206      	str	r2, [sp, #24]
 800d6aa:	460a      	mov	r2, r1
 800d6ac:	6949      	ldr	r1, [r1, #20]
 800d6ae:	4614      	mov	r4, r2
 800d6b0:	9107      	str	r1, [sp, #28]
 800d6b2:	4611      	mov	r1, r2
 800d6b4:	6992      	ldr	r2, [r2, #24]
 800d6b6:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 800d6ba:	920b      	str	r2, [sp, #44]	; 0x2c
 800d6bc:	68e2      	ldr	r2, [r4, #12]
 800d6be:	6889      	ldr	r1, [r1, #8]
 800d6c0:	9202      	str	r2, [sp, #8]
 800d6c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d6c4:	9103      	str	r1, [sp, #12]
 800d6c6:	9208      	str	r2, [sp, #32]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f000 8180 	beq.w	800d9ce <D128_GENERIC+0x336>
 800d6ce:	6a23      	ldr	r3, [r4, #32]
 800d6d0:	4681      	mov	r9, r0
 800d6d2:	49c8      	ldr	r1, [pc, #800]	; (800d9f4 <D128_GENERIC+0x35c>)
 800d6d4:	930a      	str	r3, [sp, #40]	; 0x28
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	f8cd a010 	str.w	sl, [sp, #16]
 800d6dc:	9305      	str	r3, [sp, #20]
 800d6de:	e15d      	b.n	800d99c <D128_GENERIC+0x304>
 800d6e0:	b2d2      	uxtb	r2, r2
 800d6e2:	f899 b000 	ldrb.w	fp, [r9]
 800d6e6:	b213      	sxth	r3, r2
 800d6e8:	4255      	negs	r5, r2
 800d6ea:	f819 0002 	ldrb.w	r0, [r9, r2]
 800d6ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d6f2:	009f      	lsls	r7, r3, #2
 800d6f4:	eb09 0402 	add.w	r4, r9, r2
 800d6f8:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800d6fc:	f819 8002 	ldrb.w	r8, [r9, r2]
 800d700:	443b      	add	r3, r7
 800d702:	1962      	adds	r2, r4, r5
 800d704:	5d64      	ldrb	r4, [r4, r5]
 800d706:	eb02 0e03 	add.w	lr, r2, r3
 800d70a:	0424      	lsls	r4, r4, #16
 800d70c:	5cd3      	ldrb	r3, [r2, r3]
 800d70e:	eb0e 0c05 	add.w	ip, lr, r5
 800d712:	f81e 9015 	ldrb.w	r9, [lr, r5, lsl #1]
 800d716:	f81e 2005 	ldrb.w	r2, [lr, r5]
 800d71a:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800d71e:	eb0c 0e45 	add.w	lr, ip, r5, lsl #1
 800d722:	f81c 8015 	ldrb.w	r8, [ip, r5, lsl #1]
 800d726:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800d72a:	eb0e 0c06 	add.w	ip, lr, r6
 800d72e:	f81e a006 	ldrb.w	sl, [lr, r6]
 800d732:	0412      	lsls	r2, r2, #16
 800d734:	445c      	add	r4, fp
 800d736:	eb0c 0e05 	add.w	lr, ip, r5
 800d73a:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800d73e:	f81c 3005 	ldrb.w	r3, [ip, r5]
 800d742:	eb0e 0045 	add.w	r0, lr, r5, lsl #1
 800d746:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800d74a:	041b      	lsls	r3, r3, #16
 800d74c:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800d750:	eb00 0b06 	add.w	fp, r0, r6
 800d754:	5d80      	ldrb	r0, [r0, r6]
 800d756:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800d75a:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800d75e:	eb0b 0a05 	add.w	sl, fp, r5
 800d762:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800d766:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800d76a:	0436      	lsls	r6, r6, #16
 800d76c:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800d770:	f81a 5015 	ldrb.w	r5, [sl, r5, lsl #1]
 800d774:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800d778:	4442      	add	r2, r8
 800d77a:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 800d77e:	44b9      	add	r9, r7
 800d780:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800d784:	4473      	add	r3, lr
 800d786:	442e      	add	r6, r5
 800d788:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800d78c:	b2e7      	uxtb	r7, r4
 800d78e:	f3c4 4507 	ubfx	r5, r4, #16, #8
 800d792:	0e24      	lsrs	r4, r4, #24
 800d794:	f851 b020 	ldr.w	fp, [r1, r0, lsl #2]
 800d798:	fa5f fe82 	uxtb.w	lr, r2
 800d79c:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800d7a0:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 800d7a4:	9804      	ldr	r0, [sp, #16]
 800d7a6:	f851 c025 	ldr.w	ip, [r1, r5, lsl #2]
 800d7aa:	4438      	add	r0, r7
 800d7ac:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800d7b0:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 800d7b4:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800d7b8:	4680      	mov	r8, r0
 800d7ba:	eb0b 2090 	add.w	r0, fp, r0, lsr #10
 800d7be:	f851 402a 	ldr.w	r4, [r1, sl, lsl #2]
 800d7c2:	0e12      	lsrs	r2, r2, #24
 800d7c4:	eb0c 2c90 	add.w	ip, ip, r0, lsr #10
 800d7c8:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800d7cc:	fa5f fa83 	uxtb.w	sl, r3
 800d7d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d7d4:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800d7d8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d7dc:	f851 b02a 	ldr.w	fp, [r1, sl, lsl #2]
 800d7e0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d7e4:	eb0e 2e95 	add.w	lr, lr, r5, lsr #10
 800d7e8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d7ec:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d7f0:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800d7f4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d7f8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800d7fc:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800d800:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800d804:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800d808:	f3c4 0809 	ubfx	r8, r4, #0, #10
 800d80c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800d810:	f851 402c 	ldr.w	r4, [r1, ip, lsl #2]
 800d814:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 800d818:	0e1b      	lsrs	r3, r3, #24
 800d81a:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800d81e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d822:	f851 a02c 	ldr.w	sl, [r1, ip, lsl #2]
 800d826:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d82a:	eb04 2c9b 	add.w	ip, r4, fp, lsr #10
 800d82e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d832:	ea48 4e0e 	orr.w	lr, r8, lr, lsl #16
 800d836:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d83a:	eb0a 2a9c 	add.w	sl, sl, ip, lsr #10
 800d83e:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800d842:	fa5f f886 	uxtb.w	r8, r6
 800d846:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800d84a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d84e:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800d852:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800d856:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800d85a:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 800d85e:	eb08 2893 	add.w	r8, r8, r3, lsr #10
 800d862:	f3c6 4407 	ubfx	r4, r6, #16, #8
 800d866:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d86a:	0e36      	lsrs	r6, r6, #24
 800d86c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800d870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d874:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800d878:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800d87c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d880:	ea43 4a0a 	orr.w	sl, r3, sl, lsl #16
 800d884:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800d888:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d88c:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800d890:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d894:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 800d898:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800d89c:	0ab2      	lsrs	r2, r6, #10
 800d89e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d8a2:	9204      	str	r2, [sp, #16]
 800d8a4:	9c02      	ldr	r4, [sp, #8]
 800d8a6:	4a54      	ldr	r2, [pc, #336]	; (800d9f8 <D128_GENERIC+0x360>)
 800d8a8:	fb20 4602 	smlad	r6, r0, r2, r4
 800d8ac:	4a53      	ldr	r2, [pc, #332]	; (800d9fc <D128_GENERIC+0x364>)
 800d8ae:	fb25 6602 	smlad	r6, r5, r2, r6
 800d8b2:	4a53      	ldr	r2, [pc, #332]	; (800da00 <D128_GENERIC+0x368>)
 800d8b4:	fb2e 6602 	smlad	r6, lr, r2, r6
 800d8b8:	4a52      	ldr	r2, [pc, #328]	; (800da04 <D128_GENERIC+0x36c>)
 800d8ba:	fb27 6602 	smlad	r6, r7, r2, r6
 800d8be:	4a52      	ldr	r2, [pc, #328]	; (800da08 <D128_GENERIC+0x370>)
 800d8c0:	fb2b 6602 	smlad	r6, fp, r2, r6
 800d8c4:	4a51      	ldr	r2, [pc, #324]	; (800da0c <D128_GENERIC+0x374>)
 800d8c6:	fb2a 6602 	smlad	r6, sl, r2, r6
 800d8ca:	4a51      	ldr	r2, [pc, #324]	; (800da10 <D128_GENERIC+0x378>)
 800d8cc:	fb28 6202 	smlad	r2, r8, r2, r6
 800d8d0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800d8d4:	fb23 2606 	smlad	r6, r3, r6, r2
 800d8d8:	4a4e      	ldr	r2, [pc, #312]	; (800da14 <D128_GENERIC+0x37c>)
 800d8da:	9c03      	ldr	r4, [sp, #12]
 800d8dc:	fb20 4202 	smlad	r2, r0, r2, r4
 800d8e0:	4c4d      	ldr	r4, [pc, #308]	; (800da18 <D128_GENERIC+0x380>)
 800d8e2:	fb25 2404 	smlad	r4, r5, r4, r2
 800d8e6:	4a4d      	ldr	r2, [pc, #308]	; (800da1c <D128_GENERIC+0x384>)
 800d8e8:	fb2e 4202 	smlad	r2, lr, r2, r4
 800d8ec:	4c4c      	ldr	r4, [pc, #304]	; (800da20 <D128_GENERIC+0x388>)
 800d8ee:	fb27 2204 	smlad	r2, r7, r4, r2
 800d8f2:	4c4c      	ldr	r4, [pc, #304]	; (800da24 <D128_GENERIC+0x38c>)
 800d8f4:	fb2b 2404 	smlad	r4, fp, r4, r2
 800d8f8:	4a4b      	ldr	r2, [pc, #300]	; (800da28 <D128_GENERIC+0x390>)
 800d8fa:	fb2a 4402 	smlad	r4, sl, r2, r4
 800d8fe:	4a4b      	ldr	r2, [pc, #300]	; (800da2c <D128_GENERIC+0x394>)
 800d900:	fb28 4202 	smlad	r2, r8, r2, r4
 800d904:	4c4a      	ldr	r4, [pc, #296]	; (800da30 <D128_GENERIC+0x398>)
 800d906:	fb23 2204 	smlad	r2, r3, r4, r2
 800d90a:	f04f 0c01 	mov.w	ip, #1
 800d90e:	9202      	str	r2, [sp, #8]
 800d910:	fb20 f00c 	smuad	r0, r0, ip
 800d914:	4a47      	ldr	r2, [pc, #284]	; (800da34 <D128_GENERIC+0x39c>)
 800d916:	fb25 0502 	smlad	r5, r5, r2, r0
 800d91a:	4a47      	ldr	r2, [pc, #284]	; (800da38 <D128_GENERIC+0x3a0>)
 800d91c:	fb2e 5e02 	smlad	lr, lr, r2, r5
 800d920:	4a46      	ldr	r2, [pc, #280]	; (800da3c <D128_GENERIC+0x3a4>)
 800d922:	fb27 e202 	smlad	r2, r7, r2, lr
 800d926:	4c46      	ldr	r4, [pc, #280]	; (800da40 <D128_GENERIC+0x3a8>)
 800d928:	fb2b 2204 	smlad	r2, fp, r4, r2
 800d92c:	4c45      	ldr	r4, [pc, #276]	; (800da44 <D128_GENERIC+0x3ac>)
 800d92e:	fb2a 2204 	smlad	r2, sl, r4, r2
 800d932:	4c45      	ldr	r4, [pc, #276]	; (800da48 <D128_GENERIC+0x3b0>)
 800d934:	fb28 2204 	smlad	r2, r8, r4, r2
 800d938:	4c44      	ldr	r4, [pc, #272]	; (800da4c <D128_GENERIC+0x3b4>)
 800d93a:	fb23 2304 	smlad	r3, r3, r4, r2
 800d93e:	9303      	str	r3, [sp, #12]
 800d940:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800d944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d946:	b193      	cbz	r3, 800d96e <D128_GENERIC+0x2d6>
 800d948:	9a06      	ldr	r2, [sp, #24]
 800d94a:	9807      	ldr	r0, [sp, #28]
 800d94c:	4432      	add	r2, r6
 800d94e:	9607      	str	r6, [sp, #28]
 800d950:	461e      	mov	r6, r3
 800d952:	1a12      	subs	r2, r2, r0
 800d954:	17d5      	asrs	r5, r2, #31
 800d956:	fba2 2303 	umull	r2, r3, r2, r3
 800d95a:	fb06 3305 	mla	r3, r6, r5, r3
 800d95e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800d962:	f143 0300 	adc.w	r3, r3, #0
 800d966:	fa03 f30c 	lsl.w	r3, r3, ip
 800d96a:	461e      	mov	r6, r3
 800d96c:	9306      	str	r3, [sp, #24]
 800d96e:	9c01      	ldr	r4, [sp, #4]
 800d970:	01f6      	lsls	r6, r6, #7
 800d972:	9d05      	ldr	r5, [sp, #20]
 800d974:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d978:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800d97a:	2300      	movs	r3, #0
 800d97c:	9f08      	ldr	r7, [sp, #32]
 800d97e:	fb05 f000 	mul.w	r0, r5, r0
 800d982:	3501      	adds	r5, #1
 800d984:	fbc7 2306 	smlal	r2, r3, r7, r6
 800d988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d98a:	109b      	asrs	r3, r3, #2
 800d98c:	9505      	str	r5, [sp, #20]
 800d98e:	f303 030f 	ssat	r3, #16, r3
 800d992:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800d996:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800d998:	42ab      	cmp	r3, r5
 800d99a:	dd16      	ble.n	800d9ca <D128_GENERIC+0x332>
 800d99c:	9b01      	ldr	r3, [sp, #4]
 800d99e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d9a0:	2a01      	cmp	r2, #1
 800d9a2:	f47f ae9d 	bne.w	800d6e0 <D128_GENERIC+0x48>
 800d9a6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d9a8:	f109 0204 	add.w	r2, r9, #4
 800d9ac:	f109 0510 	add.w	r5, r9, #16
 800d9b0:	f8d9 4000 	ldr.w	r4, [r9]
 800d9b4:	0680      	lsls	r0, r0, #26
 800d9b6:	ca4c      	ldmia	r2, {r2, r3, r6}
 800d9b8:	d505      	bpl.n	800d9c6 <D128_GENERIC+0x32e>
 800d9ba:	ba64      	rev16	r4, r4
 800d9bc:	ba52      	rev16	r2, r2
 800d9be:	ba5b      	rev16	r3, r3
 800d9c0:	ba76      	rev16	r6, r6
 800d9c2:	46a9      	mov	r9, r5
 800d9c4:	e6e0      	b.n	800d788 <D128_GENERIC+0xf0>
 800d9c6:	46a9      	mov	r9, r5
 800d9c8:	e6de      	b.n	800d788 <D128_GENERIC+0xf0>
 800d9ca:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d9ce:	9a01      	ldr	r2, [sp, #4]
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	9903      	ldr	r1, [sp, #12]
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	f8c2 a01c 	str.w	sl, [r2, #28]
 800d9da:	6091      	str	r1, [r2, #8]
 800d9dc:	9902      	ldr	r1, [sp, #8]
 800d9de:	60d1      	str	r1, [r2, #12]
 800d9e0:	9907      	ldr	r1, [sp, #28]
 800d9e2:	9a06      	ldr	r2, [sp, #24]
 800d9e4:	6159      	str	r1, [r3, #20]
 800d9e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d9e8:	611a      	str	r2, [r3, #16]
 800d9ea:	6199      	str	r1, [r3, #24]
 800d9ec:	b00d      	add	sp, #52	; 0x34
 800d9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f2:	bf00      	nop
 800d9f4:	20000000 	.word	0x20000000
 800d9f8:	00780069 	.word	0x00780069
 800d9fc:	005b004e 	.word	0x005b004e
 800da00:	00420037 	.word	0x00420037
 800da04:	002d0024 	.word	0x002d0024
 800da08:	001c0015 	.word	0x001c0015
 800da0c:	000f000a 	.word	0x000f000a
 800da10:	00060003 	.word	0x00060003
 800da14:	00880096 	.word	0x00880096
 800da18:	00a200ac 	.word	0x00a200ac
 800da1c:	00b400ba 	.word	0x00b400ba
 800da20:	00be00c0 	.word	0x00be00c0
 800da24:	00c000be 	.word	0x00c000be
 800da28:	00ba00b4 	.word	0x00ba00b4
 800da2c:	00ac00a2 	.word	0x00ac00a2
 800da30:	00960088 	.word	0x00960088
 800da34:	00030006 	.word	0x00030006
 800da38:	000a000f 	.word	0x000a000f
 800da3c:	0015001c 	.word	0x0015001c
 800da40:	0024002d 	.word	0x0024002d
 800da44:	00370042 	.word	0x00370042
 800da48:	004e005b 	.word	0x004e005b
 800da4c:	00690078 	.word	0x00690078

0800da50 <D16_1CH_HTONS_VOL_HP>:
 800da50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da54:	4692      	mov	sl, r2
 800da56:	b087      	sub	sp, #28
 800da58:	4681      	mov	r9, r0
 800da5a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800da5c:	f8da 3018 	ldr.w	r3, [sl, #24]
 800da60:	f8da 000c 	ldr.w	r0, [sl, #12]
 800da64:	9303      	str	r3, [sp, #12]
 800da66:	f8da 6010 	ldr.w	r6, [sl, #16]
 800da6a:	f8da 5014 	ldr.w	r5, [sl, #20]
 800da6e:	f8da 301c 	ldr.w	r3, [sl, #28]
 800da72:	f8da 4008 	ldr.w	r4, [sl, #8]
 800da76:	9004      	str	r0, [sp, #16]
 800da78:	f8da b030 	ldr.w	fp, [sl, #48]	; 0x30
 800da7c:	f8da e020 	ldr.w	lr, [sl, #32]
 800da80:	2a00      	cmp	r2, #0
 800da82:	d05a      	beq.n	800db3a <D16_1CH_HTONS_VOL_HP+0xea>
 800da84:	f1a1 0802 	sub.w	r8, r1, #2
 800da88:	eb09 0242 	add.w	r2, r9, r2, lsl #1
 800da8c:	f8cd b008 	str.w	fp, [sp, #8]
 800da90:	46cb      	mov	fp, r9
 800da92:	f8cd a014 	str.w	sl, [sp, #20]
 800da96:	46c2      	mov	sl, r8
 800da98:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 800db48 <D16_1CH_HTONS_VOL_HP+0xf8>
 800da9c:	9201      	str	r2, [sp, #4]
 800da9e:	f85b 2b02 	ldr.w	r2, [fp], #2
 800daa2:	ba52      	rev16	r2, r2
 800daa4:	b2d0      	uxtb	r0, r2
 800daa6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800daaa:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 800daae:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 800dab2:	4413      	add	r3, r2
 800dab4:	eb00 2093 	add.w	r0, r0, r3, lsr #10
 800dab8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800dabc:	f3c0 0109 	ubfx	r1, r0, #0, #10
 800dac0:	0a83      	lsrs	r3, r0, #10
 800dac2:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800dac6:	491e      	ldr	r1, [pc, #120]	; (800db40 <D16_1CH_HTONS_VOL_HP+0xf0>)
 800dac8:	fb22 4101 	smlad	r1, r2, r1, r4
 800dacc:	481d      	ldr	r0, [pc, #116]	; (800db44 <D16_1CH_HTONS_VOL_HP+0xf4>)
 800dace:	fb22 f400 	smuad	r4, r2, r0
 800dad2:	f5a1 6200 	sub.w	r2, r1, #2048	; 0x800
 800dad6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800dada:	f04f 0900 	mov.w	r9, #0
 800dade:	1990      	adds	r0, r2, r6
 800dae0:	1b40      	subs	r0, r0, r5
 800dae2:	4615      	mov	r5, r2
 800dae4:	17c7      	asrs	r7, r0, #31
 800dae6:	fba0 010e 	umull	r0, r1, r0, lr
 800daea:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800daee:	fb0e 1107 	mla	r1, lr, r7, r1
 800daf2:	f141 0100 	adc.w	r1, r1, #0
 800daf6:	0448      	lsls	r0, r1, #17
 800daf8:	004e      	lsls	r6, r1, #1
 800dafa:	9902      	ldr	r1, [sp, #8]
 800dafc:	fbc0 8901 	smlal	r8, r9, r0, r1
 800db00:	ea4f 01a9 	mov.w	r1, r9, asr #2
 800db04:	f301 010f 	ssat	r1, #16, r1
 800db08:	f82a 1f02 	strh.w	r1, [sl, #2]!
 800db0c:	9901      	ldr	r1, [sp, #4]
 800db0e:	458b      	cmp	fp, r1
 800db10:	d1c5      	bne.n	800da9e <D16_1CH_HTONS_VOL_HP+0x4e>
 800db12:	f8dd a014 	ldr.w	sl, [sp, #20]
 800db16:	9904      	ldr	r1, [sp, #16]
 800db18:	2000      	movs	r0, #0
 800db1a:	f8ca 301c 	str.w	r3, [sl, #28]
 800db1e:	9b03      	ldr	r3, [sp, #12]
 800db20:	f8ca 4008 	str.w	r4, [sl, #8]
 800db24:	f8ca 100c 	str.w	r1, [sl, #12]
 800db28:	f8ca 6010 	str.w	r6, [sl, #16]
 800db2c:	f8ca 2014 	str.w	r2, [sl, #20]
 800db30:	f8ca 3018 	str.w	r3, [sl, #24]
 800db34:	b007      	add	sp, #28
 800db36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db3a:	462a      	mov	r2, r5
 800db3c:	4601      	mov	r1, r0
 800db3e:	e7eb      	b.n	800db18 <D16_1CH_HTONS_VOL_HP+0xc8>
 800db40:	00030001 	.word	0x00030001
 800db44:	00010003 	.word	0x00010003
 800db48:	20000000 	.word	0x20000000

0800db4c <D24_1CH_HTONS_VOL_HP>:
 800db4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db50:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800db52:	b087      	sub	sp, #28
 800db54:	4616      	mov	r6, r2
 800db56:	6914      	ldr	r4, [r2, #16]
 800db58:	9302      	str	r3, [sp, #8]
 800db5a:	9205      	str	r2, [sp, #20]
 800db5c:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800db60:	6b37      	ldr	r7, [r6, #48]	; 0x30
 800db62:	6992      	ldr	r2, [r2, #24]
 800db64:	9d02      	ldr	r5, [sp, #8]
 800db66:	9204      	str	r2, [sp, #16]
 800db68:	68b3      	ldr	r3, [r6, #8]
 800db6a:	69f2      	ldr	r2, [r6, #28]
 800db6c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800db70:	9703      	str	r7, [sp, #12]
 800db72:	f8d6 a020 	ldr.w	sl, [r6, #32]
 800db76:	2d00      	cmp	r5, #0
 800db78:	d076      	beq.n	800dc68 <D24_1CH_HTONS_VOL_HP+0x11c>
 800db7a:	f04f 0e00 	mov.w	lr, #0
 800db7e:	f1a1 0b02 	sub.w	fp, r1, #2
 800db82:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 800dc78 <D24_1CH_HTONS_VOL_HP+0x12c>
 800db86:	f8cd 8004 	str.w	r8, [sp, #4]
 800db8a:	e052      	b.n	800dc32 <D24_1CH_HTONS_VOL_HP+0xe6>
 800db8c:	7801      	ldrb	r1, [r0, #0]
 800db8e:	3002      	adds	r0, #2
 800db90:	7847      	ldrb	r7, [r0, #1]
 800db92:	0209      	lsls	r1, r1, #8
 800db94:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800db98:	eb01 4707 	add.w	r7, r1, r7, lsl #16
 800db9c:	442f      	add	r7, r5
 800db9e:	b2fd      	uxtb	r5, r7
 800dba0:	f3c7 2107 	ubfx	r1, r7, #8, #8
 800dba4:	0c3f      	lsrs	r7, r7, #16
 800dba6:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800dbaa:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
 800dbae:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800dbb2:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 800dbb6:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800dbba:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800dbbe:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800dbc2:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800dbc6:	9e01      	ldr	r6, [sp, #4]
 800dbc8:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800dbcc:	4928      	ldr	r1, [pc, #160]	; (800dc70 <D24_1CH_HTONS_VOL_HP+0x124>)
 800dbce:	fb25 6701 	smlad	r7, r5, r1, r6
 800dbd2:	4928      	ldr	r1, [pc, #160]	; (800dc74 <D24_1CH_HTONS_VOL_HP+0x128>)
 800dbd4:	fb25 3801 	smlad	r8, r5, r1, r3
 800dbd8:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800dbdc:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800dbe0:	eb08 0346 	add.w	r3, r8, r6, lsl #1
 800dbe4:	9301      	str	r3, [sp, #4]
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	fb25 f503 	smuad	r5, r5, r3
 800dbec:	f5a7 51d8 	sub.w	r1, r7, #6912	; 0x1b00
 800dbf0:	449e      	add	lr, r3
 800dbf2:	1973      	adds	r3, r6, r5
 800dbf4:	f04f 0800 	mov.w	r8, #0
 800dbf8:	440c      	add	r4, r1
 800dbfa:	eba4 0409 	sub.w	r4, r4, r9
 800dbfe:	4689      	mov	r9, r1
 800dc00:	17e7      	asrs	r7, r4, #31
 800dc02:	fba4 450a 	umull	r4, r5, r4, sl
 800dc06:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800dc0a:	fb0a 5507 	mla	r5, sl, r7, r5
 800dc0e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800dc12:	f145 0500 	adc.w	r5, r5, #0
 800dc16:	03ee      	lsls	r6, r5, #15
 800dc18:	006c      	lsls	r4, r5, #1
 800dc1a:	9d03      	ldr	r5, [sp, #12]
 800dc1c:	fbc5 7806 	smlal	r7, r8, r5, r6
 800dc20:	4647      	mov	r7, r8
 800dc22:	10bd      	asrs	r5, r7, #2
 800dc24:	f305 050f 	ssat	r5, #16, r5
 800dc28:	f82b 5f02 	strh.w	r5, [fp, #2]!
 800dc2c:	9d02      	ldr	r5, [sp, #8]
 800dc2e:	45ae      	cmp	lr, r5
 800dc30:	d00b      	beq.n	800dc4a <D24_1CH_HTONS_VOL_HP+0xfe>
 800dc32:	f01e 0f01 	tst.w	lr, #1
 800dc36:	d0a9      	beq.n	800db8c <D24_1CH_HTONS_VOL_HP+0x40>
 800dc38:	78c1      	ldrb	r1, [r0, #3]
 800dc3a:	7887      	ldrb	r7, [r0, #2]
 800dc3c:	0209      	lsls	r1, r1, #8
 800dc3e:	f810 5b04 	ldrb.w	r5, [r0], #4
 800dc42:	eb01 4707 	add.w	r7, r1, r7, lsl #16
 800dc46:	442f      	add	r7, r5
 800dc48:	e7a9      	b.n	800db9e <D24_1CH_HTONS_VOL_HP+0x52>
 800dc4a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800dc4e:	9d05      	ldr	r5, [sp, #20]
 800dc50:	2000      	movs	r0, #0
 800dc52:	6169      	str	r1, [r5, #20]
 800dc54:	9904      	ldr	r1, [sp, #16]
 800dc56:	60ab      	str	r3, [r5, #8]
 800dc58:	f8c5 800c 	str.w	r8, [r5, #12]
 800dc5c:	61ea      	str	r2, [r5, #28]
 800dc5e:	612c      	str	r4, [r5, #16]
 800dc60:	61a9      	str	r1, [r5, #24]
 800dc62:	b007      	add	sp, #28
 800dc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc68:	4649      	mov	r1, r9
 800dc6a:	4635      	mov	r5, r6
 800dc6c:	e7f0      	b.n	800dc50 <D24_1CH_HTONS_VOL_HP+0x104>
 800dc6e:	bf00      	nop
 800dc70:	00030001 	.word	0x00030001
 800dc74:	00060007 	.word	0x00060007
 800dc78:	20000000 	.word	0x20000000

0800dc7c <D32_1CH_HTONS_VOL_HP>:
 800dc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc80:	4693      	mov	fp, r2
 800dc82:	b087      	sub	sp, #28
 800dc84:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800dc86:	f8db 3018 	ldr.w	r3, [fp, #24]
 800dc8a:	f8db 5030 	ldr.w	r5, [fp, #48]	; 0x30
 800dc8e:	9304      	str	r3, [sp, #16]
 800dc90:	f8db 4010 	ldr.w	r4, [fp, #16]
 800dc94:	f8db c014 	ldr.w	ip, [fp, #20]
 800dc98:	f8db 601c 	ldr.w	r6, [fp, #28]
 800dc9c:	f8db 3008 	ldr.w	r3, [fp, #8]
 800dca0:	f8db e00c 	ldr.w	lr, [fp, #12]
 800dca4:	9502      	str	r5, [sp, #8]
 800dca6:	f8db a020 	ldr.w	sl, [fp, #32]
 800dcaa:	2a00      	cmp	r2, #0
 800dcac:	d07d      	beq.n	800ddaa <D32_1CH_HTONS_VOL_HP+0x12e>
 800dcae:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800dcb2:	9101      	str	r1, [sp, #4]
 800dcb4:	f8cd b014 	str.w	fp, [sp, #20]
 800dcb8:	4621      	mov	r1, r4
 800dcba:	4f3d      	ldr	r7, [pc, #244]	; (800ddb0 <D32_1CH_HTONS_VOL_HP+0x134>)
 800dcbc:	4693      	mov	fp, r2
 800dcbe:	f8cd a00c 	str.w	sl, [sp, #12]
 800dcc2:	f850 2b04 	ldr.w	r2, [r0], #4
 800dcc6:	fa92 f992 	rev16.w	r9, r2
 800dcca:	fa5f f889 	uxtb.w	r8, r9
 800dcce:	f3c9 2207 	ubfx	r2, r9, #8, #8
 800dcd2:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800dcd6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800dcda:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 800dcde:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800dce2:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 800dce6:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800dcea:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800dcee:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800dcf2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800dcf6:	4c2f      	ldr	r4, [pc, #188]	; (800ddb4 <D32_1CH_HTONS_VOL_HP+0x138>)
 800dcf8:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800dcfc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800dd00:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800dd04:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800dd08:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 800dd0c:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800dd10:	ea48 4505 	orr.w	r5, r8, r5, lsl #16
 800dd14:	fb22 ee04 	smlad	lr, r2, r4, lr
 800dd18:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800dd1c:	fb25 e904 	smlad	r9, r5, r4, lr
 800dd20:	4c25      	ldr	r4, [pc, #148]	; (800ddb8 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800dd22:	fb22 3e04 	smlad	lr, r2, r4, r3
 800dd26:	4b25      	ldr	r3, [pc, #148]	; (800ddbc <D32_1CH_HTONS_VOL_HP+0x140>)
 800dd28:	fb25 ee03 	smlad	lr, r5, r3, lr
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	fb22 f203 	smuad	r2, r2, r3
 800dd32:	4b23      	ldr	r3, [pc, #140]	; (800ddc0 <D32_1CH_HTONS_VOL_HP+0x144>)
 800dd34:	fb25 2303 	smlad	r3, r5, r3, r2
 800dd38:	f5a9 4280 	sub.w	r2, r9, #16384	; 0x4000
 800dd3c:	f04f 0a00 	mov.w	sl, #0
 800dd40:	4411      	add	r1, r2
 800dd42:	eba1 040c 	sub.w	r4, r1, ip
 800dd46:	9903      	ldr	r1, [sp, #12]
 800dd48:	4694      	mov	ip, r2
 800dd4a:	ea4f 79e4 	mov.w	r9, r4, asr #31
 800dd4e:	fba4 4501 	umull	r4, r5, r4, r1
 800dd52:	fb01 5509 	mla	r5, r1, r9, r5
 800dd56:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800dd5a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800dd5e:	9c02      	ldr	r4, [sp, #8]
 800dd60:	f145 0500 	adc.w	r5, r5, #0
 800dd64:	ea4f 3885 	mov.w	r8, r5, lsl #14
 800dd68:	0069      	lsls	r1, r5, #1
 800dd6a:	fbc8 9a04 	smlal	r9, sl, r8, r4
 800dd6e:	9c01      	ldr	r4, [sp, #4]
 800dd70:	ea4f 05aa 	mov.w	r5, sl, asr #2
 800dd74:	f305 050f 	ssat	r5, #16, r5
 800dd78:	f824 5b02 	strh.w	r5, [r4], #2
 800dd7c:	455c      	cmp	r4, fp
 800dd7e:	9401      	str	r4, [sp, #4]
 800dd80:	d19f      	bne.n	800dcc2 <D32_1CH_HTONS_VOL_HP+0x46>
 800dd82:	460c      	mov	r4, r1
 800dd84:	f8dd b014 	ldr.w	fp, [sp, #20]
 800dd88:	f8cb 3008 	str.w	r3, [fp, #8]
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	9b04      	ldr	r3, [sp, #16]
 800dd90:	f8cb e00c 	str.w	lr, [fp, #12]
 800dd94:	f8cb 601c 	str.w	r6, [fp, #28]
 800dd98:	f8cb 4010 	str.w	r4, [fp, #16]
 800dd9c:	f8cb 2014 	str.w	r2, [fp, #20]
 800dda0:	f8cb 3018 	str.w	r3, [fp, #24]
 800dda4:	b007      	add	sp, #28
 800dda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddaa:	4662      	mov	r2, ip
 800ddac:	e7ec      	b.n	800dd88 <D32_1CH_HTONS_VOL_HP+0x10c>
 800ddae:	bf00      	nop
 800ddb0:	20000000 	.word	0x20000000
 800ddb4:	00060003 	.word	0x00060003
 800ddb8:	000a000c 	.word	0x000a000c
 800ddbc:	000c000a 	.word	0x000c000a
 800ddc0:	00030006 	.word	0x00030006

0800ddc4 <D48_1CH_HTONS_VOL_HP>:
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddca:	461c      	mov	r4, r3
 800ddcc:	b087      	sub	sp, #28
 800ddce:	4680      	mov	r8, r0
 800ddd0:	691e      	ldr	r6, [r3, #16]
 800ddd2:	4610      	mov	r0, r2
 800ddd4:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800ddd8:	699b      	ldr	r3, [r3, #24]
 800ddda:	9205      	str	r2, [sp, #20]
 800dddc:	9304      	str	r3, [sp, #16]
 800ddde:	69c5      	ldr	r5, [r0, #28]
 800dde0:	6883      	ldr	r3, [r0, #8]
 800dde2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800dde6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800dde8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800ddea:	f8d4 b020 	ldr.w	fp, [r4, #32]
 800ddee:	9002      	str	r0, [sp, #8]
 800ddf0:	2a00      	cmp	r2, #0
 800ddf2:	f000 8097 	beq.w	800df24 <D48_1CH_HTONS_VOL_HP+0x160>
 800ddf6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800ddfa:	468c      	mov	ip, r1
 800ddfc:	4c4a      	ldr	r4, [pc, #296]	; (800df28 <D48_1CH_HTONS_VOL_HP+0x164>)
 800ddfe:	4619      	mov	r1, r3
 800de00:	4640      	mov	r0, r8
 800de02:	9203      	str	r2, [sp, #12]
 800de04:	f8cd 9004 	str.w	r9, [sp, #4]
 800de08:	6803      	ldr	r3, [r0, #0]
 800de0a:	3006      	adds	r0, #6
 800de0c:	f850 2c02 	ldr.w	r2, [r0, #-2]
 800de10:	ba5b      	rev16	r3, r3
 800de12:	fa92 fa92 	rev16.w	sl, r2
 800de16:	fa5f f883 	uxtb.w	r8, r3
 800de1a:	f3c3 2707 	ubfx	r7, r3, #8, #8
 800de1e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800de22:	0e1b      	lsrs	r3, r3, #24
 800de24:	f854 9028 	ldr.w	r9, [r4, r8, lsl #2]
 800de28:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800de2c:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800de30:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 800de34:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800de38:	fa5f f28a 	uxtb.w	r2, sl
 800de3c:	eb07 2799 	add.w	r7, r7, r9, lsr #10
 800de40:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 800de44:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de48:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800de4c:	eb05 2897 	add.w	r8, r5, r7, lsr #10
 800de50:	f854 502a 	ldr.w	r5, [r4, sl, lsl #2]
 800de54:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800de58:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 800de5c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800de60:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 800de64:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800de68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de6c:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800de70:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800de74:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 800de78:	f3c5 0309 	ubfx	r3, r5, #0, #10
 800de7c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800de80:	4b2a      	ldr	r3, [pc, #168]	; (800df2c <D48_1CH_HTONS_VOL_HP+0x168>)
 800de82:	fb27 ea03 	smlad	sl, r7, r3, lr
 800de86:	4b2a      	ldr	r3, [pc, #168]	; (800df30 <D48_1CH_HTONS_VOL_HP+0x16c>)
 800de88:	fb28 aa03 	smlad	sl, r8, r3, sl
 800de8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800de90:	fb22 aa03 	smlad	sl, r2, r3, sl
 800de94:	4b27      	ldr	r3, [pc, #156]	; (800df34 <D48_1CH_HTONS_VOL_HP+0x170>)
 800de96:	fb27 1e03 	smlad	lr, r7, r3, r1
 800de9a:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800de9e:	fb28 ee03 	smlad	lr, r8, r3, lr
 800dea2:	4b25      	ldr	r3, [pc, #148]	; (800df38 <D48_1CH_HTONS_VOL_HP+0x174>)
 800dea4:	fb22 ee03 	smlad	lr, r2, r3, lr
 800dea8:	f04f 0901 	mov.w	r9, #1
 800deac:	fb27 f709 	smuad	r7, r7, r9
 800deb0:	4b22      	ldr	r3, [pc, #136]	; (800df3c <D48_1CH_HTONS_VOL_HP+0x178>)
 800deb2:	fb28 7803 	smlad	r8, r8, r3, r7
 800deb6:	4b22      	ldr	r3, [pc, #136]	; (800df40 <D48_1CH_HTONS_VOL_HP+0x17c>)
 800deb8:	fb22 8103 	smlad	r1, r2, r3, r8
 800debc:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800dec0:	9b01      	ldr	r3, [sp, #4]
 800dec2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800dec6:	eb0a 0206 	add.w	r2, sl, r6
 800deca:	f8cd a004 	str.w	sl, [sp, #4]
 800dece:	1ad2      	subs	r2, r2, r3
 800ded0:	17d7      	asrs	r7, r2, #31
 800ded2:	fba2 230b 	umull	r2, r3, r2, fp
 800ded6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800deda:	fb0b 3307 	mla	r3, fp, r7, r3
 800dede:	f143 0300 	adc.w	r3, r3, #0
 800dee2:	031a      	lsls	r2, r3, #12
 800dee4:	fa03 f609 	lsl.w	r6, r3, r9
 800dee8:	9b02      	ldr	r3, [sp, #8]
 800deea:	f04f 0900 	mov.w	r9, #0
 800deee:	fbc2 8903 	smlal	r8, r9, r2, r3
 800def2:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800def6:	f303 030f 	ssat	r3, #16, r3
 800defa:	f82c 3b02 	strh.w	r3, [ip], #2
 800defe:	9b03      	ldr	r3, [sp, #12]
 800df00:	459c      	cmp	ip, r3
 800df02:	d181      	bne.n	800de08 <D48_1CH_HTONS_VOL_HP+0x44>
 800df04:	460b      	mov	r3, r1
 800df06:	9905      	ldr	r1, [sp, #20]
 800df08:	2000      	movs	r0, #0
 800df0a:	460a      	mov	r2, r1
 800df0c:	608b      	str	r3, [r1, #8]
 800df0e:	f8c1 e00c 	str.w	lr, [r1, #12]
 800df12:	61cd      	str	r5, [r1, #28]
 800df14:	610e      	str	r6, [r1, #16]
 800df16:	f8c1 a014 	str.w	sl, [r1, #20]
 800df1a:	9904      	ldr	r1, [sp, #16]
 800df1c:	6191      	str	r1, [r2, #24]
 800df1e:	b007      	add	sp, #28
 800df20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df24:	46ca      	mov	sl, r9
 800df26:	e7ee      	b.n	800df06 <D48_1CH_HTONS_VOL_HP+0x142>
 800df28:	20000000 	.word	0x20000000
 800df2c:	000f000a 	.word	0x000f000a
 800df30:	00060003 	.word	0x00060003
 800df34:	00150019 	.word	0x00150019
 800df38:	00190015 	.word	0x00190015
 800df3c:	00030006 	.word	0x00030006
 800df40:	000a000f 	.word	0x000a000f

0800df44 <D64_1CH_HTONS_VOL_HP>:
 800df44:	4613      	mov	r3, r2
 800df46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df4a:	f8d3 c014 	ldr.w	ip, [r3, #20]
 800df4e:	461d      	mov	r5, r3
 800df50:	b087      	sub	sp, #28
 800df52:	699b      	ldr	r3, [r3, #24]
 800df54:	462e      	mov	r6, r5
 800df56:	69ef      	ldr	r7, [r5, #28]
 800df58:	9304      	str	r3, [sp, #16]
 800df5a:	4614      	mov	r4, r2
 800df5c:	68ab      	ldr	r3, [r5, #8]
 800df5e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800df62:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800df64:	9205      	str	r2, [sp, #20]
 800df66:	9501      	str	r5, [sp, #4]
 800df68:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800df6a:	6a35      	ldr	r5, [r6, #32]
 800df6c:	6924      	ldr	r4, [r4, #16]
 800df6e:	9502      	str	r5, [sp, #8]
 800df70:	2a00      	cmp	r2, #0
 800df72:	f000 80ae 	beq.w	800e0d2 <D64_1CH_HTONS_VOL_HP+0x18e>
 800df76:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800df7a:	4e57      	ldr	r6, [pc, #348]	; (800e0d8 <D64_1CH_HTONS_VOL_HP+0x194>)
 800df7c:	461d      	mov	r5, r3
 800df7e:	9203      	str	r2, [sp, #12]
 800df80:	f850 2b08 	ldr.w	r2, [r0], #8
 800df84:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800df88:	fa92 f892 	rev16.w	r8, r2
 800df8c:	fa93 fb93 	rev16.w	fp, r3
 800df90:	fa5f f288 	uxtb.w	r2, r8
 800df94:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800df98:	f3c8 4307 	ubfx	r3, r8, #16, #8
 800df9c:	ea4f 6818 	mov.w	r8, r8, lsr #24
 800dfa0:	f856 a022 	ldr.w	sl, [r6, r2, lsl #2]
 800dfa4:	fa5f f28b 	uxtb.w	r2, fp
 800dfa8:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 800dfac:	4457      	add	r7, sl
 800dfae:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800dfb2:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 800dfb6:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800dfba:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800dfbe:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800dfc2:	eb03 2a99 	add.w	sl, r3, r9, lsr #10
 800dfc6:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800dfca:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800dfce:	eb08 289a 	add.w	r8, r8, sl, lsr #10
 800dfd2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800dfd6:	ea49 4907 	orr.w	r9, r9, r7, lsl #16
 800dfda:	f3cb 4707 	ubfx	r7, fp, #16, #8
 800dfde:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800dfe2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800dfe6:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800dfea:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800dfee:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800dff2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800dff6:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800dffa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800dffe:	eb07 2793 	add.w	r7, r7, r3, lsr #10
 800e002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e006:	ea48 480a 	orr.w	r8, r8, sl, lsl #16
 800e00a:	eb0b 2b97 	add.w	fp, fp, r7, lsr #10
 800e00e:	f3c7 0a09 	ubfx	sl, r7, #0, #10
 800e012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e016:	f3cb 0209 	ubfx	r2, fp, #0, #10
 800e01a:	ea4f 279b 	mov.w	r7, fp, lsr #10
 800e01e:	ea42 4b0a 	orr.w	fp, r2, sl, lsl #16
 800e022:	4a2e      	ldr	r2, [pc, #184]	; (800e0dc <D64_1CH_HTONS_VOL_HP+0x198>)
 800e024:	fb29 ee02 	smlad	lr, r9, r2, lr
 800e028:	4a2d      	ldr	r2, [pc, #180]	; (800e0e0 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800e02a:	fb28 ee02 	smlad	lr, r8, r2, lr
 800e02e:	4a2d      	ldr	r2, [pc, #180]	; (800e0e4 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800e030:	fb23 ee02 	smlad	lr, r3, r2, lr
 800e034:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800e038:	fb2b ea0a 	smlad	sl, fp, sl, lr
 800e03c:	4a2a      	ldr	r2, [pc, #168]	; (800e0e8 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800e03e:	fb29 5e02 	smlad	lr, r9, r2, r5
 800e042:	fb2b ee12 	smladx	lr, fp, r2, lr
 800e046:	4a29      	ldr	r2, [pc, #164]	; (800e0ec <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800e048:	fb28 ee02 	smlad	lr, r8, r2, lr
 800e04c:	fb23 ee12 	smladx	lr, r3, r2, lr
 800e050:	2501      	movs	r5, #1
 800e052:	fb29 f905 	smuad	r9, r9, r5
 800e056:	4a26      	ldr	r2, [pc, #152]	; (800e0f0 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800e058:	fb28 9802 	smlad	r8, r8, r2, r9
 800e05c:	4a25      	ldr	r2, [pc, #148]	; (800e0f4 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800e05e:	fb23 8302 	smlad	r3, r3, r2, r8
 800e062:	4a25      	ldr	r2, [pc, #148]	; (800e0f8 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800e064:	fb2b 3502 	smlad	r5, fp, r2, r3
 800e068:	f5aa 3a00 	sub.w	sl, sl, #131072	; 0x20000
 800e06c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800e070:	eb0a 0204 	add.w	r2, sl, r4
 800e074:	9c02      	ldr	r4, [sp, #8]
 800e076:	eba2 020c 	sub.w	r2, r2, ip
 800e07a:	46d4      	mov	ip, sl
 800e07c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800e080:	fba2 2304 	umull	r2, r3, r2, r4
 800e084:	fb04 3309 	mla	r3, r4, r9, r3
 800e088:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800e08c:	f04f 0900 	mov.w	r9, #0
 800e090:	f143 0300 	adc.w	r3, r3, #0
 800e094:	02da      	lsls	r2, r3, #11
 800e096:	005c      	lsls	r4, r3, #1
 800e098:	9b01      	ldr	r3, [sp, #4]
 800e09a:	fbc3 8902 	smlal	r8, r9, r3, r2
 800e09e:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800e0a2:	f303 030f 	ssat	r3, #16, r3
 800e0a6:	f821 3b02 	strh.w	r3, [r1], #2
 800e0aa:	9b03      	ldr	r3, [sp, #12]
 800e0ac:	4299      	cmp	r1, r3
 800e0ae:	f47f af67 	bne.w	800df80 <D64_1CH_HTONS_VOL_HP+0x3c>
 800e0b2:	462b      	mov	r3, r5
 800e0b4:	9905      	ldr	r1, [sp, #20]
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	460a      	mov	r2, r1
 800e0ba:	608b      	str	r3, [r1, #8]
 800e0bc:	f8c1 e00c 	str.w	lr, [r1, #12]
 800e0c0:	61cf      	str	r7, [r1, #28]
 800e0c2:	610c      	str	r4, [r1, #16]
 800e0c4:	f8c1 a014 	str.w	sl, [r1, #20]
 800e0c8:	9904      	ldr	r1, [sp, #16]
 800e0ca:	6191      	str	r1, [r2, #24]
 800e0cc:	b007      	add	sp, #28
 800e0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d2:	46e2      	mov	sl, ip
 800e0d4:	e7ee      	b.n	800e0b4 <D64_1CH_HTONS_VOL_HP+0x170>
 800e0d6:	bf00      	nop
 800e0d8:	20000000 	.word	0x20000000
 800e0dc:	001c0015 	.word	0x001c0015
 800e0e0:	000f000a 	.word	0x000f000a
 800e0e4:	00060003 	.word	0x00060003
 800e0e8:	0024002a 	.word	0x0024002a
 800e0ec:	002e0030 	.word	0x002e0030
 800e0f0:	00030006 	.word	0x00030006
 800e0f4:	000a000f 	.word	0x000a000f
 800e0f8:	0015001c 	.word	0x0015001c

0800e0fc <D80_1CH_HTONS_VOL_HP>:
 800e0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e100:	4614      	mov	r4, r2
 800e102:	b089      	sub	sp, #36	; 0x24
 800e104:	4613      	mov	r3, r2
 800e106:	6924      	ldr	r4, [r4, #16]
 800e108:	461d      	mov	r5, r3
 800e10a:	9207      	str	r2, [sp, #28]
 800e10c:	9401      	str	r4, [sp, #4]
 800e10e:	461c      	mov	r4, r3
 800e110:	695b      	ldr	r3, [r3, #20]
 800e112:	68a7      	ldr	r7, [r4, #8]
 800e114:	9302      	str	r3, [sp, #8]
 800e116:	69a3      	ldr	r3, [r4, #24]
 800e118:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800e11c:	9306      	str	r3, [sp, #24]
 800e11e:	69e3      	ldr	r3, [r4, #28]
 800e120:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800e122:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800e124:	9403      	str	r4, [sp, #12]
 800e126:	6a2c      	ldr	r4, [r5, #32]
 800e128:	9404      	str	r4, [sp, #16]
 800e12a:	2a00      	cmp	r2, #0
 800e12c:	f000 80ca 	beq.w	800e2c4 <D80_1CH_HTONS_VOL_HP+0x1c8>
 800e130:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800e134:	4e64      	ldr	r6, [pc, #400]	; (800e2c8 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800e136:	468c      	mov	ip, r1
 800e138:	4682      	mov	sl, r0
 800e13a:	9205      	str	r2, [sp, #20]
 800e13c:	f8da 2008 	ldr.w	r2, [sl, #8]
 800e140:	e89a 0011 	ldmia.w	sl, {r0, r4}
 800e144:	f10a 0a0a 	add.w	sl, sl, #10
 800e148:	ba40      	rev16	r0, r0
 800e14a:	ba64      	rev16	r4, r4
 800e14c:	fa92 f992 	rev16.w	r9, r2
 800e150:	b2c5      	uxtb	r5, r0
 800e152:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800e156:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800e15a:	0e00      	lsrs	r0, r0, #24
 800e15c:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800e160:	b2e5      	uxtb	r5, r4
 800e162:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800e166:	f3c4 4b07 	ubfx	fp, r4, #16, #8
 800e16a:	4443      	add	r3, r8
 800e16c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800e170:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800e174:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800e178:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800e17c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e180:	eb02 2891 	add.w	r8, r2, r1, lsr #10
 800e184:	f3c4 2207 	ubfx	r2, r4, #8, #8
 800e188:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e18c:	eb00 2098 	add.w	r0, r0, r8, lsr #10
 800e190:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800e194:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e198:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800e19c:	eb05 2590 	add.w	r5, r5, r0, lsr #10
 800e1a0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800e1a4:	0e23      	lsrs	r3, r4, #24
 800e1a6:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800e1aa:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800e1ae:	f3c9 2b07 	ubfx	fp, r9, #8, #8
 800e1b2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800e1b6:	fa5f f989 	uxtb.w	r9, r9
 800e1ba:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800e1be:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800e1c2:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 800e1c6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e1ca:	eb03 2394 	add.w	r3, r3, r4, lsr #10
 800e1ce:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e1d2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e1d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800e1da:	eb09 2993 	add.w	r9, r9, r3, lsr #10
 800e1de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1e2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800e1e6:	eb0b 2b99 	add.w	fp, fp, r9, lsr #10
 800e1ea:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800e1ee:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800e1f2:	f3cb 0209 	ubfx	r2, fp, #0, #10
 800e1f6:	ea4f 239b 	mov.w	r3, fp, lsr #10
 800e1fa:	ea42 4909 	orr.w	r9, r2, r9, lsl #16
 800e1fe:	4a33      	ldr	r2, [pc, #204]	; (800e2cc <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800e200:	fb21 ee02 	smlad	lr, r1, r2, lr
 800e204:	4a32      	ldr	r2, [pc, #200]	; (800e2d0 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800e206:	fb20 ee02 	smlad	lr, r0, r2, lr
 800e20a:	4a32      	ldr	r2, [pc, #200]	; (800e2d4 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800e20c:	fb25 ee02 	smlad	lr, r5, r2, lr
 800e210:	4a31      	ldr	r2, [pc, #196]	; (800e2d8 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800e212:	fb24 ee02 	smlad	lr, r4, r2, lr
 800e216:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e21a:	fb29 eb02 	smlad	fp, r9, r2, lr
 800e21e:	4a2f      	ldr	r2, [pc, #188]	; (800e2dc <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800e220:	fb21 7702 	smlad	r7, r1, r2, r7
 800e224:	4a2e      	ldr	r2, [pc, #184]	; (800e2e0 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800e226:	fb20 7702 	smlad	r7, r0, r2, r7
 800e22a:	f04f 1e4b 	mov.w	lr, #4915275	; 0x4b004b
 800e22e:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800e232:	4a2c      	ldr	r2, [pc, #176]	; (800e2e4 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800e234:	fb24 ee02 	smlad	lr, r4, r2, lr
 800e238:	4a2b      	ldr	r2, [pc, #172]	; (800e2e8 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800e23a:	fb29 ee02 	smlad	lr, r9, r2, lr
 800e23e:	f04f 0801 	mov.w	r8, #1
 800e242:	fb21 f808 	smuad	r8, r1, r8
 800e246:	4a29      	ldr	r2, [pc, #164]	; (800e2ec <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800e248:	fb20 8002 	smlad	r0, r0, r2, r8
 800e24c:	4a28      	ldr	r2, [pc, #160]	; (800e2f0 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800e24e:	fb25 0002 	smlad	r0, r5, r2, r0
 800e252:	4a28      	ldr	r2, [pc, #160]	; (800e2f4 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800e254:	fb24 0402 	smlad	r4, r4, r2, r0
 800e258:	4f27      	ldr	r7, [pc, #156]	; (800e2f8 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800e25a:	fb29 4707 	smlad	r7, r9, r7, r4
 800e25e:	f5ab 327a 	sub.w	r2, fp, #256000	; 0x3e800
 800e262:	9901      	ldr	r1, [sp, #4]
 800e264:	9c04      	ldr	r4, [sp, #16]
 800e266:	2500      	movs	r5, #0
 800e268:	4411      	add	r1, r2
 800e26a:	4608      	mov	r0, r1
 800e26c:	9902      	ldr	r1, [sp, #8]
 800e26e:	9202      	str	r2, [sp, #8]
 800e270:	1a40      	subs	r0, r0, r1
 800e272:	ea4f 79e0 	mov.w	r9, r0, asr #31
 800e276:	fba0 0104 	umull	r0, r1, r0, r4
 800e27a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800e27e:	fb04 1109 	mla	r1, r4, r9, r1
 800e282:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e286:	f141 0100 	adc.w	r1, r1, #0
 800e28a:	0288      	lsls	r0, r1, #10
 800e28c:	0049      	lsls	r1, r1, #1
 800e28e:	9101      	str	r1, [sp, #4]
 800e290:	9903      	ldr	r1, [sp, #12]
 800e292:	fbc1 4500 	smlal	r4, r5, r1, r0
 800e296:	10a9      	asrs	r1, r5, #2
 800e298:	f301 010f 	ssat	r1, #16, r1
 800e29c:	f82c 1b02 	strh.w	r1, [ip], #2
 800e2a0:	9905      	ldr	r1, [sp, #20]
 800e2a2:	458c      	cmp	ip, r1
 800e2a4:	f47f af4a 	bne.w	800e13c <D80_1CH_HTONS_VOL_HP+0x40>
 800e2a8:	9c07      	ldr	r4, [sp, #28]
 800e2aa:	2000      	movs	r0, #0
 800e2ac:	9901      	ldr	r1, [sp, #4]
 800e2ae:	6162      	str	r2, [r4, #20]
 800e2b0:	9a06      	ldr	r2, [sp, #24]
 800e2b2:	60a7      	str	r7, [r4, #8]
 800e2b4:	f8c4 e00c 	str.w	lr, [r4, #12]
 800e2b8:	61e3      	str	r3, [r4, #28]
 800e2ba:	6121      	str	r1, [r4, #16]
 800e2bc:	61a2      	str	r2, [r4, #24]
 800e2be:	b009      	add	sp, #36	; 0x24
 800e2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c4:	9a02      	ldr	r2, [sp, #8]
 800e2c6:	e7ef      	b.n	800e2a8 <D80_1CH_HTONS_VOL_HP+0x1ac>
 800e2c8:	20000000 	.word	0x20000000
 800e2cc:	002d0024 	.word	0x002d0024
 800e2d0:	001c0015 	.word	0x001c0015
 800e2d4:	000f000a 	.word	0x000f000a
 800e2d8:	00060003 	.word	0x00060003
 800e2dc:	0037003f 	.word	0x0037003f
 800e2e0:	00450049 	.word	0x00450049
 800e2e4:	00490045 	.word	0x00490045
 800e2e8:	003f0037 	.word	0x003f0037
 800e2ec:	00030006 	.word	0x00030006
 800e2f0:	000a000f 	.word	0x000a000f
 800e2f4:	0015001c 	.word	0x0015001c
 800e2f8:	0024002d 	.word	0x0024002d

0800e2fc <D128_1CH_HTONS_VOL_HP>:
 800e2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e300:	b08d      	sub	sp, #52	; 0x34
 800e302:	4614      	mov	r4, r2
 800e304:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800e306:	920b      	str	r2, [sp, #44]	; 0x2c
 800e308:	6912      	ldr	r2, [r2, #16]
 800e30a:	9202      	str	r2, [sp, #8]
 800e30c:	4622      	mov	r2, r4
 800e30e:	6964      	ldr	r4, [r4, #20]
 800e310:	4615      	mov	r5, r2
 800e312:	9405      	str	r4, [sp, #20]
 800e314:	4614      	mov	r4, r2
 800e316:	6992      	ldr	r2, [r2, #24]
 800e318:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800e31c:	920a      	str	r2, [sp, #40]	; 0x28
 800e31e:	68ea      	ldr	r2, [r5, #12]
 800e320:	68a4      	ldr	r4, [r4, #8]
 800e322:	9203      	str	r2, [sp, #12]
 800e324:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800e326:	9404      	str	r4, [sp, #16]
 800e328:	9207      	str	r2, [sp, #28]
 800e32a:	6a2a      	ldr	r2, [r5, #32]
 800e32c:	9208      	str	r2, [sp, #32]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	f000 8129 	beq.w	800e586 <D128_1CH_HTONS_VOL_HP+0x28a>
 800e334:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e338:	f100 0b10 	add.w	fp, r0, #16
 800e33c:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 800e5e0 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800e340:	9106      	str	r1, [sp, #24]
 800e342:	9309      	str	r3, [sp, #36]	; 0x24
 800e344:	f1ab 0010 	sub.w	r0, fp, #16
 800e348:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 800e34c:	c80d      	ldmia	r0, {r0, r2, r3}
 800e34e:	ba40      	rev16	r0, r0
 800e350:	ba52      	rev16	r2, r2
 800e352:	ba5b      	rev16	r3, r3
 800e354:	fa91 fc91 	rev16.w	ip, r1
 800e358:	b2c5      	uxtb	r5, r0
 800e35a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800e35e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800e362:	0e00      	lsrs	r0, r0, #24
 800e364:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800e368:	b2d5      	uxtb	r5, r2
 800e36a:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
 800e36e:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800e372:	44b6      	add	lr, r6
 800e374:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e378:	f859 6020 	ldr.w	r6, [r9, r0, lsl #2]
 800e37c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800e380:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800e384:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800e388:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800e38c:	0e12      	lsrs	r2, r2, #24
 800e38e:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800e392:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800e396:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e39a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800e39e:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800e3a2:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800e3a6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e3aa:	b2da      	uxtb	r2, r3
 800e3ac:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800e3b0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800e3b4:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800e3b8:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800e3bc:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800e3c0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e3c4:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 800e3c8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e3cc:	eb00 2e95 	add.w	lr, r0, r5, lsr #10
 800e3d0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800e3d4:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800e3d8:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800e3dc:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800e3e0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800e3e4:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800e3e8:	0e1b      	lsrs	r3, r3, #24
 800e3ea:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800e3ee:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800e3f2:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800e3f6:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800e3fa:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800e3fe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800e402:	fa5f f38c 	uxtb.w	r3, ip
 800e406:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800e40a:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800e40e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e412:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800e416:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800e41a:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 800e41e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800e422:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800e426:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800e42a:	f859 202e 	ldr.w	r2, [r9, lr, lsl #2]
 800e42e:	f3cc 4307 	ubfx	r3, ip, #16, #8
 800e432:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 800e436:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800e43a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800e43e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e442:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800e446:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800e44a:	eb03 2c92 	add.w	ip, r3, r2, lsr #10
 800e44e:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800e452:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e456:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800e45a:	9b03      	ldr	r3, [sp, #12]
 800e45c:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800e460:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800e464:	9201      	str	r2, [sp, #4]
 800e466:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800e46a:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800e46e:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 800e472:	4a46      	ldr	r2, [pc, #280]	; (800e58c <D128_1CH_HTONS_VOL_HP+0x290>)
 800e474:	fb27 3802 	smlad	r8, r7, r2, r3
 800e478:	4b45      	ldr	r3, [pc, #276]	; (800e590 <D128_1CH_HTONS_VOL_HP+0x294>)
 800e47a:	fb26 8803 	smlad	r8, r6, r3, r8
 800e47e:	4b45      	ldr	r3, [pc, #276]	; (800e594 <D128_1CH_HTONS_VOL_HP+0x298>)
 800e480:	fb25 8803 	smlad	r8, r5, r3, r8
 800e484:	4b44      	ldr	r3, [pc, #272]	; (800e598 <D128_1CH_HTONS_VOL_HP+0x29c>)
 800e486:	fb24 8803 	smlad	r8, r4, r3, r8
 800e48a:	4b44      	ldr	r3, [pc, #272]	; (800e59c <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800e48c:	fb20 8803 	smlad	r8, r0, r3, r8
 800e490:	4b43      	ldr	r3, [pc, #268]	; (800e5a0 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800e492:	fb21 8803 	smlad	r8, r1, r3, r8
 800e496:	4b43      	ldr	r3, [pc, #268]	; (800e5a4 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800e498:	9a01      	ldr	r2, [sp, #4]
 800e49a:	fb22 8203 	smlad	r2, r2, r3, r8
 800e49e:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800e4a2:	fb2c 2808 	smlad	r8, ip, r8, r2
 800e4a6:	4b40      	ldr	r3, [pc, #256]	; (800e5a8 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800e4a8:	9a04      	ldr	r2, [sp, #16]
 800e4aa:	fb27 2a03 	smlad	sl, r7, r3, r2
 800e4ae:	4b3f      	ldr	r3, [pc, #252]	; (800e5ac <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800e4b0:	fb26 aa03 	smlad	sl, r6, r3, sl
 800e4b4:	4a3e      	ldr	r2, [pc, #248]	; (800e5b0 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800e4b6:	fb25 aa02 	smlad	sl, r5, r2, sl
 800e4ba:	4a3e      	ldr	r2, [pc, #248]	; (800e5b4 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800e4bc:	fb24 aa02 	smlad	sl, r4, r2, sl
 800e4c0:	4a3d      	ldr	r2, [pc, #244]	; (800e5b8 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800e4c2:	fb20 aa02 	smlad	sl, r0, r2, sl
 800e4c6:	4a3d      	ldr	r2, [pc, #244]	; (800e5bc <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800e4c8:	fb21 aa02 	smlad	sl, r1, r2, sl
 800e4cc:	4a3c      	ldr	r2, [pc, #240]	; (800e5c0 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800e4ce:	9b01      	ldr	r3, [sp, #4]
 800e4d0:	fb23 a202 	smlad	r2, r3, r2, sl
 800e4d4:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800e5e4 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800e4d8:	fb2c 230a 	smlad	r3, ip, sl, r2
 800e4dc:	2201      	movs	r2, #1
 800e4de:	9303      	str	r3, [sp, #12]
 800e4e0:	fb27 f702 	smuad	r7, r7, r2
 800e4e4:	4a37      	ldr	r2, [pc, #220]	; (800e5c4 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800e4e6:	fb26 7702 	smlad	r7, r6, r2, r7
 800e4ea:	4a37      	ldr	r2, [pc, #220]	; (800e5c8 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800e4ec:	fb25 7702 	smlad	r7, r5, r2, r7
 800e4f0:	4a36      	ldr	r2, [pc, #216]	; (800e5cc <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800e4f2:	fb24 7702 	smlad	r7, r4, r2, r7
 800e4f6:	4a36      	ldr	r2, [pc, #216]	; (800e5d0 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800e4f8:	fb20 7702 	smlad	r7, r0, r2, r7
 800e4fc:	4a35      	ldr	r2, [pc, #212]	; (800e5d4 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800e4fe:	fb21 7702 	smlad	r7, r1, r2, r7
 800e502:	4a35      	ldr	r2, [pc, #212]	; (800e5d8 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800e504:	9b01      	ldr	r3, [sp, #4]
 800e506:	fb23 7202 	smlad	r2, r3, r2, r7
 800e50a:	4b34      	ldr	r3, [pc, #208]	; (800e5dc <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800e50c:	fb2c 2303 	smlad	r3, ip, r3, r2
 800e510:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
 800e514:	9304      	str	r3, [sp, #16]
 800e516:	9b02      	ldr	r3, [sp, #8]
 800e518:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e51c:	9e08      	ldr	r6, [sp, #32]
 800e51e:	2100      	movs	r1, #0
 800e520:	4443      	add	r3, r8
 800e522:	f10b 0b10 	add.w	fp, fp, #16
 800e526:	461a      	mov	r2, r3
 800e528:	9b05      	ldr	r3, [sp, #20]
 800e52a:	f8cd 8014 	str.w	r8, [sp, #20]
 800e52e:	1ad2      	subs	r2, r2, r3
 800e530:	17d5      	asrs	r5, r2, #31
 800e532:	fba2 2306 	umull	r2, r3, r2, r6
 800e536:	1812      	adds	r2, r2, r0
 800e538:	fb06 3305 	mla	r3, r6, r5, r3
 800e53c:	414b      	adcs	r3, r1
 800e53e:	021a      	lsls	r2, r3, #8
 800e540:	005b      	lsls	r3, r3, #1
 800e542:	9302      	str	r3, [sp, #8]
 800e544:	9b07      	ldr	r3, [sp, #28]
 800e546:	fbc3 0102 	smlal	r0, r1, r3, r2
 800e54a:	9a06      	ldr	r2, [sp, #24]
 800e54c:	108b      	asrs	r3, r1, #2
 800e54e:	f303 030f 	ssat	r3, #16, r3
 800e552:	f822 3b02 	strh.w	r3, [r2], #2
 800e556:	4613      	mov	r3, r2
 800e558:	9206      	str	r2, [sp, #24]
 800e55a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e55c:	4293      	cmp	r3, r2
 800e55e:	f47f aef1 	bne.w	800e344 <D128_1CH_HTONS_VOL_HP+0x48>
 800e562:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e564:	2000      	movs	r0, #0
 800e566:	9904      	ldr	r1, [sp, #16]
 800e568:	4613      	mov	r3, r2
 800e56a:	f8c2 e01c 	str.w	lr, [r2, #28]
 800e56e:	6091      	str	r1, [r2, #8]
 800e570:	9903      	ldr	r1, [sp, #12]
 800e572:	60d1      	str	r1, [r2, #12]
 800e574:	9a02      	ldr	r2, [sp, #8]
 800e576:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e578:	611a      	str	r2, [r3, #16]
 800e57a:	f8c3 8014 	str.w	r8, [r3, #20]
 800e57e:	6199      	str	r1, [r3, #24]
 800e580:	b00d      	add	sp, #52	; 0x34
 800e582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e586:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e58a:	e7ea      	b.n	800e562 <D128_1CH_HTONS_VOL_HP+0x266>
 800e58c:	00780069 	.word	0x00780069
 800e590:	005b004e 	.word	0x005b004e
 800e594:	00420037 	.word	0x00420037
 800e598:	002d0024 	.word	0x002d0024
 800e59c:	001c0015 	.word	0x001c0015
 800e5a0:	000f000a 	.word	0x000f000a
 800e5a4:	00060003 	.word	0x00060003
 800e5a8:	00880096 	.word	0x00880096
 800e5ac:	00a200ac 	.word	0x00a200ac
 800e5b0:	00b400ba 	.word	0x00b400ba
 800e5b4:	00be00c0 	.word	0x00be00c0
 800e5b8:	00c000be 	.word	0x00c000be
 800e5bc:	00ba00b4 	.word	0x00ba00b4
 800e5c0:	00ac00a2 	.word	0x00ac00a2
 800e5c4:	00030006 	.word	0x00030006
 800e5c8:	000a000f 	.word	0x000a000f
 800e5cc:	0015001c 	.word	0x0015001c
 800e5d0:	0024002d 	.word	0x0024002d
 800e5d4:	00370042 	.word	0x00370042
 800e5d8:	004e005b 	.word	0x004e005b
 800e5dc:	00690078 	.word	0x00690078
 800e5e0:	20000000 	.word	0x20000000
 800e5e4:	00960088 	.word	0x00960088

0800e5e8 <PDM_Filter_Init>:
 800e5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ea:	2240      	movs	r2, #64	; 0x40
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	300c      	adds	r0, #12
 800e5f2:	f000 f9e5 	bl	800e9c0 <memset>
 800e5f6:	4939      	ldr	r1, [pc, #228]	; (800e6dc <PDM_Filter_Init+0xf4>)
 800e5f8:	4839      	ldr	r0, [pc, #228]	; (800e6e0 <PDM_Filter_Init+0xf8>)
 800e5fa:	f000 f977 	bl	800e8ec <CRC_Lock>
 800e5fe:	2300      	movs	r3, #0
 800e600:	2801      	cmp	r0, #1
 800e602:	8820      	ldrh	r0, [r4, #0]
 800e604:	4a35      	ldr	r2, [pc, #212]	; (800e6dc <PDM_Filter_Init+0xf4>)
 800e606:	8965      	ldrh	r5, [r4, #10]
 800e608:	bf18      	it	ne
 800e60a:	461a      	movne	r2, r3
 800e60c:	8921      	ldrh	r1, [r4, #8]
 800e60e:	2801      	cmp	r0, #1
 800e610:	86a5      	strh	r5, [r4, #52]	; 0x34
 800e612:	6462      	str	r2, [r4, #68]	; 0x44
 800e614:	86e1      	strh	r1, [r4, #54]	; 0x36
 800e616:	61a3      	str	r3, [r4, #24]
 800e618:	6123      	str	r3, [r4, #16]
 800e61a:	6163      	str	r3, [r4, #20]
 800e61c:	60e3      	str	r3, [r4, #12]
 800e61e:	6263      	str	r3, [r4, #36]	; 0x24
 800e620:	61e3      	str	r3, [r4, #28]
 800e622:	6223      	str	r3, [r4, #32]
 800e624:	6423      	str	r3, [r4, #64]	; 0x40
 800e626:	d91c      	bls.n	800e662 <PDM_Filter_Init+0x7a>
 800e628:	2003      	movs	r0, #3
 800e62a:	2302      	movs	r3, #2
 800e62c:	8862      	ldrh	r2, [r4, #2]
 800e62e:	2a01      	cmp	r2, #1
 800e630:	d914      	bls.n	800e65c <PDM_Filter_Init+0x74>
 800e632:	2140      	movs	r1, #64	; 0x40
 800e634:	2300      	movs	r3, #0
 800e636:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e638:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800e63c:	d00b      	beq.n	800e656 <PDM_Filter_Init+0x6e>
 800e63e:	6862      	ldr	r2, [r4, #4]
 800e640:	b11a      	cbz	r2, 800e64a <PDM_Filter_Init+0x62>
 800e642:	f043 0310 	orr.w	r3, r3, #16
 800e646:	62e2      	str	r2, [r4, #44]	; 0x2c
 800e648:	6423      	str	r3, [r4, #64]	; 0x40
 800e64a:	2200      	movs	r2, #0
 800e64c:	8722      	strh	r2, [r4, #56]	; 0x38
 800e64e:	b908      	cbnz	r0, 800e654 <PDM_Filter_Init+0x6c>
 800e650:	3380      	adds	r3, #128	; 0x80
 800e652:	6423      	str	r3, [r4, #64]	; 0x40
 800e654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e656:	460b      	mov	r3, r1
 800e658:	6421      	str	r1, [r4, #64]	; 0x40
 800e65a:	e7f0      	b.n	800e63e <PDM_Filter_Init+0x56>
 800e65c:	d008      	beq.n	800e670 <PDM_Filter_Init+0x88>
 800e65e:	4618      	mov	r0, r3
 800e660:	e7e7      	b.n	800e632 <PDM_Filter_Init+0x4a>
 800e662:	4d20      	ldr	r5, [pc, #128]	; (800e6e4 <PDM_Filter_Init+0xfc>)
 800e664:	782a      	ldrb	r2, [r5, #0]
 800e666:	d009      	beq.n	800e67c <PDM_Filter_Init+0x94>
 800e668:	2a01      	cmp	r2, #1
 800e66a:	d020      	beq.n	800e6ae <PDM_Filter_Init+0xc6>
 800e66c:	2001      	movs	r0, #1
 800e66e:	e7dd      	b.n	800e62c <PDM_Filter_Init+0x44>
 800e670:	2220      	movs	r2, #32
 800e672:	4618      	mov	r0, r3
 800e674:	2160      	movs	r1, #96	; 0x60
 800e676:	6422      	str	r2, [r4, #64]	; 0x40
 800e678:	4613      	mov	r3, r2
 800e67a:	e7dc      	b.n	800e636 <PDM_Filter_Init+0x4e>
 800e67c:	2a00      	cmp	r2, #0
 800e67e:	d1d5      	bne.n	800e62c <PDM_Filter_Init+0x44>
 800e680:	4919      	ldr	r1, [pc, #100]	; (800e6e8 <PDM_Filter_Init+0x100>)
 800e682:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800e6f0 <PDM_Filter_Init+0x108>
 800e686:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800e68a:	4e18      	ldr	r6, [pc, #96]	; (800e6ec <PDM_Filter_Init+0x104>)
 800e68c:	684a      	ldr	r2, [r1, #4]
 800e68e:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800e692:	ea02 0006 	and.w	r0, r2, r6
 800e696:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e69a:	4303      	orrs	r3, r0
 800e69c:	4413      	add	r3, r2
 800e69e:	f841 3f04 	str.w	r3, [r1, #4]!
 800e6a2:	428f      	cmp	r7, r1
 800e6a4:	d1f2      	bne.n	800e68c <PDM_Filter_Init+0xa4>
 800e6a6:	2001      	movs	r0, #1
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	7028      	strb	r0, [r5, #0]
 800e6ac:	e7be      	b.n	800e62c <PDM_Filter_Init+0x44>
 800e6ae:	490e      	ldr	r1, [pc, #56]	; (800e6e8 <PDM_Filter_Init+0x100>)
 800e6b0:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800e6f0 <PDM_Filter_Init+0x108>
 800e6b4:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800e6b8:	4e0c      	ldr	r6, [pc, #48]	; (800e6ec <PDM_Filter_Init+0x104>)
 800e6ba:	684a      	ldr	r2, [r1, #4]
 800e6bc:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800e6c0:	ea02 0006 	and.w	r0, r2, r6
 800e6c4:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e6c8:	4303      	orrs	r3, r0
 800e6ca:	4413      	add	r3, r2
 800e6cc:	f841 3f04 	str.w	r3, [r1, #4]!
 800e6d0:	428f      	cmp	r7, r1
 800e6d2:	d1f2      	bne.n	800e6ba <PDM_Filter_Init+0xd2>
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	2001      	movs	r0, #1
 800e6d8:	702b      	strb	r3, [r5, #0]
 800e6da:	e7a7      	b.n	800e62c <PDM_Filter_Init+0x44>
 800e6dc:	b5e8b5cd 	.word	0xb5e8b5cd
 800e6e0:	f407a5c2 	.word	0xf407a5c2
 800e6e4:	20000560 	.word	0x20000560
 800e6e8:	1ffffffc 	.word	0x1ffffffc
 800e6ec:	000ffc00 	.word	0x000ffc00
 800e6f0:	3ff00000 	.word	0x3ff00000

0800e6f4 <PDM_Filter_setConfig>:
 800e6f4:	b570      	push	{r4, r5, r6, lr}
 800e6f6:	460e      	mov	r6, r1
 800e6f8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	8832      	ldrh	r2, [r6, #0]
 800e6fe:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800e702:	1e53      	subs	r3, r2, #1
 800e704:	2b06      	cmp	r3, #6
 800e706:	ed2d 8b04 	vpush	{d8-d9}
 800e70a:	6420      	str	r0, [r4, #64]	; 0x40
 800e70c:	d91b      	bls.n	800e746 <PDM_Filter_setConfig+0x52>
 800e70e:	2508      	movs	r5, #8
 800e710:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800e714:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e718:	4299      	cmp	r1, r3
 800e71a:	d07b      	beq.n	800e814 <PDM_Filter_setConfig+0x120>
 800e71c:	f113 0f0c 	cmn.w	r3, #12
 800e720:	db29      	blt.n	800e776 <PDM_Filter_setConfig+0x82>
 800e722:	2b33      	cmp	r3, #51	; 0x33
 800e724:	dd2c      	ble.n	800e780 <PDM_Filter_setConfig+0x8c>
 800e726:	2333      	movs	r3, #51	; 0x33
 800e728:	3540      	adds	r5, #64	; 0x40
 800e72a:	80b3      	strh	r3, [r6, #4]
 800e72c:	8622      	strh	r2, [r4, #48]	; 0x30
 800e72e:	8873      	ldrh	r3, [r6, #2]
 800e730:	8663      	strh	r3, [r4, #50]	; 0x32
 800e732:	b925      	cbnz	r5, 800e73e <PDM_Filter_setConfig+0x4a>
 800e734:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e736:	2500      	movs	r5, #0
 800e738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e73c:	6423      	str	r3, [r4, #64]	; 0x40
 800e73e:	4628      	mov	r0, r5
 800e740:	ecbd 8b04 	vpop	{d8-d9}
 800e744:	bd70      	pop	{r4, r5, r6, pc}
 800e746:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e748:	4293      	cmp	r3, r2
 800e74a:	d04a      	beq.n	800e7e2 <PDM_Filter_setConfig+0xee>
 800e74c:	4b4e      	ldr	r3, [pc, #312]	; (800e888 <PDM_Filter_setConfig+0x194>)
 800e74e:	400b      	ands	r3, r1
 800e750:	4313      	orrs	r3, r2
 800e752:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800e756:	6423      	str	r3, [r4, #64]	; 0x40
 800e758:	f003 030f 	and.w	r3, r3, #15
 800e75c:	2970      	cmp	r1, #112	; 0x70
 800e75e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e762:	d04a      	beq.n	800e7fa <PDM_Filter_setConfig+0x106>
 800e764:	2b06      	cmp	r3, #6
 800e766:	f200 808d 	bhi.w	800e884 <PDM_Filter_setConfig+0x190>
 800e76a:	e8df f003 	tbb	[pc, r3]
 800e76e:	6467      	.short	0x6467
 800e770:	6a6d7073 	.word	0x6a6d7073
 800e774:	5a          	.byte	0x5a
 800e775:	00          	.byte	0x00
 800e776:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800e77a:	3540      	adds	r5, #64	; 0x40
 800e77c:	80b3      	strh	r3, [r6, #4]
 800e77e:	e7d5      	b.n	800e72c <PDM_Filter_setConfig+0x38>
 800e780:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e782:	f002 020f 	and.w	r2, r2, #15
 800e786:	3a01      	subs	r2, #1
 800e788:	2a06      	cmp	r2, #6
 800e78a:	d83e      	bhi.n	800e80a <PDM_Filter_setConfig+0x116>
 800e78c:	493f      	ldr	r1, [pc, #252]	; (800e88c <PDM_Filter_setConfig+0x198>)
 800e78e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e792:	ed92 9a00 	vldr	s18, [r2]
 800e796:	ed92 8a07 	vldr	s16, [r2, #28]
 800e79a:	ee07 3a90 	vmov	s15, r3
 800e79e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800e7a2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e7a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7aa:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800e7ae:	f000 f90f 	bl	800e9d0 <powf>
 800e7b2:	eddf 0a37 	vldr	s1, [pc, #220]	; 800e890 <PDM_Filter_setConfig+0x19c>
 800e7b6:	eef0 8a40 	vmov.f32	s17, s0
 800e7ba:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800e7be:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800e7c2:	f000 f905 	bl	800e9d0 <powf>
 800e7c6:	ee28 8a28 	vmul.f32	s16, s16, s17
 800e7ca:	88b3      	ldrh	r3, [r6, #4]
 800e7cc:	8832      	ldrh	r2, [r6, #0]
 800e7ce:	ee28 8a00 	vmul.f32	s16, s16, s0
 800e7d2:	8723      	strh	r3, [r4, #56]	; 0x38
 800e7d4:	feb8 8a48 	vrinta.f32	s16, s16
 800e7d8:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800e7dc:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800e7e0:	e7a4      	b.n	800e72c <PDM_Filter_setConfig+0x38>
 800e7e2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e7e6:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800e7ea:	4299      	cmp	r1, r3
 800e7ec:	d016      	beq.n	800e81c <PDM_Filter_setConfig+0x128>
 800e7ee:	f113 0f0c 	cmn.w	r3, #12
 800e7f2:	f04f 0500 	mov.w	r5, #0
 800e7f6:	da94      	bge.n	800e722 <PDM_Filter_setConfig+0x2e>
 800e7f8:	e7bd      	b.n	800e776 <PDM_Filter_setConfig+0x82>
 800e7fa:	2b06      	cmp	r3, #6
 800e7fc:	d842      	bhi.n	800e884 <PDM_Filter_setConfig+0x190>
 800e7fe:	e8df f003 	tbb	[pc, r3]
 800e802:	3b3e      	.short	0x3b3e
 800e804:	2f323538 	.word	0x2f323538
 800e808:	2c          	.byte	0x2c
 800e809:	00          	.byte	0x00
 800e80a:	ed9f 8a22 	vldr	s16, [pc, #136]	; 800e894 <PDM_Filter_setConfig+0x1a0>
 800e80e:	eeb0 9a48 	vmov.f32	s18, s16
 800e812:	e7c2      	b.n	800e79a <PDM_Filter_setConfig+0xa6>
 800e814:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800e816:	4291      	cmp	r1, r2
 800e818:	d180      	bne.n	800e71c <PDM_Filter_setConfig+0x28>
 800e81a:	e788      	b.n	800e72e <PDM_Filter_setConfig+0x3a>
 800e81c:	8873      	ldrh	r3, [r6, #2]
 800e81e:	8663      	strh	r3, [r4, #50]	; 0x32
 800e820:	e788      	b.n	800e734 <PDM_Filter_setConfig+0x40>
 800e822:	4b1d      	ldr	r3, [pc, #116]	; (800e898 <PDM_Filter_setConfig+0x1a4>)
 800e824:	64a3      	str	r3, [r4, #72]	; 0x48
 800e826:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e82a:	2500      	movs	r5, #0
 800e82c:	f113 0f0c 	cmn.w	r3, #12
 800e830:	f6bf af77 	bge.w	800e722 <PDM_Filter_setConfig+0x2e>
 800e834:	e79f      	b.n	800e776 <PDM_Filter_setConfig+0x82>
 800e836:	4b19      	ldr	r3, [pc, #100]	; (800e89c <PDM_Filter_setConfig+0x1a8>)
 800e838:	64a3      	str	r3, [r4, #72]	; 0x48
 800e83a:	e7f4      	b.n	800e826 <PDM_Filter_setConfig+0x132>
 800e83c:	4b18      	ldr	r3, [pc, #96]	; (800e8a0 <PDM_Filter_setConfig+0x1ac>)
 800e83e:	64a3      	str	r3, [r4, #72]	; 0x48
 800e840:	e7f1      	b.n	800e826 <PDM_Filter_setConfig+0x132>
 800e842:	4b18      	ldr	r3, [pc, #96]	; (800e8a4 <PDM_Filter_setConfig+0x1b0>)
 800e844:	64a3      	str	r3, [r4, #72]	; 0x48
 800e846:	e7ee      	b.n	800e826 <PDM_Filter_setConfig+0x132>
 800e848:	4b17      	ldr	r3, [pc, #92]	; (800e8a8 <PDM_Filter_setConfig+0x1b4>)
 800e84a:	64a3      	str	r3, [r4, #72]	; 0x48
 800e84c:	e7eb      	b.n	800e826 <PDM_Filter_setConfig+0x132>
 800e84e:	4b17      	ldr	r3, [pc, #92]	; (800e8ac <PDM_Filter_setConfig+0x1b8>)
 800e850:	64a3      	str	r3, [r4, #72]	; 0x48
 800e852:	e7e8      	b.n	800e826 <PDM_Filter_setConfig+0x132>
 800e854:	4b16      	ldr	r3, [pc, #88]	; (800e8b0 <PDM_Filter_setConfig+0x1bc>)
 800e856:	64a3      	str	r3, [r4, #72]	; 0x48
 800e858:	e7e5      	b.n	800e826 <PDM_Filter_setConfig+0x132>
 800e85a:	4b16      	ldr	r3, [pc, #88]	; (800e8b4 <PDM_Filter_setConfig+0x1c0>)
 800e85c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e85e:	e7e2      	b.n	800e826 <PDM_Filter_setConfig+0x132>
 800e860:	4b15      	ldr	r3, [pc, #84]	; (800e8b8 <PDM_Filter_setConfig+0x1c4>)
 800e862:	64a3      	str	r3, [r4, #72]	; 0x48
 800e864:	e7df      	b.n	800e826 <PDM_Filter_setConfig+0x132>
 800e866:	4b15      	ldr	r3, [pc, #84]	; (800e8bc <PDM_Filter_setConfig+0x1c8>)
 800e868:	64a3      	str	r3, [r4, #72]	; 0x48
 800e86a:	e7dc      	b.n	800e826 <PDM_Filter_setConfig+0x132>
 800e86c:	4b14      	ldr	r3, [pc, #80]	; (800e8c0 <PDM_Filter_setConfig+0x1cc>)
 800e86e:	64a3      	str	r3, [r4, #72]	; 0x48
 800e870:	e7d9      	b.n	800e826 <PDM_Filter_setConfig+0x132>
 800e872:	4b14      	ldr	r3, [pc, #80]	; (800e8c4 <PDM_Filter_setConfig+0x1d0>)
 800e874:	64a3      	str	r3, [r4, #72]	; 0x48
 800e876:	e7d6      	b.n	800e826 <PDM_Filter_setConfig+0x132>
 800e878:	4b13      	ldr	r3, [pc, #76]	; (800e8c8 <PDM_Filter_setConfig+0x1d4>)
 800e87a:	64a3      	str	r3, [r4, #72]	; 0x48
 800e87c:	e7d3      	b.n	800e826 <PDM_Filter_setConfig+0x132>
 800e87e:	4b13      	ldr	r3, [pc, #76]	; (800e8cc <PDM_Filter_setConfig+0x1d8>)
 800e880:	64a3      	str	r3, [r4, #72]	; 0x48
 800e882:	e7d0      	b.n	800e826 <PDM_Filter_setConfig+0x132>
 800e884:	2500      	movs	r5, #0
 800e886:	e743      	b.n	800e710 <PDM_Filter_setConfig+0x1c>
 800e888:	fffffef0 	.word	0xfffffef0
 800e88c:	0800f18c 	.word	0x0800f18c
 800e890:	42000000 	.word	0x42000000
 800e894:	00000000 	.word	0x00000000
 800e898:	0800ce55 	.word	0x0800ce55
 800e89c:	0800d1cd 	.word	0x0800d1cd
 800e8a0:	0800cfdd 	.word	0x0800cfdd
 800e8a4:	0800ccd9 	.word	0x0800ccd9
 800e8a8:	0800cbc9 	.word	0x0800cbc9
 800e8ac:	0800d699 	.word	0x0800d699
 800e8b0:	0800d3fd 	.word	0x0800d3fd
 800e8b4:	0800dc7d 	.word	0x0800dc7d
 800e8b8:	0800db4d 	.word	0x0800db4d
 800e8bc:	0800da51 	.word	0x0800da51
 800e8c0:	0800e2fd 	.word	0x0800e2fd
 800e8c4:	0800e0fd 	.word	0x0800e0fd
 800e8c8:	0800df45 	.word	0x0800df45
 800e8cc:	0800ddc5 	.word	0x0800ddc5

0800e8d0 <PDM_Filter>:
 800e8d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e8d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 800e8d6:	d105      	bne.n	800e8e4 <PDM_Filter+0x14>
 800e8d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e8dc:	bf14      	ite	ne
 800e8de:	2020      	movne	r0, #32
 800e8e0:	2030      	moveq	r0, #48	; 0x30
 800e8e2:	4770      	bx	lr
 800e8e4:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800e8e6:	320c      	adds	r2, #12
 800e8e8:	4718      	bx	r3
 800e8ea:	bf00      	nop

0800e8ec <CRC_Lock>:
 800e8ec:	4a18      	ldr	r2, [pc, #96]	; (800e950 <CRC_Lock+0x64>)
 800e8ee:	6813      	ldr	r3, [r2, #0]
 800e8f0:	b410      	push	{r4}
 800e8f2:	f023 0301 	bic.w	r3, r3, #1
 800e8f6:	4c17      	ldr	r4, [pc, #92]	; (800e954 <CRC_Lock+0x68>)
 800e8f8:	6013      	str	r3, [r2, #0]
 800e8fa:	6823      	ldr	r3, [r4, #0]
 800e8fc:	b933      	cbnz	r3, 800e90c <CRC_Lock+0x20>
 800e8fe:	4b16      	ldr	r3, [pc, #88]	; (800e958 <CRC_Lock+0x6c>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e906:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e90a:	d010      	beq.n	800e92e <CRC_Lock+0x42>
 800e90c:	4b13      	ldr	r3, [pc, #76]	; (800e95c <CRC_Lock+0x70>)
 800e90e:	2401      	movs	r4, #1
 800e910:	461a      	mov	r2, r3
 800e912:	601c      	str	r4, [r3, #0]
 800e914:	6813      	ldr	r3, [r2, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1fc      	bne.n	800e914 <CRC_Lock+0x28>
 800e91a:	4b11      	ldr	r3, [pc, #68]	; (800e960 <CRC_Lock+0x74>)
 800e91c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e920:	6018      	str	r0, [r3, #0]
 800e922:	6818      	ldr	r0, [r3, #0]
 800e924:	1a08      	subs	r0, r1, r0
 800e926:	fab0 f080 	clz	r0, r0
 800e92a:	0940      	lsrs	r0, r0, #5
 800e92c:	4770      	bx	lr
 800e92e:	4b0d      	ldr	r3, [pc, #52]	; (800e964 <CRC_Lock+0x78>)
 800e930:	2401      	movs	r4, #1
 800e932:	461a      	mov	r2, r3
 800e934:	601c      	str	r4, [r3, #0]
 800e936:	6813      	ldr	r3, [r2, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d1fc      	bne.n	800e936 <CRC_Lock+0x4a>
 800e93c:	4b0a      	ldr	r3, [pc, #40]	; (800e968 <CRC_Lock+0x7c>)
 800e93e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e942:	6018      	str	r0, [r3, #0]
 800e944:	6818      	ldr	r0, [r3, #0]
 800e946:	1a40      	subs	r0, r0, r1
 800e948:	fab0 f080 	clz	r0, r0
 800e94c:	0940      	lsrs	r0, r0, #5
 800e94e:	4770      	bx	lr
 800e950:	e0002000 	.word	0xe0002000
 800e954:	e0042000 	.word	0xe0042000
 800e958:	5c001000 	.word	0x5c001000
 800e95c:	40023008 	.word	0x40023008
 800e960:	40023000 	.word	0x40023000
 800e964:	58024c08 	.word	0x58024c08
 800e968:	58024c00 	.word	0x58024c00

0800e96c <__errno>:
 800e96c:	4b01      	ldr	r3, [pc, #4]	; (800e974 <__errno+0x8>)
 800e96e:	6818      	ldr	r0, [r3, #0]
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	200004e0 	.word	0x200004e0

0800e978 <__libc_init_array>:
 800e978:	b570      	push	{r4, r5, r6, lr}
 800e97a:	4d0d      	ldr	r5, [pc, #52]	; (800e9b0 <__libc_init_array+0x38>)
 800e97c:	4c0d      	ldr	r4, [pc, #52]	; (800e9b4 <__libc_init_array+0x3c>)
 800e97e:	1b64      	subs	r4, r4, r5
 800e980:	10a4      	asrs	r4, r4, #2
 800e982:	2600      	movs	r6, #0
 800e984:	42a6      	cmp	r6, r4
 800e986:	d109      	bne.n	800e99c <__libc_init_array+0x24>
 800e988:	4d0b      	ldr	r5, [pc, #44]	; (800e9b8 <__libc_init_array+0x40>)
 800e98a:	4c0c      	ldr	r4, [pc, #48]	; (800e9bc <__libc_init_array+0x44>)
 800e98c:	f000 fbf2 	bl	800f174 <_init>
 800e990:	1b64      	subs	r4, r4, r5
 800e992:	10a4      	asrs	r4, r4, #2
 800e994:	2600      	movs	r6, #0
 800e996:	42a6      	cmp	r6, r4
 800e998:	d105      	bne.n	800e9a6 <__libc_init_array+0x2e>
 800e99a:	bd70      	pop	{r4, r5, r6, pc}
 800e99c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9a0:	4798      	blx	r3
 800e9a2:	3601      	adds	r6, #1
 800e9a4:	e7ee      	b.n	800e984 <__libc_init_array+0xc>
 800e9a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9aa:	4798      	blx	r3
 800e9ac:	3601      	adds	r6, #1
 800e9ae:	e7f2      	b.n	800e996 <__libc_init_array+0x1e>
 800e9b0:	0800f264 	.word	0x0800f264
 800e9b4:	0800f264 	.word	0x0800f264
 800e9b8:	0800f264 	.word	0x0800f264
 800e9bc:	0800f268 	.word	0x0800f268

0800e9c0 <memset>:
 800e9c0:	4402      	add	r2, r0
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d100      	bne.n	800e9ca <memset+0xa>
 800e9c8:	4770      	bx	lr
 800e9ca:	f803 1b01 	strb.w	r1, [r3], #1
 800e9ce:	e7f9      	b.n	800e9c4 <memset+0x4>

0800e9d0 <powf>:
 800e9d0:	b508      	push	{r3, lr}
 800e9d2:	ed2d 8b04 	vpush	{d8-d9}
 800e9d6:	eeb0 8a60 	vmov.f32	s16, s1
 800e9da:	eeb0 9a40 	vmov.f32	s18, s0
 800e9de:	f000 f84f 	bl	800ea80 <__ieee754_powf>
 800e9e2:	eeb4 8a48 	vcmp.f32	s16, s16
 800e9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ea:	eef0 8a40 	vmov.f32	s17, s0
 800e9ee:	d63e      	bvs.n	800ea6e <powf+0x9e>
 800e9f0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f8:	d112      	bne.n	800ea20 <powf+0x50>
 800e9fa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea02:	d039      	beq.n	800ea78 <powf+0xa8>
 800ea04:	eeb0 0a48 	vmov.f32	s0, s16
 800ea08:	f000 fb35 	bl	800f076 <finitef>
 800ea0c:	b378      	cbz	r0, 800ea6e <powf+0x9e>
 800ea0e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ea12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea16:	d52a      	bpl.n	800ea6e <powf+0x9e>
 800ea18:	f7ff ffa8 	bl	800e96c <__errno>
 800ea1c:	2322      	movs	r3, #34	; 0x22
 800ea1e:	e014      	b.n	800ea4a <powf+0x7a>
 800ea20:	f000 fb29 	bl	800f076 <finitef>
 800ea24:	b998      	cbnz	r0, 800ea4e <powf+0x7e>
 800ea26:	eeb0 0a49 	vmov.f32	s0, s18
 800ea2a:	f000 fb24 	bl	800f076 <finitef>
 800ea2e:	b170      	cbz	r0, 800ea4e <powf+0x7e>
 800ea30:	eeb0 0a48 	vmov.f32	s0, s16
 800ea34:	f000 fb1f 	bl	800f076 <finitef>
 800ea38:	b148      	cbz	r0, 800ea4e <powf+0x7e>
 800ea3a:	eef4 8a68 	vcmp.f32	s17, s17
 800ea3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea42:	d7e9      	bvc.n	800ea18 <powf+0x48>
 800ea44:	f7ff ff92 	bl	800e96c <__errno>
 800ea48:	2321      	movs	r3, #33	; 0x21
 800ea4a:	6003      	str	r3, [r0, #0]
 800ea4c:	e00f      	b.n	800ea6e <powf+0x9e>
 800ea4e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ea52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea56:	d10a      	bne.n	800ea6e <powf+0x9e>
 800ea58:	eeb0 0a49 	vmov.f32	s0, s18
 800ea5c:	f000 fb0b 	bl	800f076 <finitef>
 800ea60:	b128      	cbz	r0, 800ea6e <powf+0x9e>
 800ea62:	eeb0 0a48 	vmov.f32	s0, s16
 800ea66:	f000 fb06 	bl	800f076 <finitef>
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	d1d4      	bne.n	800ea18 <powf+0x48>
 800ea6e:	eeb0 0a68 	vmov.f32	s0, s17
 800ea72:	ecbd 8b04 	vpop	{d8-d9}
 800ea76:	bd08      	pop	{r3, pc}
 800ea78:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ea7c:	e7f7      	b.n	800ea6e <powf+0x9e>
	...

0800ea80 <__ieee754_powf>:
 800ea80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea84:	ee10 4a90 	vmov	r4, s1
 800ea88:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800ea8c:	ed2d 8b02 	vpush	{d8}
 800ea90:	ee10 6a10 	vmov	r6, s0
 800ea94:	eeb0 8a40 	vmov.f32	s16, s0
 800ea98:	eef0 8a60 	vmov.f32	s17, s1
 800ea9c:	d10c      	bne.n	800eab8 <__ieee754_powf+0x38>
 800ea9e:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800eaa2:	0076      	lsls	r6, r6, #1
 800eaa4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800eaa8:	f240 8296 	bls.w	800efd8 <__ieee754_powf+0x558>
 800eaac:	ee38 0a28 	vadd.f32	s0, s16, s17
 800eab0:	ecbd 8b02 	vpop	{d8}
 800eab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eab8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800eabc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800eac0:	dcf4      	bgt.n	800eaac <__ieee754_powf+0x2c>
 800eac2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800eac6:	dd08      	ble.n	800eada <__ieee754_powf+0x5a>
 800eac8:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800eacc:	d1ee      	bne.n	800eaac <__ieee754_powf+0x2c>
 800eace:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800ead2:	0064      	lsls	r4, r4, #1
 800ead4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800ead8:	e7e6      	b.n	800eaa8 <__ieee754_powf+0x28>
 800eada:	2e00      	cmp	r6, #0
 800eadc:	da20      	bge.n	800eb20 <__ieee754_powf+0xa0>
 800eade:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800eae2:	da2d      	bge.n	800eb40 <__ieee754_powf+0xc0>
 800eae4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800eae8:	f2c0 827f 	blt.w	800efea <__ieee754_powf+0x56a>
 800eaec:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800eaf0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800eaf4:	fa48 f703 	asr.w	r7, r8, r3
 800eaf8:	fa07 f303 	lsl.w	r3, r7, r3
 800eafc:	4543      	cmp	r3, r8
 800eafe:	f040 8274 	bne.w	800efea <__ieee754_powf+0x56a>
 800eb02:	f007 0701 	and.w	r7, r7, #1
 800eb06:	f1c7 0702 	rsb	r7, r7, #2
 800eb0a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800eb0e:	d11f      	bne.n	800eb50 <__ieee754_powf+0xd0>
 800eb10:	2c00      	cmp	r4, #0
 800eb12:	f280 8267 	bge.w	800efe4 <__ieee754_powf+0x564>
 800eb16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eb1a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800eb1e:	e7c7      	b.n	800eab0 <__ieee754_powf+0x30>
 800eb20:	2700      	movs	r7, #0
 800eb22:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800eb26:	d1f0      	bne.n	800eb0a <__ieee754_powf+0x8a>
 800eb28:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800eb2c:	f000 8254 	beq.w	800efd8 <__ieee754_powf+0x558>
 800eb30:	dd08      	ble.n	800eb44 <__ieee754_powf+0xc4>
 800eb32:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800ee3c <__ieee754_powf+0x3bc>
 800eb36:	2c00      	cmp	r4, #0
 800eb38:	bfa8      	it	ge
 800eb3a:	eeb0 0a68 	vmovge.f32	s0, s17
 800eb3e:	e7b7      	b.n	800eab0 <__ieee754_powf+0x30>
 800eb40:	2702      	movs	r7, #2
 800eb42:	e7ee      	b.n	800eb22 <__ieee754_powf+0xa2>
 800eb44:	2c00      	cmp	r4, #0
 800eb46:	f280 824a 	bge.w	800efde <__ieee754_powf+0x55e>
 800eb4a:	eeb1 0a68 	vneg.f32	s0, s17
 800eb4e:	e7af      	b.n	800eab0 <__ieee754_powf+0x30>
 800eb50:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800eb54:	d102      	bne.n	800eb5c <__ieee754_powf+0xdc>
 800eb56:	ee28 0a08 	vmul.f32	s0, s16, s16
 800eb5a:	e7a9      	b.n	800eab0 <__ieee754_powf+0x30>
 800eb5c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800eb60:	eeb0 0a48 	vmov.f32	s0, s16
 800eb64:	d107      	bne.n	800eb76 <__ieee754_powf+0xf6>
 800eb66:	2e00      	cmp	r6, #0
 800eb68:	db05      	blt.n	800eb76 <__ieee754_powf+0xf6>
 800eb6a:	ecbd 8b02 	vpop	{d8}
 800eb6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb72:	f000 ba53 	b.w	800f01c <__ieee754_sqrtf>
 800eb76:	f000 fa77 	bl	800f068 <fabsf>
 800eb7a:	b125      	cbz	r5, 800eb86 <__ieee754_powf+0x106>
 800eb7c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800eb80:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800eb84:	d116      	bne.n	800ebb4 <__ieee754_powf+0x134>
 800eb86:	2c00      	cmp	r4, #0
 800eb88:	bfbc      	itt	lt
 800eb8a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800eb8e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800eb92:	2e00      	cmp	r6, #0
 800eb94:	da8c      	bge.n	800eab0 <__ieee754_powf+0x30>
 800eb96:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800eb9a:	ea55 0307 	orrs.w	r3, r5, r7
 800eb9e:	d104      	bne.n	800ebaa <__ieee754_powf+0x12a>
 800eba0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800eba4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800eba8:	e782      	b.n	800eab0 <__ieee754_powf+0x30>
 800ebaa:	2f01      	cmp	r7, #1
 800ebac:	d180      	bne.n	800eab0 <__ieee754_powf+0x30>
 800ebae:	eeb1 0a40 	vneg.f32	s0, s0
 800ebb2:	e77d      	b.n	800eab0 <__ieee754_powf+0x30>
 800ebb4:	0ff0      	lsrs	r0, r6, #31
 800ebb6:	3801      	subs	r0, #1
 800ebb8:	ea57 0300 	orrs.w	r3, r7, r0
 800ebbc:	d104      	bne.n	800ebc8 <__ieee754_powf+0x148>
 800ebbe:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ebc2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ebc6:	e773      	b.n	800eab0 <__ieee754_powf+0x30>
 800ebc8:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800ebcc:	dd74      	ble.n	800ecb8 <__ieee754_powf+0x238>
 800ebce:	4b9c      	ldr	r3, [pc, #624]	; (800ee40 <__ieee754_powf+0x3c0>)
 800ebd0:	429d      	cmp	r5, r3
 800ebd2:	dc08      	bgt.n	800ebe6 <__ieee754_powf+0x166>
 800ebd4:	2c00      	cmp	r4, #0
 800ebd6:	da0b      	bge.n	800ebf0 <__ieee754_powf+0x170>
 800ebd8:	2000      	movs	r0, #0
 800ebda:	ecbd 8b02 	vpop	{d8}
 800ebde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe2:	f000 ba3b 	b.w	800f05c <__math_oflowf>
 800ebe6:	4b97      	ldr	r3, [pc, #604]	; (800ee44 <__ieee754_powf+0x3c4>)
 800ebe8:	429d      	cmp	r5, r3
 800ebea:	dd08      	ble.n	800ebfe <__ieee754_powf+0x17e>
 800ebec:	2c00      	cmp	r4, #0
 800ebee:	dcf3      	bgt.n	800ebd8 <__ieee754_powf+0x158>
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	ecbd 8b02 	vpop	{d8}
 800ebf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebfa:	f000 ba29 	b.w	800f050 <__math_uflowf>
 800ebfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ec02:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ec06:	eddf 6a90 	vldr	s13, [pc, #576]	; 800ee48 <__ieee754_powf+0x3c8>
 800ec0a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800ec0e:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ec12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ec16:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ec1a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ec1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec22:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800ee4c <__ieee754_powf+0x3cc>
 800ec26:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800ec2a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800ee50 <__ieee754_powf+0x3d0>
 800ec2e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ec32:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800ee54 <__ieee754_powf+0x3d4>
 800ec36:	eef0 6a67 	vmov.f32	s13, s15
 800ec3a:	eee0 6a07 	vfma.f32	s13, s0, s14
 800ec3e:	ee16 3a90 	vmov	r3, s13
 800ec42:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ec46:	f023 030f 	bic.w	r3, r3, #15
 800ec4a:	ee00 3a90 	vmov	s1, r3
 800ec4e:	eee0 0a47 	vfms.f32	s1, s0, s14
 800ec52:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ec56:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800ec5a:	f024 040f 	bic.w	r4, r4, #15
 800ec5e:	ee07 4a10 	vmov	s14, r4
 800ec62:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ec66:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ec6a:	ee07 3a90 	vmov	s15, r3
 800ec6e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800ec72:	3f01      	subs	r7, #1
 800ec74:	ea57 0200 	orrs.w	r2, r7, r0
 800ec78:	ee07 4a10 	vmov	s14, r4
 800ec7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec80:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ec84:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ec88:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800ec8c:	ee17 4a10 	vmov	r4, s14
 800ec90:	bf08      	it	eq
 800ec92:	eeb0 8a40 	vmoveq.f32	s16, s0
 800ec96:	2c00      	cmp	r4, #0
 800ec98:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ec9c:	f340 817e 	ble.w	800ef9c <__ieee754_powf+0x51c>
 800eca0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800eca4:	f340 80f8 	ble.w	800ee98 <__ieee754_powf+0x418>
 800eca8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ecac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb0:	bf4c      	ite	mi
 800ecb2:	2001      	movmi	r0, #1
 800ecb4:	2000      	movpl	r0, #0
 800ecb6:	e790      	b.n	800ebda <__ieee754_powf+0x15a>
 800ecb8:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800ecbc:	bf01      	itttt	eq
 800ecbe:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800ee58 <__ieee754_powf+0x3d8>
 800ecc2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ecc6:	f06f 0217 	mvneq.w	r2, #23
 800ecca:	ee17 5a90 	vmoveq	r5, s15
 800ecce:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800ecd2:	bf18      	it	ne
 800ecd4:	2200      	movne	r2, #0
 800ecd6:	3b7f      	subs	r3, #127	; 0x7f
 800ecd8:	4413      	add	r3, r2
 800ecda:	4a60      	ldr	r2, [pc, #384]	; (800ee5c <__ieee754_powf+0x3dc>)
 800ecdc:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800ece0:	4295      	cmp	r5, r2
 800ece2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800ece6:	dd06      	ble.n	800ecf6 <__ieee754_powf+0x276>
 800ece8:	4a5d      	ldr	r2, [pc, #372]	; (800ee60 <__ieee754_powf+0x3e0>)
 800ecea:	4295      	cmp	r5, r2
 800ecec:	f340 80a4 	ble.w	800ee38 <__ieee754_powf+0x3b8>
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800ecf6:	2500      	movs	r5, #0
 800ecf8:	4a5a      	ldr	r2, [pc, #360]	; (800ee64 <__ieee754_powf+0x3e4>)
 800ecfa:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800ecfe:	ee07 1a90 	vmov	s15, r1
 800ed02:	ed92 7a00 	vldr	s14, [r2]
 800ed06:	4a58      	ldr	r2, [pc, #352]	; (800ee68 <__ieee754_powf+0x3e8>)
 800ed08:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ed0c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ed10:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800ed14:	1049      	asrs	r1, r1, #1
 800ed16:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800ed1a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800ed1e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800ed22:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800ed26:	ee06 1a10 	vmov	s12, r1
 800ed2a:	ee65 4a26 	vmul.f32	s9, s10, s13
 800ed2e:	ee36 7a47 	vsub.f32	s14, s12, s14
 800ed32:	ee14 6a90 	vmov	r6, s9
 800ed36:	4016      	ands	r6, r2
 800ed38:	ee05 6a90 	vmov	s11, r6
 800ed3c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800ed40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed44:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ee6c <__ieee754_powf+0x3ec>
 800ed48:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800ed4c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800ed50:	ee25 6a26 	vmul.f32	s12, s10, s13
 800ed54:	eddf 6a46 	vldr	s13, [pc, #280]	; 800ee70 <__ieee754_powf+0x3f0>
 800ed58:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ed5c:	eddf 6a45 	vldr	s13, [pc, #276]	; 800ee74 <__ieee754_powf+0x3f4>
 800ed60:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ed64:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ee48 <__ieee754_powf+0x3c8>
 800ed68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ed6c:	eddf 6a42 	vldr	s13, [pc, #264]	; 800ee78 <__ieee754_powf+0x3f8>
 800ed70:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ed74:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800ee7c <__ieee754_powf+0x3fc>
 800ed78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ed7c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800ed80:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800ed84:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ed88:	eee5 6a07 	vfma.f32	s13, s10, s14
 800ed8c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800ed90:	eef0 7a45 	vmov.f32	s15, s10
 800ed94:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800ed98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed9c:	ee17 1a90 	vmov	r1, s15
 800eda0:	4011      	ands	r1, r2
 800eda2:	ee07 1a90 	vmov	s15, r1
 800eda6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800edaa:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800edae:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800edb2:	ee27 7a24 	vmul.f32	s14, s14, s9
 800edb6:	eea6 7a27 	vfma.f32	s14, s12, s15
 800edba:	eeb0 6a47 	vmov.f32	s12, s14
 800edbe:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800edc2:	ee16 1a10 	vmov	r1, s12
 800edc6:	4011      	ands	r1, r2
 800edc8:	ee06 1a90 	vmov	s13, r1
 800edcc:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800edd0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ee80 <__ieee754_powf+0x400>
 800edd4:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800ee84 <__ieee754_powf+0x404>
 800edd8:	ee37 7a66 	vsub.f32	s14, s14, s13
 800eddc:	ee06 1a10 	vmov	s12, r1
 800ede0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ede4:	eddf 7a28 	vldr	s15, [pc, #160]	; 800ee88 <__ieee754_powf+0x408>
 800ede8:	4928      	ldr	r1, [pc, #160]	; (800ee8c <__ieee754_powf+0x40c>)
 800edea:	eea6 7a27 	vfma.f32	s14, s12, s15
 800edee:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800edf2:	edd1 7a00 	vldr	s15, [r1]
 800edf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800edfa:	ee07 3a90 	vmov	s15, r3
 800edfe:	4b24      	ldr	r3, [pc, #144]	; (800ee90 <__ieee754_powf+0x410>)
 800ee00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ee04:	eef0 7a47 	vmov.f32	s15, s14
 800ee08:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ee0c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800ee10:	edd5 0a00 	vldr	s1, [r5]
 800ee14:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ee18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ee1c:	ee17 3a90 	vmov	r3, s15
 800ee20:	4013      	ands	r3, r2
 800ee22:	ee07 3a90 	vmov	s15, r3
 800ee26:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800ee2a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800ee2e:	eee6 6a65 	vfms.f32	s13, s12, s11
 800ee32:	ee77 7a66 	vsub.f32	s15, s14, s13
 800ee36:	e70e      	b.n	800ec56 <__ieee754_powf+0x1d6>
 800ee38:	2501      	movs	r5, #1
 800ee3a:	e75d      	b.n	800ecf8 <__ieee754_powf+0x278>
 800ee3c:	00000000 	.word	0x00000000
 800ee40:	3f7ffff3 	.word	0x3f7ffff3
 800ee44:	3f800007 	.word	0x3f800007
 800ee48:	3eaaaaab 	.word	0x3eaaaaab
 800ee4c:	3fb8aa3b 	.word	0x3fb8aa3b
 800ee50:	36eca570 	.word	0x36eca570
 800ee54:	3fb8aa00 	.word	0x3fb8aa00
 800ee58:	4b800000 	.word	0x4b800000
 800ee5c:	001cc471 	.word	0x001cc471
 800ee60:	005db3d6 	.word	0x005db3d6
 800ee64:	0800f244 	.word	0x0800f244
 800ee68:	fffff000 	.word	0xfffff000
 800ee6c:	3e6c3255 	.word	0x3e6c3255
 800ee70:	3e53f142 	.word	0x3e53f142
 800ee74:	3e8ba305 	.word	0x3e8ba305
 800ee78:	3edb6db7 	.word	0x3edb6db7
 800ee7c:	3f19999a 	.word	0x3f19999a
 800ee80:	3f76384f 	.word	0x3f76384f
 800ee84:	3f763800 	.word	0x3f763800
 800ee88:	369dc3a0 	.word	0x369dc3a0
 800ee8c:	0800f254 	.word	0x0800f254
 800ee90:	0800f24c 	.word	0x0800f24c
 800ee94:	3338aa3c 	.word	0x3338aa3c
 800ee98:	f040 8095 	bne.w	800efc6 <__ieee754_powf+0x546>
 800ee9c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800ee94 <__ieee754_powf+0x414>
 800eea0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eea4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800eea8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800eeac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb0:	f73f aefa 	bgt.w	800eca8 <__ieee754_powf+0x228>
 800eeb4:	15db      	asrs	r3, r3, #23
 800eeb6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800eeba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800eebe:	4103      	asrs	r3, r0
 800eec0:	4423      	add	r3, r4
 800eec2:	494b      	ldr	r1, [pc, #300]	; (800eff0 <__ieee754_powf+0x570>)
 800eec4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800eec8:	3a7f      	subs	r2, #127	; 0x7f
 800eeca:	4111      	asrs	r1, r2
 800eecc:	ea23 0101 	bic.w	r1, r3, r1
 800eed0:	ee07 1a10 	vmov	s14, r1
 800eed4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800eed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800eedc:	f1c2 0217 	rsb	r2, r2, #23
 800eee0:	4110      	asrs	r0, r2
 800eee2:	2c00      	cmp	r4, #0
 800eee4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eee8:	bfb8      	it	lt
 800eeea:	4240      	neglt	r0, r0
 800eeec:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800eef0:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800eff4 <__ieee754_powf+0x574>
 800eef4:	eddf 6a40 	vldr	s13, [pc, #256]	; 800eff8 <__ieee754_powf+0x578>
 800eef8:	ee17 3a10 	vmov	r3, s14
 800eefc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ef00:	f023 030f 	bic.w	r3, r3, #15
 800ef04:	ee07 3a10 	vmov	s14, r3
 800ef08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef0c:	ee27 0a00 	vmul.f32	s0, s14, s0
 800ef10:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ef14:	eddf 7a39 	vldr	s15, [pc, #228]	; 800effc <__ieee754_powf+0x57c>
 800ef18:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800ef1c:	eef0 7a40 	vmov.f32	s15, s0
 800ef20:	eee7 7a26 	vfma.f32	s15, s14, s13
 800ef24:	eeb0 6a67 	vmov.f32	s12, s15
 800ef28:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ef2c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ef30:	ee30 0a46 	vsub.f32	s0, s0, s12
 800ef34:	eddf 6a32 	vldr	s13, [pc, #200]	; 800f000 <__ieee754_powf+0x580>
 800ef38:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800f004 <__ieee754_powf+0x584>
 800ef3c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800ef40:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800f008 <__ieee754_powf+0x588>
 800ef44:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ef48:	eddf 6a30 	vldr	s13, [pc, #192]	; 800f00c <__ieee754_powf+0x58c>
 800ef4c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ef50:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800f010 <__ieee754_powf+0x590>
 800ef54:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ef58:	eef0 6a67 	vmov.f32	s13, s15
 800ef5c:	eee6 6a47 	vfms.f32	s13, s12, s14
 800ef60:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ef64:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800ef68:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800ef6c:	eea7 0a80 	vfma.f32	s0, s15, s0
 800ef70:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ef74:	ee37 0a40 	vsub.f32	s0, s14, s0
 800ef78:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ef7c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ef80:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ef84:	ee10 3a10 	vmov	r3, s0
 800ef88:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ef8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ef90:	da1f      	bge.n	800efd2 <__ieee754_powf+0x552>
 800ef92:	f000 f87d 	bl	800f090 <scalbnf>
 800ef96:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ef9a:	e589      	b.n	800eab0 <__ieee754_powf+0x30>
 800ef9c:	4a1d      	ldr	r2, [pc, #116]	; (800f014 <__ieee754_powf+0x594>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	dd07      	ble.n	800efb2 <__ieee754_powf+0x532>
 800efa2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800efa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efaa:	bf4c      	ite	mi
 800efac:	2001      	movmi	r0, #1
 800efae:	2000      	movpl	r0, #0
 800efb0:	e61f      	b.n	800ebf2 <__ieee754_powf+0x172>
 800efb2:	d108      	bne.n	800efc6 <__ieee754_powf+0x546>
 800efb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800efb8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800efbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efc0:	f6ff af78 	blt.w	800eeb4 <__ieee754_powf+0x434>
 800efc4:	e7ed      	b.n	800efa2 <__ieee754_powf+0x522>
 800efc6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800efca:	f73f af73 	bgt.w	800eeb4 <__ieee754_powf+0x434>
 800efce:	2000      	movs	r0, #0
 800efd0:	e78c      	b.n	800eeec <__ieee754_powf+0x46c>
 800efd2:	ee00 3a10 	vmov	s0, r3
 800efd6:	e7de      	b.n	800ef96 <__ieee754_powf+0x516>
 800efd8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800efdc:	e568      	b.n	800eab0 <__ieee754_powf+0x30>
 800efde:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f018 <__ieee754_powf+0x598>
 800efe2:	e565      	b.n	800eab0 <__ieee754_powf+0x30>
 800efe4:	eeb0 0a48 	vmov.f32	s0, s16
 800efe8:	e562      	b.n	800eab0 <__ieee754_powf+0x30>
 800efea:	2700      	movs	r7, #0
 800efec:	e58d      	b.n	800eb0a <__ieee754_powf+0x8a>
 800efee:	bf00      	nop
 800eff0:	007fffff 	.word	0x007fffff
 800eff4:	35bfbe8c 	.word	0x35bfbe8c
 800eff8:	3f317200 	.word	0x3f317200
 800effc:	3f317218 	.word	0x3f317218
 800f000:	b5ddea0e 	.word	0xb5ddea0e
 800f004:	3331bb4c 	.word	0x3331bb4c
 800f008:	388ab355 	.word	0x388ab355
 800f00c:	bb360b61 	.word	0xbb360b61
 800f010:	3e2aaaab 	.word	0x3e2aaaab
 800f014:	43160000 	.word	0x43160000
 800f018:	00000000 	.word	0x00000000

0800f01c <__ieee754_sqrtf>:
 800f01c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f020:	4770      	bx	lr

0800f022 <with_errnof>:
 800f022:	b513      	push	{r0, r1, r4, lr}
 800f024:	4604      	mov	r4, r0
 800f026:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f02a:	f7ff fc9f 	bl	800e96c <__errno>
 800f02e:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f032:	6004      	str	r4, [r0, #0]
 800f034:	b002      	add	sp, #8
 800f036:	bd10      	pop	{r4, pc}

0800f038 <xflowf>:
 800f038:	b130      	cbz	r0, 800f048 <xflowf+0x10>
 800f03a:	eef1 7a40 	vneg.f32	s15, s0
 800f03e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f042:	2022      	movs	r0, #34	; 0x22
 800f044:	f7ff bfed 	b.w	800f022 <with_errnof>
 800f048:	eef0 7a40 	vmov.f32	s15, s0
 800f04c:	e7f7      	b.n	800f03e <xflowf+0x6>
	...

0800f050 <__math_uflowf>:
 800f050:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f058 <__math_uflowf+0x8>
 800f054:	f7ff bff0 	b.w	800f038 <xflowf>
 800f058:	10000000 	.word	0x10000000

0800f05c <__math_oflowf>:
 800f05c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f064 <__math_oflowf+0x8>
 800f060:	f7ff bfea 	b.w	800f038 <xflowf>
 800f064:	70000000 	.word	0x70000000

0800f068 <fabsf>:
 800f068:	ee10 3a10 	vmov	r3, s0
 800f06c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f070:	ee00 3a10 	vmov	s0, r3
 800f074:	4770      	bx	lr

0800f076 <finitef>:
 800f076:	b082      	sub	sp, #8
 800f078:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f07c:	9801      	ldr	r0, [sp, #4]
 800f07e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f082:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800f086:	bfac      	ite	ge
 800f088:	2000      	movge	r0, #0
 800f08a:	2001      	movlt	r0, #1
 800f08c:	b002      	add	sp, #8
 800f08e:	4770      	bx	lr

0800f090 <scalbnf>:
 800f090:	ee10 3a10 	vmov	r3, s0
 800f094:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f098:	d025      	beq.n	800f0e6 <scalbnf+0x56>
 800f09a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f09e:	d302      	bcc.n	800f0a6 <scalbnf+0x16>
 800f0a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f0a4:	4770      	bx	lr
 800f0a6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800f0aa:	d122      	bne.n	800f0f2 <scalbnf+0x62>
 800f0ac:	4b2a      	ldr	r3, [pc, #168]	; (800f158 <scalbnf+0xc8>)
 800f0ae:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f15c <scalbnf+0xcc>
 800f0b2:	4298      	cmp	r0, r3
 800f0b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f0b8:	db16      	blt.n	800f0e8 <scalbnf+0x58>
 800f0ba:	ee10 3a10 	vmov	r3, s0
 800f0be:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f0c2:	3a19      	subs	r2, #25
 800f0c4:	4402      	add	r2, r0
 800f0c6:	2afe      	cmp	r2, #254	; 0xfe
 800f0c8:	dd15      	ble.n	800f0f6 <scalbnf+0x66>
 800f0ca:	ee10 3a10 	vmov	r3, s0
 800f0ce:	eddf 7a24 	vldr	s15, [pc, #144]	; 800f160 <scalbnf+0xd0>
 800f0d2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800f164 <scalbnf+0xd4>
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	eeb0 7a67 	vmov.f32	s14, s15
 800f0dc:	bfb8      	it	lt
 800f0de:	eef0 7a66 	vmovlt.f32	s15, s13
 800f0e2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800f0e6:	4770      	bx	lr
 800f0e8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f168 <scalbnf+0xd8>
 800f0ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f0f0:	4770      	bx	lr
 800f0f2:	0dd2      	lsrs	r2, r2, #23
 800f0f4:	e7e6      	b.n	800f0c4 <scalbnf+0x34>
 800f0f6:	2a00      	cmp	r2, #0
 800f0f8:	dd06      	ble.n	800f108 <scalbnf+0x78>
 800f0fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f0fe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f102:	ee00 3a10 	vmov	s0, r3
 800f106:	4770      	bx	lr
 800f108:	f112 0f16 	cmn.w	r2, #22
 800f10c:	da1a      	bge.n	800f144 <scalbnf+0xb4>
 800f10e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f112:	4298      	cmp	r0, r3
 800f114:	ee10 3a10 	vmov	r3, s0
 800f118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f11c:	dd0a      	ble.n	800f134 <scalbnf+0xa4>
 800f11e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800f160 <scalbnf+0xd0>
 800f122:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800f164 <scalbnf+0xd4>
 800f126:	eef0 7a40 	vmov.f32	s15, s0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	bf18      	it	ne
 800f12e:	eeb0 0a47 	vmovne.f32	s0, s14
 800f132:	e7db      	b.n	800f0ec <scalbnf+0x5c>
 800f134:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800f168 <scalbnf+0xd8>
 800f138:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800f16c <scalbnf+0xdc>
 800f13c:	eef0 7a40 	vmov.f32	s15, s0
 800f140:	2b00      	cmp	r3, #0
 800f142:	e7f3      	b.n	800f12c <scalbnf+0x9c>
 800f144:	3219      	adds	r2, #25
 800f146:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f14a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f14e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f170 <scalbnf+0xe0>
 800f152:	ee07 3a10 	vmov	s14, r3
 800f156:	e7c4      	b.n	800f0e2 <scalbnf+0x52>
 800f158:	ffff3cb0 	.word	0xffff3cb0
 800f15c:	4c000000 	.word	0x4c000000
 800f160:	7149f2ca 	.word	0x7149f2ca
 800f164:	f149f2ca 	.word	0xf149f2ca
 800f168:	0da24260 	.word	0x0da24260
 800f16c:	8da24260 	.word	0x8da24260
 800f170:	33000000 	.word	0x33000000

0800f174 <_init>:
 800f174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f176:	bf00      	nop
 800f178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f17a:	bc08      	pop	{r3}
 800f17c:	469e      	mov	lr, r3
 800f17e:	4770      	bx	lr

0800f180 <_fini>:
 800f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f182:	bf00      	nop
 800f184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f186:	bc08      	pop	{r3}
 800f188:	469e      	mov	lr, r3
 800f18a:	4770      	bx	lr
