
flying_unit_diagnostic_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a17c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800a37c  0800a37c  0001a37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a40c  0800a40c  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800a40c  0800a40c  0001a40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a414  0800a414  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a414  0800a414  0001a414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a418  0800a418  0001a418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800a41c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000150  0800a56c  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  0800a56c  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b4cb  00000000  00000000  0002017e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049ee  00000000  00000000  0005b649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027a8  00000000  00000000  00060038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025d0  00000000  00000000  000627e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b240  00000000  00000000  00064db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024089  00000000  00000000  0008fff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010b8e4  00000000  00000000  000b4079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bf95d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad98  00000000  00000000  001bf9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a364 	.word	0x0800a364

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	0800a364 	.word	0x0800a364

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	; 0x30
 80005dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b7b      	ldr	r3, [pc, #492]	; (80007dc <MX_GPIO_Init+0x204>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a7a      	ldr	r2, [pc, #488]	; (80007dc <MX_GPIO_Init+0x204>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b78      	ldr	r3, [pc, #480]	; (80007dc <MX_GPIO_Init+0x204>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	61bb      	str	r3, [r7, #24]
 8000604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000606:	4b75      	ldr	r3, [pc, #468]	; (80007dc <MX_GPIO_Init+0x204>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a74      	ldr	r2, [pc, #464]	; (80007dc <MX_GPIO_Init+0x204>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b72      	ldr	r3, [pc, #456]	; (80007dc <MX_GPIO_Init+0x204>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b6f      	ldr	r3, [pc, #444]	; (80007dc <MX_GPIO_Init+0x204>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a6e      	ldr	r2, [pc, #440]	; (80007dc <MX_GPIO_Init+0x204>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b6c      	ldr	r3, [pc, #432]	; (80007dc <MX_GPIO_Init+0x204>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b69      	ldr	r3, [pc, #420]	; (80007dc <MX_GPIO_Init+0x204>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a68      	ldr	r2, [pc, #416]	; (80007dc <MX_GPIO_Init+0x204>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b66      	ldr	r3, [pc, #408]	; (80007dc <MX_GPIO_Init+0x204>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	4b63      	ldr	r3, [pc, #396]	; (80007dc <MX_GPIO_Init+0x204>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a62      	ldr	r2, [pc, #392]	; (80007dc <MX_GPIO_Init+0x204>)
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b60      	ldr	r3, [pc, #384]	; (80007dc <MX_GPIO_Init+0x204>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0308 	and.w	r3, r3, #8
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000666:	4b5d      	ldr	r3, [pc, #372]	; (80007dc <MX_GPIO_Init+0x204>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a5c      	ldr	r2, [pc, #368]	; (80007dc <MX_GPIO_Init+0x204>)
 800066c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b5a      	ldr	r3, [pc, #360]	; (80007dc <MX_GPIO_Init+0x204>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f244 0181 	movw	r1, #16513	; 0x4081
 8000684:	4856      	ldr	r0, [pc, #344]	; (80007e0 <MX_GPIO_Init+0x208>)
 8000686:	f005 fcaf 	bl	8005fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	4855      	ldr	r0, [pc, #340]	; (80007e4 <MX_GPIO_Init+0x20c>)
 8000690:	f005 fcaa 	bl	8005fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800069a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800069e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	484f      	ldr	r0, [pc, #316]	; (80007e8 <MX_GPIO_Init+0x210>)
 80006ac:	f005 f9cc 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006b0:	2332      	movs	r3, #50	; 0x32
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c0:	230b      	movs	r3, #11
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4847      	ldr	r0, [pc, #284]	; (80007e8 <MX_GPIO_Init+0x210>)
 80006cc:	f005 f9bc 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006d0:	2386      	movs	r3, #134	; 0x86
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e0:	230b      	movs	r3, #11
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4840      	ldr	r0, [pc, #256]	; (80007ec <MX_GPIO_Init+0x214>)
 80006ec:	f005 f9ac 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	4835      	ldr	r0, [pc, #212]	; (80007e0 <MX_GPIO_Init+0x208>)
 800070a:	f005 f99d 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800070e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000720:	230b      	movs	r3, #11
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	482d      	ldr	r0, [pc, #180]	; (80007e0 <MX_GPIO_Init+0x208>)
 800072c:	f005 f98c 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000730:	2340      	movs	r3, #64	; 0x40
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4827      	ldr	r0, [pc, #156]	; (80007e4 <MX_GPIO_Init+0x20c>)
 8000748:	f005 f97e 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	4821      	ldr	r0, [pc, #132]	; (80007e4 <MX_GPIO_Init+0x20c>)
 8000760:	f005 f972 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000764:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000776:	230a      	movs	r3, #10
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	481a      	ldr	r0, [pc, #104]	; (80007ec <MX_GPIO_Init+0x214>)
 8000782:	f005 f961 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	4814      	ldr	r0, [pc, #80]	; (80007ec <MX_GPIO_Init+0x214>)
 800079c:	f005 f954 	bl	8005a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b2:	230b      	movs	r3, #11
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <MX_GPIO_Init+0x20c>)
 80007be:	f005 f943 	bl	8005a48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2028      	movs	r0, #40	; 0x28
 80007c8:	f005 f847 	bl	800585a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007cc:	2028      	movs	r0, #40	; 0x28
 80007ce:	f005 f860 	bl	8005892 <HAL_NVIC_EnableIRQ>

}
 80007d2:	bf00      	nop
 80007d4:	3730      	adds	r7, #48	; 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40021800 	.word	0x40021800
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020000 	.word	0x40020000

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0d4      	sub	sp, #336	; 0x150
 80007f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f6:	f004 fed3 	bl	80055a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fa:	f000 f833 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fe:	f7ff feeb 	bl	80005d8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000802:	f000 fbb5 	bl	8000f70 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000806:	f000 fc27 	bl	8001058 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  MX_MEMS_Init();
 800080a:	f000 f8a2 	bl	8000952 <MX_MEMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Accelero_Get_Values(0, &acceleration);
 800080e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000812:	4619      	mov	r1, r3
 8000814:	2000      	movs	r0, #0
 8000816:	f000 f8db 	bl	80009d0 <Accelero_Get_Values>

	  databufforlentgh = sprintf(dataOut, "ACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r", 0,
 800081a:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800081e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000822:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8000826:	1d38      	adds	r0, r7, #4
 8000828:	9203      	str	r2, [sp, #12]
 800082a:	2200      	movs	r2, #0
 800082c:	9202      	str	r2, [sp, #8]
 800082e:	9301      	str	r3, [sp, #4]
 8000830:	2300      	movs	r3, #0
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	460b      	mov	r3, r1
 8000836:	2200      	movs	r2, #0
 8000838:	4908      	ldr	r1, [pc, #32]	; (800085c <main+0x6c>)
 800083a:	f009 f965 	bl	8009b08 <siprintf>
 800083e:	4603      	mov	r3, r0
 8000840:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	               	   	   	   	   	acceleration.x, 0, acceleration.y, 0, acceleration.z);

	  HAL_UART_Transmit_IT(&huart3, (uint8_t*)dataOut, databufforlentgh);
 8000844:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4619      	mov	r1, r3
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <main+0x70>)
 800084e:	f008 f841 	bl	80088d4 <HAL_UART_Transmit_IT>

	  HAL_Delay(2000);
 8000852:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000856:	f004 ff01 	bl	800565c <HAL_Delay>
  {
 800085a:	e7d8      	b.n	800080e <main+0x1e>
 800085c:	0800a37c 	.word	0x0800a37c
 8000860:	200002e8 	.word	0x200002e8

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2234      	movs	r2, #52	; 0x34
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f009 f940 	bl	8009af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000888:	f006 fa46 	bl	8006d18 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <SystemClock_Config+0xdc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a2b      	ldr	r2, [pc, #172]	; (8000940 <SystemClock_Config+0xdc>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <SystemClock_Config+0xdc>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <SystemClock_Config+0xe0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008ac:	4a25      	ldr	r2, [pc, #148]	; (8000944 <SystemClock_Config+0xe0>)
 80008ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b2:	6013      	str	r3, [r2, #0]
 80008b4:	4b23      	ldr	r3, [pc, #140]	; (8000944 <SystemClock_Config+0xe0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008d4:	2304      	movs	r3, #4
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008d8:	2360      	movs	r3, #96	; 0x60
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008dc:	2302      	movs	r3, #2
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e0:	2304      	movs	r3, #4
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4618      	mov	r0, r3
 80008ee:	f006 fa73 	bl	8006dd8 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008f8:	f000 f826 	bl	8000948 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008fc:	f006 fa1c 	bl	8006d38 <HAL_PWREx_EnableOverDrive>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000906:	f000 f81f 	bl	8000948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	230f      	movs	r3, #15
 800090c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090e:	2302      	movs	r3, #2
 8000910:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	2103      	movs	r1, #3
 8000926:	4618      	mov	r0, r3
 8000928:	f006 fd04 	bl	8007334 <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000932:	f000 f809 	bl	8000948 <Error_Handler>
  }
}
 8000936:	bf00      	nop
 8000938:	3750      	adds	r7, #80	; 0x50
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40007000 	.word	0x40007000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>

08000952 <MX_MEMS_Init>:
//void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
//
//}

void MX_MEMS_Init(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS02A1_DataLogTerminal_Init();
 8000956:	f000 f803 	bl	8000960 <MX_IKS02A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <MX_IKS02A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS02A1_DataLogTerminal_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8000966:	2000      	movs	r0, #0
 8000968:	f000 f8aa 	bl	8000ac0 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800096c:	2101      	movs	r1, #1
 800096e:	2000      	movs	r0, #0
 8000970:	f000 f8c0 	bl	8000af4 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8000974:	2000      	movs	r0, #0
 8000976:	f000 f911 	bl	8000b9c <BSP_PB_GetState>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	bf0c      	ite	eq
 8000980:	2301      	moveq	r3, #1
 8000982:	2300      	movne	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	461a      	mov	r2, r3
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_IKS02A1_DataLogTerminal_Init+0x4c>)
 800098a:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */


  IKS02A1_MOTION_SENSOR_Init(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO | MOTION_GYRO);
 800098c:	2103      	movs	r1, #3
 800098e:	2000      	movs	r0, #0
 8000990:	f004 faba 	bl	8004f08 <IKS02A1_MOTION_SENSOR_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2DLPC_0, MOTION_ACCELERO);
 8000994:	2102      	movs	r1, #2
 8000996:	2001      	movs	r0, #1
 8000998:	f004 fab6 	bl	8004f08 <IKS02A1_MOTION_SENSOR_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2MDC_0, MOTION_MAGNETO);
 800099c:	2104      	movs	r1, #4
 800099e:	2002      	movs	r0, #2
 80009a0:	f004 fab2 	bl	8004f08 <IKS02A1_MOTION_SENSOR_Init>


}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000170 	.word	0x20000170

080009b0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <BSP_PB_Callback+0x1c>)
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	2000016c 	.word	0x2000016c

080009d0 <Accelero_Get_Values>:



}

void Accelero_Get_Values(u_int32_t Instance, IKS02A1_MOTION_SENSOR_Axes_t *acceleration){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]

	IKS02A1_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, acceleration);
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	2102      	movs	r1, #2
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f004 fb8e 	bl	8005100 <IKS02A1_MOTION_SENSOR_GetAxes>

}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_MspInit+0x44>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <HAL_MspInit+0x44>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_MspInit+0x44>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_MspInit+0x44>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_MspInit+0x44>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_MspInit+0x44>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f004 fdcc 	bl	800561c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <TIM3_IRQHandler+0x10>)
 8000a8e:	f007 fad2 	bl	8008036 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000029c 	.word	0x2000029c

08000a9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <USART3_IRQHandler+0x10>)
 8000aa2:	f007 ff85 	bl	80089b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200002e8 	.word	0x200002e8

08000ab0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000ab4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ab8:	f005 fab0 	bl	800601c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <BSP_LED_Init+0x20>)
 8000ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad2:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	0800a3ac 	.word	0x0800a3ac

08000ae4 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	460a      	mov	r2, r1
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	4613      	mov	r3, r2
 8000b02:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4a1f      	ldr	r2, [pc, #124]	; (8000b88 <BSP_PB_Init+0x94>)
 8000b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b10:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8000b12:	79bb      	ldrb	r3, [r7, #6]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d132      	bne.n	8000b7e <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <BSP_PB_Init+0x98>)
 8000b1e:	441a      	add	r2, r3
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	491b      	ldr	r1, [pc, #108]	; (8000b90 <BSP_PB_Init+0x9c>)
 8000b24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	f004 ff77 	bl	8005a1e <HAL_EXTI_GetHandle>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000b36:	f06f 0303 	mvn.w	r3, #3
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e01f      	b.n	8000b7e <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <BSP_PB_Init+0x98>)
 8000b44:	1898      	adds	r0, r3, r2
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <BSP_PB_Init+0xa0>)
 8000b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	2100      	movs	r1, #0
 8000b52:	f004 ff4a 	bl	80059ea <HAL_EXTI_RegisterCallback>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000b5c:	f06f 0303 	mvn.w	r3, #3
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	e00c      	b.n	8000b7e <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000b64:	2028      	movs	r0, #40	; 0x28
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <BSP_PB_Init+0xa4>)
 8000b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4619      	mov	r1, r3
 8000b72:	f004 fe72 	bl	800585a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000b76:	2328      	movs	r3, #40	; 0x28
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f004 fe8a 	bl	8005892 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	0800a3b0 	.word	0x0800a3b0
 8000b8c:	20000004 	.word	0x20000004
 8000b90:	0800a3b4 	.word	0x0800a3b4
 8000b94:	0800a3b8 	.word	0x0800a3b8
 8000b98:	0800a3bc 	.word	0x0800a3bc

08000b9c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <BSP_PB_GetState+0x34>)
 8000baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f005 f9ff 	bl	8005fb8 <HAL_GPIO_ReadPin>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	bf0c      	ite	eq
 8000bc0:	2301      	moveq	r3, #1
 8000bc2:	2300      	movne	r3, #0
 8000bc4:	b2db      	uxtb	r3, r3
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000000 	.word	0x20000000

08000bd4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fee9 	bl	80009b0 <BSP_PB_Callback>
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <BSP_I2C1_Init+0x70>)
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <BSP_I2C1_Init+0x74>)
 8000bfe:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <BSP_I2C1_Init+0x78>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	4918      	ldr	r1, [pc, #96]	; (8000c68 <BSP_I2C1_Init+0x78>)
 8000c08:	600a      	str	r2, [r1, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d122      	bne.n	8000c54 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000c0e:	4814      	ldr	r0, [pc, #80]	; (8000c60 <BSP_I2C1_Init+0x70>)
 8000c10:	f005 fd2a 	bl	8006668 <HAL_I2C_GetState>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d11c      	bne.n	8000c54 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000c1a:	4811      	ldr	r0, [pc, #68]	; (8000c60 <BSP_I2C1_Init+0x70>)
 8000c1c:	f000 f8fe 	bl	8000e1c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d116      	bne.n	8000c54 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000c26:	480e      	ldr	r0, [pc, #56]	; (8000c60 <BSP_I2C1_Init+0x70>)
 8000c28:	f000 f8b4 	bl	8000d94 <MX_I2C1_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000c32:	f06f 0307 	mvn.w	r3, #7
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	e00c      	b.n	8000c54 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4808      	ldr	r0, [pc, #32]	; (8000c60 <BSP_I2C1_Init+0x70>)
 8000c3e:	f005 ffd3 	bl	8006be8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000c48:	f06f 0307 	mvn.w	r3, #7
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	e001      	b.n	8000c54 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000c54:	687b      	ldr	r3, [r7, #4]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000250 	.word	0x20000250
 8000c64:	40005400 	.word	0x40005400
 8000c68:	20000174 	.word	0x20000174

08000c6c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <BSP_I2C1_DeInit+0x48>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d014      	beq.n	8000ca8 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <BSP_I2C1_DeInit+0x48>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <BSP_I2C1_DeInit+0x48>)
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <BSP_I2C1_DeInit+0x48>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10b      	bne.n	8000ca8 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <BSP_I2C1_DeInit+0x4c>)
 8000c92:	f000 f909 	bl	8000ea8 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000c96:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <BSP_I2C1_DeInit+0x4c>)
 8000c98:	f005 fa74 	bl	8006184 <HAL_I2C_DeInit>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d002      	beq.n	8000ca8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000ca2:	f06f 0307 	mvn.w	r3, #7
 8000ca6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000ca8:	687b      	ldr	r3, [r7, #4]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000174 	.word	0x20000174
 8000cb8:	20000250 	.word	0x20000250

08000cbc <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af04      	add	r7, sp, #16
 8000cc2:	60ba      	str	r2, [r7, #8]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	81fb      	strh	r3, [r7, #14]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	81bb      	strh	r3, [r7, #12]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000cd6:	89ba      	ldrh	r2, [r7, #12]
 8000cd8:	89f9      	ldrh	r1, [r7, #14]
 8000cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cde:	9302      	str	r3, [sp, #8]
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	9301      	str	r3, [sp, #4]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	480c      	ldr	r0, [pc, #48]	; (8000d1c <BSP_I2C1_WriteReg+0x60>)
 8000cec:	f005 fa8e 	bl	800620c <HAL_I2C_Mem_Write>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d00c      	beq.n	8000d10 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000cf6:	4809      	ldr	r0, [pc, #36]	; (8000d1c <BSP_I2C1_WriteReg+0x60>)
 8000cf8:	f005 fcc4 	bl	8006684 <HAL_I2C_GetError>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	d103      	bne.n	8000d0a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d02:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	e002      	b.n	8000d10 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000d0a:	f06f 0303 	mvn.w	r3, #3
 8000d0e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d10:	697b      	ldr	r3, [r7, #20]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000250 	.word	0x20000250

08000d20 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af04      	add	r7, sp, #16
 8000d26:	60ba      	str	r2, [r7, #8]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	81fb      	strh	r3, [r7, #14]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	81bb      	strh	r3, [r7, #12]
 8000d32:	4613      	mov	r3, r2
 8000d34:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000d3a:	89ba      	ldrh	r2, [r7, #12]
 8000d3c:	89f9      	ldrh	r1, [r7, #14]
 8000d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d42:	9302      	str	r3, [sp, #8]
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	480c      	ldr	r0, [pc, #48]	; (8000d80 <BSP_I2C1_ReadReg+0x60>)
 8000d50:	f005 fb70 	bl	8006434 <HAL_I2C_Mem_Read>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00c      	beq.n	8000d74 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000d5a:	4809      	ldr	r0, [pc, #36]	; (8000d80 <BSP_I2C1_ReadReg+0x60>)
 8000d5c:	f005 fc92 	bl	8006684 <HAL_I2C_GetError>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	d103      	bne.n	8000d6e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000d66:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e002      	b.n	8000d74 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000d6e:	f06f 0303 	mvn.w	r3, #3
 8000d72:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8000d74:	697b      	ldr	r3, [r7, #20]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000250 	.word	0x20000250

08000d84 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000d88:	f004 fc5c 	bl	8005644 <HAL_GetTick>
 8000d8c:	4603      	mov	r3, r0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <MX_I2C1_Init+0x80>)
 8000da4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x2010091A;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <MX_I2C1_Init+0x84>)
 8000daa:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f005 f944 	bl	8006064 <HAL_I2C_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de6:	2100      	movs	r1, #0
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f005 fefd 	bl	8006be8 <HAL_I2CEx_ConfigAnalogFilter>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f005 ff3f 	bl	8006c7e <HAL_I2CEx_ConfigDigitalFilter>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40005400 	.word	0x40005400
 8000e18:	2010091a 	.word	0x2010091a

08000e1c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <I2C1_MspInit+0x84>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a1d      	ldr	r2, [pc, #116]	; (8000ea0 <I2C1_MspInit+0x84>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <I2C1_MspInit+0x84>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f003 0302 	and.w	r3, r3, #2
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e42:	2312      	movs	r3, #18
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <I2C1_MspInit+0x88>)
 8000e5a:	f004 fdf5 	bl	8005a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e64:	2312      	movs	r3, #18
 8000e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000e70:	2304      	movs	r3, #4
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <I2C1_MspInit+0x88>)
 8000e7c:	f004 fde4 	bl	8005a48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e80:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <I2C1_MspInit+0x84>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <I2C1_MspInit+0x84>)
 8000e86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <I2C1_MspInit+0x84>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <I2C1_MspDeInit+0x30>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <I2C1_MspDeInit+0x30>)
 8000eb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec0:	4806      	ldr	r0, [pc, #24]	; (8000edc <I2C1_MspDeInit+0x34>)
 8000ec2:	f004 ff6d 	bl	8005da0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000ec6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <I2C1_MspDeInit+0x34>)
 8000ecc:	f004 ff68 	bl	8005da0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020400 	.word	0x40020400

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f008 fdc8 	bl	8009aa4 <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20080000 	.word	0x20080000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	20000178 	.word	0x20000178
 8000f48:	20000390 	.word	0x20000390

08000f4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_TIM3_Init+0x94>)
 8000f90:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <MX_TIM3_Init+0x98>)
 8000f92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <MX_TIM3_Init+0x94>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_TIM3_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <MX_TIM3_Init+0x94>)
 8000fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <MX_TIM3_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_TIM3_Init+0x94>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <MX_TIM3_Init+0x94>)
 8000fb6:	f006 ffe7 	bl	8007f88 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000fc0:	f7ff fcc2 	bl	8000948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_TIM3_Init+0x94>)
 8000fd2:	f007 f94f 	bl	8008274 <HAL_TIM_ConfigClockSource>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000fdc:	f7ff fcb4 	bl	8000948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_TIM3_Init+0x94>)
 8000fee:	f007 fb77 	bl	80086e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ff8:	f7ff fca6 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000029c 	.word	0x2000029c
 8001008:	40000400 	.word	0x40000400

0800100c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <HAL_TIM_Base_MspInit+0x44>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d113      	bne.n	8001046 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_TIM_Base_MspInit+0x48>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <HAL_TIM_Base_MspInit+0x48>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_TIM_Base_MspInit+0x48>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	201d      	movs	r0, #29
 800103c:	f004 fc0d 	bl	800585a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001040:	201d      	movs	r0, #29
 8001042:	f004 fc26 	bl	8005892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40000400 	.word	0x40000400
 8001054:	40023800 	.word	0x40023800

08001058 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 800105e:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <MX_USART3_UART_Init+0x5c>)
 8001060:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 8001064:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001068:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 800109c:	f007 fbcc 	bl	8008838 <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010a6:	f7ff fc4f 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200002e8 	.word	0x200002e8
 80010b4:	40004800 	.word	0x40004800

080010b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0ae      	sub	sp, #184	; 0xb8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2290      	movs	r2, #144	; 0x90
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f008 fd0d 	bl	8009af8 <memset>
  if(uartHandle->Instance==USART3)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_UART_MspInit+0xc4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d144      	bne.n	8001172 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 fb1e 	bl	8007738 <HAL_RCCEx_PeriphCLKConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001102:	f7ff fc21 	bl	8000948 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <HAL_UART_MspInit+0xc8>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <HAL_UART_MspInit+0xc8>)
 800110c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <HAL_UART_MspInit+0xc8>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_UART_MspInit+0xc8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <HAL_UART_MspInit+0xc8>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_UART_MspInit+0xc8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001136:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001150:	2307      	movs	r3, #7
 8001152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001156:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800115a:	4619      	mov	r1, r3
 800115c:	4809      	ldr	r0, [pc, #36]	; (8001184 <HAL_UART_MspInit+0xcc>)
 800115e:	f004 fc73 	bl	8005a48 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	2027      	movs	r0, #39	; 0x27
 8001168:	f004 fb77 	bl	800585a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800116c:	2027      	movs	r0, #39	; 0x27
 800116e:	f004 fb90 	bl	8005892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001172:	bf00      	nop
 8001174:	37b8      	adds	r7, #184	; 0xb8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40004800 	.word	0x40004800
 8001180:	40023800 	.word	0x40023800
 8001184:	40020c00 	.word	0x40020c00

08001188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800118e:	490e      	ldr	r1, [pc, #56]	; (80011c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a4:	4c0b      	ldr	r4, [pc, #44]	; (80011d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011b2:	f7ff fecb 	bl	8000f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f008 fc7b 	bl	8009ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ba:	f7ff fb19 	bl	80007f0 <main>
  bx  lr    
 80011be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 80011cc:	0800a41c 	.word	0x0800a41c
  ldr r2, =_sbss
 80011d0:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80011d4:	2000038c 	.word	0x2000038c

080011d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC_IRQHandler>
	...

080011dc <IIS2DLPC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_RegisterBusIO(IIS2DLPC_Object_t *pObj, IIS2DLPC_IO_t *pIO)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d103      	bne.n	80011f8 <IIS2DLPC_RegisterBusIO+0x1c>
  {
    ret = IIS2DLPC_ERROR;
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	e04d      	b.n	8001294 <IIS2DLPC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	7b1a      	ldrb	r2, [r3, #12]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	695a      	ldr	r2, [r3, #20]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	699a      	ldr	r2, [r3, #24]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <IIS2DLPC_RegisterBusIO+0xc4>)
 8001234:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <IIS2DLPC_RegisterBusIO+0xc8>)
 800123a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d103      	bne.n	8001252 <IIS2DLPC_RegisterBusIO+0x76>
    {
      ret = IIS2DLPC_ERROR;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	e020      	b.n	8001294 <IIS2DLPC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != IIS2DLPC_OK)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <IIS2DLPC_RegisterBusIO+0x8a>
    {
      ret = IIS2DLPC_ERROR;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e016      	b.n	8001294 <IIS2DLPC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == IIS2DLPC_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d112      	bne.n	8001294 <IIS2DLPC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10d      	bne.n	8001294 <IIS2DLPC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001278:	2305      	movs	r3, #5
 800127a:	72fb      	strb	r3, [r7, #11]

          if (IIS2DLPC_Write_Reg(pObj, IIS2DLPC_CTRL2, data) != IIS2DLPC_OK)
 800127c:	7afb      	ldrb	r3, [r7, #11]
 800127e:	461a      	mov	r2, r3
 8001280:	2121      	movs	r1, #33	; 0x21
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 fd67 	bl	8001d56 <IIS2DLPC_Write_Reg>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <IIS2DLPC_RegisterBusIO+0xb8>
          {
            ret = IIS2DLPC_ERROR;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001294:	68fb      	ldr	r3, [r7, #12]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	080020e9 	.word	0x080020e9
 80012a4:	0800211f 	.word	0x0800211f

080012a8 <IIS2DLPC_Init>:
 * @brief  Initialize the IIS2DLPC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_Init(IIS2DLPC_Object_t *pObj)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (iis2dlpc_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	331c      	adds	r3, #28
 80012b4:	2101      	movs	r1, #1
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fa52 	bl	8002760 <iis2dlpc_auto_increment_set>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <IIS2DLPC_Init+0x20>
  {
    return IIS2DLPC_ERROR;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	e04b      	b.n	8001360 <IIS2DLPC_Init+0xb8>
  }

  /* Enable BDU */
  if (iis2dlpc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	331c      	adds	r3, #28
 80012cc:	2101      	movs	r1, #1
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 f966 	bl	80025a0 <iis2dlpc_block_data_update_set>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <IIS2DLPC_Init+0x38>
  {
    return IIS2DLPC_ERROR;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e03f      	b.n	8001360 <IIS2DLPC_Init+0xb8>
  }

  /* FIFO mode selection */
  if (iis2dlpc_fifo_mode_set(&(pObj->Ctx), IIS2DLPC_BYPASS_MODE) != IIS2DLPC_OK)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	331c      	adds	r3, #28
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 fa60 	bl	80027ac <iis2dlpc_fifo_mode_set>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <IIS2DLPC_Init+0x50>
  {
    return IIS2DLPC_ERROR;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	e033      	b.n	8001360 <IIS2DLPC_Init+0xb8>
  }

  /* Power mode selection */
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), IIS2DLPC_HIGH_PERFORMANCE) != IIS2DLPC_OK)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	331c      	adds	r3, #28
 80012fc:	2104      	movs	r1, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 ff58 	bl	80021b4 <iis2dlpc_power_mode_set>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <IIS2DLPC_Init+0x68>
  {
    return IIS2DLPC_ERROR;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e027      	b.n	8001360 <IIS2DLPC_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a15      	ldr	r2, [pc, #84]	; (8001368 <IIS2DLPC_Init+0xc0>)
 8001314:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	331c      	adds	r3, #28
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f001 f849 	bl	80023c4 <iis2dlpc_data_rate_set>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <IIS2DLPC_Init+0x96>
  {
    return IIS2DLPC_ERROR;
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	e010      	b.n	8001360 <IIS2DLPC_Init+0xb8>
  }

  /* Full scale selection. */
  if (iis2dlpc_full_scale_set(&(pObj->Ctx), IIS2DLPC_2g) != IIS2DLPC_OK)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	331c      	adds	r3, #28
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f001 f951 	bl	80025ec <iis2dlpc_full_scale_set>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <IIS2DLPC_Init+0xae>
  {
    return IIS2DLPC_ERROR;
 8001350:	f04f 33ff 	mov.w	r3, #4294967295
 8001354:	e004      	b.n	8001360 <IIS2DLPC_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2DLPC_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	42c80000 	.word	0x42c80000

0800136c <IIS2DLPC_DeInit>:
 * @brief  Deinitialize the IIS2DLPC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_DeInit(IIS2DLPC_Object_t *pObj)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2DLPC_ACC_Disable(pObj) != IIS2DLPC_OK)
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f888 	bl	800148a <IIS2DLPC_ACC_Disable>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <IIS2DLPC_DeInit+0x1a>
  {
    return IIS2DLPC_ERROR;
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	e010      	b.n	80013a8 <IIS2DLPC_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2DLPC_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <IIS2DLPC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ReadID(IIS2DLPC_Object_t *pObj, uint8_t *Id)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  if (iis2dlpc_device_id_get(&(pObj->Ctx), Id) != IIS2DLPC_OK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	331c      	adds	r3, #28
 80013be:	6839      	ldr	r1, [r7, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 f9bc 	bl	800273e <iis2dlpc_device_id_get>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <IIS2DLPC_ReadID+0x22>
  {
    return IIS2DLPC_ERROR;
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	e000      	b.n	80013d4 <IIS2DLPC_ReadID+0x24>
  }

  return IIS2DLPC_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <IIS2DLPC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2DLPC sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_GetCapabilities(IIS2DLPC_Object_t *pObj, IIS2DLPC_Capabilities_t *Capabilities)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	2200      	movs	r2, #0
 80013f6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	2200      	movs	r2, #0
 80013fc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2210      	movs	r2, #16
 8001408:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	4a06      	ldr	r2, [pc, #24]	; (8001434 <IIS2DLPC_GetCapabilities+0x58>)
 800141c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
  return IIS2DLPC_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	44c80000 	.word	0x44c80000

08001438 <IIS2DLPC_ACC_Enable>:
 * @brief  Enable the IIS2DLPC accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_Enable(IIS2DLPC_Object_t *pObj)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <IIS2DLPC_ACC_Enable+0x16>
  {
    return IIS2DLPC_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	e019      	b.n	8001482 <IIS2DLPC_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != IIS2DLPC_OK)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001460:	461a      	mov	r2, r3
 8001462:	eeb0 0a67 	vmov.f32	s0, s15
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 fc90 	bl	8001d8c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d002      	beq.n	8001478 <IIS2DLPC_ACC_Enable+0x40>
  {
    return IIS2DLPC_ERROR;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	e004      	b.n	8001482 <IIS2DLPC_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2DLPC_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <IIS2DLPC_ACC_Disable>:
 * @brief  Disable the IIS2DLPC accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_Disable(IIS2DLPC_Object_t *pObj)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <IIS2DLPC_ACC_Disable+0x16>
  {
    return IIS2DLPC_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	e010      	b.n	80014c2 <IIS2DLPC_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	331c      	adds	r3, #28
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 ff8c 	bl	80023c4 <iis2dlpc_data_rate_set>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <IIS2DLPC_ACC_Disable+0x2e>
  {
    return IIS2DLPC_ERROR;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	e004      	b.n	80014c2 <IIS2DLPC_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2DLPC_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <IIS2DLPC_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetSensitivity(IIS2DLPC_Object_t *pObj, float *Sensitivity)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  iis2dlpc_fs_t full_scale;
  iis2dlpc_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DLPC_OK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	331c      	adds	r3, #28
 80014de:	f107 020b 	add.w	r2, r7, #11
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 f8a7 	bl	8002638 <iis2dlpc_full_scale_get>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <IIS2DLPC_ACC_GetSensitivity+0x2a>
  {
    return IIS2DLPC_ERROR;
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	e0a0      	b.n	8001638 <IIS2DLPC_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	331c      	adds	r3, #28
 80014fa:	f107 020a 	add.w	r2, r7, #10
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fea5 	bl	8002250 <iis2dlpc_power_mode_get>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <IIS2DLPC_ACC_GetSensitivity+0x46>
  {
    return IIS2DLPC_ERROR;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	e092      	b.n	8001638 <IIS2DLPC_ACC_GetSensitivity+0x16c>
  }

  switch(mode)
 8001512:	7abb      	ldrb	r3, [r7, #10]
 8001514:	2b1b      	cmp	r3, #27
 8001516:	f200 8087 	bhi.w	8001628 <IIS2DLPC_ACC_GetSensitivity+0x15c>
 800151a:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <IIS2DLPC_ACC_GetSensitivity+0x54>)
 800151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001520:	08001591 	.word	0x08001591
 8001524:	080015dd 	.word	0x080015dd
 8001528:	080015dd 	.word	0x080015dd
 800152c:	080015dd 	.word	0x080015dd
 8001530:	080015dd 	.word	0x080015dd
 8001534:	08001629 	.word	0x08001629
 8001538:	08001629 	.word	0x08001629
 800153c:	08001629 	.word	0x08001629
 8001540:	08001591 	.word	0x08001591
 8001544:	080015dd 	.word	0x080015dd
 8001548:	080015dd 	.word	0x080015dd
 800154c:	080015dd 	.word	0x080015dd
 8001550:	08001629 	.word	0x08001629
 8001554:	08001629 	.word	0x08001629
 8001558:	08001629 	.word	0x08001629
 800155c:	08001629 	.word	0x08001629
 8001560:	08001591 	.word	0x08001591
 8001564:	080015dd 	.word	0x080015dd
 8001568:	080015dd 	.word	0x080015dd
 800156c:	080015dd 	.word	0x080015dd
 8001570:	080015dd 	.word	0x080015dd
 8001574:	08001629 	.word	0x08001629
 8001578:	08001629 	.word	0x08001629
 800157c:	08001629 	.word	0x08001629
 8001580:	08001591 	.word	0x08001591
 8001584:	080015dd 	.word	0x080015dd
 8001588:	080015dd 	.word	0x080015dd
 800158c:	080015dd 	.word	0x080015dd
  {
    case IIS2DLPC_CONT_LOW_PWR_12bit:
    case IIS2DLPC_SINGLE_LOW_PWR_12bit:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
    case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d81a      	bhi.n	80015cc <IIS2DLPC_ACC_GetSensitivity+0x100>
 8001596:	a201      	add	r2, pc, #4	; (adr r2, 800159c <IIS2DLPC_ACC_GetSensitivity+0xd0>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	080015ad 	.word	0x080015ad
 80015a0:	080015b5 	.word	0x080015b5
 80015a4:	080015bd 	.word	0x080015bd
 80015a8:	080015c5 	.word	0x080015c5
      {
        case IIS2DLPC_2g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4a24      	ldr	r2, [pc, #144]	; (8001640 <IIS2DLPC_ACC_GetSensitivity+0x174>)
 80015b0:	601a      	str	r2, [r3, #0]
           break;
 80015b2:	e012      	b.n	80015da <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_4g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	4a23      	ldr	r2, [pc, #140]	; (8001644 <IIS2DLPC_ACC_GetSensitivity+0x178>)
 80015b8:	601a      	str	r2, [r3, #0]
          break;
 80015ba:	e00e      	b.n	80015da <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_8g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	4a22      	ldr	r2, [pc, #136]	; (8001648 <IIS2DLPC_ACC_GetSensitivity+0x17c>)
 80015c0:	601a      	str	r2, [r3, #0]
           break;
 80015c2:	e00a      	b.n	80015da <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_16g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	4a21      	ldr	r2, [pc, #132]	; (800164c <IIS2DLPC_ACC_GetSensitivity+0x180>)
 80015c8:	601a      	str	r2, [r3, #0]
          break;
 80015ca:	e006      	b.n	80015da <IIS2DLPC_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	4a20      	ldr	r2, [pc, #128]	; (8001650 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 80015d0:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	60fb      	str	r3, [r7, #12]
          break;
 80015d8:	bf00      	nop
      }
      break;
 80015da:	e02c      	b.n	8001636 <IIS2DLPC_ACC_GetSensitivity+0x16a>
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 80015dc:	7afb      	ldrb	r3, [r7, #11]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d81a      	bhi.n	8001618 <IIS2DLPC_ACC_GetSensitivity+0x14c>
 80015e2:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <IIS2DLPC_ACC_GetSensitivity+0x11c>)
 80015e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e8:	080015f9 	.word	0x080015f9
 80015ec:	08001601 	.word	0x08001601
 80015f0:	08001609 	.word	0x08001609
 80015f4:	08001611 	.word	0x08001611
      {
        case IIS2DLPC_2g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	4a16      	ldr	r2, [pc, #88]	; (8001654 <IIS2DLPC_ACC_GetSensitivity+0x188>)
 80015fc:	601a      	str	r2, [r3, #0]
           break;
 80015fe:	e012      	b.n	8001626 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_4g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4a15      	ldr	r2, [pc, #84]	; (8001658 <IIS2DLPC_ACC_GetSensitivity+0x18c>)
 8001604:	601a      	str	r2, [r3, #0]
          break;
 8001606:	e00e      	b.n	8001626 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_8g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <IIS2DLPC_ACC_GetSensitivity+0x174>)
 800160c:	601a      	str	r2, [r3, #0]
           break;
 800160e:	e00a      	b.n	8001626 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_16g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	4a0c      	ldr	r2, [pc, #48]	; (8001644 <IIS2DLPC_ACC_GetSensitivity+0x178>)
 8001614:	601a      	str	r2, [r3, #0]
          break;
 8001616:	e006      	b.n	8001626 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 800161c:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	60fb      	str	r3, [r7, #12]
          break;
 8001624:	bf00      	nop
      }
      break;
 8001626:	e006      	b.n	8001636 <IIS2DLPC_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4a09      	ldr	r2, [pc, #36]	; (8001650 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 800162c:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	60fb      	str	r3, [r7, #12]
      break;
 8001634:	bf00      	nop
  }

  return ret;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	3f79db23 	.word	0x3f79db23
 8001644:	3ff9db23 	.word	0x3ff9db23
 8001648:	4079db23 	.word	0x4079db23
 800164c:	40f9db23 	.word	0x40f9db23
 8001650:	bf800000 	.word	0xbf800000
 8001654:	3e79db23 	.word	0x3e79db23
 8001658:	3ef9db23 	.word	0x3ef9db23

0800165c <IIS2DLPC_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetOutputDataRate(IIS2DLPC_Object_t *pObj, float *Odr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  iis2dlpc_odr_t odr_low_level;
  iis2dlpc_mode_t mode;

  /* Get current output data rate. */
  if (iis2dlpc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2DLPC_OK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	331c      	adds	r3, #28
 800166e:	f107 020b 	add.w	r2, r7, #11
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f000 feeb 	bl	8002450 <iis2dlpc_data_rate_get>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <IIS2DLPC_ACC_GetOutputDataRate+0x2a>
  {
    return IIS2DLPC_ERROR;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	e1b4      	b.n	80019f0 <IIS2DLPC_ACC_GetOutputDataRate+0x394>
  }

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	331c      	adds	r3, #28
 800168a:	f107 020a 	add.w	r2, r7, #10
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fddd 	bl	8002250 <iis2dlpc_power_mode_get>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <IIS2DLPC_ACC_GetOutputDataRate+0x46>
  {
    return IIS2DLPC_ERROR;
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
 80016a0:	e1a6      	b.n	80019f0 <IIS2DLPC_ACC_GetOutputDataRate+0x394>
  }

  switch (odr_low_level)
 80016a2:	7afb      	ldrb	r3, [r7, #11]
 80016a4:	2b22      	cmp	r3, #34	; 0x22
 80016a6:	f200 819b 	bhi.w	80019e0 <IIS2DLPC_ACC_GetOutputDataRate+0x384>
 80016aa:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <IIS2DLPC_ACC_GetOutputDataRate+0x54>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	0800173d 	.word	0x0800173d
 80016b4:	08001747 	.word	0x08001747
 80016b8:	080017e5 	.word	0x080017e5
 80016bc:	080017ed 	.word	0x080017ed
 80016c0:	080017f5 	.word	0x080017f5
 80016c4:	080017fd 	.word	0x080017fd
 80016c8:	08001805 	.word	0x08001805
 80016cc:	0800180d 	.word	0x0800180d
 80016d0:	080018a9 	.word	0x080018a9
 80016d4:	08001945 	.word	0x08001945
 80016d8:	080019e1 	.word	0x080019e1
 80016dc:	080019e1 	.word	0x080019e1
 80016e0:	080019e1 	.word	0x080019e1
 80016e4:	080019e1 	.word	0x080019e1
 80016e8:	080019e1 	.word	0x080019e1
 80016ec:	080019e1 	.word	0x080019e1
 80016f0:	080019e1 	.word	0x080019e1
 80016f4:	080019e1 	.word	0x080019e1
 80016f8:	0800173d 	.word	0x0800173d
 80016fc:	080019e1 	.word	0x080019e1
 8001700:	080019e1 	.word	0x080019e1
 8001704:	080019e1 	.word	0x080019e1
 8001708:	080019e1 	.word	0x080019e1
 800170c:	080019e1 	.word	0x080019e1
 8001710:	080019e1 	.word	0x080019e1
 8001714:	080019e1 	.word	0x080019e1
 8001718:	080019e1 	.word	0x080019e1
 800171c:	080019e1 	.word	0x080019e1
 8001720:	080019e1 	.word	0x080019e1
 8001724:	080019e1 	.word	0x080019e1
 8001728:	080019e1 	.word	0x080019e1
 800172c:	080019e1 	.word	0x080019e1
 8001730:	080019e1 	.word	0x080019e1
 8001734:	080019e1 	.word	0x080019e1
 8001738:	0800173d 	.word	0x0800173d
  {
    case IIS2DLPC_XL_ODR_OFF:
    case IIS2DLPC_XL_SET_SW_TRIG:
    case IIS2DLPC_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
      break;
 8001744:	e153      	b.n	80019ee <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8001746:	7abb      	ldrb	r3, [r7, #10]
 8001748:	2b1b      	cmp	r3, #27
 800174a:	d843      	bhi.n	80017d4 <IIS2DLPC_ACC_GetOutputDataRate+0x178>
 800174c:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <IIS2DLPC_ACC_GetOutputDataRate+0xf8>)
 800174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001752:	bf00      	nop
 8001754:	080017cd 	.word	0x080017cd
 8001758:	080017cd 	.word	0x080017cd
 800175c:	080017cd 	.word	0x080017cd
 8001760:	080017cd 	.word	0x080017cd
 8001764:	080017c5 	.word	0x080017c5
 8001768:	080017d5 	.word	0x080017d5
 800176c:	080017d5 	.word	0x080017d5
 8001770:	080017d5 	.word	0x080017d5
 8001774:	080017cd 	.word	0x080017cd
 8001778:	080017cd 	.word	0x080017cd
 800177c:	080017cd 	.word	0x080017cd
 8001780:	080017cd 	.word	0x080017cd
 8001784:	080017d5 	.word	0x080017d5
 8001788:	080017d5 	.word	0x080017d5
 800178c:	080017d5 	.word	0x080017d5
 8001790:	080017d5 	.word	0x080017d5
 8001794:	080017cd 	.word	0x080017cd
 8001798:	080017cd 	.word	0x080017cd
 800179c:	080017cd 	.word	0x080017cd
 80017a0:	080017cd 	.word	0x080017cd
 80017a4:	080017c5 	.word	0x080017c5
 80017a8:	080017d5 	.word	0x080017d5
 80017ac:	080017d5 	.word	0x080017d5
 80017b0:	080017d5 	.word	0x080017d5
 80017b4:	080017cd 	.word	0x080017cd
 80017b8:	080017cd 	.word	0x080017cd
 80017bc:	080017cd 	.word	0x080017cd
 80017c0:	080017cd 	.word	0x080017cd
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	4a8c      	ldr	r2, [pc, #560]	; (80019f8 <IIS2DLPC_ACC_GetOutputDataRate+0x39c>)
 80017c8:	601a      	str	r2, [r3, #0]
           break;
 80017ca:	e00a      	b.n	80017e2 <IIS2DLPC_ACC_GetOutputDataRate+0x186>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	4a8b      	ldr	r2, [pc, #556]	; (80019fc <IIS2DLPC_ACC_GetOutputDataRate+0x3a0>)
 80017d0:	601a      	str	r2, [r3, #0]
          break;
 80017d2:	e006      	b.n	80017e2 <IIS2DLPC_ACC_GetOutputDataRate+0x186>

        default:
          *Odr = -1.0f;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	4a8a      	ldr	r2, [pc, #552]	; (8001a00 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 80017d8:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	60fb      	str	r3, [r7, #12]
          break;
 80017e0:	bf00      	nop
      }
      break;
 80017e2:	e104      	b.n	80019ee <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	4a84      	ldr	r2, [pc, #528]	; (80019f8 <IIS2DLPC_ACC_GetOutputDataRate+0x39c>)
 80017e8:	601a      	str	r2, [r3, #0]
      break;
 80017ea:	e100      	b.n	80019ee <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_25Hz:
      *Odr = 25.0f;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4a85      	ldr	r2, [pc, #532]	; (8001a04 <IIS2DLPC_ACC_GetOutputDataRate+0x3a8>)
 80017f0:	601a      	str	r2, [r3, #0]
      break;
 80017f2:	e0fc      	b.n	80019ee <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_50Hz:
      *Odr = 50.0f;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	4a84      	ldr	r2, [pc, #528]	; (8001a08 <IIS2DLPC_ACC_GetOutputDataRate+0x3ac>)
 80017f8:	601a      	str	r2, [r3, #0]
      break;
 80017fa:	e0f8      	b.n	80019ee <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_100Hz:
      *Odr = 100.0f;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	4a83      	ldr	r2, [pc, #524]	; (8001a0c <IIS2DLPC_ACC_GetOutputDataRate+0x3b0>)
 8001800:	601a      	str	r2, [r3, #0]
      break;
 8001802:	e0f4      	b.n	80019ee <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_200Hz:
      *Odr = 200.0f;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	4a82      	ldr	r2, [pc, #520]	; (8001a10 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8001808:	601a      	str	r2, [r3, #0]
      break;
 800180a:	e0f0      	b.n	80019ee <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_400Hz:
      switch (mode)
 800180c:	7abb      	ldrb	r3, [r7, #10]
 800180e:	2b1b      	cmp	r3, #27
 8001810:	d842      	bhi.n	8001898 <IIS2DLPC_ACC_GetOutputDataRate+0x23c>
 8001812:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <IIS2DLPC_ACC_GetOutputDataRate+0x1bc>)
 8001814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001818:	08001891 	.word	0x08001891
 800181c:	08001891 	.word	0x08001891
 8001820:	08001891 	.word	0x08001891
 8001824:	08001891 	.word	0x08001891
 8001828:	08001889 	.word	0x08001889
 800182c:	08001899 	.word	0x08001899
 8001830:	08001899 	.word	0x08001899
 8001834:	08001899 	.word	0x08001899
 8001838:	08001891 	.word	0x08001891
 800183c:	08001891 	.word	0x08001891
 8001840:	08001891 	.word	0x08001891
 8001844:	08001891 	.word	0x08001891
 8001848:	08001899 	.word	0x08001899
 800184c:	08001899 	.word	0x08001899
 8001850:	08001899 	.word	0x08001899
 8001854:	08001899 	.word	0x08001899
 8001858:	08001891 	.word	0x08001891
 800185c:	08001891 	.word	0x08001891
 8001860:	08001891 	.word	0x08001891
 8001864:	08001891 	.word	0x08001891
 8001868:	08001889 	.word	0x08001889
 800186c:	08001899 	.word	0x08001899
 8001870:	08001899 	.word	0x08001899
 8001874:	08001899 	.word	0x08001899
 8001878:	08001891 	.word	0x08001891
 800187c:	08001891 	.word	0x08001891
 8001880:	08001891 	.word	0x08001891
 8001884:	08001891 	.word	0x08001891
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	4a62      	ldr	r2, [pc, #392]	; (8001a14 <IIS2DLPC_ACC_GetOutputDataRate+0x3b8>)
 800188c:	601a      	str	r2, [r3, #0]
           break;
 800188e:	e00a      	b.n	80018a6 <IIS2DLPC_ACC_GetOutputDataRate+0x24a>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4a5f      	ldr	r2, [pc, #380]	; (8001a10 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8001894:	601a      	str	r2, [r3, #0]
          break;
 8001896:	e006      	b.n	80018a6 <IIS2DLPC_ACC_GetOutputDataRate+0x24a>

        default:
          *Odr = -1.0f;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4a59      	ldr	r2, [pc, #356]	; (8001a00 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 800189c:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	60fb      	str	r3, [r7, #12]
          break;
 80018a4:	bf00      	nop
      }
      break;
 80018a6:	e0a2      	b.n	80019ee <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_800Hz:
      switch (mode)
 80018a8:	7abb      	ldrb	r3, [r7, #10]
 80018aa:	2b1b      	cmp	r3, #27
 80018ac:	d842      	bhi.n	8001934 <IIS2DLPC_ACC_GetOutputDataRate+0x2d8>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <IIS2DLPC_ACC_GetOutputDataRate+0x258>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	0800192d 	.word	0x0800192d
 80018b8:	0800192d 	.word	0x0800192d
 80018bc:	0800192d 	.word	0x0800192d
 80018c0:	0800192d 	.word	0x0800192d
 80018c4:	08001925 	.word	0x08001925
 80018c8:	08001935 	.word	0x08001935
 80018cc:	08001935 	.word	0x08001935
 80018d0:	08001935 	.word	0x08001935
 80018d4:	0800192d 	.word	0x0800192d
 80018d8:	0800192d 	.word	0x0800192d
 80018dc:	0800192d 	.word	0x0800192d
 80018e0:	0800192d 	.word	0x0800192d
 80018e4:	08001935 	.word	0x08001935
 80018e8:	08001935 	.word	0x08001935
 80018ec:	08001935 	.word	0x08001935
 80018f0:	08001935 	.word	0x08001935
 80018f4:	0800192d 	.word	0x0800192d
 80018f8:	0800192d 	.word	0x0800192d
 80018fc:	0800192d 	.word	0x0800192d
 8001900:	0800192d 	.word	0x0800192d
 8001904:	08001925 	.word	0x08001925
 8001908:	08001935 	.word	0x08001935
 800190c:	08001935 	.word	0x08001935
 8001910:	08001935 	.word	0x08001935
 8001914:	0800192d 	.word	0x0800192d
 8001918:	0800192d 	.word	0x0800192d
 800191c:	0800192d 	.word	0x0800192d
 8001920:	0800192d 	.word	0x0800192d
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4a3c      	ldr	r2, [pc, #240]	; (8001a18 <IIS2DLPC_ACC_GetOutputDataRate+0x3bc>)
 8001928:	601a      	str	r2, [r3, #0]
           break;
 800192a:	e00a      	b.n	8001942 <IIS2DLPC_ACC_GetOutputDataRate+0x2e6>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4a38      	ldr	r2, [pc, #224]	; (8001a10 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8001930:	601a      	str	r2, [r3, #0]
          break;
 8001932:	e006      	b.n	8001942 <IIS2DLPC_ACC_GetOutputDataRate+0x2e6>

        default:
          *Odr = -1.0f;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4a32      	ldr	r2, [pc, #200]	; (8001a00 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8001938:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	60fb      	str	r3, [r7, #12]
          break;
 8001940:	bf00      	nop
      }
      break;
 8001942:	e054      	b.n	80019ee <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_1k6Hz:
      switch (mode)
 8001944:	7abb      	ldrb	r3, [r7, #10]
 8001946:	2b1b      	cmp	r3, #27
 8001948:	d842      	bhi.n	80019d0 <IIS2DLPC_ACC_GetOutputDataRate+0x374>
 800194a:	a201      	add	r2, pc, #4	; (adr r2, 8001950 <IIS2DLPC_ACC_GetOutputDataRate+0x2f4>)
 800194c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001950:	080019c9 	.word	0x080019c9
 8001954:	080019c9 	.word	0x080019c9
 8001958:	080019c9 	.word	0x080019c9
 800195c:	080019c9 	.word	0x080019c9
 8001960:	080019c1 	.word	0x080019c1
 8001964:	080019d1 	.word	0x080019d1
 8001968:	080019d1 	.word	0x080019d1
 800196c:	080019d1 	.word	0x080019d1
 8001970:	080019c9 	.word	0x080019c9
 8001974:	080019c9 	.word	0x080019c9
 8001978:	080019c9 	.word	0x080019c9
 800197c:	080019c9 	.word	0x080019c9
 8001980:	080019d1 	.word	0x080019d1
 8001984:	080019d1 	.word	0x080019d1
 8001988:	080019d1 	.word	0x080019d1
 800198c:	080019d1 	.word	0x080019d1
 8001990:	080019c9 	.word	0x080019c9
 8001994:	080019c9 	.word	0x080019c9
 8001998:	080019c9 	.word	0x080019c9
 800199c:	080019c9 	.word	0x080019c9
 80019a0:	080019c1 	.word	0x080019c1
 80019a4:	080019d1 	.word	0x080019d1
 80019a8:	080019d1 	.word	0x080019d1
 80019ac:	080019d1 	.word	0x080019d1
 80019b0:	080019c9 	.word	0x080019c9
 80019b4:	080019c9 	.word	0x080019c9
 80019b8:	080019c9 	.word	0x080019c9
 80019bc:	080019c9 	.word	0x080019c9
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	4a16      	ldr	r2, [pc, #88]	; (8001a1c <IIS2DLPC_ACC_GetOutputDataRate+0x3c0>)
 80019c4:	601a      	str	r2, [r3, #0]
           break;
 80019c6:	e00a      	b.n	80019de <IIS2DLPC_ACC_GetOutputDataRate+0x382>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 80019cc:	601a      	str	r2, [r3, #0]
          break;
 80019ce:	e006      	b.n	80019de <IIS2DLPC_ACC_GetOutputDataRate+0x382>

        default:
          *Odr = -1.0f;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 80019d4:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	60fb      	str	r3, [r7, #12]
          break;
 80019dc:	bf00      	nop
      }
      break;
 80019de:	e006      	b.n	80019ee <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    default:
      *Odr = -1.0f;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 80019e4:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	60fb      	str	r3, [r7, #12]
      break;
 80019ec:	bf00      	nop
  }

  return ret;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	41480000 	.word	0x41480000
 80019fc:	3fcccccd 	.word	0x3fcccccd
 8001a00:	bf800000 	.word	0xbf800000
 8001a04:	41c80000 	.word	0x41c80000
 8001a08:	42480000 	.word	0x42480000
 8001a0c:	42c80000 	.word	0x42c80000
 8001a10:	43480000 	.word	0x43480000
 8001a14:	43c80000 	.word	0x43c80000
 8001a18:	44480000 	.word	0x44480000
 8001a1c:	44c80000 	.word	0x44c80000

08001a20 <IIS2DLPC_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_SetOutputDataRate(IIS2DLPC_Object_t *pObj, float Odr)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return IIS2DLPC_ACC_SetOutputDataRate_With_Mode(pObj, Odr, IIS2DLPC_HIGH_PERFORMANCE_MODE, IIS2DLPC_LOW_NOISE_DISABLE);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	ed97 0a00 	vldr	s0, [r7]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f805 	bl	8001a44 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>
 8001a3a:	4603      	mov	r3, r0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_SetOutputDataRate_With_Mode(IIS2DLPC_Object_t *pObj, float Odr, IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a50:	460b      	mov	r3, r1
 8001a52:	71fb      	strb	r3, [r7, #7]
 8001a54:	4613      	mov	r3, r2
 8001a56:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d109      	bne.n	8001a76 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8001a62:	79ba      	ldrb	r2, [r7, #6]
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	4619      	mov	r1, r3
 8001a68:	ed97 0a02 	vldr	s0, [r7, #8]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f98d 	bl	8001d8c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 8001a72:	4603      	mov	r3, r0
 8001a74:	e008      	b.n	8001a88 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8001a76:	79ba      	ldrb	r2, [r7, #6]
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 fa9f 	bl	8001fc4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>
 8001a86:	4603      	mov	r3, r0
  }
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <IIS2DLPC_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetFullScale(IIS2DLPC_Object_t *pObj, int32_t *FullScale)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  iis2dlpc_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS2DLPC_OK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	331c      	adds	r3, #28
 8001aa2:	f107 020b 	add.w	r2, r7, #11
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fdc5 	bl	8002638 <iis2dlpc_full_scale_get>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <IIS2DLPC_ACC_GetFullScale+0x2a>
  {
    return IIS2DLPC_ERROR;
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab8:	e027      	b.n	8001b0a <IIS2DLPC_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8001aba:	7afb      	ldrb	r3, [r7, #11]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d81b      	bhi.n	8001af8 <IIS2DLPC_ACC_GetFullScale+0x68>
 8001ac0:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <IIS2DLPC_ACC_GetFullScale+0x38>)
 8001ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac6:	bf00      	nop
 8001ac8:	08001ad9 	.word	0x08001ad9
 8001acc:	08001ae1 	.word	0x08001ae1
 8001ad0:	08001ae9 	.word	0x08001ae9
 8001ad4:	08001af1 	.word	0x08001af1
  {
    case IIS2DLPC_2g:
      *FullScale =  2;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2202      	movs	r2, #2
 8001adc:	601a      	str	r2, [r3, #0]
      break;
 8001ade:	e013      	b.n	8001b08 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_4g:
      *FullScale =  4;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	601a      	str	r2, [r3, #0]
      break;
 8001ae6:	e00f      	b.n	8001b08 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_8g:
      *FullScale =  8;
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2208      	movs	r2, #8
 8001aec:	601a      	str	r2, [r3, #0]
      break;
 8001aee:	e00b      	b.n	8001b08 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_16g:
      *FullScale = 16;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2210      	movs	r2, #16
 8001af4:	601a      	str	r2, [r3, #0]
      break;
 8001af6:	e007      	b.n	8001b08 <IIS2DLPC_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f04f 32ff 	mov.w	r2, #4294967295
 8001afe:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	60fb      	str	r3, [r7, #12]
      break;
 8001b06:	bf00      	nop
  }

  return ret;
 8001b08:	68fb      	ldr	r3, [r7, #12]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop

08001b14 <IIS2DLPC_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_SetFullScale(IIS2DLPC_Object_t *pObj, int32_t FullScale)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  iis2dlpc_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? IIS2DLPC_2g
         : (FullScale <= 4) ? IIS2DLPC_4g
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	dd0b      	ble.n	8001b3c <IIS2DLPC_ACC_SetFullScale+0x28>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	dd06      	ble.n	8001b38 <IIS2DLPC_ACC_SetFullScale+0x24>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	dc01      	bgt.n	8001b34 <IIS2DLPC_ACC_SetFullScale+0x20>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e004      	b.n	8001b3e <IIS2DLPC_ACC_SetFullScale+0x2a>
 8001b34:	2303      	movs	r3, #3
 8001b36:	e002      	b.n	8001b3e <IIS2DLPC_ACC_SetFullScale+0x2a>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <IIS2DLPC_ACC_SetFullScale+0x2a>
 8001b3c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? IIS2DLPC_2g
 8001b3e:	73fb      	strb	r3, [r7, #15]
         : (FullScale <= 8) ? IIS2DLPC_8g
         :                    IIS2DLPC_16g;

  if (iis2dlpc_full_scale_set(&(pObj->Ctx), new_fs) != IIS2DLPC_OK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	331c      	adds	r3, #28
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fd4f 	bl	80025ec <iis2dlpc_full_scale_set>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <IIS2DLPC_ACC_SetFullScale+0x46>
  {
    return IIS2DLPC_ERROR;
 8001b54:	f04f 33ff 	mov.w	r3, #4294967295
 8001b58:	e000      	b.n	8001b5c <IIS2DLPC_ACC_SetFullScale+0x48>
  }

  return IIS2DLPC_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <IIS2DLPC_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetAxesRaw(IIS2DLPC_Object_t *pObj, IIS2DLPC_AxesRaw_t *Value)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  iis2dlpc_axis3bit16_t data_raw;
  iis2dlpc_mode_t mode;
  int32_t ret = IIS2DLPC_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	331c      	adds	r3, #28
 8001b76:	f107 020b 	add.w	r2, r7, #11
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 fb67 	bl	8002250 <iis2dlpc_power_mode_get>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <IIS2DLPC_ACC_GetAxesRaw+0x2a>
  {
    return IIS2DLPC_ERROR;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8c:	e089      	b.n	8001ca2 <IIS2DLPC_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (iis2dlpc_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DLPC_OK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	331c      	adds	r3, #28
 8001b92:	f107 020c 	add.w	r2, r7, #12
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 fd85 	bl	80026a8 <iis2dlpc_acceleration_raw_get>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <IIS2DLPC_ACC_GetAxesRaw+0x46>
  {
    return IIS2DLPC_ERROR;
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba8:	e07b      	b.n	8001ca2 <IIS2DLPC_ACC_GetAxesRaw+0x13e>
  }

  switch(mode)
 8001baa:	7afb      	ldrb	r3, [r7, #11]
 8001bac:	2b1b      	cmp	r3, #27
 8001bae:	d873      	bhi.n	8001c98 <IIS2DLPC_ACC_GetAxesRaw+0x134>
 8001bb0:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <IIS2DLPC_ACC_GetAxesRaw+0x54>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001c29 	.word	0x08001c29
 8001bbc:	08001c61 	.word	0x08001c61
 8001bc0:	08001c61 	.word	0x08001c61
 8001bc4:	08001c61 	.word	0x08001c61
 8001bc8:	08001c61 	.word	0x08001c61
 8001bcc:	08001c99 	.word	0x08001c99
 8001bd0:	08001c99 	.word	0x08001c99
 8001bd4:	08001c99 	.word	0x08001c99
 8001bd8:	08001c29 	.word	0x08001c29
 8001bdc:	08001c61 	.word	0x08001c61
 8001be0:	08001c61 	.word	0x08001c61
 8001be4:	08001c61 	.word	0x08001c61
 8001be8:	08001c99 	.word	0x08001c99
 8001bec:	08001c99 	.word	0x08001c99
 8001bf0:	08001c99 	.word	0x08001c99
 8001bf4:	08001c99 	.word	0x08001c99
 8001bf8:	08001c29 	.word	0x08001c29
 8001bfc:	08001c61 	.word	0x08001c61
 8001c00:	08001c61 	.word	0x08001c61
 8001c04:	08001c61 	.word	0x08001c61
 8001c08:	08001c61 	.word	0x08001c61
 8001c0c:	08001c99 	.word	0x08001c99
 8001c10:	08001c99 	.word	0x08001c99
 8001c14:	08001c99 	.word	0x08001c99
 8001c18:	08001c29 	.word	0x08001c29
 8001c1c:	08001c61 	.word	0x08001c61
 8001c20:	08001c61 	.word	0x08001c61
 8001c24:	08001c61 	.word	0x08001c61
    case IIS2DLPC_CONT_LOW_PWR_12bit:
    case IIS2DLPC_SINGLE_LOW_PWR_12bit:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
    case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8001c28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	da00      	bge.n	8001c32 <IIS2DLPC_ACC_GetAxesRaw+0xce>
 8001c30:	330f      	adds	r3, #15
 8001c32:	111b      	asrs	r3, r3, #4
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8001c3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	da00      	bge.n	8001c44 <IIS2DLPC_ACC_GetAxesRaw+0xe0>
 8001c42:	330f      	adds	r3, #15
 8001c44:	111b      	asrs	r3, r3, #4
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8001c4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	da00      	bge.n	8001c56 <IIS2DLPC_ACC_GetAxesRaw+0xf2>
 8001c54:	330f      	adds	r3, #15
 8001c56:	111b      	asrs	r3, r3, #4
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	809a      	strh	r2, [r3, #4]
      break;
 8001c5e:	e01f      	b.n	8001ca0 <IIS2DLPC_ACC_GetAxesRaw+0x13c>
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8001c60:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	da00      	bge.n	8001c6a <IIS2DLPC_ACC_GetAxesRaw+0x106>
 8001c68:	3303      	adds	r3, #3
 8001c6a:	109b      	asrs	r3, r3, #2
 8001c6c:	b21a      	sxth	r2, r3
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8001c72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	da00      	bge.n	8001c7c <IIS2DLPC_ACC_GetAxesRaw+0x118>
 8001c7a:	3303      	adds	r3, #3
 8001c7c:	109b      	asrs	r3, r3, #2
 8001c7e:	b21a      	sxth	r2, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8001c84:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	da00      	bge.n	8001c8e <IIS2DLPC_ACC_GetAxesRaw+0x12a>
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	109b      	asrs	r3, r3, #2
 8001c90:	b21a      	sxth	r2, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	809a      	strh	r2, [r3, #4]
      break;
 8001c96:	e003      	b.n	8001ca0 <IIS2DLPC_ACC_GetAxesRaw+0x13c>

    default:
      ret = IIS2DLPC_ERROR;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	617b      	str	r3, [r7, #20]
      break;
 8001c9e:	bf00      	nop
  }

  return ret;
 8001ca0:	697b      	ldr	r3, [r7, #20]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop

08001cac <IIS2DLPC_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetAxes(IIS2DLPC_Object_t *pObj, IIS2DLPC_Axes_t *Acceleration)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  IIS2DLPC_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (IIS2DLPC_ACC_GetAxesRaw(pObj, &data_raw) != IIS2DLPC_OK)
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ff4e 	bl	8001b64 <IIS2DLPC_ACC_GetAxesRaw>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <IIS2DLPC_ACC_GetAxes+0x28>
  {
    return IIS2DLPC_ERROR;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	e03c      	b.n	8001d4e <IIS2DLPC_ACC_GetAxes+0xa2>
  }

  /* Get IIS2DLPC actual sensitivity. */
  if (IIS2DLPC_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DLPC_OK)
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	4619      	mov	r1, r3
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff fbf6 	bl	80014cc <IIS2DLPC_ACC_GetSensitivity>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <IIS2DLPC_ACC_GetAxes+0x40>
  {
    return IIS2DLPC_ERROR;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	e030      	b.n	8001d4e <IIS2DLPC_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8001cec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d04:	ee17 2a90 	vmov	r2, s15
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8001d0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d18:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d24:	ee17 2a90 	vmov	r2, s15
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8001d2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d30:	ee07 3a90 	vmov	s15, r3
 8001d34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d44:	ee17 2a90 	vmov	r2, s15
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	609a      	str	r2, [r3, #8]

  return IIS2DLPC_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <IIS2DLPC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_Write_Reg(IIS2DLPC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
 8001d62:	4613      	mov	r3, r2
 8001d64:	70bb      	strb	r3, [r7, #2]
  if (iis2dlpc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2DLPC_OK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f103 001c 	add.w	r0, r3, #28
 8001d6c:	1cba      	adds	r2, r7, #2
 8001d6e:	78f9      	ldrb	r1, [r7, #3]
 8001d70:	2301      	movs	r3, #1
 8001d72:	f000 fa07 	bl	8002184 <iis2dlpc_write_reg>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <IIS2DLPC_Write_Reg+0x2c>
  {
    return IIS2DLPC_ERROR;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	e000      	b.n	8001d84 <IIS2DLPC_Write_Reg+0x2e>
  }

  return IIS2DLPC_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(IIS2DLPC_Object_t *pObj, float Odr, IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	71bb      	strb	r3, [r7, #6]
  iis2dlpc_odr_t new_odr;
  iis2dlpc_mode_t new_power_mode;

  switch (Mode)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d80b      	bhi.n	8001dc0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x34>
 8001da8:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001ded 	.word	0x08001ded
 8001db4:	08001e19 	.word	0x08001e19
 8001db8:	08001e45 	.word	0x08001e45
 8001dbc:	08001e71 	.word	0x08001e71
  {
    case IIS2DLPC_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d002      	beq.n	8001dcc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE;
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	75fb      	strb	r3, [r7, #23]
          break;
 8001dca:	e002      	b.n	8001dd2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x46>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 8001dcc:	2314      	movs	r3, #20
 8001dce:	75fb      	strb	r3, [r7, #23]
          break;
 8001dd0:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if(Odr < 12.5f)
 8001dd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dd6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de2:	d400      	bmi.n	8001de6 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8001de4:	e05a      	b.n	8001e9c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8001de6:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8001de8:	60bb      	str	r3, [r7, #8]
      break;
 8001dea:	e057      	b.n	8001e9c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE4:
      switch (Noise)
 8001dec:	79bb      	ldrb	r3, [r7, #6]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d002      	beq.n	8001df8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_4;
 8001df2:	2303      	movs	r3, #3
 8001df4:	75fb      	strb	r3, [r7, #23]
          break;
 8001df6:	e002      	b.n	8001dfe <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x72>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 8001df8:	2313      	movs	r3, #19
 8001dfa:	75fb      	strb	r3, [r7, #23]
          break;
 8001dfc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001dfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e02:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001fa8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	dc00      	bgt.n	8001e12 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8001e10:	e044      	b.n	8001e9c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001e12:	4b66      	ldr	r3, [pc, #408]	; (8001fac <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001e14:	60bb      	str	r3, [r7, #8]
      break;
 8001e16:	e041      	b.n	8001e9c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE3:
      switch (Noise)
 8001e18:	79bb      	ldrb	r3, [r7, #6]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d002      	beq.n	8001e24 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_3;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	75fb      	strb	r3, [r7, #23]
          break;
 8001e22:	e002      	b.n	8001e2a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 8001e24:	2312      	movs	r3, #18
 8001e26:	75fb      	strb	r3, [r7, #23]
          break;
 8001e28:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001e2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e2e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001fa8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3a:	dc00      	bgt.n	8001e3e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8001e3c:	e02e      	b.n	8001e9c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001e3e:	4b5b      	ldr	r3, [pc, #364]	; (8001fac <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001e40:	60bb      	str	r3, [r7, #8]
      break;
 8001e42:	e02b      	b.n	8001e9c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE2:
      switch (Noise)
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d002      	beq.n	8001e50 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_2;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	75fb      	strb	r3, [r7, #23]
          break;
 8001e4e:	e002      	b.n	8001e56 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xca>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 8001e50:	2311      	movs	r3, #17
 8001e52:	75fb      	strb	r3, [r7, #23]
          break;
 8001e54:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001e56:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e5a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001fa8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e66:	dc00      	bgt.n	8001e6a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8001e68:	e018      	b.n	8001e9c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8001e6a:	4b50      	ldr	r3, [pc, #320]	; (8001fac <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001e6c:	60bb      	str	r3, [r7, #8]
      break;
 8001e6e:	e015      	b.n	8001e9c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE1:
      switch (Noise)
 8001e70:	79bb      	ldrb	r3, [r7, #6]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d002      	beq.n	8001e7c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_12bit;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]
          break;
 8001e7a:	e002      	b.n	8001e82 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 8001e7c:	2310      	movs	r3, #16
 8001e7e:	75fb      	strb	r3, [r7, #23]
          break;
 8001e80:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8001e82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e86:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001fa8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	dc00      	bgt.n	8001e96 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8001e94:	e001      	b.n	8001e9a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8001e96:	4b45      	ldr	r3, [pc, #276]	; (8001fac <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8001e98:	60bb      	str	r3, [r7, #8]
      break;
 8001e9a:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? IIS2DLPC_XL_ODR_1Hz6_LP_ONLY
          : (Odr <=   12.5f) ? IIS2DLPC_XL_ODR_12Hz5
 8001e9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ea0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001fb0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x224>
 8001ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eac:	d801      	bhi.n	8001eb2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x126>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e04d      	b.n	8001f4e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001eb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eb6:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec2:	d801      	bhi.n	8001ec8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e042      	b.n	8001f4e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001ec8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ecc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed8:	d801      	bhi.n	8001ede <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x152>
 8001eda:	2303      	movs	r3, #3
 8001edc:	e037      	b.n	8001f4e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001ede:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ee2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001fb4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x228>
 8001ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eee:	d801      	bhi.n	8001ef4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x168>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e02c      	b.n	8001f4e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001ef4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ef8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001fb8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8001efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	d801      	bhi.n	8001f0a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8001f06:	2305      	movs	r3, #5
 8001f08:	e021      	b.n	8001f4e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001f0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f0e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001fa8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8001f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	d801      	bhi.n	8001f20 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x194>
 8001f1c:	2306      	movs	r3, #6
 8001f1e:	e016      	b.n	8001f4e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001f20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f24:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001fbc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x230>
 8001f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	d801      	bhi.n	8001f36 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8001f32:	2307      	movs	r3, #7
 8001f34:	e00b      	b.n	8001f4e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001f36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f3a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001fc0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x234>
 8001f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	d801      	bhi.n	8001f4c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8001f48:	2308      	movs	r3, #8
 8001f4a:	e000      	b.n	8001f4e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8001f4c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? IIS2DLPC_XL_ODR_1Hz6_LP_ONLY
 8001f4e:	75bb      	strb	r3, [r7, #22]
          : (Odr <=  400.0f) ? IIS2DLPC_XL_ODR_400Hz
          : (Odr <=  800.0f) ? IIS2DLPC_XL_ODR_800Hz
          :                    IIS2DLPC_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2DLPC_OK)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	331c      	adds	r3, #28
 8001f54:	7dba      	ldrb	r2, [r7, #22]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 fa33 	bl	80023c4 <iis2dlpc_data_rate_set>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return IIS2DLPC_ERROR;
 8001f64:	f04f 33ff 	mov.w	r3, #4294967295
 8001f68:	e018      	b.n	8001f9c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), new_power_mode) != IIS2DLPC_OK)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	331c      	adds	r3, #28
 8001f6e:	7dfa      	ldrb	r2, [r7, #23]
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 f91e 	bl	80021b4 <iis2dlpc_power_mode_set>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return IIS2DLPC_ERROR;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e00b      	b.n	8001f9c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	79fa      	ldrb	r2, [r7, #7]
 8001f8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	79ba      	ldrb	r2, [r7, #6]
 8001f96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2DLPC_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	41480000 	.word	0x41480000
 8001fa8:	43480000 	.word	0x43480000
 8001fac:	43480000 	.word	0x43480000
 8001fb0:	3fcccccd 	.word	0x3fcccccd
 8001fb4:	42480000 	.word	0x42480000
 8001fb8:	42c80000 	.word	0x42c80000
 8001fbc:	43c80000 	.word	0x43c80000
 8001fc0:	44480000 	.word	0x44480000

08001fc4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(IIS2DLPC_Object_t *pObj, float Odr, IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	71fb      	strb	r3, [r7, #7]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	79fa      	ldrb	r2, [r7, #7]
 8001fdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	79ba      	ldrb	r2, [r7, #6]
 8001fe4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                : (Odr <=   12.5f) ?   12.5f
 8001fe8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fec:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80020ac <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff8:	d801      	bhi.n	8001ffe <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8001ffc:	e04d      	b.n	800209a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   25.0f) ?   25.0f
 8001ffe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002002:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800200a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200e:	d801      	bhi.n	8002014 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002010:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002012:	e042      	b.n	800209a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   50.0f) ?   50.0f
 8002014:	edd7 7a02 	vldr	s15, [r7, #8]
 8002018:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800201c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002024:	d801      	bhi.n	800202a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x66>
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8002028:	e037      	b.n	800209a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  100.0f) ?  100.0f
 800202a:	edd7 7a02 	vldr	s15, [r7, #8]
 800202e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80020bc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203a:	d801      	bhi.n	8002040 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x7c>
 800203c:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800203e:	e02c      	b.n	800209a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  200.0f) ?  200.0f
 8002040:	edd7 7a02 	vldr	s15, [r7, #8]
 8002044:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80020c4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002050:	d801      	bhi.n	8002056 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x92>
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002054:	e021      	b.n	800209a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  400.0f) ?  400.0f
 8002056:	edd7 7a02 	vldr	s15, [r7, #8]
 800205a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80020cc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x108>
 800205e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	d801      	bhi.n	800206c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 800206a:	e016      	b.n	800209a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  800.0f) ?  800.0f
 800206c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002070:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80020d4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002074:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207c:	d801      	bhi.n	8002082 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xbe>
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8002080:	e00b      	b.n	800209a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                :                    1600.0f;
 8002082:	edd7 7a02 	vldr	s15, [r7, #8]
 8002086:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80020dc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x118>
 800208a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800208e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002092:	d801      	bhi.n	8002098 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002096:	e000      	b.n	800209a <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	62d3      	str	r3, [r2, #44]	; 0x2c

  return IIS2DLPC_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	3fcccccd 	.word	0x3fcccccd
 80020b0:	3fcccccd 	.word	0x3fcccccd
 80020b4:	41480000 	.word	0x41480000
 80020b8:	41c80000 	.word	0x41c80000
 80020bc:	42480000 	.word	0x42480000
 80020c0:	42480000 	.word	0x42480000
 80020c4:	42c80000 	.word	0x42c80000
 80020c8:	42c80000 	.word	0x42c80000
 80020cc:	43480000 	.word	0x43480000
 80020d0:	43480000 	.word	0x43480000
 80020d4:	43c80000 	.word	0x43c80000
 80020d8:	43c80000 	.word	0x43c80000
 80020dc:	44480000 	.word	0x44480000
 80020e0:	44480000 	.word	0x44480000
 80020e4:	44c80000 	.word	0x44c80000

080020e8 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	461a      	mov	r2, r3
 80020f4:	460b      	mov	r3, r1
 80020f6:	72fb      	strb	r3, [r7, #11]
 80020f8:	4613      	mov	r3, r2
 80020fa:	813b      	strh	r3, [r7, #8]
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	695c      	ldr	r4, [r3, #20]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	7b1b      	ldrb	r3, [r3, #12]
 8002108:	b298      	uxth	r0, r3
 800210a:	7afb      	ldrb	r3, [r7, #11]
 800210c:	b299      	uxth	r1, r3
 800210e:	893b      	ldrh	r3, [r7, #8]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	47a0      	blx	r4
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	371c      	adds	r7, #28
 800211a:	46bd      	mov	sp, r7
 800211c:	bd90      	pop	{r4, r7, pc}

0800211e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800211e:	b590      	push	{r4, r7, lr}
 8002120:	b087      	sub	sp, #28
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	461a      	mov	r2, r3
 800212a:	460b      	mov	r3, r1
 800212c:	72fb      	strb	r3, [r7, #11]
 800212e:	4613      	mov	r3, r2
 8002130:	813b      	strh	r3, [r7, #8]
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	691c      	ldr	r4, [r3, #16]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	7b1b      	ldrb	r3, [r3, #12]
 800213e:	b298      	uxth	r0, r3
 8002140:	7afb      	ldrb	r3, [r7, #11]
 8002142:	b299      	uxth	r1, r3
 8002144:	893b      	ldrh	r3, [r7, #8]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	47a0      	blx	r4
 800214a:	4603      	mov	r3, r0
}
 800214c:	4618      	mov	r0, r3
 800214e:	371c      	adds	r7, #28
 8002150:	46bd      	mov	sp, r7
 8002152:	bd90      	pop	{r4, r7, pc}

08002154 <iis2dlpc_read_reg>:
  *
  */
int32_t iis2dlpc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	461a      	mov	r2, r3
 8002160:	460b      	mov	r3, r1
 8002162:	72fb      	strb	r3, [r7, #11]
 8002164:	4613      	mov	r3, r2
 8002166:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685c      	ldr	r4, [r3, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6898      	ldr	r0, [r3, #8]
 8002170:	893b      	ldrh	r3, [r7, #8]
 8002172:	7af9      	ldrb	r1, [r7, #11]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	47a0      	blx	r4
 8002178:	6178      	str	r0, [r7, #20]
  return ret;
 800217a:	697b      	ldr	r3, [r7, #20]
}
 800217c:	4618      	mov	r0, r3
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd90      	pop	{r4, r7, pc}

08002184 <iis2dlpc_write_reg>:
  *
  */
int32_t iis2dlpc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	461a      	mov	r2, r3
 8002190:	460b      	mov	r3, r1
 8002192:	72fb      	strb	r3, [r7, #11]
 8002194:	4613      	mov	r3, r2
 8002196:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681c      	ldr	r4, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6898      	ldr	r0, [r3, #8]
 80021a0:	893b      	ldrh	r3, [r7, #8]
 80021a2:	7af9      	ldrb	r1, [r7, #11]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	47a0      	blx	r4
 80021a8:	6178      	str	r0, [r7, #20]
  return ret;
 80021aa:	697b      	ldr	r3, [r7, #20]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}

080021b4 <iis2dlpc_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_set(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t val)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 80021c0:	f107 0210 	add.w	r2, r7, #16
 80021c4:	2301      	movs	r3, #1
 80021c6:	2120      	movs	r1, #32
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ffc3 	bl	8002154 <iis2dlpc_read_reg>
 80021ce:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d118      	bne.n	8002208 <iis2dlpc_power_mode_set+0x54>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	7c3b      	ldrb	r3, [r7, #16]
 80021e2:	f362 0383 	bfi	r3, r2, #2, #2
 80021e6:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	7c3b      	ldrb	r3, [r7, #16]
 80021f2:	f362 0301 	bfi	r3, r2, #0, #2
 80021f6:	743b      	strb	r3, [r7, #16]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 80021f8:	f107 0210 	add.w	r2, r7, #16
 80021fc:	2301      	movs	r3, #1
 80021fe:	2120      	movs	r1, #32
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff ffbf 	bl	8002184 <iis2dlpc_write_reg>
 8002206:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <iis2dlpc_power_mode_set+0x6a>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 800220e:	f107 020c 	add.w	r2, r7, #12
 8002212:	2301      	movs	r3, #1
 8002214:	2125      	movs	r1, #37	; 0x25
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ff9c 	bl	8002154 <iis2dlpc_read_reg>
 800221c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d110      	bne.n	8002246 <iis2dlpc_power_mode_set+0x92>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	7b3b      	ldrb	r3, [r7, #12]
 8002230:	f362 0382 	bfi	r3, r2, #2, #1
 8002234:	733b      	strb	r3, [r7, #12]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8002236:	f107 020c 	add.w	r2, r7, #12
 800223a:	2301      	movs	r3, #1
 800223c:	2125      	movs	r1, #37	; 0x25
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffa0 	bl	8002184 <iis2dlpc_write_reg>
 8002244:	6178      	str	r0, [r7, #20]

  else {
    ret = ret;
  }

  return ret;
 8002246:	697b      	ldr	r3, [r7, #20]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <iis2dlpc_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_get(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t *val)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 800225a:	f107 0210 	add.w	r2, r7, #16
 800225e:	2301      	movs	r3, #1
 8002260:	2120      	movs	r1, #32
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ff76 	bl	8002154 <iis2dlpc_read_reg>
 8002268:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 80a3 	bne.w	80023b8 <iis2dlpc_power_mode_get+0x168>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8002272:	f107 020c 	add.w	r2, r7, #12
 8002276:	2301      	movs	r3, #1
 8002278:	2125      	movs	r1, #37	; 0x25
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ff6a 	bl	8002154 <iis2dlpc_read_reg>
 8002280:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8002282:	7b3b      	ldrb	r3, [r7, #12]
 8002284:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	011a      	lsls	r2, r3, #4
 800228c:	7c3b      	ldrb	r3, [r7, #16]
 800228e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002292:	b2db      	uxtb	r3, r3
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
             ctrl1.lp_mode)) {
 8002298:	7c3a      	ldrb	r2, [r7, #16]
 800229a:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800229e:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80022a0:	4413      	add	r3, r2
 80022a2:	2b1b      	cmp	r3, #27
 80022a4:	f200 8084 	bhi.w	80023b0 <iis2dlpc_power_mode_get+0x160>
 80022a8:	a201      	add	r2, pc, #4	; (adr r2, 80022b0 <iis2dlpc_power_mode_get+0x60>)
 80022aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ae:	bf00      	nop
 80022b0:	08002341 	.word	0x08002341
 80022b4:	08002339 	.word	0x08002339
 80022b8:	08002331 	.word	0x08002331
 80022bc:	08002329 	.word	0x08002329
 80022c0:	08002321 	.word	0x08002321
 80022c4:	080023b1 	.word	0x080023b1
 80022c8:	080023b1 	.word	0x080023b1
 80022cc:	080023b1 	.word	0x080023b1
 80022d0:	08002361 	.word	0x08002361
 80022d4:	08002359 	.word	0x08002359
 80022d8:	08002351 	.word	0x08002351
 80022dc:	08002349 	.word	0x08002349
 80022e0:	080023b1 	.word	0x080023b1
 80022e4:	080023b1 	.word	0x080023b1
 80022e8:	080023b1 	.word	0x080023b1
 80022ec:	080023b1 	.word	0x080023b1
 80022f0:	08002389 	.word	0x08002389
 80022f4:	08002381 	.word	0x08002381
 80022f8:	08002379 	.word	0x08002379
 80022fc:	08002371 	.word	0x08002371
 8002300:	08002369 	.word	0x08002369
 8002304:	080023b1 	.word	0x080023b1
 8002308:	080023b1 	.word	0x080023b1
 800230c:	080023b1 	.word	0x080023b1
 8002310:	080023a9 	.word	0x080023a9
 8002314:	080023a1 	.word	0x080023a1
 8002318:	08002399 	.word	0x08002399
 800231c:	08002391 	.word	0x08002391
      case IIS2DLPC_HIGH_PERFORMANCE:
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2204      	movs	r2, #4
 8002324:	701a      	strb	r2, [r3, #0]
        break;
 8002326:	e048      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_4:
        *val = IIS2DLPC_CONT_LOW_PWR_4;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2203      	movs	r2, #3
 800232c:	701a      	strb	r2, [r3, #0]
        break;
 800232e:	e044      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_3:
        *val = IIS2DLPC_CONT_LOW_PWR_3;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2202      	movs	r2, #2
 8002334:	701a      	strb	r2, [r3, #0]
        break;
 8002336:	e040      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_2:
        *val = IIS2DLPC_CONT_LOW_PWR_2;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2201      	movs	r2, #1
 800233c:	701a      	strb	r2, [r3, #0]
        break;
 800233e:	e03c      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_12bit:
        *val = IIS2DLPC_CONT_LOW_PWR_12bit;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
        break;
 8002346:	e038      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_4:
        *val = IIS2DLPC_SINGLE_LOW_PWR_4;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	220b      	movs	r2, #11
 800234c:	701a      	strb	r2, [r3, #0]
        break;
 800234e:	e034      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_3:
        *val = IIS2DLPC_SINGLE_LOW_PWR_3;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	220a      	movs	r2, #10
 8002354:	701a      	strb	r2, [r3, #0]
        break;
 8002356:	e030      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_2:
        *val = IIS2DLPC_SINGLE_LOW_PWR_2;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2209      	movs	r2, #9
 800235c:	701a      	strb	r2, [r3, #0]
        break;
 800235e:	e02c      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_12bit:
        *val = IIS2DLPC_SINGLE_LOW_PWR_12bit;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2208      	movs	r2, #8
 8002364:	701a      	strb	r2, [r3, #0]
        break;
 8002366:	e028      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
        *val = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2214      	movs	r2, #20
 800236c:	701a      	strb	r2, [r3, #0]
        break;
 800236e:	e024      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2213      	movs	r2, #19
 8002374:	701a      	strb	r2, [r3, #0]
        break;
 8002376:	e020      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2212      	movs	r2, #18
 800237c:	701a      	strb	r2, [r3, #0]
        break;
 800237e:	e01c      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2211      	movs	r2, #17
 8002384:	701a      	strb	r2, [r3, #0]
        break;
 8002386:	e018      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2210      	movs	r2, #16
 800238c:	701a      	strb	r2, [r3, #0]
        break;
 800238e:	e014      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	221b      	movs	r2, #27
 8002394:	701a      	strb	r2, [r3, #0]
        break;
 8002396:	e010      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	221a      	movs	r2, #26
 800239c:	701a      	strb	r2, [r3, #0]
        break;
 800239e:	e00c      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2219      	movs	r2, #25
 80023a4:	701a      	strb	r2, [r3, #0]
        break;
 80023a6:	e008      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2218      	movs	r2, #24
 80023ac:	701a      	strb	r2, [r3, #0]
        break;
 80023ae:	e004      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>

      default:
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2204      	movs	r2, #4
 80023b4:	701a      	strb	r2, [r3, #0]
        break;
 80023b6:	e000      	b.n	80023ba <iis2dlpc_power_mode_get+0x16a>
    }
  }
 80023b8:	bf00      	nop

  return ret;
 80023ba:	697b      	ldr	r3, [r7, #20]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <iis2dlpc_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_set(stmdev_ctx_t *ctx, iis2dlpc_odr_t val)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 80023d0:	f107 0210 	add.w	r2, r7, #16
 80023d4:	2301      	movs	r3, #1
 80023d6:	2120      	movs	r1, #32
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff febb 	bl	8002154 <iis2dlpc_read_reg>
 80023de:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10f      	bne.n	8002406 <iis2dlpc_data_rate_set+0x42>
    ctrl1.odr = (uint8_t) val;
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	7c3b      	ldrb	r3, [r7, #16]
 80023f0:	f362 1307 	bfi	r3, r2, #4, #4
 80023f4:	743b      	strb	r3, [r7, #16]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 80023f6:	f107 0210 	add.w	r2, r7, #16
 80023fa:	2301      	movs	r3, #1
 80023fc:	2120      	movs	r1, #32
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fec0 	bl	8002184 <iis2dlpc_write_reg>
 8002404:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d107      	bne.n	800241c <iis2dlpc_data_rate_set+0x58>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 800240c:	f107 020c 	add.w	r2, r7, #12
 8002410:	2301      	movs	r3, #1
 8002412:	2122      	movs	r1, #34	; 0x22
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff fe9d 	bl	8002154 <iis2dlpc_read_reg>
 800241a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d110      	bne.n	8002444 <iis2dlpc_data_rate_set+0x80>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	b2da      	uxtb	r2, r3
 800242c:	7b3b      	ldrb	r3, [r7, #12]
 800242e:	f362 0301 	bfi	r3, r2, #0, #2
 8002432:	733b      	strb	r3, [r7, #12]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8002434:	f107 020c 	add.w	r2, r7, #12
 8002438:	2301      	movs	r3, #1
 800243a:	2122      	movs	r1, #34	; 0x22
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fea1 	bl	8002184 <iis2dlpc_write_reg>
 8002442:	6178      	str	r0, [r7, #20]

  else {
    ret = ret;
  }

  return ret;
 8002444:	697b      	ldr	r3, [r7, #20]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <iis2dlpc_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_get(stmdev_ctx_t *ctx, iis2dlpc_odr_t *val)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 800245a:	f107 0210 	add.w	r2, r7, #16
 800245e:	2301      	movs	r3, #1
 8002460:	2120      	movs	r1, #32
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fe76 	bl	8002154 <iis2dlpc_read_reg>
 8002468:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 8091 	bne.w	8002594 <iis2dlpc_data_rate_get+0x144>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8002472:	f107 020c 	add.w	r2, r7, #12
 8002476:	2301      	movs	r3, #1
 8002478:	2122      	movs	r1, #34	; 0x22
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fe6a 	bl	8002154 <iis2dlpc_read_reg>
 8002480:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 8002482:	7b3b      	ldrb	r3, [r7, #12]
 8002484:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002488:	b2db      	uxtb	r3, r3
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	7c3a      	ldrb	r2, [r7, #16]
 800248e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	4413      	add	r3, r2
 8002496:	2b22      	cmp	r3, #34	; 0x22
 8002498:	d878      	bhi.n	800258c <iis2dlpc_data_rate_get+0x13c>
 800249a:	a201      	add	r2, pc, #4	; (adr r2, 80024a0 <iis2dlpc_data_rate_get+0x50>)
 800249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a0:	0800252d 	.word	0x0800252d
 80024a4:	08002535 	.word	0x08002535
 80024a8:	0800253d 	.word	0x0800253d
 80024ac:	08002545 	.word	0x08002545
 80024b0:	0800254d 	.word	0x0800254d
 80024b4:	08002555 	.word	0x08002555
 80024b8:	0800255d 	.word	0x0800255d
 80024bc:	08002565 	.word	0x08002565
 80024c0:	0800256d 	.word	0x0800256d
 80024c4:	08002575 	.word	0x08002575
 80024c8:	0800258d 	.word	0x0800258d
 80024cc:	0800258d 	.word	0x0800258d
 80024d0:	0800258d 	.word	0x0800258d
 80024d4:	0800258d 	.word	0x0800258d
 80024d8:	0800258d 	.word	0x0800258d
 80024dc:	0800258d 	.word	0x0800258d
 80024e0:	0800258d 	.word	0x0800258d
 80024e4:	0800258d 	.word	0x0800258d
 80024e8:	0800257d 	.word	0x0800257d
 80024ec:	0800258d 	.word	0x0800258d
 80024f0:	0800258d 	.word	0x0800258d
 80024f4:	0800258d 	.word	0x0800258d
 80024f8:	0800258d 	.word	0x0800258d
 80024fc:	0800258d 	.word	0x0800258d
 8002500:	0800258d 	.word	0x0800258d
 8002504:	0800258d 	.word	0x0800258d
 8002508:	0800258d 	.word	0x0800258d
 800250c:	0800258d 	.word	0x0800258d
 8002510:	0800258d 	.word	0x0800258d
 8002514:	0800258d 	.word	0x0800258d
 8002518:	0800258d 	.word	0x0800258d
 800251c:	0800258d 	.word	0x0800258d
 8002520:	0800258d 	.word	0x0800258d
 8002524:	0800258d 	.word	0x0800258d
 8002528:	08002585 	.word	0x08002585
      case IIS2DLPC_XL_ODR_OFF:
        *val = IIS2DLPC_XL_ODR_OFF;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
        break;
 8002532:	e030      	b.n	8002596 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_1Hz6_LP_ONLY:
        *val = IIS2DLPC_XL_ODR_1Hz6_LP_ONLY;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
        break;
 800253a:	e02c      	b.n	8002596 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_12Hz5:
        *val = IIS2DLPC_XL_ODR_12Hz5;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2202      	movs	r2, #2
 8002540:	701a      	strb	r2, [r3, #0]
        break;
 8002542:	e028      	b.n	8002596 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_25Hz:
        *val = IIS2DLPC_XL_ODR_25Hz;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2203      	movs	r2, #3
 8002548:	701a      	strb	r2, [r3, #0]
        break;
 800254a:	e024      	b.n	8002596 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_50Hz:
        *val = IIS2DLPC_XL_ODR_50Hz;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2204      	movs	r2, #4
 8002550:	701a      	strb	r2, [r3, #0]
        break;
 8002552:	e020      	b.n	8002596 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_100Hz:
        *val = IIS2DLPC_XL_ODR_100Hz;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2205      	movs	r2, #5
 8002558:	701a      	strb	r2, [r3, #0]
        break;
 800255a:	e01c      	b.n	8002596 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_200Hz:
        *val = IIS2DLPC_XL_ODR_200Hz;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2206      	movs	r2, #6
 8002560:	701a      	strb	r2, [r3, #0]
        break;
 8002562:	e018      	b.n	8002596 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_400Hz:
        *val = IIS2DLPC_XL_ODR_400Hz;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	2207      	movs	r2, #7
 8002568:	701a      	strb	r2, [r3, #0]
        break;
 800256a:	e014      	b.n	8002596 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_800Hz:
        *val = IIS2DLPC_XL_ODR_800Hz;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2208      	movs	r2, #8
 8002570:	701a      	strb	r2, [r3, #0]
        break;
 8002572:	e010      	b.n	8002596 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_1k6Hz:
        *val = IIS2DLPC_XL_ODR_1k6Hz;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2209      	movs	r2, #9
 8002578:	701a      	strb	r2, [r3, #0]
        break;
 800257a:	e00c      	b.n	8002596 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_SET_SW_TRIG:
        *val = IIS2DLPC_XL_SET_SW_TRIG;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2212      	movs	r2, #18
 8002580:	701a      	strb	r2, [r3, #0]
        break;
 8002582:	e008      	b.n	8002596 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_SET_PIN_TRIG:
        *val = IIS2DLPC_XL_SET_PIN_TRIG;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	2222      	movs	r2, #34	; 0x22
 8002588:	701a      	strb	r2, [r3, #0]
        break;
 800258a:	e004      	b.n	8002596 <iis2dlpc_data_rate_get+0x146>

      default:
        *val = IIS2DLPC_XL_ODR_OFF;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
        break;
 8002592:	e000      	b.n	8002596 <iis2dlpc_data_rate_get+0x146>
    }
  }
 8002594:	bf00      	nop

  return ret;
 8002596:	697b      	ldr	r3, [r7, #20]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <iis2dlpc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 80025ac:	f107 0208 	add.w	r2, r7, #8
 80025b0:	2301      	movs	r3, #1
 80025b2:	2121      	movs	r1, #33	; 0x21
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff fdcd 	bl	8002154 <iis2dlpc_read_reg>
 80025ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10f      	bne.n	80025e2 <iis2dlpc_block_data_update_set+0x42>
    reg.bdu = val;
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	7a3b      	ldrb	r3, [r7, #8]
 80025cc:	f362 03c3 	bfi	r3, r2, #3, #1
 80025d0:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 80025d2:	f107 0208 	add.w	r2, r7, #8
 80025d6:	2301      	movs	r3, #1
 80025d8:	2121      	movs	r1, #33	; 0x21
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff fdd2 	bl	8002184 <iis2dlpc_write_reg>
 80025e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025e2:	68fb      	ldr	r3, [r7, #12]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <iis2dlpc_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_set(stmdev_ctx_t *ctx, iis2dlpc_fs_t val)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 80025f8:	f107 0208 	add.w	r2, r7, #8
 80025fc:	2301      	movs	r3, #1
 80025fe:	2125      	movs	r1, #37	; 0x25
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff fda7 	bl	8002154 <iis2dlpc_read_reg>
 8002606:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10f      	bne.n	800262e <iis2dlpc_full_scale_set+0x42>
    reg.fs = (uint8_t) val;
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	b2da      	uxtb	r2, r3
 8002616:	7a3b      	ldrb	r3, [r7, #8]
 8002618:	f362 1305 	bfi	r3, r2, #4, #2
 800261c:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 800261e:	f107 0208 	add.w	r2, r7, #8
 8002622:	2301      	movs	r3, #1
 8002624:	2125      	movs	r1, #37	; 0x25
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff fdac 	bl	8002184 <iis2dlpc_write_reg>
 800262c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800262e:	68fb      	ldr	r3, [r7, #12]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <iis2dlpc_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_get(stmdev_ctx_t *ctx, iis2dlpc_fs_t *val)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8002642:	f107 0208 	add.w	r2, r7, #8
 8002646:	2301      	movs	r3, #1
 8002648:	2125      	movs	r1, #37	; 0x25
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fd82 	bl	8002154 <iis2dlpc_read_reg>
 8002650:	60f8      	str	r0, [r7, #12]

  switch (reg.fs) {
 8002652:	7a3b      	ldrb	r3, [r7, #8]
 8002654:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b03      	cmp	r3, #3
 800265c:	d81a      	bhi.n	8002694 <iis2dlpc_full_scale_get+0x5c>
 800265e:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <iis2dlpc_full_scale_get+0x2c>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	08002675 	.word	0x08002675
 8002668:	0800267d 	.word	0x0800267d
 800266c:	08002685 	.word	0x08002685
 8002670:	0800268d 	.word	0x0800268d
    case IIS2DLPC_2g:
      *val = IIS2DLPC_2g;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
      break;
 800267a:	e00f      	b.n	800269c <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_4g:
      *val = IIS2DLPC_4g;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
      break;
 8002682:	e00b      	b.n	800269c <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_8g:
      *val = IIS2DLPC_8g;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2202      	movs	r2, #2
 8002688:	701a      	strb	r2, [r3, #0]
      break;
 800268a:	e007      	b.n	800269c <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_16g:
      *val = IIS2DLPC_16g;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2203      	movs	r2, #3
 8002690:	701a      	strb	r2, [r3, #0]
      break;
 8002692:	e003      	b.n	800269c <iis2dlpc_full_scale_get+0x64>

    default:
      *val = IIS2DLPC_2g;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
      break;
 800269a:	bf00      	nop
  }

  return ret;
 800269c:	68fb      	ldr	r3, [r7, #12]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop

080026a8 <iis2dlpc_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_OUT_X_L, buff, 6);
 80026b2:	f107 020c 	add.w	r2, r7, #12
 80026b6:	2306      	movs	r3, #6
 80026b8:	2128      	movs	r1, #40	; 0x28
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fd4a 	bl	8002154 <iis2dlpc_read_reg>
 80026c0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80026c2:	7b7b      	ldrb	r3, [r7, #13]
 80026c4:	b21a      	sxth	r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	7b3b      	ldrb	r3, [r7, #12]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	4413      	add	r3, r2
 80026dc:	b29b      	uxth	r3, r3
 80026de:	b21a      	sxth	r2, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	3302      	adds	r3, #2
 80026ea:	b212      	sxth	r2, r2
 80026ec:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3302      	adds	r3, #2
 80026f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	7bbb      	ldrb	r3, [r7, #14]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	4413      	add	r3, r2
 8002702:	b29a      	uxth	r2, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	3302      	adds	r3, #2
 8002708:	b212      	sxth	r2, r2
 800270a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800270c:	7c7a      	ldrb	r2, [r7, #17]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	3304      	adds	r3, #4
 8002712:	b212      	sxth	r2, r2
 8002714:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	3304      	adds	r3, #4
 800271a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800271e:	b29b      	uxth	r3, r3
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	b29a      	uxth	r2, r3
 8002724:	7c3b      	ldrb	r3, [r7, #16]
 8002726:	b29b      	uxth	r3, r3
 8002728:	4413      	add	r3, r2
 800272a:	b29a      	uxth	r2, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	3304      	adds	r3, #4
 8002730:	b212      	sxth	r2, r2
 8002732:	801a      	strh	r2, [r3, #0]
  return ret;
 8002734:	697b      	ldr	r3, [r7, #20]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 8002748:	2301      	movs	r3, #1
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	210f      	movs	r1, #15
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff fd00 	bl	8002154 <iis2dlpc_read_reg>
 8002754:	60f8      	str	r0, [r7, #12]
  return ret;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <iis2dlpc_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 800276c:	f107 0208 	add.w	r2, r7, #8
 8002770:	2301      	movs	r3, #1
 8002772:	2121      	movs	r1, #33	; 0x21
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff fced 	bl	8002154 <iis2dlpc_read_reg>
 800277a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10f      	bne.n	80027a2 <iis2dlpc_auto_increment_set+0x42>
    reg.if_add_inc = val;
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	b2da      	uxtb	r2, r3
 800278a:	7a3b      	ldrb	r3, [r7, #8]
 800278c:	f362 0382 	bfi	r3, r2, #2, #1
 8002790:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002792:	f107 0208 	add.w	r2, r7, #8
 8002796:	2301      	movs	r3, #1
 8002798:	2121      	movs	r1, #33	; 0x21
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fcf2 	bl	8002184 <iis2dlpc_write_reg>
 80027a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80027a2:	68fb      	ldr	r3, [r7, #12]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <iis2dlpc_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_fifo_mode_set(stmdev_ctx_t *ctx,
                               iis2dlpc_fmode_t val)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_fifo_ctrl_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 80027b8:	f107 0208 	add.w	r2, r7, #8
 80027bc:	2301      	movs	r3, #1
 80027be:	212e      	movs	r1, #46	; 0x2e
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff fcc7 	bl	8002154 <iis2dlpc_read_reg>
 80027c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10f      	bne.n	80027ee <iis2dlpc_fifo_mode_set+0x42>
    reg.fmode = (uint8_t) val;
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	7a3b      	ldrb	r3, [r7, #8]
 80027d8:	f362 1347 	bfi	r3, r2, #5, #3
 80027dc:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg,
 80027de:	f107 0208 	add.w	r2, r7, #8
 80027e2:	2301      	movs	r3, #1
 80027e4:	212e      	movs	r1, #46	; 0x2e
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff fccc 	bl	8002184 <iis2dlpc_write_reg>
 80027ec:	60f8      	str	r0, [r7, #12]
                             1);
  }

  return ret;
 80027ee:	68fb      	ldr	r3, [r7, #12]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <IIS2MDC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	e04b      	b.n	80028ac <IIS2MDC_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	7b1a      	ldrb	r2, [r3, #12]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	695a      	ldr	r2, [r3, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a1a      	ldr	r2, [pc, #104]	; (80028b8 <IIS2MDC_RegisterBusIO+0xc0>)
 8002850:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a19      	ldr	r2, [pc, #100]	; (80028bc <IIS2MDC_RegisterBusIO+0xc4>)
 8002856:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 8002866:	f04f 33ff 	mov.w	r3, #4294967295
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	e01e      	b.n	80028ac <IIS2MDC_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4798      	blx	r3
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e014      	b.n	80028ac <IIS2MDC_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d010      	beq.n	80028ac <IIS2MDC_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <IIS2MDC_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	331c      	adds	r3, #28
 8002898:	2101      	movs	r1, #1
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fbc8 	bl	8003030 <iis2mdc_i2c_interface_set>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <IIS2MDC_RegisterBusIO+0xb4>
          {
            ret = IIS2MDC_ERROR;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295
 80028aa:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80028ac:	68fb      	ldr	r3, [r7, #12]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	08002cb3 	.word	0x08002cb3
 80028bc:	08002d15 	.word	0x08002d15

080028c0 <IIS2MDC_Init>:
 * @brief  Initialize the IIS2MDC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	331c      	adds	r3, #28
 80028cc:	2101      	movs	r1, #1
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fb06 	bl	8002ee0 <iis2mdc_block_data_update_set>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
 80028de:	e028      	b.n	8002932 <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	331c      	adds	r3, #28
 80028e4:	2102      	movs	r1, #2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 fa75 	bl	8002dd6 <iis2mdc_operating_mode_set>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
 80028f6:	e01c      	b.n	8002932 <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	331c      	adds	r3, #28
 80028fc:	2103      	movs	r1, #3
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fa8f 	bl	8002e22 <iis2mdc_data_rate_set>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	e010      	b.n	8002932 <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	331c      	adds	r3, #28
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fb64 	bl	8002fe4 <iis2mdc_self_test_set>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
 8002926:	e004      	b.n	8002932 <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <IIS2MDC_DeInit>:
 * @brief  Deinitialize the IIS2MDC magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f874 	bl	8002a30 <IIS2MDC_MAG_Disable>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	e004      	b.n	800295e <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <IIS2MDC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	331c      	adds	r3, #28
 8002974:	6839      	ldr	r1, [r7, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fb23 	bl	8002fc2 <iis2mdc_device_id_get>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
 8002986:	e000      	b.n	800298a <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <IIS2MDC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
 * @retval Component status
 */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2201      	movs	r2, #1
 80029ae:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2200      	movs	r2, #0
 80029b4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2200      	movs	r2, #0
 80029ba:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2232      	movs	r2, #50	; 0x32
 80029c6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4a04      	ldr	r2, [pc, #16]	; (80029ec <IIS2MDC_GetCapabilities+0x58>)
 80029dc:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	42c80000 	.word	0x42c80000

080029f0 <IIS2MDC_MAG_Enable>:
 * @brief Enable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e010      	b.n	8002a28 <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	331c      	adds	r3, #28
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 f9e2 	bl	8002dd6 <iis2mdc_operating_mode_set>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 8002a18:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1c:	e004      	b.n	8002a28 <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <IIS2MDC_MAG_Disable>:
 * @brief Disable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e010      	b.n	8002a68 <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	331c      	adds	r3, #28
 8002a4a:	2102      	movs	r1, #2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 f9c2 	bl	8002dd6 <iis2mdc_operating_mode_set>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5c:	e004      	b.n	8002a68 <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <IIS2MDC_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002a80:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <IIS2MDC_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	331c      	adds	r3, #28
 8002aa2:	f107 020b 	add.w	r2, r7, #11
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f9e1 	bl	8002e70 <iis2mdc_data_rate_get>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab8:	e023      	b.n	8002b02 <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002aba:	7afb      	ldrb	r3, [r7, #11]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d81b      	bhi.n	8002af8 <IIS2MDC_MAG_GetOutputDataRate+0x68>
 8002ac0:	a201      	add	r2, pc, #4	; (adr r2, 8002ac8 <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 8002ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac6:	bf00      	nop
 8002ac8:	08002ad9 	.word	0x08002ad9
 8002acc:	08002ae1 	.word	0x08002ae1
 8002ad0:	08002ae9 	.word	0x08002ae9
 8002ad4:	08002af1 	.word	0x08002af1
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 8002adc:	601a      	str	r2, [r3, #0]
      break;
 8002ade:	e00f      	b.n	8002b00 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	4a0b      	ldr	r2, [pc, #44]	; (8002b10 <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 8002ae4:	601a      	str	r2, [r3, #0]
      break;
 8002ae6:	e00b      	b.n	8002b00 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 8002aec:	601a      	str	r2, [r3, #0]
      break;
 8002aee:	e007      	b.n	8002b00 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4a09      	ldr	r2, [pc, #36]	; (8002b18 <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 8002af4:	601a      	str	r2, [r3, #0]
      break;
 8002af6:	e003      	b.n	8002b00 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 8002af8:	f04f 33ff 	mov.w	r3, #4294967295
 8002afc:	60fb      	str	r3, [r7, #12]
      break;
 8002afe:	bf00      	nop
  }

  return ret;
 8002b00:	68fb      	ldr	r3, [r7, #12]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	41200000 	.word	0x41200000
 8002b10:	41a00000 	.word	0x41a00000
 8002b14:	42480000 	.word	0x42480000
 8002b18:	42c80000 	.word	0x42c80000

08002b1c <IIS2MDC_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8002b28:	edd7 7a00 	vldr	s15, [r7]
 8002b2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b38:	d801      	bhi.n	8002b3e <IIS2MDC_MAG_SetOutputDataRate+0x22>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e016      	b.n	8002b6c <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8002b3e:	edd7 7a00 	vldr	s15, [r7]
 8002b42:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4e:	d801      	bhi.n	8002b54 <IIS2MDC_MAG_SetOutputDataRate+0x38>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e00b      	b.n	8002b6c <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8002b54:	edd7 7a00 	vldr	s15, [r7]
 8002b58:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002b94 <IIS2MDC_MAG_SetOutputDataRate+0x78>
 8002b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b64:	d801      	bhi.n	8002b6a <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e000      	b.n	8002b6c <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8002b6a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 8002b6c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	331c      	adds	r3, #28
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f953 	bl	8002e22 <iis2mdc_data_rate_set>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295
 8002b86:	e000      	b.n	8002b8a <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	42480000 	.word	0x42480000

08002b98 <IIS2MDC_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2232      	movs	r2, #50	; 0x32
 8002ba6:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <IIS2MDC_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <IIS2MDC_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	331c      	adds	r3, #28
 8002bdc:	f107 0208 	add.w	r2, r7, #8
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f9a2 	bl	8002f2c <iis2mdc_magnetic_raw_get>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	e00c      	b.n	8002c0e <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002bf4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002bfc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002c04:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	331c      	adds	r3, #28
 8002c24:	f107 0210 	add.w	r2, r7, #16
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f97e 	bl	8002f2c <iis2mdc_magnetic_raw_get>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3a:	e036      	b.n	8002caa <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 8002c3c:	f107 030c 	add.w	r3, r7, #12
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ff14 	bl	8002a70 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002c48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c54:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c60:	ee17 2a90 	vmov	r2, s15
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002c68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c6c:	ee07 3a90 	vmov	s15, r3
 8002c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c80:	ee17 2a90 	vmov	r2, s15
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002c88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c8c:	ee07 3a90 	vmov	s15, r3
 8002c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c94:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ca0:	ee17 2a90 	vmov	r2, s15
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002cb2:	b590      	push	{r4, r7, lr}
 8002cb4:	b087      	sub	sp, #28
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	72fb      	strb	r3, [r7, #11]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10e      	bne.n	8002cf0 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	695c      	ldr	r4, [r3, #20]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	7b1b      	ldrb	r3, [r3, #12]
 8002cda:	b298      	uxth	r0, r3
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	b299      	uxth	r1, r3
 8002ce6:	893b      	ldrh	r3, [r7, #8]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	47a0      	blx	r4
 8002cec:	4603      	mov	r3, r0
 8002cee:	e00d      	b.n	8002d0c <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	695c      	ldr	r4, [r3, #20]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	7b1b      	ldrb	r3, [r3, #12]
 8002cf8:	b298      	uxth	r0, r3
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
 8002cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	b299      	uxth	r1, r3
 8002d04:	893b      	ldrh	r3, [r7, #8]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	47a0      	blx	r4
 8002d0a:	4603      	mov	r3, r0
  }
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd90      	pop	{r4, r7, pc}

08002d14 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	460b      	mov	r3, r1
 8002d22:	72fb      	strb	r3, [r7, #11]
 8002d24:	4613      	mov	r3, r2
 8002d26:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10e      	bne.n	8002d52 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	691c      	ldr	r4, [r3, #16]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	7b1b      	ldrb	r3, [r3, #12]
 8002d3c:	b298      	uxth	r0, r3
 8002d3e:	7afb      	ldrb	r3, [r7, #11]
 8002d40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	b299      	uxth	r1, r3
 8002d48:	893b      	ldrh	r3, [r7, #8]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	47a0      	blx	r4
 8002d4e:	4603      	mov	r3, r0
 8002d50:	e00d      	b.n	8002d6e <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	691c      	ldr	r4, [r3, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	7b1b      	ldrb	r3, [r3, #12]
 8002d5a:	b298      	uxth	r0, r3
 8002d5c:	7afb      	ldrb	r3, [r7, #11]
 8002d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	b299      	uxth	r1, r3
 8002d66:	893b      	ldrh	r3, [r7, #8]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	47a0      	blx	r4
 8002d6c:	4603      	mov	r3, r0
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd90      	pop	{r4, r7, pc}

08002d76 <iis2mdc_read_reg>:
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002d76:	b590      	push	{r4, r7, lr}
 8002d78:	b087      	sub	sp, #28
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	461a      	mov	r2, r3
 8002d82:	460b      	mov	r3, r1
 8002d84:	72fb      	strb	r3, [r7, #11]
 8002d86:	4613      	mov	r3, r2
 8002d88:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685c      	ldr	r4, [r3, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6898      	ldr	r0, [r3, #8]
 8002d92:	893b      	ldrh	r3, [r7, #8]
 8002d94:	7af9      	ldrb	r1, [r7, #11]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	47a0      	blx	r4
 8002d9a:	6178      	str	r0, [r7, #20]
  return ret;
 8002d9c:	697b      	ldr	r3, [r7, #20]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}

08002da6 <iis2mdc_write_reg>:
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002da6:	b590      	push	{r4, r7, lr}
 8002da8:	b087      	sub	sp, #28
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	461a      	mov	r2, r3
 8002db2:	460b      	mov	r3, r1
 8002db4:	72fb      	strb	r3, [r7, #11]
 8002db6:	4613      	mov	r3, r2
 8002db8:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681c      	ldr	r4, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6898      	ldr	r0, [r3, #8]
 8002dc2:	893b      	ldrh	r3, [r7, #8]
 8002dc4:	7af9      	ldrb	r1, [r7, #11]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	47a0      	blx	r4
 8002dca:	6178      	str	r0, [r7, #20]
  return ret;
 8002dcc:	697b      	ldr	r3, [r7, #20]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd90      	pop	{r4, r7, pc}

08002dd6 <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002de2:	f107 0208 	add.w	r2, r7, #8
 8002de6:	2301      	movs	r3, #1
 8002de8:	2160      	movs	r1, #96	; 0x60
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff ffc3 	bl	8002d76 <iis2mdc_read_reg>
 8002df0:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10f      	bne.n	8002e18 <iis2mdc_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	7a3b      	ldrb	r3, [r7, #8]
 8002e02:	f362 0301 	bfi	r3, r2, #0, #2
 8002e06:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002e08:	f107 0208 	add.w	r2, r7, #8
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	2160      	movs	r1, #96	; 0x60
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ffc8 	bl	8002da6 <iis2mdc_write_reg>
 8002e16:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e18:	68fb      	ldr	r3, [r7, #12]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002e2e:	f107 0208 	add.w	r2, r7, #8
 8002e32:	2301      	movs	r3, #1
 8002e34:	2160      	movs	r1, #96	; 0x60
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff ff9d 	bl	8002d76 <iis2mdc_read_reg>
 8002e3c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10f      	bne.n	8002e64 <iis2mdc_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	7a3b      	ldrb	r3, [r7, #8]
 8002e4e:	f362 0383 	bfi	r3, r2, #2, #2
 8002e52:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002e54:	f107 0208 	add.w	r2, r7, #8
 8002e58:	2301      	movs	r3, #1
 8002e5a:	2160      	movs	r1, #96	; 0x60
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ffa2 	bl	8002da6 <iis2mdc_write_reg>
 8002e62:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e64:	68fb      	ldr	r3, [r7, #12]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8002e7a:	f107 0208 	add.w	r2, r7, #8
 8002e7e:	2301      	movs	r3, #1
 8002e80:	2160      	movs	r1, #96	; 0x60
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ff77 	bl	8002d76 <iis2mdc_read_reg>
 8002e88:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8002e8a:	7a3b      	ldrb	r3, [r7, #8]
 8002e8c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	d81a      	bhi.n	8002ecc <iis2mdc_data_rate_get+0x5c>
 8002e96:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <iis2mdc_data_rate_get+0x2c>)
 8002e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9c:	08002ead 	.word	0x08002ead
 8002ea0:	08002eb5 	.word	0x08002eb5
 8002ea4:	08002ebd 	.word	0x08002ebd
 8002ea8:	08002ec5 	.word	0x08002ec5
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
      break;
 8002eb2:	e00f      	b.n	8002ed4 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
      break;
 8002eba:	e00b      	b.n	8002ed4 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	701a      	strb	r2, [r3, #0]
      break;
 8002ec2:	e007      	b.n	8002ed4 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	701a      	strb	r2, [r3, #0]
      break;
 8002eca:	e003      	b.n	8002ed4 <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
      break;
 8002ed2:	bf00      	nop
  }

  return ret;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop

08002ee0 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002eec:	f107 0208 	add.w	r2, r7, #8
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	2162      	movs	r1, #98	; 0x62
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff3e 	bl	8002d76 <iis2mdc_read_reg>
 8002efa:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10f      	bne.n	8002f22 <iis2mdc_block_data_update_set+0x42>
    reg.bdu = val;
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	7a3b      	ldrb	r3, [r7, #8]
 8002f0c:	f362 1304 	bfi	r3, r2, #4, #1
 8002f10:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002f12:	f107 0208 	add.w	r2, r7, #8
 8002f16:	2301      	movs	r3, #1
 8002f18:	2162      	movs	r1, #98	; 0x62
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ff43 	bl	8002da6 <iis2mdc_write_reg>
 8002f20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f22:	68fb      	ldr	r3, [r7, #12]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 8002f36:	f107 020c 	add.w	r2, r7, #12
 8002f3a:	2306      	movs	r3, #6
 8002f3c:	2168      	movs	r1, #104	; 0x68
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ff19 	bl	8002d76 <iis2mdc_read_reg>
 8002f44:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002f46:	7b7b      	ldrb	r3, [r7, #13]
 8002f48:	b21a      	sxth	r2, r3
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	021b      	lsls	r3, r3, #8
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	7b3b      	ldrb	r3, [r7, #12]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	4413      	add	r3, r2
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	b21a      	sxth	r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	b212      	sxth	r2, r2
 8002f70:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	3302      	adds	r3, #2
 8002f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	7bbb      	ldrb	r3, [r7, #14]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	b212      	sxth	r2, r2
 8002f8e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002f90:	7c7a      	ldrb	r2, [r7, #17]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	3304      	adds	r3, #4
 8002f96:	b212      	sxth	r2, r2
 8002f98:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	7c3b      	ldrb	r3, [r7, #16]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	b212      	sxth	r2, r2
 8002fb6:	801a      	strh	r2, [r3, #0]
  return ret;
 8002fb8:	697b      	ldr	r3, [r7, #20]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8002fcc:	2301      	movs	r3, #1
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	214f      	movs	r1, #79	; 0x4f
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff fecf 	bl	8002d76 <iis2mdc_read_reg>
 8002fd8:	60f8      	str	r0, [r7, #12]
  return ret;
 8002fda:	68fb      	ldr	r3, [r7, #12]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8002ff0:	f107 0208 	add.w	r2, r7, #8
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	2162      	movs	r1, #98	; 0x62
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff febc 	bl	8002d76 <iis2mdc_read_reg>
 8002ffe:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10f      	bne.n	8003026 <iis2mdc_self_test_set+0x42>
    reg.self_test = val;
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	b2da      	uxtb	r2, r3
 800300e:	7a3b      	ldrb	r3, [r7, #8]
 8003010:	f362 0341 	bfi	r3, r2, #1, #1
 8003014:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003016:	f107 0208 	add.w	r2, r7, #8
 800301a:	2301      	movs	r3, #1
 800301c:	2162      	movs	r1, #98	; 0x62
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff fec1 	bl	8002da6 <iis2mdc_write_reg>
 8003024:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800303c:	f107 0208 	add.w	r2, r7, #8
 8003040:	2301      	movs	r3, #1
 8003042:	2162      	movs	r1, #98	; 0x62
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fe96 	bl	8002d76 <iis2mdc_read_reg>
 800304a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10f      	bne.n	8003072 <iis2mdc_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 8003052:	78fb      	ldrb	r3, [r7, #3]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	b2da      	uxtb	r2, r3
 800305a:	7a3b      	ldrb	r3, [r7, #8]
 800305c:	f362 1345 	bfi	r3, r2, #5, #1
 8003060:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003062:	f107 0208 	add.w	r2, r7, #8
 8003066:	2301      	movs	r3, #1
 8003068:	2162      	movs	r1, #98	; 0x62
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fe9b 	bl	8002da6 <iis2mdc_write_reg>
 8003070:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <ISM330DHCX_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d103      	bne.n	8003098 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 8003090:	f04f 33ff 	mov.w	r3, #4294967295
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e04d      	b.n	8003134 <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	7b1a      	ldrb	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	699a      	ldr	r2, [r3, #24]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <ISM330DHCX_RegisterBusIO+0xc4>)
 80030d4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a1a      	ldr	r2, [pc, #104]	; (8003144 <ISM330DHCX_RegisterBusIO+0xc8>)
 80030da:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	e020      	b.n	8003134 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4798      	blx	r3
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	e016      	b.n	8003134 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d112      	bne.n	8003134 <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10d      	bne.n	8003134 <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003118:	230c      	movs	r3, #12
 800311a:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 800311c:	7afb      	ldrb	r3, [r7, #11]
 800311e:	461a      	mov	r2, r3
 8003120:	2112      	movs	r1, #18
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fd61 	bl	8003bea <ISM330DHCX_Write_Reg>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 800312e:	f04f 33ff 	mov.w	r3, #4294967295
 8003132:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003134:	68fb      	ldr	r3, [r7, #12]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	08004059 	.word	0x08004059
 8003144:	0800408f 	.word	0x0800408f

08003148 <ISM330DHCX_Init>:
 * @brief  Initialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	331c      	adds	r3, #28
 8003154:	2101      	movs	r1, #1
 8003156:	4618      	mov	r0, r3
 8003158:	f001 fd20 	bl	8004b9c <ism330dhcx_device_conf_set>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295
 8003166:	e078      	b.n	800325a <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	331c      	adds	r3, #28
 800316c:	2101      	movs	r1, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f001 fd97 	bl	8004ca2 <ism330dhcx_auto_increment_set>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
 800317e:	e06c      	b.n	800325a <ISM330DHCX_Init+0x112>
  }

    /* SW reset */
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	331c      	adds	r3, #28
 8003184:	2101      	movs	r1, #1
 8003186:	4618      	mov	r0, r3
 8003188:	f001 fd65 	bl	8004c56 <ism330dhcx_reset_set>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 8003192:	f04f 33ff 	mov.w	r3, #4294967295
 8003196:	e060      	b.n	800325a <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	331c      	adds	r3, #28
 800319c:	2101      	movs	r1, #1
 800319e:	4618      	mov	r0, r3
 80031a0:	f001 fd7f 	bl	8004ca2 <ism330dhcx_auto_increment_set>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	e054      	b.n	800325a <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	331c      	adds	r3, #28
 80031b4:	2101      	movs	r1, #1
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 fc34 	bl	8004a24 <ism330dhcx_block_data_update_set>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	e048      	b.n	800325a <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	331c      	adds	r3, #28
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 fd8d 	bl	8004cee <ism330dhcx_fifo_mode_set>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 80031da:	f04f 33ff 	mov.w	r3, #4294967295
 80031de:	e03c      	b.n	800325a <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2204      	movs	r2, #4
 80031e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	331c      	adds	r3, #28
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fff6 	bl	80041e0 <ism330dhcx_xl_data_rate_set>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 80031fa:	f04f 33ff 	mov.w	r3, #4294967295
 80031fe:	e02c      	b.n	800325a <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	331c      	adds	r3, #28
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f000 ff8c 	bl	8004124 <ism330dhcx_xl_full_scale_set>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 8003212:	f04f 33ff 	mov.w	r3, #4294967295
 8003216:	e020      	b.n	800325a <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2204      	movs	r2, #4
 800321c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	331c      	adds	r3, #28
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f001 fa2a 	bl	8004680 <ism330dhcx_gy_data_rate_set>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 8003232:	f04f 33ff 	mov.w	r3, #4294967295
 8003236:	e010      	b.n	800325a <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	331c      	adds	r3, #28
 800323c:	210c      	movs	r1, #12
 800323e:	4618      	mov	r0, r3
 8003240:	f001 f9a6 	bl	8004590 <ism330dhcx_gy_full_scale_set>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 800324a:	f04f 33ff 	mov.w	r3, #4294967295
 800324e:	e004      	b.n	800325a <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <ISM330DHCX_DeInit>:
 * @brief  Deinitialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f888 	bl	8003380 <ISM330DHCX_ACC_Disable>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8003276:	f04f 33ff 	mov.w	r3, #4294967295
 800327a:	e015      	b.n	80032a8 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fa92 	bl	80037a6 <ISM330DHCX_GYRO_Disable>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8003288:	f04f 33ff 	mov.w	r3, #4294967295
 800328c:	e00c      	b.n	80032a8 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <ISM330DHCX_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	331c      	adds	r3, #28
 80032be:	6839      	ldr	r1, [r7, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f001 fcb7 	bl	8004c34 <ism330dhcx_device_id_get>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 80032cc:	f04f 33ff 	mov.w	r3, #4294967295
 80032d0:	e000      	b.n	80032d4 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2201      	movs	r2, #1
 80032f0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2200      	movs	r2, #0
 80032f6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2200      	movs	r2, #0
 80032fc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003304:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2210      	movs	r2, #16
 800330a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2200      	movs	r2, #0
 8003310:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	4a07      	ldr	r2, [pc, #28]	; (8003334 <ISM330DHCX_GetCapabilities+0x58>)
 8003316:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4a06      	ldr	r2, [pc, #24]	; (8003334 <ISM330DHCX_GetCapabilities+0x58>)
 800331c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	45d05800 	.word	0x45d05800

08003338 <ISM330DHCX_ACC_Enable>:
 * @brief  Enable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	e014      	b.n	8003378 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f103 021c 	add.w	r2, r3, #28
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f000 ff3f 	bl	80041e0 <ism330dhcx_xl_data_rate_set>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8003368:	f04f 33ff 	mov.w	r3, #4294967295
 800336c:	e004      	b.n	8003378 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <ISM330DHCX_ACC_Disable>:
 * @brief  Disable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	e01f      	b.n	80033d6 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f103 021c 	add.w	r2, r3, #28
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	332b      	adds	r3, #43	; 0x2b
 80033a0:	4619      	mov	r1, r3
 80033a2:	4610      	mov	r0, r2
 80033a4:	f001 f88c 	bl	80044c0 <ism330dhcx_xl_data_rate_get>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 80033ae:	f04f 33ff 	mov.w	r3, #4294967295
 80033b2:	e010      	b.n	80033d6 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	331c      	adds	r3, #28
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 ff10 	bl	80041e0 <ism330dhcx_xl_data_rate_set>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ca:	e004      	b.n	80033d6 <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <ISM330DHCX_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	331c      	adds	r3, #28
 80033f2:	f107 020b 	add.w	r2, r7, #11
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 feb9 	bl	8004170 <ism330dhcx_xl_full_scale_get>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003404:	f04f 33ff 	mov.w	r3, #4294967295
 8003408:	e023      	b.n	8003452 <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800340a:	7afb      	ldrb	r3, [r7, #11]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d81b      	bhi.n	8003448 <ISM330DHCX_ACC_GetSensitivity+0x68>
 8003410:	a201      	add	r2, pc, #4	; (adr r2, 8003418 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 8003412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003416:	bf00      	nop
 8003418:	08003429 	.word	0x08003429
 800341c:	08003441 	.word	0x08003441
 8003420:	08003431 	.word	0x08003431
 8003424:	08003439 	.word	0x08003439
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	4a0c      	ldr	r2, [pc, #48]	; (800345c <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 800342c:	601a      	str	r2, [r3, #0]
      break;
 800342e:	e00f      	b.n	8003450 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4a0b      	ldr	r2, [pc, #44]	; (8003460 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8003434:	601a      	str	r2, [r3, #0]
      break;
 8003436:	e00b      	b.n	8003450 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 800343c:	601a      	str	r2, [r3, #0]
      break;
 800343e:	e007      	b.n	8003450 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8003444:	601a      	str	r2, [r3, #0]
      break;
 8003446:	e003      	b.n	8003450 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8003448:	f04f 33ff 	mov.w	r3, #4294967295
 800344c:	60fb      	str	r3, [r7, #12]
      break;
 800344e:	bf00      	nop
  }

  return ret;
 8003450:	68fb      	ldr	r3, [r7, #12]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	3d79db23 	.word	0x3d79db23
 8003460:	3df9db23 	.word	0x3df9db23
 8003464:	3e79db23 	.word	0x3e79db23
 8003468:	3ef9db23 	.word	0x3ef9db23

0800346c <ISM330DHCX_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	331c      	adds	r3, #28
 800347e:	f107 020b 	add.w	r2, r7, #11
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f001 f81b 	bl	80044c0 <ism330dhcx_xl_data_rate_get>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003490:	f04f 33ff 	mov.w	r3, #4294967295
 8003494:	e04e      	b.n	8003534 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003496:	7afb      	ldrb	r3, [r7, #11]
 8003498:	2b0a      	cmp	r3, #10
 800349a:	d846      	bhi.n	800352a <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 800349c:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 800349e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a2:	bf00      	nop
 80034a4:	080034d1 	.word	0x080034d1
 80034a8:	080034db 	.word	0x080034db
 80034ac:	080034e3 	.word	0x080034e3
 80034b0:	080034eb 	.word	0x080034eb
 80034b4:	080034f3 	.word	0x080034f3
 80034b8:	080034fb 	.word	0x080034fb
 80034bc:	08003503 	.word	0x08003503
 80034c0:	0800350b 	.word	0x0800350b
 80034c4:	08003513 	.word	0x08003513
 80034c8:	0800351b 	.word	0x0800351b
 80034cc:	08003523 	.word	0x08003523
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
      break;
 80034d8:	e02b      	b.n	8003532 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	4a17      	ldr	r2, [pc, #92]	; (800353c <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 80034de:	601a      	str	r2, [r3, #0]
      break;
 80034e0:	e027      	b.n	8003532 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	4a16      	ldr	r2, [pc, #88]	; (8003540 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 80034e6:	601a      	str	r2, [r3, #0]
      break;
 80034e8:	e023      	b.n	8003532 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	4a15      	ldr	r2, [pc, #84]	; (8003544 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 80034ee:	601a      	str	r2, [r3, #0]
      break;
 80034f0:	e01f      	b.n	8003532 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	4a14      	ldr	r2, [pc, #80]	; (8003548 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 80034f6:	601a      	str	r2, [r3, #0]
      break;
 80034f8:	e01b      	b.n	8003532 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	4a13      	ldr	r2, [pc, #76]	; (800354c <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 80034fe:	601a      	str	r2, [r3, #0]
      break;
 8003500:	e017      	b.n	8003532 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_417Hz:
      *Odr = 417.0f;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	4a12      	ldr	r2, [pc, #72]	; (8003550 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 8003506:	601a      	str	r2, [r3, #0]
      break;
 8003508:	e013      	b.n	8003532 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	4a11      	ldr	r2, [pc, #68]	; (8003554 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 800350e:	601a      	str	r2, [r3, #0]
      break;
 8003510:	e00f      	b.n	8003532 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	4a10      	ldr	r2, [pc, #64]	; (8003558 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 8003516:	601a      	str	r2, [r3, #0]
      break;
 8003518:	e00b      	b.n	8003532 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	4a0f      	ldr	r2, [pc, #60]	; (800355c <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 800351e:	601a      	str	r2, [r3, #0]
      break;
 8003520:	e007      	b.n	8003532 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	4a0e      	ldr	r2, [pc, #56]	; (8003560 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 8003526:	601a      	str	r2, [r3, #0]
      break;
 8003528:	e003      	b.n	8003532 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 800352a:	f04f 33ff 	mov.w	r3, #4294967295
 800352e:	60fb      	str	r3, [r7, #12]
      break;
 8003530:	bf00      	nop
  }

  return ret;
 8003532:	68fb      	ldr	r3, [r7, #12]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	41480000 	.word	0x41480000
 8003540:	41d00000 	.word	0x41d00000
 8003544:	42500000 	.word	0x42500000
 8003548:	42d00000 	.word	0x42d00000
 800354c:	43500000 	.word	0x43500000
 8003550:	43d08000 	.word	0x43d08000
 8003554:	44504000 	.word	0x44504000
 8003558:	44d06000 	.word	0x44d06000
 800355c:	45505000 	.word	0x45505000
 8003560:	45d05800 	.word	0x45d05800

08003564 <ISM330DHCX_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003576:	2b01      	cmp	r3, #1
 8003578:	d106      	bne.n	8003588 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800357a:	ed97 0a00 	vldr	s0, [r7]
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fb4e 	bl	8003c20 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8003584:	4603      	mov	r3, r0
 8003586:	e005      	b.n	8003594 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003588:	ed97 0a00 	vldr	s0, [r7]
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fbd3 	bl	8003d38 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8003592:	4603      	mov	r3, r0
  }
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <ISM330DHCX_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	331c      	adds	r3, #28
 80035ae:	f107 020b 	add.w	r2, r7, #11
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fddb 	bl	8004170 <ism330dhcx_xl_full_scale_get>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 80035c0:	f04f 33ff 	mov.w	r3, #4294967295
 80035c4:	e023      	b.n	800360e <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d81b      	bhi.n	8003604 <ISM330DHCX_ACC_GetFullScale+0x68>
 80035cc:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <ISM330DHCX_ACC_GetFullScale+0x38>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	080035e5 	.word	0x080035e5
 80035d8:	080035fd 	.word	0x080035fd
 80035dc:	080035ed 	.word	0x080035ed
 80035e0:	080035f5 	.word	0x080035f5
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2202      	movs	r2, #2
 80035e8:	601a      	str	r2, [r3, #0]
      break;
 80035ea:	e00f      	b.n	800360c <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2204      	movs	r2, #4
 80035f0:	601a      	str	r2, [r3, #0]
      break;
 80035f2:	e00b      	b.n	800360c <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2208      	movs	r2, #8
 80035f8:	601a      	str	r2, [r3, #0]
      break;
 80035fa:	e007      	b.n	800360c <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2210      	movs	r2, #16
 8003600:	601a      	str	r2, [r3, #0]
      break;
 8003602:	e003      	b.n	800360c <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
 8003608:	60fb      	str	r3, [r7, #12]
      break;
 800360a:	bf00      	nop
  }

  return ret;
 800360c:	68fb      	ldr	r3, [r7, #12]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop

08003618 <ISM330DHCX_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b02      	cmp	r3, #2
 8003626:	dd0b      	ble.n	8003640 <ISM330DHCX_ACC_SetFullScale+0x28>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b04      	cmp	r3, #4
 800362c:	dd06      	ble.n	800363c <ISM330DHCX_ACC_SetFullScale+0x24>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b08      	cmp	r3, #8
 8003632:	dc01      	bgt.n	8003638 <ISM330DHCX_ACC_SetFullScale+0x20>
 8003634:	2303      	movs	r3, #3
 8003636:	e004      	b.n	8003642 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8003638:	2301      	movs	r3, #1
 800363a:	e002      	b.n	8003642 <ISM330DHCX_ACC_SetFullScale+0x2a>
 800363c:	2302      	movs	r3, #2
 800363e:	e000      	b.n	8003642 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8003640:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 8003642:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	331c      	adds	r3, #28
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	4611      	mov	r1, r2
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fd69 	bl	8004124 <ism330dhcx_xl_full_scale_set>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8003658:	f04f 33ff 	mov.w	r3, #4294967295
 800365c:	e000      	b.n	8003660 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <ISM330DHCX_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	331c      	adds	r3, #28
 8003676:	f107 0208 	add.w	r2, r7, #8
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f001 fa42 	bl	8004b06 <ism330dhcx_acceleration_raw_get>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8003688:	f04f 33ff 	mov.w	r3, #4294967295
 800368c:	e00c      	b.n	80036a8 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800368e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003696:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800369e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <ISM330DHCX_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	331c      	adds	r3, #28
 80036c4:	f107 0210 	add.w	r2, r7, #16
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 fa1b 	bl	8004b06 <ism330dhcx_acceleration_raw_get>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 80036d6:	f04f 33ff 	mov.w	r3, #4294967295
 80036da:	e03c      	b.n	8003756 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 80036dc:	f107 030c 	add.w	r3, r7, #12
 80036e0:	4619      	mov	r1, r3
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff fe7c 	bl	80033e0 <ISM330DHCX_ACC_GetSensitivity>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 80036ee:	f04f 33ff 	mov.w	r3, #4294967295
 80036f2:	e030      	b.n	8003756 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80036f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003700:	edd7 7a03 	vldr	s15, [r7, #12]
 8003704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800370c:	ee17 2a90 	vmov	r2, s15
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003714:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003718:	ee07 3a90 	vmov	s15, r3
 800371c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003720:	edd7 7a03 	vldr	s15, [r7, #12]
 8003724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800372c:	ee17 2a90 	vmov	r2, s15
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003734:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003738:	ee07 3a90 	vmov	s15, r3
 800373c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003740:	edd7 7a03 	vldr	s15, [r7, #12]
 8003744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800374c:	ee17 2a90 	vmov	r2, s15
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <ISM330DHCX_GYRO_Enable>:
 * @brief  Enable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	e014      	b.n	800379e <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f103 021c 	add.w	r2, r3, #28
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 ff7c 	bl	8004680 <ism330dhcx_gy_data_rate_set>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 800378e:	f04f 33ff 	mov.w	r3, #4294967295
 8003792:	e004      	b.n	800379e <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <ISM330DHCX_GYRO_Disable>:
 * @brief  Disable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e01f      	b.n	80037fc <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f103 021c 	add.w	r2, r3, #28
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	332c      	adds	r3, #44	; 0x2c
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f001 f8c9 	bl	8004960 <ism330dhcx_gy_data_rate_get>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
 80037d8:	e010      	b.n	80037fc <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	331c      	adds	r3, #28
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 ff4d 	bl	8004680 <ism330dhcx_gy_data_rate_set>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 80037ec:	f04f 33ff 	mov.w	r3, #4294967295
 80037f0:	e004      	b.n	80037fc <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <ISM330DHCX_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	331c      	adds	r3, #28
 8003816:	f107 020b 	add.w	r2, r7, #11
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fedd 	bl	80045dc <ism330dhcx_gy_full_scale_get>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003828:	f04f 33ff 	mov.w	r3, #4294967295
 800382c:	e039      	b.n	80038a2 <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 800382e:	7afb      	ldrb	r3, [r7, #11]
 8003830:	2b0c      	cmp	r3, #12
 8003832:	d831      	bhi.n	8003898 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 8003834:	a201      	add	r2, pc, #4	; (adr r2, 800383c <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8003836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383a:	bf00      	nop
 800383c:	08003879 	.word	0x08003879
 8003840:	08003899 	.word	0x08003899
 8003844:	08003871 	.word	0x08003871
 8003848:	08003899 	.word	0x08003899
 800384c:	08003881 	.word	0x08003881
 8003850:	08003899 	.word	0x08003899
 8003854:	08003899 	.word	0x08003899
 8003858:	08003899 	.word	0x08003899
 800385c:	08003889 	.word	0x08003889
 8003860:	08003899 	.word	0x08003899
 8003864:	08003899 	.word	0x08003899
 8003868:	08003899 	.word	0x08003899
 800386c:	08003891 	.word	0x08003891
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4a0e      	ldr	r2, [pc, #56]	; (80038ac <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 8003874:	601a      	str	r2, [r3, #0]
      break;
 8003876:	e013      	b.n	80038a0 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	4a0d      	ldr	r2, [pc, #52]	; (80038b0 <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 800387c:	601a      	str	r2, [r3, #0]
      break;
 800387e:	e00f      	b.n	80038a0 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8003884:	601a      	str	r2, [r3, #0]
      break;
 8003886:	e00b      	b.n	80038a0 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	4a0b      	ldr	r2, [pc, #44]	; (80038b8 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 800388c:	601a      	str	r2, [r3, #0]
      break;
 800388e:	e007      	b.n	80038a0 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8003894:	601a      	str	r2, [r3, #0]
      break;
 8003896:	e003      	b.n	80038a0 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 8003898:	f04f 33ff 	mov.w	r3, #4294967295
 800389c:	60fb      	str	r3, [r7, #12]
      break;
 800389e:	bf00      	nop
  }

  return ret;
 80038a0:	68fb      	ldr	r3, [r7, #12]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	408c0000 	.word	0x408c0000
 80038b0:	410c0000 	.word	0x410c0000
 80038b4:	418c0000 	.word	0x418c0000
 80038b8:	420c0000 	.word	0x420c0000
 80038bc:	428c0000 	.word	0x428c0000

080038c0 <ISM330DHCX_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	331c      	adds	r3, #28
 80038d2:	f107 020b 	add.w	r2, r7, #11
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f001 f841 	bl	8004960 <ism330dhcx_gy_data_rate_get>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80038e4:	f04f 33ff 	mov.w	r3, #4294967295
 80038e8:	e04e      	b.n	8003988 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80038ea:	7afb      	ldrb	r3, [r7, #11]
 80038ec:	2b0a      	cmp	r3, #10
 80038ee:	d846      	bhi.n	800397e <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 80038f0:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	08003925 	.word	0x08003925
 80038fc:	0800392f 	.word	0x0800392f
 8003900:	08003937 	.word	0x08003937
 8003904:	0800393f 	.word	0x0800393f
 8003908:	08003947 	.word	0x08003947
 800390c:	0800394f 	.word	0x0800394f
 8003910:	08003957 	.word	0x08003957
 8003914:	0800395f 	.word	0x0800395f
 8003918:	08003967 	.word	0x08003967
 800391c:	0800396f 	.word	0x0800396f
 8003920:	08003977 	.word	0x08003977
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
      break;
 800392c:	e02b      	b.n	8003986 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	4a17      	ldr	r2, [pc, #92]	; (8003990 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8003932:	601a      	str	r2, [r3, #0]
      break;
 8003934:	e027      	b.n	8003986 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	4a16      	ldr	r2, [pc, #88]	; (8003994 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 800393a:	601a      	str	r2, [r3, #0]
      break;
 800393c:	e023      	b.n	8003986 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	4a15      	ldr	r2, [pc, #84]	; (8003998 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 8003942:	601a      	str	r2, [r3, #0]
      break;
 8003944:	e01f      	b.n	8003986 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	4a14      	ldr	r2, [pc, #80]	; (800399c <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 800394a:	601a      	str	r2, [r3, #0]
      break;
 800394c:	e01b      	b.n	8003986 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	4a13      	ldr	r2, [pc, #76]	; (80039a0 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 8003952:	601a      	str	r2, [r3, #0]
      break;
 8003954:	e017      	b.n	8003986 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_417Hz:
      *Odr = 417.0f;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 800395a:	601a      	str	r2, [r3, #0]
      break;
 800395c:	e013      	b.n	8003986 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	4a11      	ldr	r2, [pc, #68]	; (80039a8 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 8003962:	601a      	str	r2, [r3, #0]
      break;
 8003964:	e00f      	b.n	8003986 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	4a10      	ldr	r2, [pc, #64]	; (80039ac <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 800396a:	601a      	str	r2, [r3, #0]
      break;
 800396c:	e00b      	b.n	8003986 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	4a0f      	ldr	r2, [pc, #60]	; (80039b0 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 8003972:	601a      	str	r2, [r3, #0]
      break;
 8003974:	e007      	b.n	8003986 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	4a0e      	ldr	r2, [pc, #56]	; (80039b4 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 800397a:	601a      	str	r2, [r3, #0]
      break;
 800397c:	e003      	b.n	8003986 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 800397e:	f04f 33ff 	mov.w	r3, #4294967295
 8003982:	60fb      	str	r3, [r7, #12]
      break;
 8003984:	bf00      	nop
  }

  return ret;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	41480000 	.word	0x41480000
 8003994:	41d00000 	.word	0x41d00000
 8003998:	42500000 	.word	0x42500000
 800399c:	42d00000 	.word	0x42d00000
 80039a0:	43500000 	.word	0x43500000
 80039a4:	43d08000 	.word	0x43d08000
 80039a8:	44504000 	.word	0x44504000
 80039ac:	44d06000 	.word	0x44d06000
 80039b0:	45505000 	.word	0x45505000
 80039b4:	45d05800 	.word	0x45d05800

080039b8 <ISM330DHCX_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d106      	bne.n	80039dc <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80039ce:	ed97 0a00 	vldr	s0, [r7]
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa32 	bl	8003e3c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 80039d8:	4603      	mov	r3, r0
 80039da:	e005      	b.n	80039e8 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 80039dc:	ed97 0a00 	vldr	s0, [r7]
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fab7 	bl	8003f54 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 80039e6:	4603      	mov	r3, r0
  }
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <ISM330DHCX_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	331c      	adds	r3, #28
 8003a02:	f107 020b 	add.w	r2, r7, #11
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 fde7 	bl	80045dc <ism330dhcx_gy_full_scale_get>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003a14:	f04f 33ff 	mov.w	r3, #4294967295
 8003a18:	e03c      	b.n	8003a94 <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 8003a1a:	7afb      	ldrb	r3, [r7, #11]
 8003a1c:	2b0c      	cmp	r3, #12
 8003a1e:	d834      	bhi.n	8003a8a <ISM330DHCX_GYRO_GetFullScale+0x9a>
 8003a20:	a201      	add	r2, pc, #4	; (adr r2, 8003a28 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 8003a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a26:	bf00      	nop
 8003a28:	08003a65 	.word	0x08003a65
 8003a2c:	08003a8b 	.word	0x08003a8b
 8003a30:	08003a5d 	.word	0x08003a5d
 8003a34:	08003a8b 	.word	0x08003a8b
 8003a38:	08003a6d 	.word	0x08003a6d
 8003a3c:	08003a8b 	.word	0x08003a8b
 8003a40:	08003a8b 	.word	0x08003a8b
 8003a44:	08003a8b 	.word	0x08003a8b
 8003a48:	08003a77 	.word	0x08003a77
 8003a4c:	08003a8b 	.word	0x08003a8b
 8003a50:	08003a8b 	.word	0x08003a8b
 8003a54:	08003a8b 	.word	0x08003a8b
 8003a58:	08003a81 	.word	0x08003a81
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	227d      	movs	r2, #125	; 0x7d
 8003a60:	601a      	str	r2, [r3, #0]
      break;
 8003a62:	e016      	b.n	8003a92 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	22fa      	movs	r2, #250	; 0xfa
 8003a68:	601a      	str	r2, [r3, #0]
      break;
 8003a6a:	e012      	b.n	8003a92 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a72:	601a      	str	r2, [r3, #0]
      break;
 8003a74:	e00d      	b.n	8003a92 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a7c:	601a      	str	r2, [r3, #0]
      break;
 8003a7e:	e008      	b.n	8003a92 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003a86:	601a      	str	r2, [r3, #0]
      break;
 8003a88:	e003      	b.n	8003a92 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 8003a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8e:	60fb      	str	r3, [r7, #12]
      break;
 8003a90:	bf00      	nop
  }

  return ret;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <ISM330DHCX_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b7d      	cmp	r3, #125	; 0x7d
 8003aaa:	dd12      	ble.n	8003ad2 <ISM330DHCX_GYRO_SetFullScale+0x36>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2bfa      	cmp	r3, #250	; 0xfa
 8003ab0:	dd0d      	ble.n	8003ace <ISM330DHCX_GYRO_SetFullScale+0x32>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ab8:	dd07      	ble.n	8003aca <ISM330DHCX_GYRO_SetFullScale+0x2e>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ac0:	dc01      	bgt.n	8003ac6 <ISM330DHCX_GYRO_SetFullScale+0x2a>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	e006      	b.n	8003ad4 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	e004      	b.n	8003ad4 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003aca:	2304      	movs	r3, #4
 8003acc:	e002      	b.n	8003ad4 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e000      	b.n	8003ad4 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003ad2:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8003ad4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	331c      	adds	r3, #28
 8003ada:	7bfa      	ldrb	r2, [r7, #15]
 8003adc:	4611      	mov	r1, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fd56 	bl	8004590 <ism330dhcx_gy_full_scale_set>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295
 8003aee:	e000      	b.n	8003af2 <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <ISM330DHCX_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	331c      	adds	r3, #28
 8003b08:	f107 0208 	add.w	r2, r7, #8
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 ffae 	bl	8004a70 <ism330dhcx_angular_rate_raw_get>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	e00c      	b.n	8003b3a <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003b20:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003b28:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003b30:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <ISM330DHCX_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b086      	sub	sp, #24
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	331c      	adds	r3, #28
 8003b50:	f107 0210 	add.w	r2, r7, #16
 8003b54:	4611      	mov	r1, r2
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 ff8a 	bl	8004a70 <ism330dhcx_angular_rate_raw_get>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 8003b62:	f04f 33ff 	mov.w	r3, #4294967295
 8003b66:	e03c      	b.n	8003be2 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8003b68:	f107 030c 	add.w	r3, r7, #12
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff fe48 	bl	8003804 <ISM330DHCX_GYRO_GetSensitivity>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7e:	e030      	b.n	8003be2 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003b80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b84:	ee07 3a90 	vmov	s15, r3
 8003b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b98:	ee17 2a90 	vmov	r2, s15
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003ba0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ba4:	ee07 3a90 	vmov	s15, r3
 8003ba8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bac:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bb8:	ee17 2a90 	vmov	r2, s15
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003bc0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003bc4:	ee07 3a90 	vmov	s15, r3
 8003bc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bd8:	ee17 2a90 	vmov	r2, s15
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <ISM330DHCX_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	70fb      	strb	r3, [r7, #3]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f103 001c 	add.w	r0, r3, #28
 8003c00:	1cba      	adds	r2, r7, #2
 8003c02:	78f9      	ldrb	r1, [r7, #3]
 8003c04:	2301      	movs	r3, #1
 8003c06:	f000 fa75 	bl	80040f4 <ism330dhcx_write_reg>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	e000      	b.n	8003c18 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003c2c:	edd7 7a00 	vldr	s15, [r7]
 8003c30:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3c:	d801      	bhi.n	8003c42 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e058      	b.n	8003cf4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c42:	edd7 7a00 	vldr	s15, [r7]
 8003c46:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c52:	d801      	bhi.n	8003c58 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e04d      	b.n	8003cf4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c58:	edd7 7a00 	vldr	s15, [r7]
 8003c5c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003d1c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8003c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c68:	d801      	bhi.n	8003c6e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e042      	b.n	8003cf4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c6e:	edd7 7a00 	vldr	s15, [r7]
 8003c72:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003d20 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 8003c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7e:	d801      	bhi.n	8003c84 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003c80:	2304      	movs	r3, #4
 8003c82:	e037      	b.n	8003cf4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c84:	edd7 7a00 	vldr	s15, [r7]
 8003c88:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003d24 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c94:	d801      	bhi.n	8003c9a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8003c96:	2305      	movs	r3, #5
 8003c98:	e02c      	b.n	8003cf4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003c9a:	edd7 7a00 	vldr	s15, [r7]
 8003c9e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003d28 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 8003ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003caa:	d801      	bhi.n	8003cb0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003cac:	2306      	movs	r3, #6
 8003cae:	e021      	b.n	8003cf4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003cb0:	edd7 7a00 	vldr	s15, [r7]
 8003cb4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003d2c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8003cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc0:	d801      	bhi.n	8003cc6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8003cc2:	2307      	movs	r3, #7
 8003cc4:	e016      	b.n	8003cf4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003cc6:	edd7 7a00 	vldr	s15, [r7]
 8003cca:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003d30 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 8003cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd6:	d801      	bhi.n	8003cdc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003cd8:	2308      	movs	r3, #8
 8003cda:	e00b      	b.n	8003cf4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003cdc:	edd7 7a00 	vldr	s15, [r7]
 8003ce0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003d34 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8003ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cec:	d801      	bhi.n	8003cf2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8003cee:	2309      	movs	r3, #9
 8003cf0:	e000      	b.n	8003cf4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8003cf2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8003cf4:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
          :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	331c      	adds	r3, #28
 8003cfa:	7bfa      	ldrb	r2, [r7, #15]
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fa6e 	bl	80041e0 <ism330dhcx_xl_data_rate_set>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d002      	beq.n	8003d10 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0e:	e000      	b.n	8003d12 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	42500000 	.word	0x42500000
 8003d20:	42d00000 	.word	0x42d00000
 8003d24:	43500000 	.word	0x43500000
 8003d28:	43d08000 	.word	0x43d08000
 8003d2c:	44504000 	.word	0x44504000
 8003d30:	44d06000 	.word	0x44d06000
 8003d34:	45505000 	.word	0x45505000

08003d38 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8003d44:	edd7 7a00 	vldr	s15, [r7]
 8003d48:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d54:	d801      	bhi.n	8003d5a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e058      	b.n	8003e0c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d5a:	edd7 7a00 	vldr	s15, [r7]
 8003d5e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6a:	d801      	bhi.n	8003d70 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e04d      	b.n	8003e0c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d70:	edd7 7a00 	vldr	s15, [r7]
 8003d74:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003e20 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8003d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d80:	d801      	bhi.n	8003d86 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003d82:	2303      	movs	r3, #3
 8003d84:	e042      	b.n	8003e0c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d86:	edd7 7a00 	vldr	s15, [r7]
 8003d8a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003e24 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 8003d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d96:	d801      	bhi.n	8003d9c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	e037      	b.n	8003e0c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003d9c:	edd7 7a00 	vldr	s15, [r7]
 8003da0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003e28 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8003da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dac:	d801      	bhi.n	8003db2 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003dae:	2305      	movs	r3, #5
 8003db0:	e02c      	b.n	8003e0c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003db2:	edd7 7a00 	vldr	s15, [r7]
 8003db6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003e2c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc2:	d801      	bhi.n	8003dc8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003dc4:	2306      	movs	r3, #6
 8003dc6:	e021      	b.n	8003e0c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003dc8:	edd7 7a00 	vldr	s15, [r7]
 8003dcc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003e30 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd8:	d801      	bhi.n	8003dde <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8003dda:	2307      	movs	r3, #7
 8003ddc:	e016      	b.n	8003e0c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003dde:	edd7 7a00 	vldr	s15, [r7]
 8003de2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003e34 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8003de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dee:	d801      	bhi.n	8003df4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8003df0:	2308      	movs	r3, #8
 8003df2:	e00b      	b.n	8003e0c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003df4:	edd7 7a00 	vldr	s15, [r7]
 8003df8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003e38 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8003dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e04:	d801      	bhi.n	8003e0a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8003e06:	2309      	movs	r3, #9
 8003e08:	e000      	b.n	8003e0c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003e0a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
                :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	42500000 	.word	0x42500000
 8003e24:	42d00000 	.word	0x42d00000
 8003e28:	43500000 	.word	0x43500000
 8003e2c:	43d08000 	.word	0x43d08000
 8003e30:	44504000 	.word	0x44504000
 8003e34:	44d06000 	.word	0x44d06000
 8003e38:	45505000 	.word	0x45505000

08003e3c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003e48:	edd7 7a00 	vldr	s15, [r7]
 8003e4c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e58:	d801      	bhi.n	8003e5e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e058      	b.n	8003f10 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e5e:	edd7 7a00 	vldr	s15, [r7]
 8003e62:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003e66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6e:	d801      	bhi.n	8003e74 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e04d      	b.n	8003f10 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e74:	edd7 7a00 	vldr	s15, [r7]
 8003e78:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003f38 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8003e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e84:	d801      	bhi.n	8003e8a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8003e86:	2303      	movs	r3, #3
 8003e88:	e042      	b.n	8003f10 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003e8a:	edd7 7a00 	vldr	s15, [r7]
 8003e8e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003f3c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8003e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9a:	d801      	bhi.n	8003ea0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	e037      	b.n	8003f10 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003ea0:	edd7 7a00 	vldr	s15, [r7]
 8003ea4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003f40 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8003ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb0:	d801      	bhi.n	8003eb6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8003eb2:	2305      	movs	r3, #5
 8003eb4:	e02c      	b.n	8003f10 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003eb6:	edd7 7a00 	vldr	s15, [r7]
 8003eba:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003f44 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8003ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec6:	d801      	bhi.n	8003ecc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8003ec8:	2306      	movs	r3, #6
 8003eca:	e021      	b.n	8003f10 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003ecc:	edd7 7a00 	vldr	s15, [r7]
 8003ed0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003f48 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8003ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003edc:	d801      	bhi.n	8003ee2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8003ede:	2307      	movs	r3, #7
 8003ee0:	e016      	b.n	8003f10 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003ee2:	edd7 7a00 	vldr	s15, [r7]
 8003ee6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003f4c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8003eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef2:	d801      	bhi.n	8003ef8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8003ef4:	2308      	movs	r3, #8
 8003ef6:	e00b      	b.n	8003f10 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003ef8:	edd7 7a00 	vldr	s15, [r7]
 8003efc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003f50 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8003f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f08:	d801      	bhi.n	8003f0e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8003f0a:	2309      	movs	r3, #9
 8003f0c:	e000      	b.n	8003f10 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8003f0e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8003f10:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
          :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	331c      	adds	r3, #28
 8003f16:	7bfa      	ldrb	r2, [r7, #15]
 8003f18:	4611      	mov	r1, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fbb0 	bl	8004680 <ism330dhcx_gy_data_rate_set>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2a:	e000      	b.n	8003f2e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	42500000 	.word	0x42500000
 8003f3c:	42d00000 	.word	0x42d00000
 8003f40:	43500000 	.word	0x43500000
 8003f44:	43d08000 	.word	0x43d08000
 8003f48:	44504000 	.word	0x44504000
 8003f4c:	44d06000 	.word	0x44d06000
 8003f50:	45505000 	.word	0x45505000

08003f54 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8003f60:	edd7 7a00 	vldr	s15, [r7]
 8003f64:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8003f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f70:	d801      	bhi.n	8003f76 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e058      	b.n	8004028 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003f76:	edd7 7a00 	vldr	s15, [r7]
 8003f7a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f86:	d801      	bhi.n	8003f8c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e04d      	b.n	8004028 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003f8c:	edd7 7a00 	vldr	s15, [r7]
 8003f90:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800403c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8003f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9c:	d801      	bhi.n	8003fa2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e042      	b.n	8004028 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003fa2:	edd7 7a00 	vldr	s15, [r7]
 8003fa6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004040 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8003faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb2:	d801      	bhi.n	8003fb8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	e037      	b.n	8004028 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003fb8:	edd7 7a00 	vldr	s15, [r7]
 8003fbc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004044 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8003fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc8:	d801      	bhi.n	8003fce <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8003fca:	2305      	movs	r3, #5
 8003fcc:	e02c      	b.n	8004028 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003fce:	edd7 7a00 	vldr	s15, [r7]
 8003fd2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004048 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8003fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fde:	d801      	bhi.n	8003fe4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8003fe0:	2306      	movs	r3, #6
 8003fe2:	e021      	b.n	8004028 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003fe4:	edd7 7a00 	vldr	s15, [r7]
 8003fe8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800404c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8003fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff4:	d801      	bhi.n	8003ffa <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8003ff6:	2307      	movs	r3, #7
 8003ff8:	e016      	b.n	8004028 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8003ffa:	edd7 7a00 	vldr	s15, [r7]
 8003ffe:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004050 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400a:	d801      	bhi.n	8004010 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800400c:	2308      	movs	r3, #8
 800400e:	e00b      	b.n	8004028 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004010:	edd7 7a00 	vldr	s15, [r7]
 8004014:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004054 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800401c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004020:	d801      	bhi.n	8004026 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004022:	2309      	movs	r3, #9
 8004024:	e000      	b.n	8004028 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004026:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
                 :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	42500000 	.word	0x42500000
 8004040:	42d00000 	.word	0x42d00000
 8004044:	43500000 	.word	0x43500000
 8004048:	43d08000 	.word	0x43d08000
 800404c:	44504000 	.word	0x44504000
 8004050:	44d06000 	.word	0x44d06000
 8004054:	45505000 	.word	0x45505000

08004058 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004058:	b590      	push	{r4, r7, lr}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	461a      	mov	r2, r3
 8004064:	460b      	mov	r3, r1
 8004066:	72fb      	strb	r3, [r7, #11]
 8004068:	4613      	mov	r3, r2
 800406a:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	695c      	ldr	r4, [r3, #20]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	7b1b      	ldrb	r3, [r3, #12]
 8004078:	b298      	uxth	r0, r3
 800407a:	7afb      	ldrb	r3, [r7, #11]
 800407c:	b299      	uxth	r1, r3
 800407e:	893b      	ldrh	r3, [r7, #8]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	47a0      	blx	r4
 8004084:	4603      	mov	r3, r0
}
 8004086:	4618      	mov	r0, r3
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	bd90      	pop	{r4, r7, pc}

0800408e <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800408e:	b590      	push	{r4, r7, lr}
 8004090:	b087      	sub	sp, #28
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	461a      	mov	r2, r3
 800409a:	460b      	mov	r3, r1
 800409c:	72fb      	strb	r3, [r7, #11]
 800409e:	4613      	mov	r3, r2
 80040a0:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	691c      	ldr	r4, [r3, #16]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	7b1b      	ldrb	r3, [r3, #12]
 80040ae:	b298      	uxth	r0, r3
 80040b0:	7afb      	ldrb	r3, [r7, #11]
 80040b2:	b299      	uxth	r1, r3
 80040b4:	893b      	ldrh	r3, [r7, #8]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	47a0      	blx	r4
 80040ba:	4603      	mov	r3, r0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd90      	pop	{r4, r7, pc}

080040c4 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 80040c4:	b590      	push	{r4, r7, lr}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	461a      	mov	r2, r3
 80040d0:	460b      	mov	r3, r1
 80040d2:	72fb      	strb	r3, [r7, #11]
 80040d4:	4613      	mov	r3, r2
 80040d6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	685c      	ldr	r4, [r3, #4]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6898      	ldr	r0, [r3, #8]
 80040e0:	893b      	ldrh	r3, [r7, #8]
 80040e2:	7af9      	ldrb	r1, [r7, #11]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	47a0      	blx	r4
 80040e8:	6178      	str	r0, [r7, #20]
  return ret;
 80040ea:	697b      	ldr	r3, [r7, #20]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd90      	pop	{r4, r7, pc}

080040f4 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 80040f4:	b590      	push	{r4, r7, lr}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	461a      	mov	r2, r3
 8004100:	460b      	mov	r3, r1
 8004102:	72fb      	strb	r3, [r7, #11]
 8004104:	4613      	mov	r3, r2
 8004106:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681c      	ldr	r4, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6898      	ldr	r0, [r3, #8]
 8004110:	893b      	ldrh	r3, [r7, #8]
 8004112:	7af9      	ldrb	r1, [r7, #11]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	47a0      	blx	r4
 8004118:	6178      	str	r0, [r7, #20]
  return ret;
 800411a:	697b      	ldr	r3, [r7, #20]
}
 800411c:	4618      	mov	r0, r3
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	bd90      	pop	{r4, r7, pc}

08004124 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004130:	f107 0208 	add.w	r2, r7, #8
 8004134:	2301      	movs	r3, #1
 8004136:	2110      	movs	r1, #16
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ffc3 	bl	80040c4 <ism330dhcx_read_reg>
 800413e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0) {
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10f      	bne.n	8004166 <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	f003 0303 	and.w	r3, r3, #3
 800414c:	b2da      	uxtb	r2, r3
 800414e:	7a3b      	ldrb	r3, [r7, #8]
 8004150:	f362 0383 	bfi	r3, r2, #2, #2
 8004154:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004156:	f107 0208 	add.w	r2, r7, #8
 800415a:	2301      	movs	r3, #1
 800415c:	2110      	movs	r1, #16
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ffc8 	bl	80040f4 <ism330dhcx_write_reg>
 8004164:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004166:	68fb      	ldr	r3, [r7, #12]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800417a:	f107 0208 	add.w	r2, r7, #8
 800417e:	2301      	movs	r3, #1
 8004180:	2110      	movs	r1, #16
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff ff9e 	bl	80040c4 <ism330dhcx_read_reg>
 8004188:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl) {
 800418a:	7a3b      	ldrb	r3, [r7, #8]
 800418c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b03      	cmp	r3, #3
 8004194:	d81a      	bhi.n	80041cc <ism330dhcx_xl_full_scale_get+0x5c>
 8004196:	a201      	add	r2, pc, #4	; (adr r2, 800419c <ism330dhcx_xl_full_scale_get+0x2c>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	080041ad 	.word	0x080041ad
 80041a0:	080041b5 	.word	0x080041b5
 80041a4:	080041bd 	.word	0x080041bd
 80041a8:	080041c5 	.word	0x080041c5
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2200      	movs	r2, #0
 80041b0:	701a      	strb	r2, [r3, #0]
      break;
 80041b2:	e00f      	b.n	80041d4 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2201      	movs	r2, #1
 80041b8:	701a      	strb	r2, [r3, #0]
      break;
 80041ba:	e00b      	b.n	80041d4 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	2202      	movs	r2, #2
 80041c0:	701a      	strb	r2, [r3, #0]
      break;
 80041c2:	e007      	b.n	80041d4 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2203      	movs	r2, #3
 80041c8:	701a      	strb	r2, [r3, #0]
      break;
 80041ca:	e003      	b.n	80041d4 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
      break;
 80041d2:	bf00      	nop
  }

  return ret;
 80041d4:	68fb      	ldr	r3, [r7, #12]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop

080041e0 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 80041f0:	f107 030c 	add.w	r3, r7, #12
 80041f4:	4619      	mov	r1, r3
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fd9f 	bl	8004d3a <ism330dhcx_fsm_enable_get>
 80041fc:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f040 80c4 	bne.w	800438e <ism330dhcx_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004206:	7b3b      	ldrb	r3, [r7, #12]
 8004208:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800420c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800420e:	7b3b      	ldrb	r3, [r7, #12]
 8004210:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004214:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004216:	4313      	orrs	r3, r2
 8004218:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800421a:	7b3b      	ldrb	r3, [r7, #12]
 800421c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004220:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004222:	4313      	orrs	r3, r2
 8004224:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004226:	7b3b      	ldrb	r3, [r7, #12]
 8004228:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800422c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800422e:	4313      	orrs	r3, r2
 8004230:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004232:	7b3b      	ldrb	r3, [r7, #12]
 8004234:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004238:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800423a:	4313      	orrs	r3, r2
 800423c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800423e:	7b3b      	ldrb	r3, [r7, #12]
 8004240:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004244:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004246:	4313      	orrs	r3, r2
 8004248:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800424a:	7b3b      	ldrb	r3, [r7, #12]
 800424c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004250:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004252:	4313      	orrs	r3, r2
 8004254:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004256:	7b3b      	ldrb	r3, [r7, #12]
 8004258:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800425c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800425e:	4313      	orrs	r3, r2
 8004260:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004262:	7b7b      	ldrb	r3, [r7, #13]
 8004264:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004268:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800426a:	4313      	orrs	r3, r2
 800426c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800426e:	7b7b      	ldrb	r3, [r7, #13]
 8004270:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004274:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004276:	4313      	orrs	r3, r2
 8004278:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800427a:	7b7b      	ldrb	r3, [r7, #13]
 800427c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004280:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8004282:	4313      	orrs	r3, r2
 8004284:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8004286:	7b7b      	ldrb	r3, [r7, #13]
 8004288:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800428c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800428e:	4313      	orrs	r3, r2
 8004290:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8004292:	7b7b      	ldrb	r3, [r7, #13]
 8004294:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004298:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 800429a:	4313      	orrs	r3, r2
 800429c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800429e:	7b7b      	ldrb	r3, [r7, #13]
 80042a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80042a4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80042a6:	4313      	orrs	r3, r2
 80042a8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80042aa:	7b7b      	ldrb	r3, [r7, #13]
 80042ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80042b0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80042b2:	4313      	orrs	r3, r2
 80042b4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 80042b6:	7b7b      	ldrb	r3, [r7, #13]
 80042b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80042bc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80042be:	4313      	orrs	r3, r2
 80042c0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d163      	bne.n	800438e <ism330dhcx_xl_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80042c6:	f107 030b 	add.w	r3, r7, #11
 80042ca:	4619      	mov	r1, r3
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fd61 	bl	8004d94 <ism330dhcx_fsm_data_rate_get>
 80042d2:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d159      	bne.n	800438e <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80042da:	7afb      	ldrb	r3, [r7, #11]
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d853      	bhi.n	8004388 <ism330dhcx_xl_data_rate_set+0x1a8>
 80042e0:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <ism330dhcx_xl_data_rate_set+0x108>)
 80042e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e6:	bf00      	nop
 80042e8:	080042f9 	.word	0x080042f9
 80042ec:	0800430b 	.word	0x0800430b
 80042f0:	08004329 	.word	0x08004329
 80042f4:	08004353 	.word	0x08004353
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80042f8:	78fb      	ldrb	r3, [r7, #3]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d102      	bne.n	8004304 <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80042fe:	2301      	movs	r3, #1
 8004300:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004302:	e045      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	75fb      	strb	r3, [r7, #23]
            break;
 8004308:	e042      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004310:	2302      	movs	r3, #2
 8004312:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004314:	e03c      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d102      	bne.n	8004322 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800431c:	2302      	movs	r3, #2
 800431e:	75fb      	strb	r3, [r7, #23]
            break;
 8004320:	e036      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	75fb      	strb	r3, [r7, #23]
            break;
 8004326:	e033      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d102      	bne.n	8004334 <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800432e:	2303      	movs	r3, #3
 8004330:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004332:	e02d      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d102      	bne.n	8004340 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800433a:	2303      	movs	r3, #3
 800433c:	75fb      	strb	r3, [r7, #23]
            break;
 800433e:	e027      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d102      	bne.n	800434c <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004346:	2303      	movs	r3, #3
 8004348:	75fb      	strb	r3, [r7, #23]
            break;
 800434a:	e021      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	75fb      	strb	r3, [r7, #23]
            break;
 8004350:	e01e      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d102      	bne.n	800435e <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004358:	2304      	movs	r3, #4
 800435a:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 800435c:	e018      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d102      	bne.n	800436a <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004364:	2304      	movs	r3, #4
 8004366:	75fb      	strb	r3, [r7, #23]
            break;
 8004368:	e012      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 800436a:	78fb      	ldrb	r3, [r7, #3]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d102      	bne.n	8004376 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004370:	2304      	movs	r3, #4
 8004372:	75fb      	strb	r3, [r7, #23]
            break;
 8004374:	e00c      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d102      	bne.n	8004382 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800437c:	2304      	movs	r3, #4
 800437e:	75fb      	strb	r3, [r7, #23]
            break;
 8004380:	e006      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	75fb      	strb	r3, [r7, #23]
            break;
 8004386:	e003      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	75fb      	strb	r3, [r7, #23]
            break;
 800438c:	e000      	b.n	8004390 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 800438e:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8004390:	2300      	movs	r3, #0
 8004392:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d16d      	bne.n	8004476 <ism330dhcx_xl_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800439a:	f107 030a 	add.w	r3, r7, #10
 800439e:	4619      	mov	r1, r3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 fd3f 	bl	8004e24 <ism330dhcx_mlc_get>
 80043a6:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 80043a8:	7abb      	ldrb	r3, [r7, #10]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d163      	bne.n	8004476 <ism330dhcx_xl_data_rate_set+0x296>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80043ae:	f107 0309 	add.w	r3, r7, #9
 80043b2:	4619      	mov	r1, r3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fd5f 	bl	8004e78 <ism330dhcx_mlc_data_rate_get>
 80043ba:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d159      	bne.n	8004476 <ism330dhcx_xl_data_rate_set+0x296>
        switch (mlc_odr) {
 80043c2:	7a7b      	ldrb	r3, [r7, #9]
 80043c4:	2b03      	cmp	r3, #3
 80043c6:	d853      	bhi.n	8004470 <ism330dhcx_xl_data_rate_set+0x290>
 80043c8:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <ism330dhcx_xl_data_rate_set+0x1f0>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	080043e1 	.word	0x080043e1
 80043d4:	080043f3 	.word	0x080043f3
 80043d8:	08004411 	.word	0x08004411
 80043dc:	0800443b 	.word	0x0800443b
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <ism330dhcx_xl_data_rate_set+0x20c>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80043e6:	2301      	movs	r3, #1
 80043e8:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80043ea:	e045      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	75fb      	strb	r3, [r7, #23]
            break;
 80043f0:	e042      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <ism330dhcx_xl_data_rate_set+0x21e>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80043f8:	2302      	movs	r3, #2
 80043fa:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80043fc:	e03c      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d102      	bne.n	800440a <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004404:	2302      	movs	r3, #2
 8004406:	75fb      	strb	r3, [r7, #23]
            break;
 8004408:	e036      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	75fb      	strb	r3, [r7, #23]
            break;
 800440e:	e033      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <ism330dhcx_xl_data_rate_set+0x23c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004416:	2303      	movs	r3, #3
 8004418:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 800441a:	e02d      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 800441c:	78fb      	ldrb	r3, [r7, #3]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d102      	bne.n	8004428 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004422:	2303      	movs	r3, #3
 8004424:	75fb      	strb	r3, [r7, #23]
            break;
 8004426:	e027      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d102      	bne.n	8004434 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800442e:	2303      	movs	r3, #3
 8004430:	75fb      	strb	r3, [r7, #23]
            break;
 8004432:	e021      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	75fb      	strb	r3, [r7, #23]
            break;
 8004438:	e01e      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <ism330dhcx_xl_data_rate_set+0x266>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004440:	2304      	movs	r3, #4
 8004442:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004444:	e018      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d102      	bne.n	8004452 <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800444c:	2304      	movs	r3, #4
 800444e:	75fb      	strb	r3, [r7, #23]
            break;
 8004450:	e012      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d102      	bne.n	800445e <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004458:	2304      	movs	r3, #4
 800445a:	75fb      	strb	r3, [r7, #23]
            break;
 800445c:	e00c      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d102      	bne.n	800446a <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004464:	2304      	movs	r3, #4
 8004466:	75fb      	strb	r3, [r7, #23]
            break;
 8004468:	e006      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	75fb      	strb	r3, [r7, #23]
            break;
 800446e:	e003      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	75fb      	strb	r3, [r7, #23]
            break;
 8004474:	e000      	b.n	8004478 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 8004476:	bf00      	nop
    }
  }

  if (ret == 0) {
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d107      	bne.n	800448e <ism330dhcx_xl_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800447e:	f107 0208 	add.w	r2, r7, #8
 8004482:	2301      	movs	r3, #1
 8004484:	2110      	movs	r1, #16
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff fe1c 	bl	80040c4 <ism330dhcx_read_reg>
 800448c:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0) {
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10f      	bne.n	80044b4 <ism330dhcx_xl_data_rate_set+0x2d4>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8004494:	7dfb      	ldrb	r3, [r7, #23]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	b2da      	uxtb	r2, r3
 800449c:	7a3b      	ldrb	r3, [r7, #8]
 800449e:	f362 1307 	bfi	r3, r2, #4, #4
 80044a2:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80044a4:	f107 0208 	add.w	r2, r7, #8
 80044a8:	2301      	movs	r3, #1
 80044aa:	2110      	movs	r1, #16
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff fe21 	bl	80040f4 <ism330dhcx_write_reg>
 80044b2:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80044b4:	693b      	ldr	r3, [r7, #16]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop

080044c0 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80044ca:	f107 0208 	add.w	r2, r7, #8
 80044ce:	2301      	movs	r3, #1
 80044d0:	2110      	movs	r1, #16
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff fdf6 	bl	80040c4 <ism330dhcx_read_reg>
 80044d8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl) {
 80044da:	7a3b      	ldrb	r3, [r7, #8]
 80044dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b0b      	cmp	r3, #11
 80044e4:	d84a      	bhi.n	800457c <ism330dhcx_xl_data_rate_get+0xbc>
 80044e6:	a201      	add	r2, pc, #4	; (adr r2, 80044ec <ism330dhcx_xl_data_rate_get+0x2c>)
 80044e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ec:	0800451d 	.word	0x0800451d
 80044f0:	08004525 	.word	0x08004525
 80044f4:	0800452d 	.word	0x0800452d
 80044f8:	08004535 	.word	0x08004535
 80044fc:	0800453d 	.word	0x0800453d
 8004500:	08004545 	.word	0x08004545
 8004504:	0800454d 	.word	0x0800454d
 8004508:	08004555 	.word	0x08004555
 800450c:	0800455d 	.word	0x0800455d
 8004510:	08004565 	.word	0x08004565
 8004514:	0800456d 	.word	0x0800456d
 8004518:	08004575 	.word	0x08004575
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]
      break;
 8004522:	e02f      	b.n	8004584 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
      break;
 800452a:	e02b      	b.n	8004584 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	2202      	movs	r2, #2
 8004530:	701a      	strb	r2, [r3, #0]
      break;
 8004532:	e027      	b.n	8004584 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2203      	movs	r2, #3
 8004538:	701a      	strb	r2, [r3, #0]
      break;
 800453a:	e023      	b.n	8004584 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2204      	movs	r2, #4
 8004540:	701a      	strb	r2, [r3, #0]
      break;
 8004542:	e01f      	b.n	8004584 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2205      	movs	r2, #5
 8004548:	701a      	strb	r2, [r3, #0]
      break;
 800454a:	e01b      	b.n	8004584 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_417Hz:
      *val = ISM330DHCX_XL_ODR_417Hz;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2206      	movs	r2, #6
 8004550:	701a      	strb	r2, [r3, #0]
      break;
 8004552:	e017      	b.n	8004584 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2207      	movs	r2, #7
 8004558:	701a      	strb	r2, [r3, #0]
      break;
 800455a:	e013      	b.n	8004584 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1667Hz:
      *val = ISM330DHCX_XL_ODR_1667Hz;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2208      	movs	r2, #8
 8004560:	701a      	strb	r2, [r3, #0]
      break;
 8004562:	e00f      	b.n	8004584 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3333Hz:
      *val = ISM330DHCX_XL_ODR_3333Hz;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2209      	movs	r2, #9
 8004568:	701a      	strb	r2, [r3, #0]
      break;
 800456a:	e00b      	b.n	8004584 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	220a      	movs	r2, #10
 8004570:	701a      	strb	r2, [r3, #0]
      break;
 8004572:	e007      	b.n	8004584 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6Hz5:
      *val = ISM330DHCX_XL_ODR_6Hz5;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	220b      	movs	r2, #11
 8004578:	701a      	strb	r2, [r3, #0]
      break;
 800457a:	e003      	b.n	8004584 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2200      	movs	r2, #0
 8004580:	701a      	strb	r2, [r3, #0]
      break;
 8004582:	bf00      	nop
  }

  return ret;
 8004584:	68fb      	ldr	r3, [r7, #12]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop

08004590 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800459c:	f107 0208 	add.w	r2, r7, #8
 80045a0:	2301      	movs	r3, #1
 80045a2:	2111      	movs	r1, #17
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff fd8d 	bl	80040c4 <ism330dhcx_read_reg>
 80045aa:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0) {
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10f      	bne.n	80045d2 <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	7a3b      	ldrb	r3, [r7, #8]
 80045bc:	f362 0303 	bfi	r3, r2, #0, #4
 80045c0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 80045c2:	f107 0208 	add.w	r2, r7, #8
 80045c6:	2301      	movs	r3, #1
 80045c8:	2111      	movs	r1, #17
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff fd92 	bl	80040f4 <ism330dhcx_write_reg>
 80045d0:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 80045d2:	68fb      	ldr	r3, [r7, #12]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 80045e6:	f107 0208 	add.w	r2, r7, #8
 80045ea:	2301      	movs	r3, #1
 80045ec:	2111      	movs	r1, #17
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff fd68 	bl	80040c4 <ism330dhcx_read_reg>
 80045f4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g) {
 80045f6:	7a3b      	ldrb	r3, [r7, #8]
 80045f8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b0c      	cmp	r3, #12
 8004600:	d834      	bhi.n	800466c <ism330dhcx_gy_full_scale_get+0x90>
 8004602:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <ism330dhcx_gy_full_scale_get+0x2c>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	08004645 	.word	0x08004645
 800460c:	08004665 	.word	0x08004665
 8004610:	0800463d 	.word	0x0800463d
 8004614:	0800466d 	.word	0x0800466d
 8004618:	0800464d 	.word	0x0800464d
 800461c:	0800466d 	.word	0x0800466d
 8004620:	0800466d 	.word	0x0800466d
 8004624:	0800466d 	.word	0x0800466d
 8004628:	08004655 	.word	0x08004655
 800462c:	0800466d 	.word	0x0800466d
 8004630:	0800466d 	.word	0x0800466d
 8004634:	0800466d 	.word	0x0800466d
 8004638:	0800465d 	.word	0x0800465d
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2202      	movs	r2, #2
 8004640:	701a      	strb	r2, [r3, #0]
      break;
 8004642:	e017      	b.n	8004674 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
      break;
 800464a:	e013      	b.n	8004674 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2204      	movs	r2, #4
 8004650:	701a      	strb	r2, [r3, #0]
      break;
 8004652:	e00f      	b.n	8004674 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2208      	movs	r2, #8
 8004658:	701a      	strb	r2, [r3, #0]
      break;
 800465a:	e00b      	b.n	8004674 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	220c      	movs	r2, #12
 8004660:	701a      	strb	r2, [r3, #0]
      break;
 8004662:	e007      	b.n	8004674 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2201      	movs	r2, #1
 8004668:	701a      	strb	r2, [r3, #0]
      break;
 800466a:	e003      	b.n	8004674 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2202      	movs	r2, #2
 8004670:	701a      	strb	r2, [r3, #0]
      break;
 8004672:	bf00      	nop
  }

  return ret;
 8004674:	68fb      	ldr	r3, [r7, #12]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop

08004680 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8004690:	f107 030c 	add.w	r3, r7, #12
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 fb4f 	bl	8004d3a <ism330dhcx_fsm_enable_get>
 800469c:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 80c4 	bne.w	800482e <ism330dhcx_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80046a6:	7b3b      	ldrb	r3, [r7, #12]
 80046a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80046ac:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80046ae:	7b3b      	ldrb	r3, [r7, #12]
 80046b0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80046b4:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80046b6:	4313      	orrs	r3, r2
 80046b8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80046ba:	7b3b      	ldrb	r3, [r7, #12]
 80046bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80046c0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80046c2:	4313      	orrs	r3, r2
 80046c4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80046c6:	7b3b      	ldrb	r3, [r7, #12]
 80046c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80046cc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80046ce:	4313      	orrs	r3, r2
 80046d0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80046d2:	7b3b      	ldrb	r3, [r7, #12]
 80046d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80046d8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80046da:	4313      	orrs	r3, r2
 80046dc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80046de:	7b3b      	ldrb	r3, [r7, #12]
 80046e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80046e4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80046e6:	4313      	orrs	r3, r2
 80046e8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80046ea:	7b3b      	ldrb	r3, [r7, #12]
 80046ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80046f0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80046f2:	4313      	orrs	r3, r2
 80046f4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80046f6:	7b3b      	ldrb	r3, [r7, #12]
 80046f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80046fc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80046fe:	4313      	orrs	r3, r2
 8004700:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004702:	7b7b      	ldrb	r3, [r7, #13]
 8004704:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004708:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 800470a:	4313      	orrs	r3, r2
 800470c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800470e:	7b7b      	ldrb	r3, [r7, #13]
 8004710:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004714:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004716:	4313      	orrs	r3, r2
 8004718:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800471a:	7b7b      	ldrb	r3, [r7, #13]
 800471c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004720:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8004722:	4313      	orrs	r3, r2
 8004724:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8004726:	7b7b      	ldrb	r3, [r7, #13]
 8004728:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800472c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800472e:	4313      	orrs	r3, r2
 8004730:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8004732:	7b7b      	ldrb	r3, [r7, #13]
 8004734:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004738:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 800473a:	4313      	orrs	r3, r2
 800473c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800473e:	7b7b      	ldrb	r3, [r7, #13]
 8004740:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004744:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8004746:	4313      	orrs	r3, r2
 8004748:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800474a:	7b7b      	ldrb	r3, [r7, #13]
 800474c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004750:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8004752:	4313      	orrs	r3, r2
 8004754:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8004756:	7b7b      	ldrb	r3, [r7, #13]
 8004758:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800475c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800475e:	4313      	orrs	r3, r2
 8004760:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004762:	2b01      	cmp	r3, #1
 8004764:	d163      	bne.n	800482e <ism330dhcx_gy_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8004766:	f107 030b 	add.w	r3, r7, #11
 800476a:	4619      	mov	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fb11 	bl	8004d94 <ism330dhcx_fsm_data_rate_get>
 8004772:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d159      	bne.n	800482e <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800477a:	7afb      	ldrb	r3, [r7, #11]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d853      	bhi.n	8004828 <ism330dhcx_gy_data_rate_set+0x1a8>
 8004780:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <ism330dhcx_gy_data_rate_set+0x108>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	08004799 	.word	0x08004799
 800478c:	080047ab 	.word	0x080047ab
 8004790:	080047c9 	.word	0x080047c9
 8004794:	080047f3 	.word	0x080047f3
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d102      	bne.n	80047a4 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 800479e:	2301      	movs	r3, #1
 80047a0:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80047a2:	e045      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	75fb      	strb	r3, [r7, #23]
            break;
 80047a8:	e042      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80047aa:	78fb      	ldrb	r3, [r7, #3]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80047b0:	2302      	movs	r3, #2
 80047b2:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80047b4:	e03c      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80047b6:	78fb      	ldrb	r3, [r7, #3]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d102      	bne.n	80047c2 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80047bc:	2302      	movs	r3, #2
 80047be:	75fb      	strb	r3, [r7, #23]
            break;
 80047c0:	e036      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	75fb      	strb	r3, [r7, #23]
            break;
 80047c6:	e033      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d102      	bne.n	80047d4 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80047ce:	2303      	movs	r3, #3
 80047d0:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80047d2:	e02d      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d102      	bne.n	80047e0 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80047da:	2303      	movs	r3, #3
 80047dc:	75fb      	strb	r3, [r7, #23]
            break;
 80047de:	e027      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d102      	bne.n	80047ec <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80047e6:	2303      	movs	r3, #3
 80047e8:	75fb      	strb	r3, [r7, #23]
            break;
 80047ea:	e021      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	75fb      	strb	r3, [r7, #23]
            break;
 80047f0:	e01e      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80047f8:	2304      	movs	r3, #4
 80047fa:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80047fc:	e018      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d102      	bne.n	800480a <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004804:	2304      	movs	r3, #4
 8004806:	75fb      	strb	r3, [r7, #23]
            break;
 8004808:	e012      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	2b02      	cmp	r3, #2
 800480e:	d102      	bne.n	8004816 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004810:	2304      	movs	r3, #4
 8004812:	75fb      	strb	r3, [r7, #23]
            break;
 8004814:	e00c      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8004816:	78fb      	ldrb	r3, [r7, #3]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d102      	bne.n	8004822 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 800481c:	2304      	movs	r3, #4
 800481e:	75fb      	strb	r3, [r7, #23]
            break;
 8004820:	e006      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	75fb      	strb	r3, [r7, #23]
            break;
 8004826:	e003      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	75fb      	strb	r3, [r7, #23]
            break;
 800482c:	e000      	b.n	8004830 <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 800482e:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8004830:	2300      	movs	r3, #0
 8004832:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d16d      	bne.n	8004916 <ism330dhcx_gy_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 800483a:	f107 030a 	add.w	r3, r7, #10
 800483e:	4619      	mov	r1, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 faef 	bl	8004e24 <ism330dhcx_mlc_get>
 8004846:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8004848:	7abb      	ldrb	r3, [r7, #10]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d163      	bne.n	8004916 <ism330dhcx_gy_data_rate_set+0x296>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800484e:	f107 0309 	add.w	r3, r7, #9
 8004852:	4619      	mov	r1, r3
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fb0f 	bl	8004e78 <ism330dhcx_mlc_data_rate_get>
 800485a:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d159      	bne.n	8004916 <ism330dhcx_gy_data_rate_set+0x296>
        switch (mlc_odr) {
 8004862:	7a7b      	ldrb	r3, [r7, #9]
 8004864:	2b03      	cmp	r3, #3
 8004866:	d853      	bhi.n	8004910 <ism330dhcx_gy_data_rate_set+0x290>
 8004868:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <ism330dhcx_gy_data_rate_set+0x1f0>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004881 	.word	0x08004881
 8004874:	08004893 	.word	0x08004893
 8004878:	080048b1 	.word	0x080048b1
 800487c:	080048db 	.word	0x080048db
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d102      	bne.n	800488c <ism330dhcx_gy_data_rate_set+0x20c>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8004886:	2301      	movs	r3, #1
 8004888:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800488a:	e045      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 800488c:	78fb      	ldrb	r3, [r7, #3]
 800488e:	75fb      	strb	r3, [r7, #23]
            break;
 8004890:	e042      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <ism330dhcx_gy_data_rate_set+0x21e>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004898:	2302      	movs	r3, #2
 800489a:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 800489c:	e03c      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 800489e:	78fb      	ldrb	r3, [r7, #3]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d102      	bne.n	80048aa <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80048a4:	2302      	movs	r3, #2
 80048a6:	75fb      	strb	r3, [r7, #23]
            break;
 80048a8:	e036      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80048aa:	78fb      	ldrb	r3, [r7, #3]
 80048ac:	75fb      	strb	r3, [r7, #23]
            break;
 80048ae:	e033      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80048b0:	78fb      	ldrb	r3, [r7, #3]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d102      	bne.n	80048bc <ism330dhcx_gy_data_rate_set+0x23c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80048b6:	2303      	movs	r3, #3
 80048b8:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80048ba:	e02d      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d102      	bne.n	80048c8 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80048c2:	2303      	movs	r3, #3
 80048c4:	75fb      	strb	r3, [r7, #23]
            break;
 80048c6:	e027      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d102      	bne.n	80048d4 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80048ce:	2303      	movs	r3, #3
 80048d0:	75fb      	strb	r3, [r7, #23]
            break;
 80048d2:	e021      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	75fb      	strb	r3, [r7, #23]
            break;
 80048d8:	e01e      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <ism330dhcx_gy_data_rate_set+0x266>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80048e0:	2304      	movs	r3, #4
 80048e2:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 80048e4:	e018      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d102      	bne.n	80048f2 <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80048ec:	2304      	movs	r3, #4
 80048ee:	75fb      	strb	r3, [r7, #23]
            break;
 80048f0:	e012      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 80048f2:	78fb      	ldrb	r3, [r7, #3]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d102      	bne.n	80048fe <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 80048f8:	2304      	movs	r3, #4
 80048fa:	75fb      	strb	r3, [r7, #23]
            break;
 80048fc:	e00c      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 80048fe:	78fb      	ldrb	r3, [r7, #3]
 8004900:	2b03      	cmp	r3, #3
 8004902:	d102      	bne.n	800490a <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004904:	2304      	movs	r3, #4
 8004906:	75fb      	strb	r3, [r7, #23]
            break;
 8004908:	e006      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	75fb      	strb	r3, [r7, #23]
            break;
 800490e:	e003      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	75fb      	strb	r3, [r7, #23]
            break;
 8004914:	e000      	b.n	8004918 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8004916:	bf00      	nop
    }
  }

  if (ret == 0) {
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d107      	bne.n	800492e <ism330dhcx_gy_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800491e:	f107 0208 	add.w	r2, r7, #8
 8004922:	2301      	movs	r3, #1
 8004924:	2111      	movs	r1, #17
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff fbcc 	bl	80040c4 <ism330dhcx_read_reg>
 800492c:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0) {
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10f      	bne.n	8004954 <ism330dhcx_gy_data_rate_set+0x2d4>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8004934:	7dfb      	ldrb	r3, [r7, #23]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	b2da      	uxtb	r2, r3
 800493c:	7a3b      	ldrb	r3, [r7, #8]
 800493e:	f362 1307 	bfi	r3, r2, #4, #4
 8004942:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8004944:	f107 0208 	add.w	r2, r7, #8
 8004948:	2301      	movs	r3, #1
 800494a:	2111      	movs	r1, #17
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff fbd1 	bl	80040f4 <ism330dhcx_write_reg>
 8004952:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8004954:	693b      	ldr	r3, [r7, #16]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop

08004960 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 800496a:	f107 0208 	add.w	r2, r7, #8
 800496e:	2301      	movs	r3, #1
 8004970:	2111      	movs	r1, #17
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7ff fba6 	bl	80040c4 <ism330dhcx_read_reg>
 8004978:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g) {
 800497a:	7a3b      	ldrb	r3, [r7, #8]
 800497c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b0a      	cmp	r3, #10
 8004984:	d844      	bhi.n	8004a10 <ism330dhcx_gy_data_rate_get+0xb0>
 8004986:	a201      	add	r2, pc, #4	; (adr r2, 800498c <ism330dhcx_gy_data_rate_get+0x2c>)
 8004988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498c:	080049b9 	.word	0x080049b9
 8004990:	080049c1 	.word	0x080049c1
 8004994:	080049c9 	.word	0x080049c9
 8004998:	080049d1 	.word	0x080049d1
 800499c:	080049d9 	.word	0x080049d9
 80049a0:	080049e1 	.word	0x080049e1
 80049a4:	080049e9 	.word	0x080049e9
 80049a8:	080049f1 	.word	0x080049f1
 80049ac:	080049f9 	.word	0x080049f9
 80049b0:	08004a01 	.word	0x08004a01
 80049b4:	08004a09 	.word	0x08004a09
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
      break;
 80049be:	e02b      	b.n	8004a18 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2201      	movs	r2, #1
 80049c4:	701a      	strb	r2, [r3, #0]
      break;
 80049c6:	e027      	b.n	8004a18 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2202      	movs	r2, #2
 80049cc:	701a      	strb	r2, [r3, #0]
      break;
 80049ce:	e023      	b.n	8004a18 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2203      	movs	r2, #3
 80049d4:	701a      	strb	r2, [r3, #0]
      break;
 80049d6:	e01f      	b.n	8004a18 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2204      	movs	r2, #4
 80049dc:	701a      	strb	r2, [r3, #0]
      break;
 80049de:	e01b      	b.n	8004a18 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2205      	movs	r2, #5
 80049e4:	701a      	strb	r2, [r3, #0]
      break;
 80049e6:	e017      	b.n	8004a18 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_417Hz:
      *val = ISM330DHCX_GY_ODR_417Hz;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2206      	movs	r2, #6
 80049ec:	701a      	strb	r2, [r3, #0]
      break;
 80049ee:	e013      	b.n	8004a18 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2207      	movs	r2, #7
 80049f4:	701a      	strb	r2, [r3, #0]
      break;
 80049f6:	e00f      	b.n	8004a18 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1667Hz:
      *val = ISM330DHCX_GY_ODR_1667Hz;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2208      	movs	r2, #8
 80049fc:	701a      	strb	r2, [r3, #0]
      break;
 80049fe:	e00b      	b.n	8004a18 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3333Hz:
      *val = ISM330DHCX_GY_ODR_3333Hz;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2209      	movs	r2, #9
 8004a04:	701a      	strb	r2, [r3, #0]
      break;
 8004a06:	e007      	b.n	8004a18 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	220a      	movs	r2, #10
 8004a0c:	701a      	strb	r2, [r3, #0]
      break;
 8004a0e:	e003      	b.n	8004a18 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2200      	movs	r2, #0
 8004a14:	701a      	strb	r2, [r3, #0]
      break;
 8004a16:	bf00      	nop
  }

  return ret;
 8004a18:	68fb      	ldr	r3, [r7, #12]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop

08004a24 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8004a30:	f107 0208 	add.w	r2, r7, #8
 8004a34:	2301      	movs	r3, #1
 8004a36:	2112      	movs	r1, #18
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff fb43 	bl	80040c4 <ism330dhcx_read_reg>
 8004a3e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10f      	bne.n	8004a66 <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	7a3b      	ldrb	r3, [r7, #8]
 8004a50:	f362 1386 	bfi	r3, r2, #6, #1
 8004a54:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004a56:	f107 0208 	add.w	r2, r7, #8
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	2112      	movs	r1, #18
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff fb48 	bl	80040f4 <ism330dhcx_write_reg>
 8004a64:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004a66:	68fb      	ldr	r3, [r7, #12]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8004a7a:	f107 020c 	add.w	r2, r7, #12
 8004a7e:	2306      	movs	r3, #6
 8004a80:	2122      	movs	r1, #34	; 0x22
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fb1e 	bl	80040c4 <ism330dhcx_read_reg>
 8004a88:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004a8a:	7b7b      	ldrb	r3, [r7, #13]
 8004a8c:	b21a      	sxth	r2, r3
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	7b3b      	ldrb	r3, [r7, #12]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	b21a      	sxth	r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004aac:	7bfa      	ldrb	r2, [r7, #15]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	3302      	adds	r3, #2
 8004ab2:	b212      	sxth	r2, r2
 8004ab4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	3302      	adds	r3, #2
 8004aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	7bbb      	ldrb	r3, [r7, #14]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	4413      	add	r3, r2
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	3302      	adds	r3, #2
 8004ad0:	b212      	sxth	r2, r2
 8004ad2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004ad4:	7c7a      	ldrb	r2, [r7, #17]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	b212      	sxth	r2, r2
 8004adc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	7c3b      	ldrb	r3, [r7, #16]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	3304      	adds	r3, #4
 8004af8:	b212      	sxth	r2, r2
 8004afa:	801a      	strh	r2, [r3, #0]
  return ret;
 8004afc:	697b      	ldr	r3, [r7, #20]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b086      	sub	sp, #24
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8004b10:	f107 020c 	add.w	r2, r7, #12
 8004b14:	2306      	movs	r3, #6
 8004b16:	2128      	movs	r1, #40	; 0x28
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff fad3 	bl	80040c4 <ism330dhcx_read_reg>
 8004b1e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004b20:	7b7b      	ldrb	r3, [r7, #13]
 8004b22:	b21a      	sxth	r2, r3
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	7b3b      	ldrb	r3, [r7, #12]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	4413      	add	r3, r2
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	b21a      	sxth	r2, r3
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004b42:	7bfa      	ldrb	r2, [r7, #15]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	3302      	adds	r3, #2
 8004b48:	b212      	sxth	r2, r2
 8004b4a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	3302      	adds	r3, #2
 8004b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	7bbb      	ldrb	r3, [r7, #14]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	4413      	add	r3, r2
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	3302      	adds	r3, #2
 8004b66:	b212      	sxth	r2, r2
 8004b68:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004b6a:	7c7a      	ldrb	r2, [r7, #17]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	b212      	sxth	r2, r2
 8004b72:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	3304      	adds	r3, #4
 8004b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	7c3b      	ldrb	r3, [r7, #16]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	4413      	add	r3, r2
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	b212      	sxth	r2, r2
 8004b90:	801a      	strh	r2, [r3, #0]
  return ret;
 8004b92:	697b      	ldr	r3, [r7, #20]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8004ba8:	f107 0208 	add.w	r2, r7, #8
 8004bac:	2301      	movs	r3, #1
 8004bae:	2118      	movs	r1, #24
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff fa87 	bl	80040c4 <ism330dhcx_read_reg>
 8004bb6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0) {
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10f      	bne.n	8004bde <ism330dhcx_device_conf_set+0x42>
    ctrl9_xl.device_conf = (uint8_t)val;
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	7a3b      	ldrb	r3, [r7, #8]
 8004bc8:	f362 0341 	bfi	r3, r2, #1, #1
 8004bcc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 8004bce:	f107 0208 	add.w	r2, r7, #8
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	2118      	movs	r1, #24
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff fa8c 	bl	80040f4 <ism330dhcx_write_reg>
 8004bdc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 8004bde:	68fb      	ldr	r3, [r7, #12]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8004bf4:	f107 0208 	add.w	r2, r7, #8
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff fa61 	bl	80040c4 <ism330dhcx_read_reg>
 8004c02:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10f      	bne.n	8004c2a <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	7a3b      	ldrb	r3, [r7, #8]
 8004c14:	f362 1387 	bfi	r3, r2, #6, #2
 8004c18:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8004c1a:	f107 0208 	add.w	r2, r7, #8
 8004c1e:	2301      	movs	r3, #1
 8004c20:	2101      	movs	r1, #1
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff fa66 	bl	80040f4 <ism330dhcx_write_reg>
 8004c28:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 8004c3e:	2301      	movs	r3, #1
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	210f      	movs	r1, #15
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff fa3d 	bl	80040c4 <ism330dhcx_read_reg>
 8004c4a:	60f8      	str	r0, [r7, #12]
  return ret;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8004c62:	f107 0208 	add.w	r2, r7, #8
 8004c66:	2301      	movs	r3, #1
 8004c68:	2112      	movs	r1, #18
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff fa2a 	bl	80040c4 <ism330dhcx_read_reg>
 8004c70:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10f      	bne.n	8004c98 <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	7a3b      	ldrb	r3, [r7, #8]
 8004c82:	f362 0300 	bfi	r3, r2, #0, #1
 8004c86:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004c88:	f107 0208 	add.w	r2, r7, #8
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	2112      	movs	r1, #18
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fa2f 	bl	80040f4 <ism330dhcx_write_reg>
 8004c96:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004c98:	68fb      	ldr	r3, [r7, #12]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8004cae:	f107 0208 	add.w	r2, r7, #8
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	2112      	movs	r1, #18
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fa04 	bl	80040c4 <ism330dhcx_read_reg>
 8004cbc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10f      	bne.n	8004ce4 <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	7a3b      	ldrb	r3, [r7, #8]
 8004cce:	f362 0382 	bfi	r3, r2, #2, #1
 8004cd2:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004cd4:	f107 0208 	add.w	r2, r7, #8
 8004cd8:	2301      	movs	r3, #1
 8004cda:	2112      	movs	r1, #18
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff fa09 	bl	80040f4 <ism330dhcx_write_reg>
 8004ce2:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8004cfa:	f107 0208 	add.w	r2, r7, #8
 8004cfe:	2301      	movs	r3, #1
 8004d00:	210a      	movs	r1, #10
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff f9de 	bl	80040c4 <ism330dhcx_read_reg>
 8004d08:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10f      	bne.n	8004d30 <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	7a3b      	ldrb	r3, [r7, #8]
 8004d1a:	f362 0302 	bfi	r3, r2, #0, #3
 8004d1e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8004d20:	f107 0208 	add.w	r2, r7, #8
 8004d24:	2301      	movs	r3, #1
 8004d26:	210a      	movs	r1, #10
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7ff f9e3 	bl	80040f4 <ism330dhcx_write_reg>
 8004d2e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8004d30:	68fb      	ldr	r3, [r7, #12]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8004d44:	2102      	movs	r1, #2
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff ff4e 	bl	8004be8 <ism330dhcx_mem_bank_set>
 8004d4c:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d106      	bne.n	8004d62 <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 8004d54:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8004d56:	2301      	movs	r3, #1
 8004d58:	2146      	movs	r1, #70	; 0x46
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7ff f9b2 	bl	80040c4 <ism330dhcx_read_reg>
 8004d60:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d107      	bne.n	8004d78 <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	2147      	movs	r1, #71	; 0x47
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7ff f9a7 	bl	80040c4 <ism330dhcx_read_reg>
 8004d76:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d104      	bne.n	8004d88 <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004d7e:	2100      	movs	r1, #0
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff ff31 	bl	8004be8 <ism330dhcx_mem_bank_set>
 8004d86:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d88:	68fb      	ldr	r3, [r7, #12]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8004d9e:	2102      	movs	r1, #2
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff ff21 	bl	8004be8 <ism330dhcx_mem_bank_set>
 8004da6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d107      	bne.n	8004dbe <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8004dae:	f107 0208 	add.w	r2, r7, #8
 8004db2:	2301      	movs	r3, #1
 8004db4:	215f      	movs	r1, #95	; 0x5f
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff f984 	bl	80040c4 <ism330dhcx_read_reg>
 8004dbc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d104      	bne.n	8004dce <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff ff0e 	bl	8004be8 <ism330dhcx_mem_bank_set>
 8004dcc:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 8004dce:	7a3b      	ldrb	r3, [r7, #8]
 8004dd0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d81a      	bhi.n	8004e10 <ism330dhcx_fsm_data_rate_get+0x7c>
 8004dda:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8004ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de0:	08004df1 	.word	0x08004df1
 8004de4:	08004df9 	.word	0x08004df9
 8004de8:	08004e01 	.word	0x08004e01
 8004dec:	08004e09 	.word	0x08004e09
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
      break;
 8004df6:	e00f      	b.n	8004e18 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	701a      	strb	r2, [r3, #0]
      break;
 8004dfe:	e00b      	b.n	8004e18 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2202      	movs	r2, #2
 8004e04:	701a      	strb	r2, [r3, #0]
      break;
 8004e06:	e007      	b.n	8004e18 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2203      	movs	r2, #3
 8004e0c:	701a      	strb	r2, [r3, #0]
      break;
 8004e0e:	e003      	b.n	8004e18 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2200      	movs	r2, #0
 8004e14:	701a      	strb	r2, [r3, #0]
      break;
 8004e16:	bf00      	nop
  }

  return ret;
 8004e18:	68fb      	ldr	r3, [r7, #12]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop

08004e24 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8004e2e:	2102      	movs	r1, #2
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff fed9 	bl	8004be8 <ism330dhcx_mem_bank_set>
 8004e36:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d107      	bne.n	8004e4e <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8004e3e:	f107 0208 	add.w	r2, r7, #8
 8004e42:	2301      	movs	r3, #1
 8004e44:	2105      	movs	r1, #5
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff f93c 	bl	80040c4 <ism330dhcx_read_reg>
 8004e4c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10b      	bne.n	8004e6c <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004e54:	2100      	movs	r1, #0
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff fec6 	bl	8004be8 <ism330dhcx_mem_bank_set>
 8004e5c:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8004e5e:	7a3b      	ldrb	r3, [r7, #8]
 8004e60:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8004e82:	2102      	movs	r1, #2
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff feaf 	bl	8004be8 <ism330dhcx_mem_bank_set>
 8004e8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d107      	bne.n	8004ea2 <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8004e92:	f107 0208 	add.w	r2, r7, #8
 8004e96:	2301      	movs	r3, #1
 8004e98:	2160      	movs	r1, #96	; 0x60
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff f912 	bl	80040c4 <ism330dhcx_read_reg>
 8004ea0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d12a      	bne.n	8004efe <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8004ea8:	7a3b      	ldrb	r3, [r7, #8]
 8004eaa:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d81b      	bhi.n	8004eec <ism330dhcx_mlc_data_rate_get+0x74>
 8004eb4:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <ism330dhcx_mlc_data_rate_get+0x44>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004ed5 	.word	0x08004ed5
 8004ec4:	08004edd 	.word	0x08004edd
 8004ec8:	08004ee5 	.word	0x08004ee5
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
        break;
 8004ed2:	e00f      	b.n	8004ef4 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]
        break;
 8004eda:	e00b      	b.n	8004ef4 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	701a      	strb	r2, [r3, #0]
        break;
 8004ee2:	e007      	b.n	8004ef4 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	701a      	strb	r2, [r3, #0]
        break;
 8004eea:	e003      	b.n	8004ef4 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	701a      	strb	r2, [r3, #0]
        break;
 8004ef2:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff fe76 	bl	8004be8 <ism330dhcx_mem_bank_set>
 8004efc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004efe:	68fb      	ldr	r3, [r7, #12]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <IKS02A1_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS02A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08e      	sub	sp, #56	; 0x38
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8004f16:	2301      	movs	r3, #1
 8004f18:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS02A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d06e      	beq.n	8005002 <IKS02A1_MOTION_SENSOR_Init+0xfa>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	f200 809d 	bhi.w	8005066 <IKS02A1_MOTION_SENSOR_Init+0x15e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <IKS02A1_MOTION_SENSOR_Init+0x32>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d032      	beq.n	8004f9e <IKS02A1_MOTION_SENSOR_Init+0x96>
 8004f38:	e095      	b.n	8005066 <IKS02A1_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS02A1_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case IKS02A1_ISM330DHCX_0:
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 8004f3a:	6838      	ldr	r0, [r7, #0]
 8004f3c:	f000 f924 	bl	8005188 <ISM330DHCX_0_Probe>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <IKS02A1_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8004f46:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4a:	e0cc      	b.n	80050e6 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004f4c:	4a68      	ldr	r2, [pc, #416]	; (80050f0 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	4967      	ldr	r1, [pc, #412]	; (80050f4 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004f5e:	f107 010c 	add.w	r1, r7, #12
 8004f62:	4610      	mov	r0, r2
 8004f64:	4798      	blx	r3
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <IKS02A1_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004f6c:	f06f 0306 	mvn.w	r3, #6
 8004f70:	e0b9      	b.n	80050e6 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8004f72:	7b3b      	ldrb	r3, [r7, #12]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d103      	bne.n	8004f80 <IKS02A1_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	f043 0302 	orr.w	r3, r3, #2
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004f80:	7b7b      	ldrb	r3, [r7, #13]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d103      	bne.n	8004f8e <IKS02A1_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004f8e:	7bbb      	ldrb	r3, [r7, #14]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d16c      	bne.n	800506e <IKS02A1_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	f043 0304 	orr.w	r3, r3, #4
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8004f9c:	e067      	b.n	800506e <IKS02A1_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS02A1_MOTION_SENSOR_IIS2DLPC_0 == 1)
    case IKS02A1_IIS2DLPC_0:
      if (IIS2DLPC_0_Probe(Functions) != BSP_ERROR_NONE)
 8004f9e:	6838      	ldr	r0, [r7, #0]
 8004fa0:	f000 f9ae 	bl	8005300 <IIS2DLPC_0_Probe>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <IKS02A1_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8004faa:	f04f 33ff 	mov.w	r3, #4294967295
 8004fae:	e09a      	b.n	80050e6 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8004fb0:	4a4f      	ldr	r2, [pc, #316]	; (80050f0 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	494e      	ldr	r1, [pc, #312]	; (80050f4 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004fc2:	f107 010c 	add.w	r1, r7, #12
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	4798      	blx	r3
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <IKS02A1_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8004fd0:	f06f 0306 	mvn.w	r3, #6
 8004fd4:	e087      	b.n	80050e6 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8004fd6:	7b3b      	ldrb	r3, [r7, #12]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d103      	bne.n	8004fe4 <IKS02A1_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	f043 0302 	orr.w	r3, r3, #2
 8004fe2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8004fe4:	7b7b      	ldrb	r3, [r7, #13]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d103      	bne.n	8004ff2 <IKS02A1_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8004fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8004ff2:	7bbb      	ldrb	r3, [r7, #14]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d13c      	bne.n	8005072 <IKS02A1_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	f043 0304 	orr.w	r3, r3, #4
 8004ffe:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005000:	e037      	b.n	8005072 <IKS02A1_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS02A1_MOTION_SENSOR_IIS2MDC_0 == 1)
    case IKS02A1_IIS2MDC_0:
      if (IIS2MDC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005002:	6838      	ldr	r0, [r7, #0]
 8005004:	f000 fa24 	bl	8005450 <IIS2MDC_0_Probe>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <IKS02A1_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800500e:	f04f 33ff 	mov.w	r3, #4294967295
 8005012:	e068      	b.n	80050e6 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005014:	4a36      	ldr	r2, [pc, #216]	; (80050f0 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	4935      	ldr	r1, [pc, #212]	; (80050f4 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005026:	f107 010c 	add.w	r1, r7, #12
 800502a:	4610      	mov	r0, r2
 800502c:	4798      	blx	r3
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <IKS02A1_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005034:	f06f 0306 	mvn.w	r3, #6
 8005038:	e055      	b.n	80050e6 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800503a:	7b3b      	ldrb	r3, [r7, #12]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d103      	bne.n	8005048 <IKS02A1_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	f043 0302 	orr.w	r3, r3, #2
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005048:	7b7b      	ldrb	r3, [r7, #13]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d103      	bne.n	8005056 <IKS02A1_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	f043 0301 	orr.w	r3, r3, #1
 8005054:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005056:	7bbb      	ldrb	r3, [r7, #14]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d10c      	bne.n	8005076 <IKS02A1_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	f043 0304 	orr.w	r3, r3, #4
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005064:	e007      	b.n	8005076 <IKS02A1_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005066:	f06f 0301 	mvn.w	r3, #1
 800506a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800506c:	e004      	b.n	8005078 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 800506e:	bf00      	nop
 8005070:	e002      	b.n	8005078 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 8005072:	bf00      	nop
 8005074:	e000      	b.n	8005078 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 8005076:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <IKS02A1_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005080:	e031      	b.n	80050e6 <IKS02A1_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 8005082:	2300      	movs	r3, #0
 8005084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005086:	e02a      	b.n	80050de <IKS02A1_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	4013      	ands	r3, r2
 800508e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005090:	429a      	cmp	r2, r3
 8005092:	d11e      	bne.n	80050d2 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
 8005094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005098:	4013      	ands	r3, r2
 800509a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509c:	429a      	cmp	r2, r3
 800509e:	d118      	bne.n	80050d2 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80050a0:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <IKS02A1_MOTION_SENSOR_Init+0x1f0>)
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80050a8:	4814      	ldr	r0, [pc, #80]	; (80050fc <IKS02A1_MOTION_SENSOR_Init+0x1f4>)
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	4413      	add	r3, r2
 80050b2:	440b      	add	r3, r1
 80050b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	490e      	ldr	r1, [pc, #56]	; (80050f4 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80050c2:	4610      	mov	r0, r2
 80050c4:	4798      	blx	r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80050cc:	f06f 0304 	mvn.w	r3, #4
 80050d0:	e009      	b.n	80050e6 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050da:	3301      	adds	r3, #1
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d9d1      	bls.n	8005088 <IKS02A1_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80050e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3738      	adds	r7, #56	; 0x38
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	200001a0 	.word	0x200001a0
 80050f4:	2000036c 	.word	0x2000036c
 80050f8:	200000d0 	.word	0x200000d0
 80050fc:	2000017c 	.word	0x2000017c

08005100 <IKS02A1_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS02A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS02A1_MOTION_SENSOR_Axes_t *Axes)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d903      	bls.n	800511a <IKS02A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005112:	f06f 0301 	mvn.w	r3, #1
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e029      	b.n	800516e <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <IKS02A1_MOTION_SENSOR_GetAxes+0x78>)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	4013      	ands	r3, r2
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	429a      	cmp	r2, r3
 800512a:	d11d      	bne.n	8005168 <IKS02A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800512c:	4a13      	ldr	r2, [pc, #76]	; (800517c <IKS02A1_MOTION_SENSOR_GetAxes+0x7c>)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005134:	4812      	ldr	r0, [pc, #72]	; (8005180 <IKS02A1_MOTION_SENSOR_GetAxes+0x80>)
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4613      	mov	r3, r2
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	4413      	add	r3, r2
 800513e:	440b      	add	r3, r1
 8005140:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	490f      	ldr	r1, [pc, #60]	; (8005184 <IKS02A1_MOTION_SENSOR_GetAxes+0x84>)
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4610      	mov	r0, r2
 8005152:	4798      	blx	r3
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <IKS02A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800515a:	f06f 0304 	mvn.w	r3, #4
 800515e:	617b      	str	r3, [r7, #20]
 8005160:	e005      	b.n	800516e <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e002      	b.n	800516e <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005168:	f06f 0301 	mvn.w	r3, #1
 800516c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800516e:	697b      	ldr	r3, [r7, #20]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	200001ac 	.word	0x200001ac
 800517c:	200000d0 	.word	0x200000d0
 8005180:	2000017c 	.word	0x2000017c
 8005184:	2000036c 	.word	0x2000036c

08005188 <ISM330DHCX_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b092      	sub	sp, #72	; 0x48
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t            io_ctx;
  uint8_t                    id;
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005190:	2300      	movs	r3, #0
 8005192:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = ISM330DHCX_I2C_BUS; /* I2C */
 8005194:	2300      	movs	r3, #0
 8005196:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = ISM330DHCX_I2C_ADD_H;
 8005198:	23d7      	movs	r3, #215	; 0xd7
 800519a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 800519e:	4b4a      	ldr	r3, [pc, #296]	; (80052c8 <ISM330DHCX_0_Probe+0x140>)
 80051a0:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 80051a2:	4b4a      	ldr	r3, [pc, #296]	; (80052cc <ISM330DHCX_0_Probe+0x144>)
 80051a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 80051a6:	4b4a      	ldr	r3, [pc, #296]	; (80052d0 <ISM330DHCX_0_Probe+0x148>)
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 80051aa:	4b4a      	ldr	r3, [pc, #296]	; (80052d4 <ISM330DHCX_0_Probe+0x14c>)
 80051ac:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 80051ae:	4b4a      	ldr	r3, [pc, #296]	; (80052d8 <ISM330DHCX_0_Probe+0x150>)
 80051b0:	643b      	str	r3, [r7, #64]	; 0x40

  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 80051b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051b6:	4619      	mov	r1, r3
 80051b8:	4848      	ldr	r0, [pc, #288]	; (80052dc <ISM330DHCX_0_Probe+0x154>)
 80051ba:	f7fd ff5f 	bl	800307c <ISM330DHCX_RegisterBusIO>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <ISM330DHCX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80051c4:	f06f 0306 	mvn.w	r3, #6
 80051c8:	647b      	str	r3, [r7, #68]	; 0x44
 80051ca:	e077      	b.n	80052bc <ISM330DHCX_0_Probe+0x134>
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 80051cc:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80051d0:	4619      	mov	r1, r3
 80051d2:	4842      	ldr	r0, [pc, #264]	; (80052dc <ISM330DHCX_0_Probe+0x154>)
 80051d4:	f7fe f86c 	bl	80032b0 <ISM330DHCX_ReadID>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <ISM330DHCX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80051de:	f06f 0306 	mvn.w	r3, #6
 80051e2:	647b      	str	r3, [r7, #68]	; 0x44
 80051e4:	e06a      	b.n	80052bc <ISM330DHCX_0_Probe+0x134>
  }
  else if (id != ISM330DHCX_ID)
 80051e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051ea:	2b6b      	cmp	r3, #107	; 0x6b
 80051ec:	d003      	beq.n	80051f6 <ISM330DHCX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80051ee:	f06f 0306 	mvn.w	r3, #6
 80051f2:	647b      	str	r3, [r7, #68]	; 0x44
 80051f4:	e062      	b.n	80052bc <ISM330DHCX_0_Probe+0x134>
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 80051f6:	f107 0308 	add.w	r3, r7, #8
 80051fa:	4619      	mov	r1, r3
 80051fc:	4837      	ldr	r0, [pc, #220]	; (80052dc <ISM330DHCX_0_Probe+0x154>)
 80051fe:	f7fe f86d 	bl	80032dc <ISM330DHCX_GetCapabilities>
    MotionCtx[IKS02A1_ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005202:	7a7b      	ldrb	r3, [r7, #9]
 8005204:	461a      	mov	r2, r3
 8005206:	7a3b      	ldrb	r3, [r7, #8]
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	431a      	orrs	r2, r3
 800520c:	7abb      	ldrb	r3, [r7, #10]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4313      	orrs	r3, r2
 8005212:	4a33      	ldr	r2, [pc, #204]	; (80052e0 <ISM330DHCX_0_Probe+0x158>)
 8005214:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS02A1_ISM330DHCX_0] = &ism330dhcx_obj_0;
 8005216:	4b33      	ldr	r3, [pc, #204]	; (80052e4 <ISM330DHCX_0_Probe+0x15c>)
 8005218:	4a30      	ldr	r2, [pc, #192]	; (80052dc <ISM330DHCX_0_Probe+0x154>)
 800521a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 800521c:	4b32      	ldr	r3, [pc, #200]	; (80052e8 <ISM330DHCX_0_Probe+0x160>)
 800521e:	4a33      	ldr	r2, [pc, #204]	; (80052ec <ISM330DHCX_0_Probe+0x164>)
 8005220:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005224:	2b00      	cmp	r3, #0
 8005226:	d11d      	bne.n	8005264 <ISM330DHCX_0_Probe+0xdc>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d018      	beq.n	8005264 <ISM330DHCX_0_Probe+0xdc>
 8005232:	7a7b      	ldrb	r3, [r7, #9]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d115      	bne.n	8005264 <ISM330DHCX_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8005238:	4b2d      	ldr	r3, [pc, #180]	; (80052f0 <ISM330DHCX_0_Probe+0x168>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	4a2d      	ldr	r2, [pc, #180]	; (80052f4 <ISM330DHCX_0_Probe+0x16c>)
 800523e:	492e      	ldr	r1, [pc, #184]	; (80052f8 <ISM330DHCX_0_Probe+0x170>)
 8005240:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 8005244:	4b28      	ldr	r3, [pc, #160]	; (80052e8 <ISM330DHCX_0_Probe+0x160>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a26      	ldr	r2, [pc, #152]	; (80052e4 <ISM330DHCX_0_Probe+0x15c>)
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	4610      	mov	r0, r2
 8005250:	4798      	blx	r3
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <ISM330DHCX_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005258:	f06f 0304 	mvn.w	r3, #4
 800525c:	647b      	str	r3, [r7, #68]	; 0x44
 800525e:	e001      	b.n	8005264 <ISM330DHCX_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005260:	2300      	movs	r3, #0
 8005262:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005266:	2b00      	cmp	r3, #0
 8005268:	d11d      	bne.n	80052a6 <ISM330DHCX_0_Probe+0x11e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d018      	beq.n	80052a6 <ISM330DHCX_0_Probe+0x11e>
 8005274:	7a3b      	ldrb	r3, [r7, #8]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d115      	bne.n	80052a6 <ISM330DHCX_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800527a:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <ISM330DHCX_0_Probe+0x168>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	4a1d      	ldr	r2, [pc, #116]	; (80052f4 <ISM330DHCX_0_Probe+0x16c>)
 8005280:	491e      	ldr	r1, [pc, #120]	; (80052fc <ISM330DHCX_0_Probe+0x174>)
 8005282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&ISM330DHCX_ACC_Driver;

      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 8005286:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <ISM330DHCX_0_Probe+0x160>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a15      	ldr	r2, [pc, #84]	; (80052e4 <ISM330DHCX_0_Probe+0x15c>)
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	4610      	mov	r0, r2
 8005292:	4798      	blx	r3
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <ISM330DHCX_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800529a:	f06f 0304 	mvn.w	r3, #4
 800529e:	647b      	str	r3, [r7, #68]	; 0x44
 80052a0:	e001      	b.n	80052a6 <ISM330DHCX_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80052a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d107      	bne.n	80052bc <ISM330DHCX_0_Probe+0x134>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <ISM330DHCX_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80052b6:	f06f 0304 	mvn.w	r3, #4
 80052ba:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80052bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3748      	adds	r7, #72	; 0x48
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	08000bf1 	.word	0x08000bf1
 80052cc:	08000c6d 	.word	0x08000c6d
 80052d0:	08000d21 	.word	0x08000d21
 80052d4:	08000cbd 	.word	0x08000cbd
 80052d8:	08000d85 	.word	0x08000d85
 80052dc:	200001b8 	.word	0x200001b8
 80052e0:	200001ac 	.word	0x200001ac
 80052e4:	2000036c 	.word	0x2000036c
 80052e8:	200001a0 	.word	0x200001a0
 80052ec:	20000078 	.word	0x20000078
 80052f0:	200000d0 	.word	0x200000d0
 80052f4:	2000017c 	.word	0x2000017c
 80052f8:	200000ac 	.word	0x200000ac
 80052fc:	20000088 	.word	0x20000088

08005300 <IIS2DLPC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t IIS2DLPC_0_Probe(uint32_t Functions)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b092      	sub	sp, #72	; 0x48
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  IIS2DLPC_IO_t            io_ctx;
  uint8_t                  id;
  static IIS2DLPC_Object_t iis2dlpc_obj_0;
  IIS2DLPC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005308:	2300      	movs	r3, #0
 800530a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2DLPC_I2C_BUS; /* I2C */
 800530c:	2300      	movs	r3, #0
 800530e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = IIS2DLPC_I2C_ADD_H;
 8005310:	2333      	movs	r3, #51	; 0x33
 8005312:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 8005316:	4b41      	ldr	r3, [pc, #260]	; (800541c <IIS2DLPC_0_Probe+0x11c>)
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 800531a:	4b41      	ldr	r3, [pc, #260]	; (8005420 <IIS2DLPC_0_Probe+0x120>)
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 800531e:	4b41      	ldr	r3, [pc, #260]	; (8005424 <IIS2DLPC_0_Probe+0x124>)
 8005320:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 8005322:	4b41      	ldr	r3, [pc, #260]	; (8005428 <IIS2DLPC_0_Probe+0x128>)
 8005324:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 8005326:	4b41      	ldr	r3, [pc, #260]	; (800542c <IIS2DLPC_0_Probe+0x12c>)
 8005328:	643b      	str	r3, [r7, #64]	; 0x40

  if (IIS2DLPC_RegisterBusIO(&iis2dlpc_obj_0, &io_ctx) != IIS2DLPC_OK)
 800532a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800532e:	4619      	mov	r1, r3
 8005330:	483f      	ldr	r0, [pc, #252]	; (8005430 <IIS2DLPC_0_Probe+0x130>)
 8005332:	f7fb ff53 	bl	80011dc <IIS2DLPC_RegisterBusIO>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <IIS2DLPC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800533c:	f06f 0306 	mvn.w	r3, #6
 8005340:	647b      	str	r3, [r7, #68]	; 0x44
 8005342:	e065      	b.n	8005410 <IIS2DLPC_0_Probe+0x110>
  }
  else if (IIS2DLPC_ReadID(&iis2dlpc_obj_0, &id) != IIS2DLPC_OK)
 8005344:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005348:	4619      	mov	r1, r3
 800534a:	4839      	ldr	r0, [pc, #228]	; (8005430 <IIS2DLPC_0_Probe+0x130>)
 800534c:	f7fc f830 	bl	80013b0 <IIS2DLPC_ReadID>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <IIS2DLPC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005356:	f06f 0306 	mvn.w	r3, #6
 800535a:	647b      	str	r3, [r7, #68]	; 0x44
 800535c:	e058      	b.n	8005410 <IIS2DLPC_0_Probe+0x110>
  }
  else if (id != IIS2DLPC_ID)
 800535e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005362:	2b44      	cmp	r3, #68	; 0x44
 8005364:	d003      	beq.n	800536e <IIS2DLPC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005366:	f06f 0306 	mvn.w	r3, #6
 800536a:	647b      	str	r3, [r7, #68]	; 0x44
 800536c:	e050      	b.n	8005410 <IIS2DLPC_0_Probe+0x110>
  }
  else
  {
    (void)IIS2DLPC_GetCapabilities(&iis2dlpc_obj_0, &cap);
 800536e:	f107 0308 	add.w	r3, r7, #8
 8005372:	4619      	mov	r1, r3
 8005374:	482e      	ldr	r0, [pc, #184]	; (8005430 <IIS2DLPC_0_Probe+0x130>)
 8005376:	f7fc f831 	bl	80013dc <IIS2DLPC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2DLPC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800537a:	7a7b      	ldrb	r3, [r7, #9]
 800537c:	461a      	mov	r2, r3
 800537e:	7a3b      	ldrb	r3, [r7, #8]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	431a      	orrs	r2, r3
 8005384:	7abb      	ldrb	r3, [r7, #10]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4313      	orrs	r3, r2
 800538a:	4a2a      	ldr	r2, [pc, #168]	; (8005434 <IIS2DLPC_0_Probe+0x134>)
 800538c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS02A1_IIS2DLPC_0] = &iis2dlpc_obj_0;
 800538e:	4b2a      	ldr	r3, [pc, #168]	; (8005438 <IIS2DLPC_0_Probe+0x138>)
 8005390:	4a27      	ldr	r2, [pc, #156]	; (8005430 <IIS2DLPC_0_Probe+0x130>)
 8005392:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2DLPC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2DLPC_COMMON_Driver;
 8005394:	4b29      	ldr	r3, [pc, #164]	; (800543c <IIS2DLPC_0_Probe+0x13c>)
 8005396:	4a2a      	ldr	r2, [pc, #168]	; (8005440 <IIS2DLPC_0_Probe+0x140>)
 8005398:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800539a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10a      	bne.n	80053b6 <IIS2DLPC_0_Probe+0xb6>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <IIS2DLPC_0_Probe+0xb6>
 80053aa:	7a7b      	ldrb	r3, [r7, #9]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d102      	bne.n	80053b6 <IIS2DLPC_0_Probe+0xb6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80053b0:	f06f 0304 	mvn.w	r3, #4
 80053b4:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80053b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11e      	bne.n	80053fa <IIS2DLPC_0_Probe+0xfa>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d019      	beq.n	80053fa <IIS2DLPC_0_Probe+0xfa>
 80053c6:	7a3b      	ldrb	r3, [r7, #8]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d116      	bne.n	80053fa <IIS2DLPC_0_Probe+0xfa>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2DLPC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80053cc:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <IIS2DLPC_0_Probe+0x144>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <IIS2DLPC_0_Probe+0x148>)
 80053d2:	3303      	adds	r3, #3
 80053d4:	491d      	ldr	r1, [pc, #116]	; (800544c <IIS2DLPC_0_Probe+0x14c>)
 80053d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&IIS2DLPC_ACC_Driver;

      if (MotionDrv[IKS02A1_IIS2DLPC_0]->Init(MotionCompObj[IKS02A1_IIS2DLPC_0]) != IIS2DLPC_OK)
 80053da:	4b18      	ldr	r3, [pc, #96]	; (800543c <IIS2DLPC_0_Probe+0x13c>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a15      	ldr	r2, [pc, #84]	; (8005438 <IIS2DLPC_0_Probe+0x138>)
 80053e2:	6852      	ldr	r2, [r2, #4]
 80053e4:	4610      	mov	r0, r2
 80053e6:	4798      	blx	r3
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <IIS2DLPC_0_Probe+0xf6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80053ee:	f06f 0304 	mvn.w	r3, #4
 80053f2:	647b      	str	r3, [r7, #68]	; 0x44
 80053f4:	e001      	b.n	80053fa <IIS2DLPC_0_Probe+0xfa>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80053f6:	2300      	movs	r3, #0
 80053f8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80053fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d107      	bne.n	8005410 <IIS2DLPC_0_Probe+0x110>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <IIS2DLPC_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800540a:	f06f 0304 	mvn.w	r3, #4
 800540e:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005412:	4618      	mov	r0, r3
 8005414:	3748      	adds	r7, #72	; 0x48
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	08000bf1 	.word	0x08000bf1
 8005420:	08000c6d 	.word	0x08000c6d
 8005424:	08000d21 	.word	0x08000d21
 8005428:	08000cbd 	.word	0x08000cbd
 800542c:	08000d85 	.word	0x08000d85
 8005430:	200001e8 	.word	0x200001e8
 8005434:	200001ac 	.word	0x200001ac
 8005438:	2000036c 	.word	0x2000036c
 800543c:	200001a0 	.word	0x200001a0
 8005440:	20000010 	.word	0x20000010
 8005444:	200000d0 	.word	0x200000d0
 8005448:	2000017c 	.word	0x2000017c
 800544c:	20000020 	.word	0x20000020

08005450 <IIS2MDC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t IIS2MDC_0_Probe(uint32_t Functions)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b092      	sub	sp, #72	; 0x48
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  IIS2MDC_IO_t            io_ctx;
  uint8_t                 id;
  static IIS2MDC_Object_t iis2mdc_obj_0;
  IIS2MDC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005458:	2300      	movs	r3, #0
 800545a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 800545c:	2300      	movs	r3, #0
 800545e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 8005460:	233d      	movs	r3, #61	; 0x3d
 8005462:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 8005466:	4b41      	ldr	r3, [pc, #260]	; (800556c <IIS2MDC_0_Probe+0x11c>)
 8005468:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 800546a:	4b41      	ldr	r3, [pc, #260]	; (8005570 <IIS2MDC_0_Probe+0x120>)
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 800546e:	4b41      	ldr	r3, [pc, #260]	; (8005574 <IIS2MDC_0_Probe+0x124>)
 8005470:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 8005472:	4b41      	ldr	r3, [pc, #260]	; (8005578 <IIS2MDC_0_Probe+0x128>)
 8005474:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 8005476:	4b41      	ldr	r3, [pc, #260]	; (800557c <IIS2MDC_0_Probe+0x12c>)
 8005478:	643b      	str	r3, [r7, #64]	; 0x40

  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 800547a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800547e:	4619      	mov	r1, r3
 8005480:	483f      	ldr	r0, [pc, #252]	; (8005580 <IIS2MDC_0_Probe+0x130>)
 8005482:	f7fd f9b9 	bl	80027f8 <IIS2MDC_RegisterBusIO>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <IIS2MDC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800548c:	f06f 0306 	mvn.w	r3, #6
 8005490:	647b      	str	r3, [r7, #68]	; 0x44
 8005492:	e065      	b.n	8005560 <IIS2MDC_0_Probe+0x110>
  }
  else if (IIS2MDC_ReadID(&iis2mdc_obj_0, &id) != IIS2MDC_OK)
 8005494:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005498:	4619      	mov	r1, r3
 800549a:	4839      	ldr	r0, [pc, #228]	; (8005580 <IIS2MDC_0_Probe+0x130>)
 800549c:	f7fd fa63 	bl	8002966 <IIS2MDC_ReadID>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <IIS2MDC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80054a6:	f06f 0306 	mvn.w	r3, #6
 80054aa:	647b      	str	r3, [r7, #68]	; 0x44
 80054ac:	e058      	b.n	8005560 <IIS2MDC_0_Probe+0x110>
  }
  else if (id != IIS2MDC_ID)
 80054ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054b2:	2b40      	cmp	r3, #64	; 0x40
 80054b4:	d003      	beq.n	80054be <IIS2MDC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80054b6:	f06f 0306 	mvn.w	r3, #6
 80054ba:	647b      	str	r3, [r7, #68]	; 0x44
 80054bc:	e050      	b.n	8005560 <IIS2MDC_0_Probe+0x110>
  }
  else
  {
    (void)IIS2MDC_GetCapabilities(&iis2mdc_obj_0, &cap);
 80054be:	f107 0308 	add.w	r3, r7, #8
 80054c2:	4619      	mov	r1, r3
 80054c4:	482e      	ldr	r0, [pc, #184]	; (8005580 <IIS2MDC_0_Probe+0x130>)
 80054c6:	f7fd fa65 	bl	8002994 <IIS2MDC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80054ca:	7a7b      	ldrb	r3, [r7, #9]
 80054cc:	461a      	mov	r2, r3
 80054ce:	7a3b      	ldrb	r3, [r7, #8]
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	431a      	orrs	r2, r3
 80054d4:	7abb      	ldrb	r3, [r7, #10]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4313      	orrs	r3, r2
 80054da:	4a2a      	ldr	r2, [pc, #168]	; (8005584 <IIS2MDC_0_Probe+0x134>)
 80054dc:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS02A1_IIS2MDC_0] = &iis2mdc_obj_0;
 80054de:	4b2a      	ldr	r3, [pc, #168]	; (8005588 <IIS2MDC_0_Probe+0x138>)
 80054e0:	4a27      	ldr	r2, [pc, #156]	; (8005580 <IIS2MDC_0_Probe+0x130>)
 80054e2:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2MDC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2MDC_COMMON_Driver;
 80054e4:	4b29      	ldr	r3, [pc, #164]	; (800558c <IIS2MDC_0_Probe+0x13c>)
 80054e6:	4a2a      	ldr	r2, [pc, #168]	; (8005590 <IIS2MDC_0_Probe+0x140>)
 80054e8:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80054ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <IIS2MDC_0_Probe+0xb6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <IIS2MDC_0_Probe+0xb6>
 80054fa:	7a7b      	ldrb	r3, [r7, #9]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d102      	bne.n	8005506 <IIS2MDC_0_Probe+0xb6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005500:	f06f 0304 	mvn.w	r3, #4
 8005504:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <IIS2MDC_0_Probe+0xd2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <IIS2MDC_0_Probe+0xd2>
 8005516:	7a3b      	ldrb	r3, [r7, #8]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d102      	bne.n	8005522 <IIS2MDC_0_Probe+0xd2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800551c:	f06f 0304 	mvn.w	r3, #4
 8005520:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005524:	2b00      	cmp	r3, #0
 8005526:	d11b      	bne.n	8005560 <IIS2MDC_0_Probe+0x110>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	d016      	beq.n	8005560 <IIS2MDC_0_Probe+0x110>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005532:	4b18      	ldr	r3, [pc, #96]	; (8005594 <IIS2MDC_0_Probe+0x144>)
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	4a18      	ldr	r2, [pc, #96]	; (8005598 <IIS2MDC_0_Probe+0x148>)
 8005538:	3306      	adds	r3, #6
 800553a:	4918      	ldr	r1, [pc, #96]	; (800559c <IIS2MDC_0_Probe+0x14c>)
 800553c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&IIS2MDC_MAG_Driver;

      if (MotionDrv[IKS02A1_IIS2MDC_0]->Init(MotionCompObj[IKS02A1_IIS2MDC_0]) != IIS2MDC_OK)
 8005540:	4b12      	ldr	r3, [pc, #72]	; (800558c <IIS2MDC_0_Probe+0x13c>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a10      	ldr	r2, [pc, #64]	; (8005588 <IIS2MDC_0_Probe+0x138>)
 8005548:	6892      	ldr	r2, [r2, #8]
 800554a:	4610      	mov	r0, r2
 800554c:	4798      	blx	r3
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <IIS2MDC_0_Probe+0x10c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005554:	f06f 0304 	mvn.w	r3, #4
 8005558:	647b      	str	r3, [r7, #68]	; 0x44
 800555a:	e001      	b.n	8005560 <IIS2MDC_0_Probe+0x110>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800555c:	2300      	movs	r3, #0
 800555e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
  }
  return ret;
 8005560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005562:	4618      	mov	r0, r3
 8005564:	3748      	adds	r7, #72	; 0x48
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	08000bf1 	.word	0x08000bf1
 8005570:	08000c6d 	.word	0x08000c6d
 8005574:	08000d21 	.word	0x08000d21
 8005578:	08000cbd 	.word	0x08000cbd
 800557c:	08000d85 	.word	0x08000d85
 8005580:	2000021c 	.word	0x2000021c
 8005584:	200001ac 	.word	0x200001ac
 8005588:	2000036c 	.word	0x2000036c
 800558c:	200001a0 	.word	0x200001a0
 8005590:	20000044 	.word	0x20000044
 8005594:	200000d0 	.word	0x200000d0
 8005598:	2000017c 	.word	0x2000017c
 800559c:	20000054 	.word	0x20000054

080055a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055a4:	2003      	movs	r0, #3
 80055a6:	f000 f94d 	bl	8005844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80055aa:	2000      	movs	r0, #0
 80055ac:	f000 f806 	bl	80055bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80055b0:	f7fb fa1c 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80055c4:	4b12      	ldr	r3, [pc, #72]	; (8005610 <HAL_InitTick+0x54>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	4b12      	ldr	r3, [pc, #72]	; (8005614 <HAL_InitTick+0x58>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	4619      	mov	r1, r3
 80055ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80055d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 f967 	bl	80058ae <HAL_SYSTICK_Config>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e00e      	b.n	8005608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b0f      	cmp	r3, #15
 80055ee:	d80a      	bhi.n	8005606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055f0:	2200      	movs	r2, #0
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	f04f 30ff 	mov.w	r0, #4294967295
 80055f8:	f000 f92f 	bl	800585a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055fc:	4a06      	ldr	r2, [pc, #24]	; (8005618 <HAL_InitTick+0x5c>)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e000      	b.n	8005608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	2000000c 	.word	0x2000000c
 8005614:	200000e8 	.word	0x200000e8
 8005618:	200000e4 	.word	0x200000e4

0800561c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005620:	4b06      	ldr	r3, [pc, #24]	; (800563c <HAL_IncTick+0x20>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	461a      	mov	r2, r3
 8005626:	4b06      	ldr	r3, [pc, #24]	; (8005640 <HAL_IncTick+0x24>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4413      	add	r3, r2
 800562c:	4a04      	ldr	r2, [pc, #16]	; (8005640 <HAL_IncTick+0x24>)
 800562e:	6013      	str	r3, [r2, #0]
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	200000e8 	.word	0x200000e8
 8005640:	20000378 	.word	0x20000378

08005644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return uwTick;
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <HAL_GetTick+0x14>)
 800564a:	681b      	ldr	r3, [r3, #0]
}
 800564c:	4618      	mov	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	20000378 	.word	0x20000378

0800565c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005664:	f7ff ffee 	bl	8005644 <HAL_GetTick>
 8005668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005674:	d005      	beq.n	8005682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005676:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <HAL_Delay+0x44>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005682:	bf00      	nop
 8005684:	f7ff ffde 	bl	8005644 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	429a      	cmp	r2, r3
 8005692:	d8f7      	bhi.n	8005684 <HAL_Delay+0x28>
  {
  }
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	200000e8 	.word	0x200000e8

080056a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056b4:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <__NVIC_SetPriorityGrouping+0x40>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056c0:	4013      	ands	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <__NVIC_SetPriorityGrouping+0x44>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056d2:	4a04      	ldr	r2, [pc, #16]	; (80056e4 <__NVIC_SetPriorityGrouping+0x40>)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	60d3      	str	r3, [r2, #12]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	e000ed00 	.word	0xe000ed00
 80056e8:	05fa0000 	.word	0x05fa0000

080056ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056f0:	4b04      	ldr	r3, [pc, #16]	; (8005704 <__NVIC_GetPriorityGrouping+0x18>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	0a1b      	lsrs	r3, r3, #8
 80056f6:	f003 0307 	and.w	r3, r3, #7
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	e000ed00 	.word	0xe000ed00

08005708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005716:	2b00      	cmp	r3, #0
 8005718:	db0b      	blt.n	8005732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	f003 021f 	and.w	r2, r3, #31
 8005720:	4907      	ldr	r1, [pc, #28]	; (8005740 <__NVIC_EnableIRQ+0x38>)
 8005722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	2001      	movs	r0, #1
 800572a:	fa00 f202 	lsl.w	r2, r0, r2
 800572e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	e000e100 	.word	0xe000e100

08005744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	6039      	str	r1, [r7, #0]
 800574e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005754:	2b00      	cmp	r3, #0
 8005756:	db0a      	blt.n	800576e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	b2da      	uxtb	r2, r3
 800575c:	490c      	ldr	r1, [pc, #48]	; (8005790 <__NVIC_SetPriority+0x4c>)
 800575e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005762:	0112      	lsls	r2, r2, #4
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	440b      	add	r3, r1
 8005768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800576c:	e00a      	b.n	8005784 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	4908      	ldr	r1, [pc, #32]	; (8005794 <__NVIC_SetPriority+0x50>)
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	3b04      	subs	r3, #4
 800577c:	0112      	lsls	r2, r2, #4
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	440b      	add	r3, r1
 8005782:	761a      	strb	r2, [r3, #24]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	e000e100 	.word	0xe000e100
 8005794:	e000ed00 	.word	0xe000ed00

08005798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005798:	b480      	push	{r7}
 800579a:	b089      	sub	sp, #36	; 0x24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f1c3 0307 	rsb	r3, r3, #7
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	bf28      	it	cs
 80057b6:	2304      	movcs	r3, #4
 80057b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3304      	adds	r3, #4
 80057be:	2b06      	cmp	r3, #6
 80057c0:	d902      	bls.n	80057c8 <NVIC_EncodePriority+0x30>
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3b03      	subs	r3, #3
 80057c6:	e000      	b.n	80057ca <NVIC_EncodePriority+0x32>
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057cc:	f04f 32ff 	mov.w	r2, #4294967295
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43da      	mvns	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	401a      	ands	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057e0:	f04f 31ff 	mov.w	r1, #4294967295
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ea:	43d9      	mvns	r1, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f0:	4313      	orrs	r3, r2
         );
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3724      	adds	r7, #36	; 0x24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
	...

08005800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3b01      	subs	r3, #1
 800580c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005810:	d301      	bcc.n	8005816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005812:	2301      	movs	r3, #1
 8005814:	e00f      	b.n	8005836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005816:	4a0a      	ldr	r2, [pc, #40]	; (8005840 <SysTick_Config+0x40>)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3b01      	subs	r3, #1
 800581c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800581e:	210f      	movs	r1, #15
 8005820:	f04f 30ff 	mov.w	r0, #4294967295
 8005824:	f7ff ff8e 	bl	8005744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005828:	4b05      	ldr	r3, [pc, #20]	; (8005840 <SysTick_Config+0x40>)
 800582a:	2200      	movs	r2, #0
 800582c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800582e:	4b04      	ldr	r3, [pc, #16]	; (8005840 <SysTick_Config+0x40>)
 8005830:	2207      	movs	r2, #7
 8005832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	e000e010 	.word	0xe000e010

08005844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff ff29 	bl	80056a4 <__NVIC_SetPriorityGrouping>
}
 8005852:	bf00      	nop
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800585a:	b580      	push	{r7, lr}
 800585c:	b086      	sub	sp, #24
 800585e:	af00      	add	r7, sp, #0
 8005860:	4603      	mov	r3, r0
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	607a      	str	r2, [r7, #4]
 8005866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800586c:	f7ff ff3e 	bl	80056ec <__NVIC_GetPriorityGrouping>
 8005870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	68b9      	ldr	r1, [r7, #8]
 8005876:	6978      	ldr	r0, [r7, #20]
 8005878:	f7ff ff8e 	bl	8005798 <NVIC_EncodePriority>
 800587c:	4602      	mov	r2, r0
 800587e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005882:	4611      	mov	r1, r2
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff ff5d 	bl	8005744 <__NVIC_SetPriority>
}
 800588a:	bf00      	nop
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b082      	sub	sp, #8
 8005896:	af00      	add	r7, sp, #0
 8005898:	4603      	mov	r3, r0
 800589a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800589c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff ff31 	bl	8005708 <__NVIC_EnableIRQ>
}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff ffa2 	bl	8005800 <SysTick_Config>
 80058bc:	4603      	mov	r3, r0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80058d4:	f7ff feb6 	bl	8005644 <HAL_GetTick>
 80058d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d008      	beq.n	80058f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2280      	movs	r2, #128	; 0x80
 80058ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e052      	b.n	800599e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0216 	bic.w	r2, r2, #22
 8005906:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695a      	ldr	r2, [r3, #20]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005916:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <HAL_DMA_Abort+0x62>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005924:	2b00      	cmp	r3, #0
 8005926:	d007      	beq.n	8005938 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0208 	bic.w	r2, r2, #8
 8005936:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005948:	e013      	b.n	8005972 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800594a:	f7ff fe7b 	bl	8005644 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b05      	cmp	r3, #5
 8005956:	d90c      	bls.n	8005972 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2203      	movs	r2, #3
 8005962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e015      	b.n	800599e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e4      	bne.n	800594a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005984:	223f      	movs	r2, #63	; 0x3f
 8005986:	409a      	lsls	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d004      	beq.n	80059c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2280      	movs	r2, #128	; 0x80
 80059be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e00c      	b.n	80059de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2205      	movs	r2, #5
 80059c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0201 	bic.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80059ea:	b480      	push	{r7}
 80059ec:	b087      	sub	sp, #28
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	60f8      	str	r0, [r7, #12]
 80059f2:	460b      	mov	r3, r1
 80059f4:	607a      	str	r2, [r7, #4]
 80059f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80059fc:	7afb      	ldrb	r3, [r7, #11]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d103      	bne.n	8005a0a <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	605a      	str	r2, [r3, #4]
      break;
 8005a08:	e002      	b.n	8005a10 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a0e:	bf00      	nop
  }

  return status;
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e003      	b.n	8005a3a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005a38:	2300      	movs	r3, #0
  }
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
	...

08005a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b089      	sub	sp, #36	; 0x24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005a52:	2300      	movs	r3, #0
 8005a54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	e175      	b.n	8005d54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005a68:	2201      	movs	r2, #1
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	f040 8164 	bne.w	8005d4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d005      	beq.n	8005a9e <HAL_GPIO_Init+0x56>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d130      	bne.n	8005b00 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	43db      	mvns	r3, r3
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	091b      	lsrs	r3, r3, #4
 8005aea:	f003 0201 	and.w	r2, r3, #1
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d017      	beq.n	8005b3c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	2203      	movs	r2, #3
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4013      	ands	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f003 0303 	and.w	r3, r3, #3
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d123      	bne.n	8005b90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	08da      	lsrs	r2, r3, #3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3208      	adds	r2, #8
 8005b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	220f      	movs	r2, #15
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	43db      	mvns	r3, r3
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	08da      	lsrs	r2, r3, #3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3208      	adds	r2, #8
 8005b8a:	69b9      	ldr	r1, [r7, #24]
 8005b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	2203      	movs	r2, #3
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f003 0203 	and.w	r2, r3, #3
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 80be 	beq.w	8005d4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bd2:	4b66      	ldr	r3, [pc, #408]	; (8005d6c <HAL_GPIO_Init+0x324>)
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd6:	4a65      	ldr	r2, [pc, #404]	; (8005d6c <HAL_GPIO_Init+0x324>)
 8005bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8005bde:	4b63      	ldr	r3, [pc, #396]	; (8005d6c <HAL_GPIO_Init+0x324>)
 8005be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005bea:	4a61      	ldr	r2, [pc, #388]	; (8005d70 <HAL_GPIO_Init+0x328>)
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	089b      	lsrs	r3, r3, #2
 8005bf0:	3302      	adds	r3, #2
 8005bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	220f      	movs	r2, #15
 8005c02:	fa02 f303 	lsl.w	r3, r2, r3
 8005c06:	43db      	mvns	r3, r3
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a58      	ldr	r2, [pc, #352]	; (8005d74 <HAL_GPIO_Init+0x32c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d037      	beq.n	8005c86 <HAL_GPIO_Init+0x23e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a57      	ldr	r2, [pc, #348]	; (8005d78 <HAL_GPIO_Init+0x330>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d031      	beq.n	8005c82 <HAL_GPIO_Init+0x23a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a56      	ldr	r2, [pc, #344]	; (8005d7c <HAL_GPIO_Init+0x334>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d02b      	beq.n	8005c7e <HAL_GPIO_Init+0x236>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a55      	ldr	r2, [pc, #340]	; (8005d80 <HAL_GPIO_Init+0x338>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d025      	beq.n	8005c7a <HAL_GPIO_Init+0x232>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a54      	ldr	r2, [pc, #336]	; (8005d84 <HAL_GPIO_Init+0x33c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01f      	beq.n	8005c76 <HAL_GPIO_Init+0x22e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a53      	ldr	r2, [pc, #332]	; (8005d88 <HAL_GPIO_Init+0x340>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d019      	beq.n	8005c72 <HAL_GPIO_Init+0x22a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a52      	ldr	r2, [pc, #328]	; (8005d8c <HAL_GPIO_Init+0x344>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <HAL_GPIO_Init+0x226>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a51      	ldr	r2, [pc, #324]	; (8005d90 <HAL_GPIO_Init+0x348>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00d      	beq.n	8005c6a <HAL_GPIO_Init+0x222>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a50      	ldr	r2, [pc, #320]	; (8005d94 <HAL_GPIO_Init+0x34c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d007      	beq.n	8005c66 <HAL_GPIO_Init+0x21e>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a4f      	ldr	r2, [pc, #316]	; (8005d98 <HAL_GPIO_Init+0x350>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d101      	bne.n	8005c62 <HAL_GPIO_Init+0x21a>
 8005c5e:	2309      	movs	r3, #9
 8005c60:	e012      	b.n	8005c88 <HAL_GPIO_Init+0x240>
 8005c62:	230a      	movs	r3, #10
 8005c64:	e010      	b.n	8005c88 <HAL_GPIO_Init+0x240>
 8005c66:	2308      	movs	r3, #8
 8005c68:	e00e      	b.n	8005c88 <HAL_GPIO_Init+0x240>
 8005c6a:	2307      	movs	r3, #7
 8005c6c:	e00c      	b.n	8005c88 <HAL_GPIO_Init+0x240>
 8005c6e:	2306      	movs	r3, #6
 8005c70:	e00a      	b.n	8005c88 <HAL_GPIO_Init+0x240>
 8005c72:	2305      	movs	r3, #5
 8005c74:	e008      	b.n	8005c88 <HAL_GPIO_Init+0x240>
 8005c76:	2304      	movs	r3, #4
 8005c78:	e006      	b.n	8005c88 <HAL_GPIO_Init+0x240>
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e004      	b.n	8005c88 <HAL_GPIO_Init+0x240>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e002      	b.n	8005c88 <HAL_GPIO_Init+0x240>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <HAL_GPIO_Init+0x240>
 8005c86:	2300      	movs	r3, #0
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	f002 0203 	and.w	r2, r2, #3
 8005c8e:	0092      	lsls	r2, r2, #2
 8005c90:	4093      	lsls	r3, r2
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005c98:	4935      	ldr	r1, [pc, #212]	; (8005d70 <HAL_GPIO_Init+0x328>)
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	089b      	lsrs	r3, r3, #2
 8005c9e:	3302      	adds	r3, #2
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ca6:	4b3d      	ldr	r3, [pc, #244]	; (8005d9c <HAL_GPIO_Init+0x354>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cca:	4a34      	ldr	r2, [pc, #208]	; (8005d9c <HAL_GPIO_Init+0x354>)
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cd0:	4b32      	ldr	r3, [pc, #200]	; (8005d9c <HAL_GPIO_Init+0x354>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cf4:	4a29      	ldr	r2, [pc, #164]	; (8005d9c <HAL_GPIO_Init+0x354>)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cfa:	4b28      	ldr	r3, [pc, #160]	; (8005d9c <HAL_GPIO_Init+0x354>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	43db      	mvns	r3, r3
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4013      	ands	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d1e:	4a1f      	ldr	r2, [pc, #124]	; (8005d9c <HAL_GPIO_Init+0x354>)
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d24:	4b1d      	ldr	r3, [pc, #116]	; (8005d9c <HAL_GPIO_Init+0x354>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	4013      	ands	r3, r2
 8005d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d48:	4a14      	ldr	r2, [pc, #80]	; (8005d9c <HAL_GPIO_Init+0x354>)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	3301      	adds	r3, #1
 8005d52:	61fb      	str	r3, [r7, #28]
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	2b0f      	cmp	r3, #15
 8005d58:	f67f ae86 	bls.w	8005a68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	3724      	adds	r7, #36	; 0x24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	40013800 	.word	0x40013800
 8005d74:	40020000 	.word	0x40020000
 8005d78:	40020400 	.word	0x40020400
 8005d7c:	40020800 	.word	0x40020800
 8005d80:	40020c00 	.word	0x40020c00
 8005d84:	40021000 	.word	0x40021000
 8005d88:	40021400 	.word	0x40021400
 8005d8c:	40021800 	.word	0x40021800
 8005d90:	40021c00 	.word	0x40021c00
 8005d94:	40022000 	.word	0x40022000
 8005d98:	40022400 	.word	0x40022400
 8005d9c:	40013c00 	.word	0x40013c00

08005da0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005daa:	2300      	movs	r3, #0
 8005dac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	e0d9      	b.n	8005f70 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	f040 80c9 	bne.w	8005f6a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005dd8:	4a6b      	ldr	r2, [pc, #428]	; (8005f88 <HAL_GPIO_DeInit+0x1e8>)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	089b      	lsrs	r3, r3, #2
 8005dde:	3302      	adds	r3, #2
 8005de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	220f      	movs	r2, #15
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	4013      	ands	r3, r2
 8005df8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a63      	ldr	r2, [pc, #396]	; (8005f8c <HAL_GPIO_DeInit+0x1ec>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d037      	beq.n	8005e72 <HAL_GPIO_DeInit+0xd2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a62      	ldr	r2, [pc, #392]	; (8005f90 <HAL_GPIO_DeInit+0x1f0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d031      	beq.n	8005e6e <HAL_GPIO_DeInit+0xce>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a61      	ldr	r2, [pc, #388]	; (8005f94 <HAL_GPIO_DeInit+0x1f4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d02b      	beq.n	8005e6a <HAL_GPIO_DeInit+0xca>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a60      	ldr	r2, [pc, #384]	; (8005f98 <HAL_GPIO_DeInit+0x1f8>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d025      	beq.n	8005e66 <HAL_GPIO_DeInit+0xc6>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a5f      	ldr	r2, [pc, #380]	; (8005f9c <HAL_GPIO_DeInit+0x1fc>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d01f      	beq.n	8005e62 <HAL_GPIO_DeInit+0xc2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a5e      	ldr	r2, [pc, #376]	; (8005fa0 <HAL_GPIO_DeInit+0x200>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d019      	beq.n	8005e5e <HAL_GPIO_DeInit+0xbe>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a5d      	ldr	r2, [pc, #372]	; (8005fa4 <HAL_GPIO_DeInit+0x204>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d013      	beq.n	8005e5a <HAL_GPIO_DeInit+0xba>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a5c      	ldr	r2, [pc, #368]	; (8005fa8 <HAL_GPIO_DeInit+0x208>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00d      	beq.n	8005e56 <HAL_GPIO_DeInit+0xb6>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a5b      	ldr	r2, [pc, #364]	; (8005fac <HAL_GPIO_DeInit+0x20c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d007      	beq.n	8005e52 <HAL_GPIO_DeInit+0xb2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a5a      	ldr	r2, [pc, #360]	; (8005fb0 <HAL_GPIO_DeInit+0x210>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d101      	bne.n	8005e4e <HAL_GPIO_DeInit+0xae>
 8005e4a:	2309      	movs	r3, #9
 8005e4c:	e012      	b.n	8005e74 <HAL_GPIO_DeInit+0xd4>
 8005e4e:	230a      	movs	r3, #10
 8005e50:	e010      	b.n	8005e74 <HAL_GPIO_DeInit+0xd4>
 8005e52:	2308      	movs	r3, #8
 8005e54:	e00e      	b.n	8005e74 <HAL_GPIO_DeInit+0xd4>
 8005e56:	2307      	movs	r3, #7
 8005e58:	e00c      	b.n	8005e74 <HAL_GPIO_DeInit+0xd4>
 8005e5a:	2306      	movs	r3, #6
 8005e5c:	e00a      	b.n	8005e74 <HAL_GPIO_DeInit+0xd4>
 8005e5e:	2305      	movs	r3, #5
 8005e60:	e008      	b.n	8005e74 <HAL_GPIO_DeInit+0xd4>
 8005e62:	2304      	movs	r3, #4
 8005e64:	e006      	b.n	8005e74 <HAL_GPIO_DeInit+0xd4>
 8005e66:	2303      	movs	r3, #3
 8005e68:	e004      	b.n	8005e74 <HAL_GPIO_DeInit+0xd4>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e002      	b.n	8005e74 <HAL_GPIO_DeInit+0xd4>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <HAL_GPIO_DeInit+0xd4>
 8005e72:	2300      	movs	r3, #0
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	f002 0203 	and.w	r2, r2, #3
 8005e7a:	0092      	lsls	r2, r2, #2
 8005e7c:	4093      	lsls	r3, r2
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d132      	bne.n	8005eea <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005e84:	4b4b      	ldr	r3, [pc, #300]	; (8005fb4 <HAL_GPIO_DeInit+0x214>)
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	4949      	ldr	r1, [pc, #292]	; (8005fb4 <HAL_GPIO_DeInit+0x214>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005e92:	4b48      	ldr	r3, [pc, #288]	; (8005fb4 <HAL_GPIO_DeInit+0x214>)
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	4946      	ldr	r1, [pc, #280]	; (8005fb4 <HAL_GPIO_DeInit+0x214>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005ea0:	4b44      	ldr	r3, [pc, #272]	; (8005fb4 <HAL_GPIO_DeInit+0x214>)
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	4942      	ldr	r1, [pc, #264]	; (8005fb4 <HAL_GPIO_DeInit+0x214>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005eae:	4b41      	ldr	r3, [pc, #260]	; (8005fb4 <HAL_GPIO_DeInit+0x214>)
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	43db      	mvns	r3, r3
 8005eb6:	493f      	ldr	r1, [pc, #252]	; (8005fb4 <HAL_GPIO_DeInit+0x214>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	220f      	movs	r2, #15
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005ecc:	4a2e      	ldr	r2, [pc, #184]	; (8005f88 <HAL_GPIO_DeInit+0x1e8>)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	089b      	lsrs	r3, r3, #2
 8005ed2:	3302      	adds	r3, #2
 8005ed4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	43da      	mvns	r2, r3
 8005edc:	482a      	ldr	r0, [pc, #168]	; (8005f88 <HAL_GPIO_DeInit+0x1e8>)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	089b      	lsrs	r3, r3, #2
 8005ee2:	400a      	ands	r2, r1
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	2103      	movs	r1, #3
 8005ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	401a      	ands	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	08da      	lsrs	r2, r3, #3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3208      	adds	r2, #8
 8005f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	220f      	movs	r2, #15
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	08d2      	lsrs	r2, r2, #3
 8005f20:	4019      	ands	r1, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3208      	adds	r2, #8
 8005f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	2103      	movs	r1, #3
 8005f34:	fa01 f303 	lsl.w	r3, r1, r3
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	401a      	ands	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	2101      	movs	r1, #1
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	401a      	ands	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	2103      	movs	r1, #3
 8005f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f62:	43db      	mvns	r3, r3
 8005f64:	401a      	ands	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	f67f af22 	bls.w	8005dbc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40013800 	.word	0x40013800
 8005f8c:	40020000 	.word	0x40020000
 8005f90:	40020400 	.word	0x40020400
 8005f94:	40020800 	.word	0x40020800
 8005f98:	40020c00 	.word	0x40020c00
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	40021400 	.word	0x40021400
 8005fa4:	40021800 	.word	0x40021800
 8005fa8:	40021c00 	.word	0x40021c00
 8005fac:	40022000 	.word	0x40022000
 8005fb0:	40022400 	.word	0x40022400
 8005fb4:	40013c00 	.word	0x40013c00

08005fb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	887b      	ldrh	r3, [r7, #2]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	73fb      	strb	r3, [r7, #15]
 8005fd4:	e001      	b.n	8005fda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	807b      	strh	r3, [r7, #2]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ff8:	787b      	ldrb	r3, [r7, #1]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ffe:	887a      	ldrh	r2, [r7, #2]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006004:	e003      	b.n	800600e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006006:	887b      	ldrh	r3, [r7, #2]
 8006008:	041a      	lsls	r2, r3, #16
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	619a      	str	r2, [r3, #24]
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
	...

0800601c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006026:	4b08      	ldr	r3, [pc, #32]	; (8006048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006028:	695a      	ldr	r2, [r3, #20]
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	4013      	ands	r3, r2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d006      	beq.n	8006040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006032:	4a05      	ldr	r2, [pc, #20]	; (8006048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006038:	88fb      	ldrh	r3, [r7, #6]
 800603a:	4618      	mov	r0, r3
 800603c:	f000 f806 	bl	800604c <HAL_GPIO_EXTI_Callback>
  }
}
 8006040:	bf00      	nop
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40013c00 	.word	0x40013c00

0800604c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006056:	bf00      	nop
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
	...

08006064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e07f      	b.n	8006176 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f8a9 	bl	80061e2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2224      	movs	r2, #36	; 0x24
 8006094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0201 	bic.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80060b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d107      	bne.n	80060de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060da:	609a      	str	r2, [r3, #8]
 80060dc:	e006      	b.n	80060ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80060ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d104      	bne.n	80060fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6859      	ldr	r1, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <HAL_I2C_Init+0x11c>)
 800610a:	430b      	orrs	r3, r1
 800610c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800611c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691a      	ldr	r2, [r3, #16]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	69d9      	ldr	r1, [r3, #28]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a1a      	ldr	r2, [r3, #32]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	02008000 	.word	0x02008000

08006184 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e021      	b.n	80061da <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2224      	movs	r2, #36	; 0x24
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0201 	bic.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f821 	bl	80061f6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
	...

0800620c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	4608      	mov	r0, r1
 8006216:	4611      	mov	r1, r2
 8006218:	461a      	mov	r2, r3
 800621a:	4603      	mov	r3, r0
 800621c:	817b      	strh	r3, [r7, #10]
 800621e:	460b      	mov	r3, r1
 8006220:	813b      	strh	r3, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b20      	cmp	r3, #32
 8006230:	f040 80f9 	bne.w	8006426 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <HAL_I2C_Mem_Write+0x34>
 800623a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800623c:	2b00      	cmp	r3, #0
 800623e:	d105      	bne.n	800624c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006246:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e0ed      	b.n	8006428 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_I2C_Mem_Write+0x4e>
 8006256:	2302      	movs	r3, #2
 8006258:	e0e6      	b.n	8006428 <HAL_I2C_Mem_Write+0x21c>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006262:	f7ff f9ef 	bl	8005644 <HAL_GetTick>
 8006266:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	2319      	movs	r3, #25
 800626e:	2201      	movs	r2, #1
 8006270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fadd 	bl	8006834 <I2C_WaitOnFlagUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e0d1      	b.n	8006428 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2221      	movs	r2, #33	; 0x21
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2240      	movs	r2, #64	; 0x40
 8006290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6a3a      	ldr	r2, [r7, #32]
 800629e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062ac:	88f8      	ldrh	r0, [r7, #6]
 80062ae:	893a      	ldrh	r2, [r7, #8]
 80062b0:	8979      	ldrh	r1, [r7, #10]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	9301      	str	r3, [sp, #4]
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	4603      	mov	r3, r0
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f000 f9ed 	bl	800669c <I2C_RequestMemoryWrite>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e0a9      	b.n	8006428 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2bff      	cmp	r3, #255	; 0xff
 80062dc:	d90e      	bls.n	80062fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	22ff      	movs	r2, #255	; 0xff
 80062e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	8979      	ldrh	r1, [r7, #10]
 80062ec:	2300      	movs	r3, #0
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 fc45 	bl	8006b84 <I2C_TransferConfig>
 80062fa:	e00f      	b.n	800631c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630a:	b2da      	uxtb	r2, r3
 800630c:	8979      	ldrh	r1, [r7, #10]
 800630e:	2300      	movs	r3, #0
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 fc34 	bl	8006b84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fac7 	bl	80068b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e07b      	b.n	8006428 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006334:	781a      	ldrb	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006358:	3b01      	subs	r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d034      	beq.n	80063d4 <HAL_I2C_Mem_Write+0x1c8>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636e:	2b00      	cmp	r3, #0
 8006370:	d130      	bne.n	80063d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	2200      	movs	r2, #0
 800637a:	2180      	movs	r1, #128	; 0x80
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fa59 	bl	8006834 <I2C_WaitOnFlagUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e04d      	b.n	8006428 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	2bff      	cmp	r3, #255	; 0xff
 8006394:	d90e      	bls.n	80063b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	22ff      	movs	r2, #255	; 0xff
 800639a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	8979      	ldrh	r1, [r7, #10]
 80063a4:	2300      	movs	r3, #0
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fbe9 	bl	8006b84 <I2C_TransferConfig>
 80063b2:	e00f      	b.n	80063d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	8979      	ldrh	r1, [r7, #10]
 80063c6:	2300      	movs	r3, #0
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 fbd8 	bl	8006b84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d19e      	bne.n	800631c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 faa6 	bl	8006934 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e01a      	b.n	8006428 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2220      	movs	r2, #32
 80063f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6859      	ldr	r1, [r3, #4]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <HAL_I2C_Mem_Write+0x224>)
 8006406:	400b      	ands	r3, r1
 8006408:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2220      	movs	r2, #32
 800640e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	e000      	b.n	8006428 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006426:	2302      	movs	r3, #2
  }
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	fe00e800 	.word	0xfe00e800

08006434 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af02      	add	r7, sp, #8
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	4608      	mov	r0, r1
 800643e:	4611      	mov	r1, r2
 8006440:	461a      	mov	r2, r3
 8006442:	4603      	mov	r3, r0
 8006444:	817b      	strh	r3, [r7, #10]
 8006446:	460b      	mov	r3, r1
 8006448:	813b      	strh	r3, [r7, #8]
 800644a:	4613      	mov	r3, r2
 800644c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b20      	cmp	r3, #32
 8006458:	f040 80fd 	bne.w	8006656 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_I2C_Mem_Read+0x34>
 8006462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006464:	2b00      	cmp	r3, #0
 8006466:	d105      	bne.n	8006474 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800646e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e0f1      	b.n	8006658 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800647a:	2b01      	cmp	r3, #1
 800647c:	d101      	bne.n	8006482 <HAL_I2C_Mem_Read+0x4e>
 800647e:	2302      	movs	r3, #2
 8006480:	e0ea      	b.n	8006658 <HAL_I2C_Mem_Read+0x224>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800648a:	f7ff f8db 	bl	8005644 <HAL_GetTick>
 800648e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	2319      	movs	r3, #25
 8006496:	2201      	movs	r2, #1
 8006498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f9c9 	bl	8006834 <I2C_WaitOnFlagUntilTimeout>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e0d5      	b.n	8006658 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2222      	movs	r2, #34	; 0x22
 80064b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2240      	movs	r2, #64	; 0x40
 80064b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a3a      	ldr	r2, [r7, #32]
 80064c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064d4:	88f8      	ldrh	r0, [r7, #6]
 80064d6:	893a      	ldrh	r2, [r7, #8]
 80064d8:	8979      	ldrh	r1, [r7, #10]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	9301      	str	r3, [sp, #4]
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	4603      	mov	r3, r0
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f92d 	bl	8006744 <I2C_RequestMemoryRead>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d005      	beq.n	80064fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0ad      	b.n	8006658 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006500:	b29b      	uxth	r3, r3
 8006502:	2bff      	cmp	r3, #255	; 0xff
 8006504:	d90e      	bls.n	8006524 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	22ff      	movs	r2, #255	; 0xff
 800650a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006510:	b2da      	uxtb	r2, r3
 8006512:	8979      	ldrh	r1, [r7, #10]
 8006514:	4b52      	ldr	r3, [pc, #328]	; (8006660 <HAL_I2C_Mem_Read+0x22c>)
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 fb31 	bl	8006b84 <I2C_TransferConfig>
 8006522:	e00f      	b.n	8006544 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006532:	b2da      	uxtb	r2, r3
 8006534:	8979      	ldrh	r1, [r7, #10]
 8006536:	4b4a      	ldr	r3, [pc, #296]	; (8006660 <HAL_I2C_Mem_Read+0x22c>)
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fb20 	bl	8006b84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	2200      	movs	r2, #0
 800654c:	2104      	movs	r1, #4
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 f970 	bl	8006834 <I2C_WaitOnFlagUntilTimeout>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e07c      	b.n	8006658 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d034      	beq.n	8006604 <HAL_I2C_Mem_Read+0x1d0>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d130      	bne.n	8006604 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	2200      	movs	r2, #0
 80065aa:	2180      	movs	r1, #128	; 0x80
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 f941 	bl	8006834 <I2C_WaitOnFlagUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e04d      	b.n	8006658 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2bff      	cmp	r3, #255	; 0xff
 80065c4:	d90e      	bls.n	80065e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	22ff      	movs	r2, #255	; 0xff
 80065ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	8979      	ldrh	r1, [r7, #10]
 80065d4:	2300      	movs	r3, #0
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 fad1 	bl	8006b84 <I2C_TransferConfig>
 80065e2:	e00f      	b.n	8006604 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	8979      	ldrh	r1, [r7, #10]
 80065f6:	2300      	movs	r3, #0
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 fac0 	bl	8006b84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d19a      	bne.n	8006544 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f98e 	bl	8006934 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e01a      	b.n	8006658 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2220      	movs	r2, #32
 8006628:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6859      	ldr	r1, [r3, #4]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <HAL_I2C_Mem_Read+0x230>)
 8006636:	400b      	ands	r3, r1
 8006638:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2220      	movs	r2, #32
 800663e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	e000      	b.n	8006658 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006656:	2302      	movs	r3, #2
  }
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	80002400 	.word	0x80002400
 8006664:	fe00e800 	.word	0xfe00e800

08006668 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006676:	b2db      	uxtb	r3, r3
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	4608      	mov	r0, r1
 80066a6:	4611      	mov	r1, r2
 80066a8:	461a      	mov	r2, r3
 80066aa:	4603      	mov	r3, r0
 80066ac:	817b      	strh	r3, [r7, #10]
 80066ae:	460b      	mov	r3, r1
 80066b0:	813b      	strh	r3, [r7, #8]
 80066b2:	4613      	mov	r3, r2
 80066b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066b6:	88fb      	ldrh	r3, [r7, #6]
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	8979      	ldrh	r1, [r7, #10]
 80066bc:	4b20      	ldr	r3, [pc, #128]	; (8006740 <I2C_RequestMemoryWrite+0xa4>)
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 fa5d 	bl	8006b84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	69b9      	ldr	r1, [r7, #24]
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 f8f0 	bl	80068b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e02c      	b.n	8006738 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d105      	bne.n	80066f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066e4:	893b      	ldrh	r3, [r7, #8]
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	629a      	str	r2, [r3, #40]	; 0x28
 80066ee:	e015      	b.n	800671c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066f0:	893b      	ldrh	r3, [r7, #8]
 80066f2:	0a1b      	lsrs	r3, r3, #8
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	69b9      	ldr	r1, [r7, #24]
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f8d6 	bl	80068b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e012      	b.n	8006738 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006712:	893b      	ldrh	r3, [r7, #8]
 8006714:	b2da      	uxtb	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2200      	movs	r2, #0
 8006724:	2180      	movs	r1, #128	; 0x80
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f884 	bl	8006834 <I2C_WaitOnFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	80002000 	.word	0x80002000

08006744 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af02      	add	r7, sp, #8
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	4608      	mov	r0, r1
 800674e:	4611      	mov	r1, r2
 8006750:	461a      	mov	r2, r3
 8006752:	4603      	mov	r3, r0
 8006754:	817b      	strh	r3, [r7, #10]
 8006756:	460b      	mov	r3, r1
 8006758:	813b      	strh	r3, [r7, #8]
 800675a:	4613      	mov	r3, r2
 800675c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800675e:	88fb      	ldrh	r3, [r7, #6]
 8006760:	b2da      	uxtb	r2, r3
 8006762:	8979      	ldrh	r1, [r7, #10]
 8006764:	4b20      	ldr	r3, [pc, #128]	; (80067e8 <I2C_RequestMemoryRead+0xa4>)
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	2300      	movs	r3, #0
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 fa0a 	bl	8006b84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	69b9      	ldr	r1, [r7, #24]
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 f89d 	bl	80068b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e02c      	b.n	80067de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006784:	88fb      	ldrh	r3, [r7, #6]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d105      	bne.n	8006796 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800678a:	893b      	ldrh	r3, [r7, #8]
 800678c:	b2da      	uxtb	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	629a      	str	r2, [r3, #40]	; 0x28
 8006794:	e015      	b.n	80067c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006796:	893b      	ldrh	r3, [r7, #8]
 8006798:	0a1b      	lsrs	r3, r3, #8
 800679a:	b29b      	uxth	r3, r3
 800679c:	b2da      	uxtb	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	69b9      	ldr	r1, [r7, #24]
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f883 	bl	80068b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e012      	b.n	80067de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067b8:	893b      	ldrh	r3, [r7, #8]
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	2200      	movs	r2, #0
 80067ca:	2140      	movs	r1, #64	; 0x40
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 f831 	bl	8006834 <I2C_WaitOnFlagUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e000      	b.n	80067de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	80002000 	.word	0x80002000

080067ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d103      	bne.n	800680a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2200      	movs	r2, #0
 8006808:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b01      	cmp	r3, #1
 8006816:	d007      	beq.n	8006828 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699a      	ldr	r2, [r3, #24]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0201 	orr.w	r2, r2, #1
 8006826:	619a      	str	r2, [r3, #24]
  }
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	4613      	mov	r3, r2
 8006842:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006844:	e022      	b.n	800688c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684c:	d01e      	beq.n	800688c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800684e:	f7fe fef9 	bl	8005644 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d302      	bcc.n	8006864 <I2C_WaitOnFlagUntilTimeout+0x30>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d113      	bne.n	800688c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006868:	f043 0220 	orr.w	r2, r3, #32
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2220      	movs	r2, #32
 8006874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e00f      	b.n	80068ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	4013      	ands	r3, r2
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	429a      	cmp	r2, r3
 800689a:	bf0c      	ite	eq
 800689c:	2301      	moveq	r3, #1
 800689e:	2300      	movne	r3, #0
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	79fb      	ldrb	r3, [r7, #7]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d0cd      	beq.n	8006846 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068c0:	e02c      	b.n	800691c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	68b9      	ldr	r1, [r7, #8]
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 f870 	bl	80069ac <I2C_IsErrorOccurred>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e02a      	b.n	800692c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068dc:	d01e      	beq.n	800691c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068de:	f7fe feb1 	bl	8005644 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d302      	bcc.n	80068f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d113      	bne.n	800691c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f8:	f043 0220 	orr.w	r2, r3, #32
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2220      	movs	r2, #32
 8006904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e007      	b.n	800692c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b02      	cmp	r3, #2
 8006928:	d1cb      	bne.n	80068c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006940:	e028      	b.n	8006994 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 f830 	bl	80069ac <I2C_IsErrorOccurred>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e026      	b.n	80069a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006956:	f7fe fe75 	bl	8005644 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	429a      	cmp	r2, r3
 8006964:	d302      	bcc.n	800696c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d113      	bne.n	8006994 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006970:	f043 0220 	orr.w	r2, r3, #32
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e007      	b.n	80069a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	f003 0320 	and.w	r3, r3, #32
 800699e:	2b20      	cmp	r3, #32
 80069a0:	d1cf      	bne.n	8006942 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08a      	sub	sp, #40	; 0x28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d075      	beq.n	8006ac4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2210      	movs	r2, #16
 80069de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069e0:	e056      	b.n	8006a90 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e8:	d052      	beq.n	8006a90 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069ea:	f7fe fe2b 	bl	8005644 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d302      	bcc.n	8006a00 <I2C_IsErrorOccurred+0x54>
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d147      	bne.n	8006a90 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a22:	d12e      	bne.n	8006a82 <I2C_IsErrorOccurred+0xd6>
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a2a:	d02a      	beq.n	8006a82 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006a2c:	7cfb      	ldrb	r3, [r7, #19]
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	d027      	beq.n	8006a82 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a40:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a42:	f7fe fdff 	bl	8005644 <HAL_GetTick>
 8006a46:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a48:	e01b      	b.n	8006a82 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a4a:	f7fe fdfb 	bl	8005644 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	2b19      	cmp	r3, #25
 8006a56:	d914      	bls.n	8006a82 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5c:	f043 0220 	orr.w	r2, r3, #32
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	f003 0320 	and.w	r3, r3, #32
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d1dc      	bne.n	8006a4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d003      	beq.n	8006aa6 <I2C_IsErrorOccurred+0xfa>
 8006a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d09d      	beq.n	80069e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d103      	bne.n	8006ab6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	f043 0304 	orr.w	r3, r3, #4
 8006abc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00b      	beq.n	8006aee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	f043 0301 	orr.w	r3, r3, #1
 8006adc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ae6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00b      	beq.n	8006b10 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	f043 0308 	orr.w	r3, r3, #8
 8006afe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00b      	beq.n	8006b32 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	f043 0302 	orr.w	r3, r3, #2
 8006b20:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006b32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d01c      	beq.n	8006b74 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7ff fe56 	bl	80067ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6859      	ldr	r1, [r3, #4]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	; (8006b80 <I2C_IsErrorOccurred+0x1d4>)
 8006b4c:	400b      	ands	r3, r1
 8006b4e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	431a      	orrs	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3728      	adds	r7, #40	; 0x28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	fe00e800 	.word	0xfe00e800

08006b84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	607b      	str	r3, [r7, #4]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	817b      	strh	r3, [r7, #10]
 8006b92:	4613      	mov	r3, r2
 8006b94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b96:	897b      	ldrh	r3, [r7, #10]
 8006b98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b9c:	7a7b      	ldrb	r3, [r7, #9]
 8006b9e:	041b      	lsls	r3, r3, #16
 8006ba0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ba4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bb2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	0d5b      	lsrs	r3, r3, #21
 8006bbe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006bc2:	4b08      	ldr	r3, [pc, #32]	; (8006be4 <I2C_TransferConfig+0x60>)
 8006bc4:	430b      	orrs	r3, r1
 8006bc6:	43db      	mvns	r3, r3
 8006bc8:	ea02 0103 	and.w	r1, r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006bd6:	bf00      	nop
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	03ff63ff 	.word	0x03ff63ff

08006be8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	d138      	bne.n	8006c70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e032      	b.n	8006c72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2224      	movs	r2, #36	; 0x24
 8006c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0201 	bic.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6819      	ldr	r1, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0201 	orr.w	r2, r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	e000      	b.n	8006c72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c70:	2302      	movs	r3, #2
  }
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b085      	sub	sp, #20
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b20      	cmp	r3, #32
 8006c92:	d139      	bne.n	8006d08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d101      	bne.n	8006ca2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	e033      	b.n	8006d0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2224      	movs	r2, #36	; 0x24
 8006cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0201 	bic.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cd0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	021b      	lsls	r3, r3, #8
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0201 	orr.w	r2, r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	e000      	b.n	8006d0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d08:	2302      	movs	r3, #2
  }
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
	...

08006d18 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a04      	ldr	r2, [pc, #16]	; (8006d34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d26:	6013      	str	r3, [r2, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40007000 	.word	0x40007000

08006d38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d42:	4b23      	ldr	r3, [pc, #140]	; (8006dd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	4a22      	ldr	r2, [pc, #136]	; (8006dd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d4e:	4b20      	ldr	r3, [pc, #128]	; (8006dd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d5a:	4b1e      	ldr	r3, [pc, #120]	; (8006dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a1d      	ldr	r2, [pc, #116]	; (8006dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d66:	f7fe fc6d 	bl	8005644 <HAL_GetTick>
 8006d6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d6c:	e009      	b.n	8006d82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d6e:	f7fe fc69 	bl	8005644 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d7c:	d901      	bls.n	8006d82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e022      	b.n	8006dc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d82:	4b14      	ldr	r3, [pc, #80]	; (8006dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d8e:	d1ee      	bne.n	8006d6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d90:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a0f      	ldr	r2, [pc, #60]	; (8006dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d9c:	f7fe fc52 	bl	8005644 <HAL_GetTick>
 8006da0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006da2:	e009      	b.n	8006db8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006da4:	f7fe fc4e 	bl	8005644 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006db2:	d901      	bls.n	8006db8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e007      	b.n	8006dc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006db8:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc4:	d1ee      	bne.n	8006da4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	40007000 	.word	0x40007000

08006dd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006de0:	2300      	movs	r3, #0
 8006de2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e29b      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 8087 	beq.w	8006f0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006dfc:	4b96      	ldr	r3, [pc, #600]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f003 030c 	and.w	r3, r3, #12
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d00c      	beq.n	8006e22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e08:	4b93      	ldr	r3, [pc, #588]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 030c 	and.w	r3, r3, #12
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d112      	bne.n	8006e3a <HAL_RCC_OscConfig+0x62>
 8006e14:	4b90      	ldr	r3, [pc, #576]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e20:	d10b      	bne.n	8006e3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e22:	4b8d      	ldr	r3, [pc, #564]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d06c      	beq.n	8006f08 <HAL_RCC_OscConfig+0x130>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d168      	bne.n	8006f08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e275      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e42:	d106      	bne.n	8006e52 <HAL_RCC_OscConfig+0x7a>
 8006e44:	4b84      	ldr	r3, [pc, #528]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a83      	ldr	r2, [pc, #524]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	e02e      	b.n	8006eb0 <HAL_RCC_OscConfig+0xd8>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10c      	bne.n	8006e74 <HAL_RCC_OscConfig+0x9c>
 8006e5a:	4b7f      	ldr	r3, [pc, #508]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a7e      	ldr	r2, [pc, #504]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	4b7c      	ldr	r3, [pc, #496]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a7b      	ldr	r2, [pc, #492]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	e01d      	b.n	8006eb0 <HAL_RCC_OscConfig+0xd8>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e7c:	d10c      	bne.n	8006e98 <HAL_RCC_OscConfig+0xc0>
 8006e7e:	4b76      	ldr	r3, [pc, #472]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a75      	ldr	r2, [pc, #468]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e88:	6013      	str	r3, [r2, #0]
 8006e8a:	4b73      	ldr	r3, [pc, #460]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a72      	ldr	r2, [pc, #456]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e94:	6013      	str	r3, [r2, #0]
 8006e96:	e00b      	b.n	8006eb0 <HAL_RCC_OscConfig+0xd8>
 8006e98:	4b6f      	ldr	r3, [pc, #444]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a6e      	ldr	r2, [pc, #440]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	4b6c      	ldr	r3, [pc, #432]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a6b      	ldr	r2, [pc, #428]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d013      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb8:	f7fe fbc4 	bl	8005644 <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ec0:	f7fe fbc0 	bl	8005644 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b64      	cmp	r3, #100	; 0x64
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e229      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ed2:	4b61      	ldr	r3, [pc, #388]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0f0      	beq.n	8006ec0 <HAL_RCC_OscConfig+0xe8>
 8006ede:	e014      	b.n	8006f0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee0:	f7fe fbb0 	bl	8005644 <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ee8:	f7fe fbac 	bl	8005644 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b64      	cmp	r3, #100	; 0x64
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e215      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006efa:	4b57      	ldr	r3, [pc, #348]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f0      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x110>
 8006f06:	e000      	b.n	8006f0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d069      	beq.n	8006fea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f16:	4b50      	ldr	r3, [pc, #320]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f003 030c 	and.w	r3, r3, #12
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f22:	4b4d      	ldr	r3, [pc, #308]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f003 030c 	and.w	r3, r3, #12
 8006f2a:	2b08      	cmp	r3, #8
 8006f2c:	d11c      	bne.n	8006f68 <HAL_RCC_OscConfig+0x190>
 8006f2e:	4b4a      	ldr	r3, [pc, #296]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d116      	bne.n	8006f68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f3a:	4b47      	ldr	r3, [pc, #284]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <HAL_RCC_OscConfig+0x17a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d001      	beq.n	8006f52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e1e9      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f52:	4b41      	ldr	r3, [pc, #260]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	493d      	ldr	r1, [pc, #244]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f66:	e040      	b.n	8006fea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d023      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f70:	4b39      	ldr	r3, [pc, #228]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a38      	ldr	r2, [pc, #224]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006f76:	f043 0301 	orr.w	r3, r3, #1
 8006f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7c:	f7fe fb62 	bl	8005644 <HAL_GetTick>
 8006f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f82:	e008      	b.n	8006f96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f84:	f7fe fb5e 	bl	8005644 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e1c7      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f96:	4b30      	ldr	r3, [pc, #192]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d0f0      	beq.n	8006f84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fa2:	4b2d      	ldr	r3, [pc, #180]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	4929      	ldr	r1, [pc, #164]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	600b      	str	r3, [r1, #0]
 8006fb6:	e018      	b.n	8006fea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fb8:	4b27      	ldr	r3, [pc, #156]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a26      	ldr	r2, [pc, #152]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006fbe:	f023 0301 	bic.w	r3, r3, #1
 8006fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc4:	f7fe fb3e 	bl	8005644 <HAL_GetTick>
 8006fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fca:	e008      	b.n	8006fde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fcc:	f7fe fb3a 	bl	8005644 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e1a3      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fde:	4b1e      	ldr	r3, [pc, #120]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1f0      	bne.n	8006fcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0308 	and.w	r3, r3, #8
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d038      	beq.n	8007068 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d019      	beq.n	8007032 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ffe:	4b16      	ldr	r3, [pc, #88]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8007000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007002:	4a15      	ldr	r2, [pc, #84]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8007004:	f043 0301 	orr.w	r3, r3, #1
 8007008:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800700a:	f7fe fb1b 	bl	8005644 <HAL_GetTick>
 800700e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007010:	e008      	b.n	8007024 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007012:	f7fe fb17 	bl	8005644 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d901      	bls.n	8007024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e180      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007024:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8007026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0f0      	beq.n	8007012 <HAL_RCC_OscConfig+0x23a>
 8007030:	e01a      	b.n	8007068 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007032:	4b09      	ldr	r3, [pc, #36]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8007034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007036:	4a08      	ldr	r2, [pc, #32]	; (8007058 <HAL_RCC_OscConfig+0x280>)
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800703e:	f7fe fb01 	bl	8005644 <HAL_GetTick>
 8007042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007044:	e00a      	b.n	800705c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007046:	f7fe fafd 	bl	8005644 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d903      	bls.n	800705c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e166      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
 8007058:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800705c:	4b92      	ldr	r3, [pc, #584]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 800705e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1ee      	bne.n	8007046 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0304 	and.w	r3, r3, #4
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 80a4 	beq.w	80071be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007076:	4b8c      	ldr	r3, [pc, #560]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10d      	bne.n	800709e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007082:	4b89      	ldr	r3, [pc, #548]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	4a88      	ldr	r2, [pc, #544]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800708c:	6413      	str	r3, [r2, #64]	; 0x40
 800708e:	4b86      	ldr	r3, [pc, #536]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007096:	60bb      	str	r3, [r7, #8]
 8007098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800709a:	2301      	movs	r3, #1
 800709c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800709e:	4b83      	ldr	r3, [pc, #524]	; (80072ac <HAL_RCC_OscConfig+0x4d4>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d118      	bne.n	80070dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80070aa:	4b80      	ldr	r3, [pc, #512]	; (80072ac <HAL_RCC_OscConfig+0x4d4>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a7f      	ldr	r2, [pc, #508]	; (80072ac <HAL_RCC_OscConfig+0x4d4>)
 80070b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070b6:	f7fe fac5 	bl	8005644 <HAL_GetTick>
 80070ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070bc:	e008      	b.n	80070d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070be:	f7fe fac1 	bl	8005644 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b64      	cmp	r3, #100	; 0x64
 80070ca:	d901      	bls.n	80070d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e12a      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070d0:	4b76      	ldr	r3, [pc, #472]	; (80072ac <HAL_RCC_OscConfig+0x4d4>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0f0      	beq.n	80070be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d106      	bne.n	80070f2 <HAL_RCC_OscConfig+0x31a>
 80070e4:	4b70      	ldr	r3, [pc, #448]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 80070e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e8:	4a6f      	ldr	r2, [pc, #444]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 80070ea:	f043 0301 	orr.w	r3, r3, #1
 80070ee:	6713      	str	r3, [r2, #112]	; 0x70
 80070f0:	e02d      	b.n	800714e <HAL_RCC_OscConfig+0x376>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10c      	bne.n	8007114 <HAL_RCC_OscConfig+0x33c>
 80070fa:	4b6b      	ldr	r3, [pc, #428]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 80070fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fe:	4a6a      	ldr	r2, [pc, #424]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	6713      	str	r3, [r2, #112]	; 0x70
 8007106:	4b68      	ldr	r3, [pc, #416]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710a:	4a67      	ldr	r2, [pc, #412]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 800710c:	f023 0304 	bic.w	r3, r3, #4
 8007110:	6713      	str	r3, [r2, #112]	; 0x70
 8007112:	e01c      	b.n	800714e <HAL_RCC_OscConfig+0x376>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	2b05      	cmp	r3, #5
 800711a:	d10c      	bne.n	8007136 <HAL_RCC_OscConfig+0x35e>
 800711c:	4b62      	ldr	r3, [pc, #392]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 800711e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007120:	4a61      	ldr	r2, [pc, #388]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007122:	f043 0304 	orr.w	r3, r3, #4
 8007126:	6713      	str	r3, [r2, #112]	; 0x70
 8007128:	4b5f      	ldr	r3, [pc, #380]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 800712a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800712c:	4a5e      	ldr	r2, [pc, #376]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 800712e:	f043 0301 	orr.w	r3, r3, #1
 8007132:	6713      	str	r3, [r2, #112]	; 0x70
 8007134:	e00b      	b.n	800714e <HAL_RCC_OscConfig+0x376>
 8007136:	4b5c      	ldr	r3, [pc, #368]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713a:	4a5b      	ldr	r2, [pc, #364]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 800713c:	f023 0301 	bic.w	r3, r3, #1
 8007140:	6713      	str	r3, [r2, #112]	; 0x70
 8007142:	4b59      	ldr	r3, [pc, #356]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007146:	4a58      	ldr	r2, [pc, #352]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007148:	f023 0304 	bic.w	r3, r3, #4
 800714c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d015      	beq.n	8007182 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007156:	f7fe fa75 	bl	8005644 <HAL_GetTick>
 800715a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800715c:	e00a      	b.n	8007174 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800715e:	f7fe fa71 	bl	8005644 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	f241 3288 	movw	r2, #5000	; 0x1388
 800716c:	4293      	cmp	r3, r2
 800716e:	d901      	bls.n	8007174 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e0d8      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007174:	4b4c      	ldr	r3, [pc, #304]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	2b00      	cmp	r3, #0
 800717e:	d0ee      	beq.n	800715e <HAL_RCC_OscConfig+0x386>
 8007180:	e014      	b.n	80071ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007182:	f7fe fa5f 	bl	8005644 <HAL_GetTick>
 8007186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007188:	e00a      	b.n	80071a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800718a:	f7fe fa5b 	bl	8005644 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	f241 3288 	movw	r2, #5000	; 0x1388
 8007198:	4293      	cmp	r3, r2
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e0c2      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071a0:	4b41      	ldr	r3, [pc, #260]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 80071a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1ee      	bne.n	800718a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d105      	bne.n	80071be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071b2:	4b3d      	ldr	r3, [pc, #244]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	4a3c      	ldr	r2, [pc, #240]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 80071b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 80ae 	beq.w	8007324 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071c8:	4b37      	ldr	r3, [pc, #220]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 030c 	and.w	r3, r3, #12
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d06d      	beq.n	80072b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d14b      	bne.n	8007274 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071dc:	4b32      	ldr	r3, [pc, #200]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a31      	ldr	r2, [pc, #196]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 80071e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e8:	f7fe fa2c 	bl	8005644 <HAL_GetTick>
 80071ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ee:	e008      	b.n	8007202 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071f0:	f7fe fa28 	bl	8005644 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e091      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007202:	4b29      	ldr	r3, [pc, #164]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1f0      	bne.n	80071f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69da      	ldr	r2, [r3, #28]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	431a      	orrs	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	019b      	lsls	r3, r3, #6
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007224:	085b      	lsrs	r3, r3, #1
 8007226:	3b01      	subs	r3, #1
 8007228:	041b      	lsls	r3, r3, #16
 800722a:	431a      	orrs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007230:	061b      	lsls	r3, r3, #24
 8007232:	431a      	orrs	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007238:	071b      	lsls	r3, r3, #28
 800723a:	491b      	ldr	r1, [pc, #108]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 800723c:	4313      	orrs	r3, r2
 800723e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007240:	4b19      	ldr	r3, [pc, #100]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a18      	ldr	r2, [pc, #96]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800724a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724c:	f7fe f9fa 	bl	8005644 <HAL_GetTick>
 8007250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007252:	e008      	b.n	8007266 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007254:	f7fe f9f6 	bl	8005644 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e05f      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007266:	4b10      	ldr	r3, [pc, #64]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0f0      	beq.n	8007254 <HAL_RCC_OscConfig+0x47c>
 8007272:	e057      	b.n	8007324 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007274:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a0b      	ldr	r2, [pc, #44]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 800727a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800727e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007280:	f7fe f9e0 	bl	8005644 <HAL_GetTick>
 8007284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007286:	e008      	b.n	800729a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007288:	f7fe f9dc 	bl	8005644 <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b02      	cmp	r3, #2
 8007294:	d901      	bls.n	800729a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e045      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800729a:	4b03      	ldr	r3, [pc, #12]	; (80072a8 <HAL_RCC_OscConfig+0x4d0>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1f0      	bne.n	8007288 <HAL_RCC_OscConfig+0x4b0>
 80072a6:	e03d      	b.n	8007324 <HAL_RCC_OscConfig+0x54c>
 80072a8:	40023800 	.word	0x40023800
 80072ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80072b0:	4b1f      	ldr	r3, [pc, #124]	; (8007330 <HAL_RCC_OscConfig+0x558>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d030      	beq.n	8007320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d129      	bne.n	8007320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d122      	bne.n	8007320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80072e0:	4013      	ands	r3, r2
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d119      	bne.n	8007320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f6:	085b      	lsrs	r3, r3, #1
 80072f8:	3b01      	subs	r3, #1
 80072fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d10f      	bne.n	8007320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800730c:	429a      	cmp	r2, r3
 800730e:	d107      	bne.n	8007320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800731c:	429a      	cmp	r2, r3
 800731e:	d001      	beq.n	8007324 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	40023800 	.word	0x40023800

08007334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e0d0      	b.n	80074ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800734c:	4b6a      	ldr	r3, [pc, #424]	; (80074f8 <HAL_RCC_ClockConfig+0x1c4>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 030f 	and.w	r3, r3, #15
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	429a      	cmp	r2, r3
 8007358:	d910      	bls.n	800737c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800735a:	4b67      	ldr	r3, [pc, #412]	; (80074f8 <HAL_RCC_ClockConfig+0x1c4>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f023 020f 	bic.w	r2, r3, #15
 8007362:	4965      	ldr	r1, [pc, #404]	; (80074f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	4313      	orrs	r3, r2
 8007368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800736a:	4b63      	ldr	r3, [pc, #396]	; (80074f8 <HAL_RCC_ClockConfig+0x1c4>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d001      	beq.n	800737c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e0b8      	b.n	80074ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d020      	beq.n	80073ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	d005      	beq.n	80073a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007394:	4b59      	ldr	r3, [pc, #356]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	4a58      	ldr	r2, [pc, #352]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 800739a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800739e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d005      	beq.n	80073b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073ac:	4b53      	ldr	r3, [pc, #332]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	4a52      	ldr	r2, [pc, #328]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 80073b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073b8:	4b50      	ldr	r3, [pc, #320]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	494d      	ldr	r1, [pc, #308]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d040      	beq.n	8007458 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d107      	bne.n	80073ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073de:	4b47      	ldr	r3, [pc, #284]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d115      	bne.n	8007416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e07f      	b.n	80074ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d107      	bne.n	8007406 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073f6:	4b41      	ldr	r3, [pc, #260]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e073      	b.n	80074ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007406:	4b3d      	ldr	r3, [pc, #244]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e06b      	b.n	80074ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007416:	4b39      	ldr	r3, [pc, #228]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f023 0203 	bic.w	r2, r3, #3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	4936      	ldr	r1, [pc, #216]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 8007424:	4313      	orrs	r3, r2
 8007426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007428:	f7fe f90c 	bl	8005644 <HAL_GetTick>
 800742c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800742e:	e00a      	b.n	8007446 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007430:	f7fe f908 	bl	8005644 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	f241 3288 	movw	r2, #5000	; 0x1388
 800743e:	4293      	cmp	r3, r2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e053      	b.n	80074ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007446:	4b2d      	ldr	r3, [pc, #180]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 020c 	and.w	r2, r3, #12
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	429a      	cmp	r2, r3
 8007456:	d1eb      	bne.n	8007430 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007458:	4b27      	ldr	r3, [pc, #156]	; (80074f8 <HAL_RCC_ClockConfig+0x1c4>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d210      	bcs.n	8007488 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007466:	4b24      	ldr	r3, [pc, #144]	; (80074f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f023 020f 	bic.w	r2, r3, #15
 800746e:	4922      	ldr	r1, [pc, #136]	; (80074f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	4313      	orrs	r3, r2
 8007474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007476:	4b20      	ldr	r3, [pc, #128]	; (80074f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d001      	beq.n	8007488 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e032      	b.n	80074ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	d008      	beq.n	80074a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007494:	4b19      	ldr	r3, [pc, #100]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	4916      	ldr	r1, [pc, #88]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80074b2:	4b12      	ldr	r3, [pc, #72]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	490e      	ldr	r1, [pc, #56]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80074c6:	f000 f821 	bl	800750c <HAL_RCC_GetSysClockFreq>
 80074ca:	4602      	mov	r2, r0
 80074cc:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	091b      	lsrs	r3, r3, #4
 80074d2:	f003 030f 	and.w	r3, r3, #15
 80074d6:	490a      	ldr	r1, [pc, #40]	; (8007500 <HAL_RCC_ClockConfig+0x1cc>)
 80074d8:	5ccb      	ldrb	r3, [r1, r3]
 80074da:	fa22 f303 	lsr.w	r3, r2, r3
 80074de:	4a09      	ldr	r2, [pc, #36]	; (8007504 <HAL_RCC_ClockConfig+0x1d0>)
 80074e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80074e2:	4b09      	ldr	r3, [pc, #36]	; (8007508 <HAL_RCC_ClockConfig+0x1d4>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fe f868 	bl	80055bc <HAL_InitTick>

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	40023c00 	.word	0x40023c00
 80074fc:	40023800 	.word	0x40023800
 8007500:	0800a3c0 	.word	0x0800a3c0
 8007504:	2000000c 	.word	0x2000000c
 8007508:	200000e4 	.word	0x200000e4

0800750c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800750c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007510:	b084      	sub	sp, #16
 8007512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007514:	2300      	movs	r3, #0
 8007516:	607b      	str	r3, [r7, #4]
 8007518:	2300      	movs	r3, #0
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	2300      	movs	r3, #0
 800751e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007524:	4b67      	ldr	r3, [pc, #412]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f003 030c 	and.w	r3, r3, #12
 800752c:	2b08      	cmp	r3, #8
 800752e:	d00d      	beq.n	800754c <HAL_RCC_GetSysClockFreq+0x40>
 8007530:	2b08      	cmp	r3, #8
 8007532:	f200 80bd 	bhi.w	80076b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d002      	beq.n	8007540 <HAL_RCC_GetSysClockFreq+0x34>
 800753a:	2b04      	cmp	r3, #4
 800753c:	d003      	beq.n	8007546 <HAL_RCC_GetSysClockFreq+0x3a>
 800753e:	e0b7      	b.n	80076b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007540:	4b61      	ldr	r3, [pc, #388]	; (80076c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007542:	60bb      	str	r3, [r7, #8]
      break;
 8007544:	e0b7      	b.n	80076b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007546:	4b61      	ldr	r3, [pc, #388]	; (80076cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007548:	60bb      	str	r3, [r7, #8]
      break;
 800754a:	e0b4      	b.n	80076b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800754c:	4b5d      	ldr	r3, [pc, #372]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007554:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007556:	4b5b      	ldr	r3, [pc, #364]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d04d      	beq.n	80075fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007562:	4b58      	ldr	r3, [pc, #352]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	099b      	lsrs	r3, r3, #6
 8007568:	461a      	mov	r2, r3
 800756a:	f04f 0300 	mov.w	r3, #0
 800756e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007572:	f04f 0100 	mov.w	r1, #0
 8007576:	ea02 0800 	and.w	r8, r2, r0
 800757a:	ea03 0901 	and.w	r9, r3, r1
 800757e:	4640      	mov	r0, r8
 8007580:	4649      	mov	r1, r9
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	f04f 0300 	mov.w	r3, #0
 800758a:	014b      	lsls	r3, r1, #5
 800758c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007590:	0142      	lsls	r2, r0, #5
 8007592:	4610      	mov	r0, r2
 8007594:	4619      	mov	r1, r3
 8007596:	ebb0 0008 	subs.w	r0, r0, r8
 800759a:	eb61 0109 	sbc.w	r1, r1, r9
 800759e:	f04f 0200 	mov.w	r2, #0
 80075a2:	f04f 0300 	mov.w	r3, #0
 80075a6:	018b      	lsls	r3, r1, #6
 80075a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80075ac:	0182      	lsls	r2, r0, #6
 80075ae:	1a12      	subs	r2, r2, r0
 80075b0:	eb63 0301 	sbc.w	r3, r3, r1
 80075b4:	f04f 0000 	mov.w	r0, #0
 80075b8:	f04f 0100 	mov.w	r1, #0
 80075bc:	00d9      	lsls	r1, r3, #3
 80075be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075c2:	00d0      	lsls	r0, r2, #3
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	eb12 0208 	adds.w	r2, r2, r8
 80075cc:	eb43 0309 	adc.w	r3, r3, r9
 80075d0:	f04f 0000 	mov.w	r0, #0
 80075d4:	f04f 0100 	mov.w	r1, #0
 80075d8:	0259      	lsls	r1, r3, #9
 80075da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80075de:	0250      	lsls	r0, r2, #9
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4610      	mov	r0, r2
 80075e6:	4619      	mov	r1, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	461a      	mov	r2, r3
 80075ec:	f04f 0300 	mov.w	r3, #0
 80075f0:	f7f8 fe76 	bl	80002e0 <__aeabi_uldivmod>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4613      	mov	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	e04a      	b.n	8007694 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075fe:	4b31      	ldr	r3, [pc, #196]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	099b      	lsrs	r3, r3, #6
 8007604:	461a      	mov	r2, r3
 8007606:	f04f 0300 	mov.w	r3, #0
 800760a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800760e:	f04f 0100 	mov.w	r1, #0
 8007612:	ea02 0400 	and.w	r4, r2, r0
 8007616:	ea03 0501 	and.w	r5, r3, r1
 800761a:	4620      	mov	r0, r4
 800761c:	4629      	mov	r1, r5
 800761e:	f04f 0200 	mov.w	r2, #0
 8007622:	f04f 0300 	mov.w	r3, #0
 8007626:	014b      	lsls	r3, r1, #5
 8007628:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800762c:	0142      	lsls	r2, r0, #5
 800762e:	4610      	mov	r0, r2
 8007630:	4619      	mov	r1, r3
 8007632:	1b00      	subs	r0, r0, r4
 8007634:	eb61 0105 	sbc.w	r1, r1, r5
 8007638:	f04f 0200 	mov.w	r2, #0
 800763c:	f04f 0300 	mov.w	r3, #0
 8007640:	018b      	lsls	r3, r1, #6
 8007642:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007646:	0182      	lsls	r2, r0, #6
 8007648:	1a12      	subs	r2, r2, r0
 800764a:	eb63 0301 	sbc.w	r3, r3, r1
 800764e:	f04f 0000 	mov.w	r0, #0
 8007652:	f04f 0100 	mov.w	r1, #0
 8007656:	00d9      	lsls	r1, r3, #3
 8007658:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800765c:	00d0      	lsls	r0, r2, #3
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	1912      	adds	r2, r2, r4
 8007664:	eb45 0303 	adc.w	r3, r5, r3
 8007668:	f04f 0000 	mov.w	r0, #0
 800766c:	f04f 0100 	mov.w	r1, #0
 8007670:	0299      	lsls	r1, r3, #10
 8007672:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007676:	0290      	lsls	r0, r2, #10
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	4610      	mov	r0, r2
 800767e:	4619      	mov	r1, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	461a      	mov	r2, r3
 8007684:	f04f 0300 	mov.w	r3, #0
 8007688:	f7f8 fe2a 	bl	80002e0 <__aeabi_uldivmod>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4613      	mov	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007694:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	0c1b      	lsrs	r3, r3, #16
 800769a:	f003 0303 	and.w	r3, r3, #3
 800769e:	3301      	adds	r3, #1
 80076a0:	005b      	lsls	r3, r3, #1
 80076a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ac:	60bb      	str	r3, [r7, #8]
      break;
 80076ae:	e002      	b.n	80076b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076b0:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80076b2:	60bb      	str	r3, [r7, #8]
      break;
 80076b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076b6:	68bb      	ldr	r3, [r7, #8]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80076c2:	bf00      	nop
 80076c4:	40023800 	.word	0x40023800
 80076c8:	00f42400 	.word	0x00f42400
 80076cc:	007a1200 	.word	0x007a1200

080076d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076d4:	4b03      	ldr	r3, [pc, #12]	; (80076e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80076d6:	681b      	ldr	r3, [r3, #0]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	2000000c 	.word	0x2000000c

080076e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076ec:	f7ff fff0 	bl	80076d0 <HAL_RCC_GetHCLKFreq>
 80076f0:	4602      	mov	r2, r0
 80076f2:	4b05      	ldr	r3, [pc, #20]	; (8007708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	0a9b      	lsrs	r3, r3, #10
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	4903      	ldr	r1, [pc, #12]	; (800770c <HAL_RCC_GetPCLK1Freq+0x24>)
 80076fe:	5ccb      	ldrb	r3, [r1, r3]
 8007700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007704:	4618      	mov	r0, r3
 8007706:	bd80      	pop	{r7, pc}
 8007708:	40023800 	.word	0x40023800
 800770c:	0800a3d0 	.word	0x0800a3d0

08007710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007714:	f7ff ffdc 	bl	80076d0 <HAL_RCC_GetHCLKFreq>
 8007718:	4602      	mov	r2, r0
 800771a:	4b05      	ldr	r3, [pc, #20]	; (8007730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	0b5b      	lsrs	r3, r3, #13
 8007720:	f003 0307 	and.w	r3, r3, #7
 8007724:	4903      	ldr	r1, [pc, #12]	; (8007734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007726:	5ccb      	ldrb	r3, [r1, r3]
 8007728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800772c:	4618      	mov	r0, r3
 800772e:	bd80      	pop	{r7, pc}
 8007730:	40023800 	.word	0x40023800
 8007734:	0800a3d0 	.word	0x0800a3d0

08007738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007744:	2300      	movs	r3, #0
 8007746:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800774c:	2300      	movs	r3, #0
 800774e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b00      	cmp	r3, #0
 800775e:	d012      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007760:	4b69      	ldr	r3, [pc, #420]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	4a68      	ldr	r2, [pc, #416]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007766:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800776a:	6093      	str	r3, [r2, #8]
 800776c:	4b66      	ldr	r3, [pc, #408]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007774:	4964      	ldr	r1, [pc, #400]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007776:	4313      	orrs	r3, r2
 8007778:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007782:	2301      	movs	r3, #1
 8007784:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d017      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007792:	4b5d      	ldr	r3, [pc, #372]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a0:	4959      	ldr	r1, [pc, #356]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077b0:	d101      	bne.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80077b2:	2301      	movs	r3, #1
 80077b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80077be:	2301      	movs	r3, #1
 80077c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d017      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80077ce:	4b4e      	ldr	r3, [pc, #312]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077dc:	494a      	ldr	r1, [pc, #296]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077ec:	d101      	bne.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80077ee:	2301      	movs	r3, #1
 80077f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80077fa:	2301      	movs	r3, #1
 80077fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800780a:	2301      	movs	r3, #1
 800780c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 808b 	beq.w	8007932 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800781c:	4b3a      	ldr	r3, [pc, #232]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800781e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007820:	4a39      	ldr	r2, [pc, #228]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007826:	6413      	str	r3, [r2, #64]	; 0x40
 8007828:	4b37      	ldr	r3, [pc, #220]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007834:	4b35      	ldr	r3, [pc, #212]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a34      	ldr	r2, [pc, #208]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800783a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800783e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007840:	f7fd ff00 	bl	8005644 <HAL_GetTick>
 8007844:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007846:	e008      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007848:	f7fd fefc 	bl	8005644 <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b64      	cmp	r3, #100	; 0x64
 8007854:	d901      	bls.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e38f      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800785a:	4b2c      	ldr	r3, [pc, #176]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0f0      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007866:	4b28      	ldr	r3, [pc, #160]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800786e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d035      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	429a      	cmp	r2, r3
 8007882:	d02e      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007884:	4b20      	ldr	r3, [pc, #128]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800788c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800788e:	4b1e      	ldr	r3, [pc, #120]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007892:	4a1d      	ldr	r2, [pc, #116]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007898:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800789a:	4b1b      	ldr	r3, [pc, #108]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800789c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789e:	4a1a      	ldr	r2, [pc, #104]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80078a6:	4a18      	ldr	r2, [pc, #96]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80078ac:	4b16      	ldr	r3, [pc, #88]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d114      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b8:	f7fd fec4 	bl	8005644 <HAL_GetTick>
 80078bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078be:	e00a      	b.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078c0:	f7fd fec0 	bl	8005644 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d901      	bls.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80078d2:	2303      	movs	r3, #3
 80078d4:	e351      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078d6:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d0ee      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078ee:	d111      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80078f0:	4b05      	ldr	r3, [pc, #20]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80078fc:	4b04      	ldr	r3, [pc, #16]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078fe:	400b      	ands	r3, r1
 8007900:	4901      	ldr	r1, [pc, #4]	; (8007908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007902:	4313      	orrs	r3, r2
 8007904:	608b      	str	r3, [r1, #8]
 8007906:	e00b      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007908:	40023800 	.word	0x40023800
 800790c:	40007000 	.word	0x40007000
 8007910:	0ffffcff 	.word	0x0ffffcff
 8007914:	4bb3      	ldr	r3, [pc, #716]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	4ab2      	ldr	r2, [pc, #712]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800791a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800791e:	6093      	str	r3, [r2, #8]
 8007920:	4bb0      	ldr	r3, [pc, #704]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007922:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800792c:	49ad      	ldr	r1, [pc, #692]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800792e:	4313      	orrs	r3, r2
 8007930:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0310 	and.w	r3, r3, #16
 800793a:	2b00      	cmp	r3, #0
 800793c:	d010      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800793e:	4ba9      	ldr	r3, [pc, #676]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007944:	4aa7      	ldr	r2, [pc, #668]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800794a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800794e:	4ba5      	ldr	r3, [pc, #660]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007950:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	49a2      	ldr	r1, [pc, #648]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800795a:	4313      	orrs	r3, r2
 800795c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800796c:	4b9d      	ldr	r3, [pc, #628]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800796e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007972:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800797a:	499a      	ldr	r1, [pc, #616]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800797c:	4313      	orrs	r3, r2
 800797e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00a      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800798e:	4b95      	ldr	r3, [pc, #596]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007994:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800799c:	4991      	ldr	r1, [pc, #580]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80079b0:	4b8c      	ldr	r3, [pc, #560]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079be:	4989      	ldr	r1, [pc, #548]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079d2:	4b84      	ldr	r3, [pc, #528]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e0:	4980      	ldr	r1, [pc, #512]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00a      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079f4:	4b7b      	ldr	r3, [pc, #492]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fa:	f023 0203 	bic.w	r2, r3, #3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a02:	4978      	ldr	r1, [pc, #480]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a16:	4b73      	ldr	r3, [pc, #460]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1c:	f023 020c 	bic.w	r2, r3, #12
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a24:	496f      	ldr	r1, [pc, #444]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00a      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a38:	4b6a      	ldr	r3, [pc, #424]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a46:	4967      	ldr	r1, [pc, #412]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a5a:	4b62      	ldr	r3, [pc, #392]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a68:	495e      	ldr	r1, [pc, #376]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00a      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a7c:	4b59      	ldr	r3, [pc, #356]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a8a:	4956      	ldr	r1, [pc, #344]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007a9e:	4b51      	ldr	r3, [pc, #324]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aac:	494d      	ldr	r1, [pc, #308]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007ac0:	4b48      	ldr	r3, [pc, #288]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ace:	4945      	ldr	r1, [pc, #276]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007ae2:	4b40      	ldr	r3, [pc, #256]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007af0:	493c      	ldr	r1, [pc, #240]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00a      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b04:	4b37      	ldr	r3, [pc, #220]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b12:	4934      	ldr	r1, [pc, #208]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d011      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007b26:	4b2f      	ldr	r3, [pc, #188]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b34:	492b      	ldr	r1, [pc, #172]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b44:	d101      	bne.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007b46:	2301      	movs	r3, #1
 8007b48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0308 	and.w	r3, r3, #8
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007b56:	2301      	movs	r3, #1
 8007b58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b66:	4b1f      	ldr	r3, [pc, #124]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b74:	491b      	ldr	r1, [pc, #108]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00b      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b88:	4b16      	ldr	r3, [pc, #88]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b98:	4912      	ldr	r1, [pc, #72]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00b      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007bac:	4b0d      	ldr	r3, [pc, #52]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bbc:	4909      	ldr	r1, [pc, #36]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00f      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bd0:	4b04      	ldr	r3, [pc, #16]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be0:	e002      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007be2:	bf00      	nop
 8007be4:	40023800 	.word	0x40023800
 8007be8:	4986      	ldr	r1, [pc, #536]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007bfc:	4b81      	ldr	r3, [pc, #516]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c0c:	497d      	ldr	r1, [pc, #500]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d006      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 80d6 	beq.w	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007c28:	4b76      	ldr	r3, [pc, #472]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a75      	ldr	r2, [pc, #468]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c34:	f7fd fd06 	bl	8005644 <HAL_GetTick>
 8007c38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c3a:	e008      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007c3c:	f7fd fd02 	bl	8005644 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b64      	cmp	r3, #100	; 0x64
 8007c48:	d901      	bls.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e195      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c4e:	4b6d      	ldr	r3, [pc, #436]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1f0      	bne.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d021      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d11d      	bne.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007c6e:	4b65      	ldr	r3, [pc, #404]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c74:	0c1b      	lsrs	r3, r3, #16
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007c7c:	4b61      	ldr	r3, [pc, #388]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c82:	0e1b      	lsrs	r3, r3, #24
 8007c84:	f003 030f 	and.w	r3, r3, #15
 8007c88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	019a      	lsls	r2, r3, #6
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	041b      	lsls	r3, r3, #16
 8007c94:	431a      	orrs	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	061b      	lsls	r3, r3, #24
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	071b      	lsls	r3, r3, #28
 8007ca2:	4958      	ldr	r1, [pc, #352]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d004      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cbe:	d00a      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d02e      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cd4:	d129      	bne.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007cd6:	4b4b      	ldr	r3, [pc, #300]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cdc:	0c1b      	lsrs	r3, r3, #16
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ce4:	4b47      	ldr	r3, [pc, #284]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cea:	0f1b      	lsrs	r3, r3, #28
 8007cec:	f003 0307 	and.w	r3, r3, #7
 8007cf0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	019a      	lsls	r2, r3, #6
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	041b      	lsls	r3, r3, #16
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	061b      	lsls	r3, r3, #24
 8007d04:	431a      	orrs	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	071b      	lsls	r3, r3, #28
 8007d0a:	493e      	ldr	r1, [pc, #248]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007d12:	4b3c      	ldr	r3, [pc, #240]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d18:	f023 021f 	bic.w	r2, r3, #31
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	3b01      	subs	r3, #1
 8007d22:	4938      	ldr	r1, [pc, #224]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d01d      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d36:	4b33      	ldr	r3, [pc, #204]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d3c:	0e1b      	lsrs	r3, r3, #24
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d44:	4b2f      	ldr	r3, [pc, #188]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d4a:	0f1b      	lsrs	r3, r3, #28
 8007d4c:	f003 0307 	and.w	r3, r3, #7
 8007d50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	019a      	lsls	r2, r3, #6
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	041b      	lsls	r3, r3, #16
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	061b      	lsls	r3, r3, #24
 8007d64:	431a      	orrs	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	071b      	lsls	r3, r3, #28
 8007d6a:	4926      	ldr	r1, [pc, #152]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d011      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	019a      	lsls	r2, r3, #6
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	041b      	lsls	r3, r3, #16
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	061b      	lsls	r3, r3, #24
 8007d92:	431a      	orrs	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	071b      	lsls	r3, r3, #28
 8007d9a:	491a      	ldr	r1, [pc, #104]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007da2:	4b18      	ldr	r3, [pc, #96]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a17      	ldr	r2, [pc, #92]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007da8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dae:	f7fd fc49 	bl	8005644 <HAL_GetTick>
 8007db2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007db4:	e008      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007db6:	f7fd fc45 	bl	8005644 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	2b64      	cmp	r3, #100	; 0x64
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e0d8      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007dc8:	4b0e      	ldr	r3, [pc, #56]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d0f0      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	f040 80ce 	bne.w	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007ddc:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a08      	ldr	r2, [pc, #32]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007de8:	f7fd fc2c 	bl	8005644 <HAL_GetTick>
 8007dec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007dee:	e00b      	b.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007df0:	f7fd fc28 	bl	8005644 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	2b64      	cmp	r3, #100	; 0x64
 8007dfc:	d904      	bls.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e0bb      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007e02:	bf00      	nop
 8007e04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007e08:	4b5e      	ldr	r3, [pc, #376]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e14:	d0ec      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d009      	beq.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d02e      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d12a      	bne.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007e3e:	4b51      	ldr	r3, [pc, #324]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e44:	0c1b      	lsrs	r3, r3, #16
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007e4c:	4b4d      	ldr	r3, [pc, #308]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e52:	0f1b      	lsrs	r3, r3, #28
 8007e54:	f003 0307 	and.w	r3, r3, #7
 8007e58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	019a      	lsls	r2, r3, #6
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	041b      	lsls	r3, r3, #16
 8007e64:	431a      	orrs	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	061b      	lsls	r3, r3, #24
 8007e6c:	431a      	orrs	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	071b      	lsls	r3, r3, #28
 8007e72:	4944      	ldr	r1, [pc, #272]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007e7a:	4b42      	ldr	r3, [pc, #264]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	021b      	lsls	r3, r3, #8
 8007e8c:	493d      	ldr	r1, [pc, #244]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d022      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ea8:	d11d      	bne.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007eaa:	4b36      	ldr	r3, [pc, #216]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb0:	0e1b      	lsrs	r3, r3, #24
 8007eb2:	f003 030f 	and.w	r3, r3, #15
 8007eb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007eb8:	4b32      	ldr	r3, [pc, #200]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ebe:	0f1b      	lsrs	r3, r3, #28
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	019a      	lsls	r2, r3, #6
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	041b      	lsls	r3, r3, #16
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	061b      	lsls	r3, r3, #24
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	071b      	lsls	r3, r3, #28
 8007ede:	4929      	ldr	r1, [pc, #164]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0308 	and.w	r3, r3, #8
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d028      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ef2:	4b24      	ldr	r3, [pc, #144]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef8:	0e1b      	lsrs	r3, r3, #24
 8007efa:	f003 030f 	and.w	r3, r3, #15
 8007efe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f00:	4b20      	ldr	r3, [pc, #128]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f06:	0c1b      	lsrs	r3, r3, #16
 8007f08:	f003 0303 	and.w	r3, r3, #3
 8007f0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	019a      	lsls	r2, r3, #6
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	041b      	lsls	r3, r3, #16
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	061b      	lsls	r3, r3, #24
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	071b      	lsls	r3, r3, #28
 8007f26:	4917      	ldr	r1, [pc, #92]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007f2e:	4b15      	ldr	r3, [pc, #84]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3c:	4911      	ldr	r1, [pc, #68]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007f44:	4b0f      	ldr	r3, [pc, #60]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a0e      	ldr	r2, [pc, #56]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f50:	f7fd fb78 	bl	8005644 <HAL_GetTick>
 8007f54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007f56:	e008      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f58:	f7fd fb74 	bl	8005644 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b64      	cmp	r3, #100	; 0x64
 8007f64:	d901      	bls.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e007      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007f6a:	4b06      	ldr	r3, [pc, #24]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f76:	d1ef      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3720      	adds	r7, #32
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	40023800 	.word	0x40023800

08007f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e049      	b.n	800802e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d106      	bne.n	8007fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7f9 f82c 	bl	800100c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	f000 fa50 	bl	800846c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b02      	cmp	r3, #2
 800804a:	d122      	bne.n	8008092 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b02      	cmp	r3, #2
 8008058:	d11b      	bne.n	8008092 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f06f 0202 	mvn.w	r2, #2
 8008062:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f003 0303 	and.w	r3, r3, #3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d003      	beq.n	8008080 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f9d9 	bl	8008430 <HAL_TIM_IC_CaptureCallback>
 800807e:	e005      	b.n	800808c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f9cb 	bl	800841c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f9dc 	bl	8008444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b04      	cmp	r3, #4
 800809e:	d122      	bne.n	80080e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f003 0304 	and.w	r3, r3, #4
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d11b      	bne.n	80080e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f06f 0204 	mvn.w	r2, #4
 80080b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f9af 	bl	8008430 <HAL_TIM_IC_CaptureCallback>
 80080d2:	e005      	b.n	80080e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f9a1 	bl	800841c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f9b2 	bl	8008444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	f003 0308 	and.w	r3, r3, #8
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d122      	bne.n	800813a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	f003 0308 	and.w	r3, r3, #8
 80080fe:	2b08      	cmp	r3, #8
 8008100:	d11b      	bne.n	800813a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f06f 0208 	mvn.w	r2, #8
 800810a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2204      	movs	r2, #4
 8008110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	f003 0303 	and.w	r3, r3, #3
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f985 	bl	8008430 <HAL_TIM_IC_CaptureCallback>
 8008126:	e005      	b.n	8008134 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f977 	bl	800841c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f988 	bl	8008444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	f003 0310 	and.w	r3, r3, #16
 8008144:	2b10      	cmp	r3, #16
 8008146:	d122      	bne.n	800818e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f003 0310 	and.w	r3, r3, #16
 8008152:	2b10      	cmp	r3, #16
 8008154:	d11b      	bne.n	800818e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f06f 0210 	mvn.w	r2, #16
 800815e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2208      	movs	r2, #8
 8008164:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69db      	ldr	r3, [r3, #28]
 800816c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f95b 	bl	8008430 <HAL_TIM_IC_CaptureCallback>
 800817a:	e005      	b.n	8008188 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f94d 	bl	800841c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f95e 	bl	8008444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b01      	cmp	r3, #1
 800819a:	d10e      	bne.n	80081ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d107      	bne.n	80081ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f06f 0201 	mvn.w	r2, #1
 80081b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f927 	bl	8008408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c4:	2b80      	cmp	r3, #128	; 0x80
 80081c6:	d10e      	bne.n	80081e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081d2:	2b80      	cmp	r3, #128	; 0x80
 80081d4:	d107      	bne.n	80081e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fb15 	bl	8008810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081f4:	d10e      	bne.n	8008214 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008200:	2b80      	cmp	r3, #128	; 0x80
 8008202:	d107      	bne.n	8008214 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800820c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fb08 	bl	8008824 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821e:	2b40      	cmp	r3, #64	; 0x40
 8008220:	d10e      	bne.n	8008240 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822c:	2b40      	cmp	r3, #64	; 0x40
 800822e:	d107      	bne.n	8008240 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f90c 	bl	8008458 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b20      	cmp	r3, #32
 800824c:	d10e      	bne.n	800826c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	f003 0320 	and.w	r3, r3, #32
 8008258:	2b20      	cmp	r3, #32
 800825a:	d107      	bne.n	800826c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f06f 0220 	mvn.w	r2, #32
 8008264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fac8 	bl	80087fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008288:	2b01      	cmp	r3, #1
 800828a:	d101      	bne.n	8008290 <HAL_TIM_ConfigClockSource+0x1c>
 800828c:	2302      	movs	r3, #2
 800828e:	e0b4      	b.n	80083fa <HAL_TIM_ConfigClockSource+0x186>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	4b56      	ldr	r3, [pc, #344]	; (8008404 <HAL_TIM_ConfigClockSource+0x190>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082c8:	d03e      	beq.n	8008348 <HAL_TIM_ConfigClockSource+0xd4>
 80082ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ce:	f200 8087 	bhi.w	80083e0 <HAL_TIM_ConfigClockSource+0x16c>
 80082d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d6:	f000 8086 	beq.w	80083e6 <HAL_TIM_ConfigClockSource+0x172>
 80082da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082de:	d87f      	bhi.n	80083e0 <HAL_TIM_ConfigClockSource+0x16c>
 80082e0:	2b70      	cmp	r3, #112	; 0x70
 80082e2:	d01a      	beq.n	800831a <HAL_TIM_ConfigClockSource+0xa6>
 80082e4:	2b70      	cmp	r3, #112	; 0x70
 80082e6:	d87b      	bhi.n	80083e0 <HAL_TIM_ConfigClockSource+0x16c>
 80082e8:	2b60      	cmp	r3, #96	; 0x60
 80082ea:	d050      	beq.n	800838e <HAL_TIM_ConfigClockSource+0x11a>
 80082ec:	2b60      	cmp	r3, #96	; 0x60
 80082ee:	d877      	bhi.n	80083e0 <HAL_TIM_ConfigClockSource+0x16c>
 80082f0:	2b50      	cmp	r3, #80	; 0x50
 80082f2:	d03c      	beq.n	800836e <HAL_TIM_ConfigClockSource+0xfa>
 80082f4:	2b50      	cmp	r3, #80	; 0x50
 80082f6:	d873      	bhi.n	80083e0 <HAL_TIM_ConfigClockSource+0x16c>
 80082f8:	2b40      	cmp	r3, #64	; 0x40
 80082fa:	d058      	beq.n	80083ae <HAL_TIM_ConfigClockSource+0x13a>
 80082fc:	2b40      	cmp	r3, #64	; 0x40
 80082fe:	d86f      	bhi.n	80083e0 <HAL_TIM_ConfigClockSource+0x16c>
 8008300:	2b30      	cmp	r3, #48	; 0x30
 8008302:	d064      	beq.n	80083ce <HAL_TIM_ConfigClockSource+0x15a>
 8008304:	2b30      	cmp	r3, #48	; 0x30
 8008306:	d86b      	bhi.n	80083e0 <HAL_TIM_ConfigClockSource+0x16c>
 8008308:	2b20      	cmp	r3, #32
 800830a:	d060      	beq.n	80083ce <HAL_TIM_ConfigClockSource+0x15a>
 800830c:	2b20      	cmp	r3, #32
 800830e:	d867      	bhi.n	80083e0 <HAL_TIM_ConfigClockSource+0x16c>
 8008310:	2b00      	cmp	r3, #0
 8008312:	d05c      	beq.n	80083ce <HAL_TIM_ConfigClockSource+0x15a>
 8008314:	2b10      	cmp	r3, #16
 8008316:	d05a      	beq.n	80083ce <HAL_TIM_ConfigClockSource+0x15a>
 8008318:	e062      	b.n	80083e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6899      	ldr	r1, [r3, #8]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f000 f9b9 	bl	80086a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800833c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	609a      	str	r2, [r3, #8]
      break;
 8008346:	e04f      	b.n	80083e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6818      	ldr	r0, [r3, #0]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	6899      	ldr	r1, [r3, #8]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	685a      	ldr	r2, [r3, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f000 f9a2 	bl	80086a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689a      	ldr	r2, [r3, #8]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800836a:	609a      	str	r2, [r3, #8]
      break;
 800836c:	e03c      	b.n	80083e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	6859      	ldr	r1, [r3, #4]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	68db      	ldr	r3, [r3, #12]
 800837a:	461a      	mov	r2, r3
 800837c:	f000 f916 	bl	80085ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2150      	movs	r1, #80	; 0x50
 8008386:	4618      	mov	r0, r3
 8008388:	f000 f96f 	bl	800866a <TIM_ITRx_SetConfig>
      break;
 800838c:	e02c      	b.n	80083e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6818      	ldr	r0, [r3, #0]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	6859      	ldr	r1, [r3, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	461a      	mov	r2, r3
 800839c:	f000 f935 	bl	800860a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2160      	movs	r1, #96	; 0x60
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 f95f 	bl	800866a <TIM_ITRx_SetConfig>
      break;
 80083ac:	e01c      	b.n	80083e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	6859      	ldr	r1, [r3, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	461a      	mov	r2, r3
 80083bc:	f000 f8f6 	bl	80085ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2140      	movs	r1, #64	; 0x40
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 f94f 	bl	800866a <TIM_ITRx_SetConfig>
      break;
 80083cc:	e00c      	b.n	80083e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4619      	mov	r1, r3
 80083d8:	4610      	mov	r0, r2
 80083da:	f000 f946 	bl	800866a <TIM_ITRx_SetConfig>
      break;
 80083de:	e003      	b.n	80083e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	73fb      	strb	r3, [r7, #15]
      break;
 80083e4:	e000      	b.n	80083e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80083e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	fffeff88 	.word	0xfffeff88

08008408 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a40      	ldr	r2, [pc, #256]	; (8008580 <TIM_Base_SetConfig+0x114>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d013      	beq.n	80084ac <TIM_Base_SetConfig+0x40>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800848a:	d00f      	beq.n	80084ac <TIM_Base_SetConfig+0x40>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a3d      	ldr	r2, [pc, #244]	; (8008584 <TIM_Base_SetConfig+0x118>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d00b      	beq.n	80084ac <TIM_Base_SetConfig+0x40>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a3c      	ldr	r2, [pc, #240]	; (8008588 <TIM_Base_SetConfig+0x11c>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d007      	beq.n	80084ac <TIM_Base_SetConfig+0x40>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a3b      	ldr	r2, [pc, #236]	; (800858c <TIM_Base_SetConfig+0x120>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d003      	beq.n	80084ac <TIM_Base_SetConfig+0x40>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a3a      	ldr	r2, [pc, #232]	; (8008590 <TIM_Base_SetConfig+0x124>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d108      	bne.n	80084be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a2f      	ldr	r2, [pc, #188]	; (8008580 <TIM_Base_SetConfig+0x114>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d02b      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084cc:	d027      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a2c      	ldr	r2, [pc, #176]	; (8008584 <TIM_Base_SetConfig+0x118>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d023      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a2b      	ldr	r2, [pc, #172]	; (8008588 <TIM_Base_SetConfig+0x11c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d01f      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a2a      	ldr	r2, [pc, #168]	; (800858c <TIM_Base_SetConfig+0x120>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d01b      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a29      	ldr	r2, [pc, #164]	; (8008590 <TIM_Base_SetConfig+0x124>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d017      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a28      	ldr	r2, [pc, #160]	; (8008594 <TIM_Base_SetConfig+0x128>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d013      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a27      	ldr	r2, [pc, #156]	; (8008598 <TIM_Base_SetConfig+0x12c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00f      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a26      	ldr	r2, [pc, #152]	; (800859c <TIM_Base_SetConfig+0x130>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d00b      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a25      	ldr	r2, [pc, #148]	; (80085a0 <TIM_Base_SetConfig+0x134>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d007      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a24      	ldr	r2, [pc, #144]	; (80085a4 <TIM_Base_SetConfig+0x138>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d003      	beq.n	800851e <TIM_Base_SetConfig+0xb2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a23      	ldr	r2, [pc, #140]	; (80085a8 <TIM_Base_SetConfig+0x13c>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d108      	bne.n	8008530 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	4313      	orrs	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a0a      	ldr	r2, [pc, #40]	; (8008580 <TIM_Base_SetConfig+0x114>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d003      	beq.n	8008564 <TIM_Base_SetConfig+0xf8>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a0c      	ldr	r2, [pc, #48]	; (8008590 <TIM_Base_SetConfig+0x124>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d103      	bne.n	800856c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	691a      	ldr	r2, [r3, #16]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	615a      	str	r2, [r3, #20]
}
 8008572:	bf00      	nop
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	40010000 	.word	0x40010000
 8008584:	40000400 	.word	0x40000400
 8008588:	40000800 	.word	0x40000800
 800858c:	40000c00 	.word	0x40000c00
 8008590:	40010400 	.word	0x40010400
 8008594:	40014000 	.word	0x40014000
 8008598:	40014400 	.word	0x40014400
 800859c:	40014800 	.word	0x40014800
 80085a0:	40001800 	.word	0x40001800
 80085a4:	40001c00 	.word	0x40001c00
 80085a8:	40002000 	.word	0x40002000

080085ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b087      	sub	sp, #28
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	f023 0201 	bic.w	r2, r3, #1
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	4313      	orrs	r3, r2
 80085e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f023 030a 	bic.w	r3, r3, #10
 80085e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085ea:	697a      	ldr	r2, [r7, #20]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	621a      	str	r2, [r3, #32]
}
 80085fe:	bf00      	nop
 8008600:	371c      	adds	r7, #28
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800860a:	b480      	push	{r7}
 800860c:	b087      	sub	sp, #28
 800860e:	af00      	add	r7, sp, #0
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	60b9      	str	r1, [r7, #8]
 8008614:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	f023 0210 	bic.w	r2, r3, #16
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008634:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	031b      	lsls	r3, r3, #12
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	4313      	orrs	r3, r2
 800863e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008646:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	011b      	lsls	r3, r3, #4
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	4313      	orrs	r3, r2
 8008650:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	621a      	str	r2, [r3, #32]
}
 800865e:	bf00      	nop
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800866a:	b480      	push	{r7}
 800866c:	b085      	sub	sp, #20
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4313      	orrs	r3, r2
 8008688:	f043 0307 	orr.w	r3, r3, #7
 800868c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	609a      	str	r2, [r3, #8]
}
 8008694:	bf00      	nop
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	021a      	lsls	r2, r3, #8
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	431a      	orrs	r2, r3
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	609a      	str	r2, [r3, #8]
}
 80086d4:	bf00      	nop
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d101      	bne.n	80086f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086f4:	2302      	movs	r3, #2
 80086f6:	e06d      	b.n	80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2202      	movs	r2, #2
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a30      	ldr	r2, [pc, #192]	; (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d004      	beq.n	800872c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a2f      	ldr	r2, [pc, #188]	; (80087e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d108      	bne.n	800873e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008732:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008744:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	4313      	orrs	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a20      	ldr	r2, [pc, #128]	; (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d022      	beq.n	80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800876a:	d01d      	beq.n	80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a1d      	ldr	r2, [pc, #116]	; (80087e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d018      	beq.n	80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a1c      	ldr	r2, [pc, #112]	; (80087ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d013      	beq.n	80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a1a      	ldr	r2, [pc, #104]	; (80087f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00e      	beq.n	80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a15      	ldr	r2, [pc, #84]	; (80087e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d009      	beq.n	80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a16      	ldr	r2, [pc, #88]	; (80087f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d004      	beq.n	80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a15      	ldr	r2, [pc, #84]	; (80087f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d10c      	bne.n	80087c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	40010000 	.word	0x40010000
 80087e4:	40010400 	.word	0x40010400
 80087e8:	40000400 	.word	0x40000400
 80087ec:	40000800 	.word	0x40000800
 80087f0:	40000c00 	.word	0x40000c00
 80087f4:	40014000 	.word	0x40014000
 80087f8:	40001800 	.word	0x40001800

080087fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e040      	b.n	80088cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800884e:	2b00      	cmp	r3, #0
 8008850:	d106      	bne.n	8008860 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7f8 fc2c 	bl	80010b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2224      	movs	r2, #36	; 0x24
 8008864:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f022 0201 	bic.w	r2, r2, #1
 8008874:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fba4 	bl	8008fc4 <UART_SetConfig>
 800887c:	4603      	mov	r3, r0
 800887e:	2b01      	cmp	r3, #1
 8008880:	d101      	bne.n	8008886 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e022      	b.n	80088cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888a:	2b00      	cmp	r3, #0
 800888c:	d002      	beq.n	8008894 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fdfa 	bl	8009488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689a      	ldr	r2, [r3, #8]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f042 0201 	orr.w	r2, r2, #1
 80088c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fe81 	bl	80095cc <UART_CheckIdleState>
 80088ca:	4603      	mov	r3, r0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b08b      	sub	sp, #44	; 0x2c
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	4613      	mov	r3, r2
 80088e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088e6:	2b20      	cmp	r3, #32
 80088e8:	d156      	bne.n	8008998 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d002      	beq.n	80088f6 <HAL_UART_Transmit_IT+0x22>
 80088f0:	88fb      	ldrh	r3, [r7, #6]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e04f      	b.n	800899a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008900:	2b01      	cmp	r3, #1
 8008902:	d101      	bne.n	8008908 <HAL_UART_Transmit_IT+0x34>
 8008904:	2302      	movs	r3, #2
 8008906:	e048      	b.n	800899a <HAL_UART_Transmit_IT+0xc6>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	88fa      	ldrh	r2, [r7, #6]
 800891a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	88fa      	ldrh	r2, [r7, #6]
 8008922:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2221      	movs	r2, #33	; 0x21
 8008938:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008942:	d107      	bne.n	8008954 <HAL_UART_Transmit_IT+0x80>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d103      	bne.n	8008954 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4a16      	ldr	r2, [pc, #88]	; (80089a8 <HAL_UART_Transmit_IT+0xd4>)
 8008950:	669a      	str	r2, [r3, #104]	; 0x68
 8008952:	e002      	b.n	800895a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4a15      	ldr	r2, [pc, #84]	; (80089ac <HAL_UART_Transmit_IT+0xd8>)
 8008958:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	e853 3f00 	ldrex	r3, [r3]
 800896e:	613b      	str	r3, [r7, #16]
   return(result);
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008976:	627b      	str	r3, [r7, #36]	; 0x24
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	461a      	mov	r2, r3
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	623b      	str	r3, [r7, #32]
 8008982:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008984:	69f9      	ldr	r1, [r7, #28]
 8008986:	6a3a      	ldr	r2, [r7, #32]
 8008988:	e841 2300 	strex	r3, r2, [r1]
 800898c:	61bb      	str	r3, [r7, #24]
   return(result);
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1e6      	bne.n	8008962 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	e000      	b.n	800899a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8008998:	2302      	movs	r3, #2
  }
}
 800899a:	4618      	mov	r0, r3
 800899c:	372c      	adds	r7, #44	; 0x2c
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	0800998f 	.word	0x0800998f
 80089ac:	080098d9 	.word	0x080098d9

080089b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b0ba      	sub	sp, #232	; 0xe8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80089d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80089da:	f640 030f 	movw	r3, #2063	; 0x80f
 80089de:	4013      	ands	r3, r2
 80089e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80089e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d115      	bne.n	8008a18 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80089ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f0:	f003 0320 	and.w	r3, r3, #32
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00f      	beq.n	8008a18 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80089f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089fc:	f003 0320 	and.w	r3, r3, #32
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d009      	beq.n	8008a18 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f000 82a4 	beq.w	8008f56 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
      }
      return;
 8008a16:	e29e      	b.n	8008f56 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 8117 	beq.w	8008c50 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d106      	bne.n	8008a3c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008a2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008a32:	4b85      	ldr	r3, [pc, #532]	; (8008c48 <HAL_UART_IRQHandler+0x298>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 810a 	beq.w	8008c50 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d011      	beq.n	8008a6c <HAL_UART_IRQHandler+0xbc>
 8008a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00b      	beq.n	8008a6c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a62:	f043 0201 	orr.w	r2, r3, #1
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d011      	beq.n	8008a9c <HAL_UART_IRQHandler+0xec>
 8008a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00b      	beq.n	8008a9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2202      	movs	r2, #2
 8008a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a92:	f043 0204 	orr.w	r2, r3, #4
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aa0:	f003 0304 	and.w	r3, r3, #4
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d011      	beq.n	8008acc <HAL_UART_IRQHandler+0x11c>
 8008aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00b      	beq.n	8008acc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2204      	movs	r2, #4
 8008aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ac2:	f043 0202 	orr.w	r2, r3, #2
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ad0:	f003 0308 	and.w	r3, r3, #8
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d017      	beq.n	8008b08 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008adc:	f003 0320 	and.w	r3, r3, #32
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d105      	bne.n	8008af0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ae8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00b      	beq.n	8008b08 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2208      	movs	r2, #8
 8008af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008afe:	f043 0208 	orr.w	r2, r3, #8
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d012      	beq.n	8008b3a <HAL_UART_IRQHandler+0x18a>
 8008b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00c      	beq.n	8008b3a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b30:	f043 0220 	orr.w	r2, r3, #32
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 820a 	beq.w	8008f5a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b4a:	f003 0320 	and.w	r3, r3, #32
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00d      	beq.n	8008b6e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b56:	f003 0320 	and.w	r3, r3, #32
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d007      	beq.n	8008b6e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d003      	beq.n	8008b6e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b82:	2b40      	cmp	r3, #64	; 0x40
 8008b84:	d005      	beq.n	8008b92 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d04f      	beq.n	8008c32 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fe27 	bl	80097e6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba2:	2b40      	cmp	r3, #64	; 0x40
 8008ba4:	d141      	bne.n	8008c2a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3308      	adds	r3, #8
 8008bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008bb4:	e853 3f00 	ldrex	r3, [r3]
 8008bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3308      	adds	r3, #8
 8008bce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008bd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008bde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1d9      	bne.n	8008ba6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d013      	beq.n	8008c22 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfe:	4a13      	ldr	r2, [pc, #76]	; (8008c4c <HAL_UART_IRQHandler+0x29c>)
 8008c00:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fc fecd 	bl	80059a6 <HAL_DMA_Abort_IT>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d017      	beq.n	8008c42 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c20:	e00f      	b.n	8008c42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f9ae 	bl	8008f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c28:	e00b      	b.n	8008c42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f9aa 	bl	8008f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c30:	e007      	b.n	8008c42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f9a6 	bl	8008f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008c40:	e18b      	b.n	8008f5a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c42:	bf00      	nop
    return;
 8008c44:	e189      	b.n	8008f5a <HAL_UART_IRQHandler+0x5aa>
 8008c46:	bf00      	nop
 8008c48:	04000120 	.word	0x04000120
 8008c4c:	080098ad 	.word	0x080098ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	f040 8144 	bne.w	8008ee2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c5e:	f003 0310 	and.w	r3, r3, #16
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 813d 	beq.w	8008ee2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c6c:	f003 0310 	and.w	r3, r3, #16
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f000 8136 	beq.w	8008ee2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2210      	movs	r2, #16
 8008c7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c88:	2b40      	cmp	r3, #64	; 0x40
 8008c8a:	f040 80b2 	bne.w	8008df2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 815d 	beq.w	8008f5e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	f080 8155 	bcs.w	8008f5e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008cba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cc8:	f000 8085 	beq.w	8008dd6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cd8:	e853 3f00 	ldrex	r3, [r3]
 8008cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008cf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008cfa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008d02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1da      	bne.n	8008ccc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d20:	e853 3f00 	ldrex	r3, [r3]
 8008d24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d28:	f023 0301 	bic.w	r3, r3, #1
 8008d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3308      	adds	r3, #8
 8008d36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008d3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008d42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1e1      	bne.n	8008d16 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3308      	adds	r3, #8
 8008d58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3308      	adds	r3, #8
 8008d72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008d76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008d78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008d7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d7e:	e841 2300 	strex	r3, r2, [r1]
 8008d82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1e3      	bne.n	8008d52 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d9e:	e853 3f00 	ldrex	r3, [r3]
 8008da2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da6:	f023 0310 	bic.w	r3, r3, #16
 8008daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008db8:	65bb      	str	r3, [r7, #88]	; 0x58
 8008dba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008dbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008dc0:	e841 2300 	strex	r3, r2, [r1]
 8008dc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1e4      	bne.n	8008d96 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fc fd78 	bl	80058c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f8d4 	bl	8008f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008df0:	e0b5      	b.n	8008f5e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f000 80a7 	beq.w	8008f62 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8008e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 80a2 	beq.w	8008f62 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e26:	e853 3f00 	ldrex	r3, [r3]
 8008e2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e40:	647b      	str	r3, [r7, #68]	; 0x44
 8008e42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e48:	e841 2300 	strex	r3, r2, [r1]
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1e4      	bne.n	8008e1e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3308      	adds	r3, #8
 8008e5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	623b      	str	r3, [r7, #32]
   return(result);
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	f023 0301 	bic.w	r3, r3, #1
 8008e6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3308      	adds	r3, #8
 8008e74:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008e78:	633a      	str	r2, [r7, #48]	; 0x30
 8008e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e80:	e841 2300 	strex	r3, r2, [r1]
 8008e84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e3      	bne.n	8008e54 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	e853 3f00 	ldrex	r3, [r3]
 8008eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f023 0310 	bic.w	r3, r3, #16
 8008eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008ec0:	61fb      	str	r3, [r7, #28]
 8008ec2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec4:	69b9      	ldr	r1, [r7, #24]
 8008ec6:	69fa      	ldr	r2, [r7, #28]
 8008ec8:	e841 2300 	strex	r3, r2, [r1]
 8008ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e4      	bne.n	8008e9e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f85c 	bl	8008f98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ee0:	e03f      	b.n	8008f62 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00e      	beq.n	8008f0c <HAL_UART_IRQHandler+0x55c>
 8008eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d008      	beq.n	8008f0c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008f02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 f853 	bl	8008fb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f0a:	e02d      	b.n	8008f68 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00e      	beq.n	8008f36 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d008      	beq.n	8008f36 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d01c      	beq.n	8008f66 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	4798      	blx	r3
    }
    return;
 8008f34:	e017      	b.n	8008f66 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d012      	beq.n	8008f68 <HAL_UART_IRQHandler+0x5b8>
 8008f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00c      	beq.n	8008f68 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fd7d 	bl	8009a4e <UART_EndTransmit_IT>
    return;
 8008f54:	e008      	b.n	8008f68 <HAL_UART_IRQHandler+0x5b8>
      return;
 8008f56:	bf00      	nop
 8008f58:	e006      	b.n	8008f68 <HAL_UART_IRQHandler+0x5b8>
    return;
 8008f5a:	bf00      	nop
 8008f5c:	e004      	b.n	8008f68 <HAL_UART_IRQHandler+0x5b8>
      return;
 8008f5e:	bf00      	nop
 8008f60:	e002      	b.n	8008f68 <HAL_UART_IRQHandler+0x5b8>
      return;
 8008f62:	bf00      	nop
 8008f64:	e000      	b.n	8008f68 <HAL_UART_IRQHandler+0x5b8>
    return;
 8008f66:	bf00      	nop
  }

}
 8008f68:	37e8      	adds	r7, #232	; 0xe8
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop

08008f70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b088      	sub	sp, #32
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689a      	ldr	r2, [r3, #8]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	4ba7      	ldr	r3, [pc, #668]	; (800928c <UART_SetConfig+0x2c8>)
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	6812      	ldr	r2, [r2, #0]
 8008ff6:	6979      	ldr	r1, [r7, #20]
 8008ff8:	430b      	orrs	r3, r1
 8008ffa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a1b      	ldr	r3, [r3, #32]
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	4313      	orrs	r3, r2
 8009020:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	430a      	orrs	r2, r1
 8009034:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a95      	ldr	r2, [pc, #596]	; (8009290 <UART_SetConfig+0x2cc>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d120      	bne.n	8009082 <UART_SetConfig+0xbe>
 8009040:	4b94      	ldr	r3, [pc, #592]	; (8009294 <UART_SetConfig+0x2d0>)
 8009042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	2b03      	cmp	r3, #3
 800904c:	d816      	bhi.n	800907c <UART_SetConfig+0xb8>
 800904e:	a201      	add	r2, pc, #4	; (adr r2, 8009054 <UART_SetConfig+0x90>)
 8009050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009054:	08009065 	.word	0x08009065
 8009058:	08009071 	.word	0x08009071
 800905c:	0800906b 	.word	0x0800906b
 8009060:	08009077 	.word	0x08009077
 8009064:	2301      	movs	r3, #1
 8009066:	77fb      	strb	r3, [r7, #31]
 8009068:	e14f      	b.n	800930a <UART_SetConfig+0x346>
 800906a:	2302      	movs	r3, #2
 800906c:	77fb      	strb	r3, [r7, #31]
 800906e:	e14c      	b.n	800930a <UART_SetConfig+0x346>
 8009070:	2304      	movs	r3, #4
 8009072:	77fb      	strb	r3, [r7, #31]
 8009074:	e149      	b.n	800930a <UART_SetConfig+0x346>
 8009076:	2308      	movs	r3, #8
 8009078:	77fb      	strb	r3, [r7, #31]
 800907a:	e146      	b.n	800930a <UART_SetConfig+0x346>
 800907c:	2310      	movs	r3, #16
 800907e:	77fb      	strb	r3, [r7, #31]
 8009080:	e143      	b.n	800930a <UART_SetConfig+0x346>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a84      	ldr	r2, [pc, #528]	; (8009298 <UART_SetConfig+0x2d4>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d132      	bne.n	80090f2 <UART_SetConfig+0x12e>
 800908c:	4b81      	ldr	r3, [pc, #516]	; (8009294 <UART_SetConfig+0x2d0>)
 800908e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009092:	f003 030c 	and.w	r3, r3, #12
 8009096:	2b0c      	cmp	r3, #12
 8009098:	d828      	bhi.n	80090ec <UART_SetConfig+0x128>
 800909a:	a201      	add	r2, pc, #4	; (adr r2, 80090a0 <UART_SetConfig+0xdc>)
 800909c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a0:	080090d5 	.word	0x080090d5
 80090a4:	080090ed 	.word	0x080090ed
 80090a8:	080090ed 	.word	0x080090ed
 80090ac:	080090ed 	.word	0x080090ed
 80090b0:	080090e1 	.word	0x080090e1
 80090b4:	080090ed 	.word	0x080090ed
 80090b8:	080090ed 	.word	0x080090ed
 80090bc:	080090ed 	.word	0x080090ed
 80090c0:	080090db 	.word	0x080090db
 80090c4:	080090ed 	.word	0x080090ed
 80090c8:	080090ed 	.word	0x080090ed
 80090cc:	080090ed 	.word	0x080090ed
 80090d0:	080090e7 	.word	0x080090e7
 80090d4:	2300      	movs	r3, #0
 80090d6:	77fb      	strb	r3, [r7, #31]
 80090d8:	e117      	b.n	800930a <UART_SetConfig+0x346>
 80090da:	2302      	movs	r3, #2
 80090dc:	77fb      	strb	r3, [r7, #31]
 80090de:	e114      	b.n	800930a <UART_SetConfig+0x346>
 80090e0:	2304      	movs	r3, #4
 80090e2:	77fb      	strb	r3, [r7, #31]
 80090e4:	e111      	b.n	800930a <UART_SetConfig+0x346>
 80090e6:	2308      	movs	r3, #8
 80090e8:	77fb      	strb	r3, [r7, #31]
 80090ea:	e10e      	b.n	800930a <UART_SetConfig+0x346>
 80090ec:	2310      	movs	r3, #16
 80090ee:	77fb      	strb	r3, [r7, #31]
 80090f0:	e10b      	b.n	800930a <UART_SetConfig+0x346>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a69      	ldr	r2, [pc, #420]	; (800929c <UART_SetConfig+0x2d8>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d120      	bne.n	800913e <UART_SetConfig+0x17a>
 80090fc:	4b65      	ldr	r3, [pc, #404]	; (8009294 <UART_SetConfig+0x2d0>)
 80090fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009102:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009106:	2b30      	cmp	r3, #48	; 0x30
 8009108:	d013      	beq.n	8009132 <UART_SetConfig+0x16e>
 800910a:	2b30      	cmp	r3, #48	; 0x30
 800910c:	d814      	bhi.n	8009138 <UART_SetConfig+0x174>
 800910e:	2b20      	cmp	r3, #32
 8009110:	d009      	beq.n	8009126 <UART_SetConfig+0x162>
 8009112:	2b20      	cmp	r3, #32
 8009114:	d810      	bhi.n	8009138 <UART_SetConfig+0x174>
 8009116:	2b00      	cmp	r3, #0
 8009118:	d002      	beq.n	8009120 <UART_SetConfig+0x15c>
 800911a:	2b10      	cmp	r3, #16
 800911c:	d006      	beq.n	800912c <UART_SetConfig+0x168>
 800911e:	e00b      	b.n	8009138 <UART_SetConfig+0x174>
 8009120:	2300      	movs	r3, #0
 8009122:	77fb      	strb	r3, [r7, #31]
 8009124:	e0f1      	b.n	800930a <UART_SetConfig+0x346>
 8009126:	2302      	movs	r3, #2
 8009128:	77fb      	strb	r3, [r7, #31]
 800912a:	e0ee      	b.n	800930a <UART_SetConfig+0x346>
 800912c:	2304      	movs	r3, #4
 800912e:	77fb      	strb	r3, [r7, #31]
 8009130:	e0eb      	b.n	800930a <UART_SetConfig+0x346>
 8009132:	2308      	movs	r3, #8
 8009134:	77fb      	strb	r3, [r7, #31]
 8009136:	e0e8      	b.n	800930a <UART_SetConfig+0x346>
 8009138:	2310      	movs	r3, #16
 800913a:	77fb      	strb	r3, [r7, #31]
 800913c:	e0e5      	b.n	800930a <UART_SetConfig+0x346>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a57      	ldr	r2, [pc, #348]	; (80092a0 <UART_SetConfig+0x2dc>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d120      	bne.n	800918a <UART_SetConfig+0x1c6>
 8009148:	4b52      	ldr	r3, [pc, #328]	; (8009294 <UART_SetConfig+0x2d0>)
 800914a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800914e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009152:	2bc0      	cmp	r3, #192	; 0xc0
 8009154:	d013      	beq.n	800917e <UART_SetConfig+0x1ba>
 8009156:	2bc0      	cmp	r3, #192	; 0xc0
 8009158:	d814      	bhi.n	8009184 <UART_SetConfig+0x1c0>
 800915a:	2b80      	cmp	r3, #128	; 0x80
 800915c:	d009      	beq.n	8009172 <UART_SetConfig+0x1ae>
 800915e:	2b80      	cmp	r3, #128	; 0x80
 8009160:	d810      	bhi.n	8009184 <UART_SetConfig+0x1c0>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d002      	beq.n	800916c <UART_SetConfig+0x1a8>
 8009166:	2b40      	cmp	r3, #64	; 0x40
 8009168:	d006      	beq.n	8009178 <UART_SetConfig+0x1b4>
 800916a:	e00b      	b.n	8009184 <UART_SetConfig+0x1c0>
 800916c:	2300      	movs	r3, #0
 800916e:	77fb      	strb	r3, [r7, #31]
 8009170:	e0cb      	b.n	800930a <UART_SetConfig+0x346>
 8009172:	2302      	movs	r3, #2
 8009174:	77fb      	strb	r3, [r7, #31]
 8009176:	e0c8      	b.n	800930a <UART_SetConfig+0x346>
 8009178:	2304      	movs	r3, #4
 800917a:	77fb      	strb	r3, [r7, #31]
 800917c:	e0c5      	b.n	800930a <UART_SetConfig+0x346>
 800917e:	2308      	movs	r3, #8
 8009180:	77fb      	strb	r3, [r7, #31]
 8009182:	e0c2      	b.n	800930a <UART_SetConfig+0x346>
 8009184:	2310      	movs	r3, #16
 8009186:	77fb      	strb	r3, [r7, #31]
 8009188:	e0bf      	b.n	800930a <UART_SetConfig+0x346>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a45      	ldr	r2, [pc, #276]	; (80092a4 <UART_SetConfig+0x2e0>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d125      	bne.n	80091e0 <UART_SetConfig+0x21c>
 8009194:	4b3f      	ldr	r3, [pc, #252]	; (8009294 <UART_SetConfig+0x2d0>)
 8009196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800919a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800919e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091a2:	d017      	beq.n	80091d4 <UART_SetConfig+0x210>
 80091a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091a8:	d817      	bhi.n	80091da <UART_SetConfig+0x216>
 80091aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091ae:	d00b      	beq.n	80091c8 <UART_SetConfig+0x204>
 80091b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091b4:	d811      	bhi.n	80091da <UART_SetConfig+0x216>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <UART_SetConfig+0x1fe>
 80091ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091be:	d006      	beq.n	80091ce <UART_SetConfig+0x20a>
 80091c0:	e00b      	b.n	80091da <UART_SetConfig+0x216>
 80091c2:	2300      	movs	r3, #0
 80091c4:	77fb      	strb	r3, [r7, #31]
 80091c6:	e0a0      	b.n	800930a <UART_SetConfig+0x346>
 80091c8:	2302      	movs	r3, #2
 80091ca:	77fb      	strb	r3, [r7, #31]
 80091cc:	e09d      	b.n	800930a <UART_SetConfig+0x346>
 80091ce:	2304      	movs	r3, #4
 80091d0:	77fb      	strb	r3, [r7, #31]
 80091d2:	e09a      	b.n	800930a <UART_SetConfig+0x346>
 80091d4:	2308      	movs	r3, #8
 80091d6:	77fb      	strb	r3, [r7, #31]
 80091d8:	e097      	b.n	800930a <UART_SetConfig+0x346>
 80091da:	2310      	movs	r3, #16
 80091dc:	77fb      	strb	r3, [r7, #31]
 80091de:	e094      	b.n	800930a <UART_SetConfig+0x346>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a30      	ldr	r2, [pc, #192]	; (80092a8 <UART_SetConfig+0x2e4>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d125      	bne.n	8009236 <UART_SetConfig+0x272>
 80091ea:	4b2a      	ldr	r3, [pc, #168]	; (8009294 <UART_SetConfig+0x2d0>)
 80091ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80091f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091f8:	d017      	beq.n	800922a <UART_SetConfig+0x266>
 80091fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80091fe:	d817      	bhi.n	8009230 <UART_SetConfig+0x26c>
 8009200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009204:	d00b      	beq.n	800921e <UART_SetConfig+0x25a>
 8009206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800920a:	d811      	bhi.n	8009230 <UART_SetConfig+0x26c>
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <UART_SetConfig+0x254>
 8009210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009214:	d006      	beq.n	8009224 <UART_SetConfig+0x260>
 8009216:	e00b      	b.n	8009230 <UART_SetConfig+0x26c>
 8009218:	2301      	movs	r3, #1
 800921a:	77fb      	strb	r3, [r7, #31]
 800921c:	e075      	b.n	800930a <UART_SetConfig+0x346>
 800921e:	2302      	movs	r3, #2
 8009220:	77fb      	strb	r3, [r7, #31]
 8009222:	e072      	b.n	800930a <UART_SetConfig+0x346>
 8009224:	2304      	movs	r3, #4
 8009226:	77fb      	strb	r3, [r7, #31]
 8009228:	e06f      	b.n	800930a <UART_SetConfig+0x346>
 800922a:	2308      	movs	r3, #8
 800922c:	77fb      	strb	r3, [r7, #31]
 800922e:	e06c      	b.n	800930a <UART_SetConfig+0x346>
 8009230:	2310      	movs	r3, #16
 8009232:	77fb      	strb	r3, [r7, #31]
 8009234:	e069      	b.n	800930a <UART_SetConfig+0x346>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a1c      	ldr	r2, [pc, #112]	; (80092ac <UART_SetConfig+0x2e8>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d137      	bne.n	80092b0 <UART_SetConfig+0x2ec>
 8009240:	4b14      	ldr	r3, [pc, #80]	; (8009294 <UART_SetConfig+0x2d0>)
 8009242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009246:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800924a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800924e:	d017      	beq.n	8009280 <UART_SetConfig+0x2bc>
 8009250:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009254:	d817      	bhi.n	8009286 <UART_SetConfig+0x2c2>
 8009256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800925a:	d00b      	beq.n	8009274 <UART_SetConfig+0x2b0>
 800925c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009260:	d811      	bhi.n	8009286 <UART_SetConfig+0x2c2>
 8009262:	2b00      	cmp	r3, #0
 8009264:	d003      	beq.n	800926e <UART_SetConfig+0x2aa>
 8009266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800926a:	d006      	beq.n	800927a <UART_SetConfig+0x2b6>
 800926c:	e00b      	b.n	8009286 <UART_SetConfig+0x2c2>
 800926e:	2300      	movs	r3, #0
 8009270:	77fb      	strb	r3, [r7, #31]
 8009272:	e04a      	b.n	800930a <UART_SetConfig+0x346>
 8009274:	2302      	movs	r3, #2
 8009276:	77fb      	strb	r3, [r7, #31]
 8009278:	e047      	b.n	800930a <UART_SetConfig+0x346>
 800927a:	2304      	movs	r3, #4
 800927c:	77fb      	strb	r3, [r7, #31]
 800927e:	e044      	b.n	800930a <UART_SetConfig+0x346>
 8009280:	2308      	movs	r3, #8
 8009282:	77fb      	strb	r3, [r7, #31]
 8009284:	e041      	b.n	800930a <UART_SetConfig+0x346>
 8009286:	2310      	movs	r3, #16
 8009288:	77fb      	strb	r3, [r7, #31]
 800928a:	e03e      	b.n	800930a <UART_SetConfig+0x346>
 800928c:	efff69f3 	.word	0xefff69f3
 8009290:	40011000 	.word	0x40011000
 8009294:	40023800 	.word	0x40023800
 8009298:	40004400 	.word	0x40004400
 800929c:	40004800 	.word	0x40004800
 80092a0:	40004c00 	.word	0x40004c00
 80092a4:	40005000 	.word	0x40005000
 80092a8:	40011400 	.word	0x40011400
 80092ac:	40007800 	.word	0x40007800
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a71      	ldr	r2, [pc, #452]	; (800947c <UART_SetConfig+0x4b8>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d125      	bne.n	8009306 <UART_SetConfig+0x342>
 80092ba:	4b71      	ldr	r3, [pc, #452]	; (8009480 <UART_SetConfig+0x4bc>)
 80092bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80092c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80092c8:	d017      	beq.n	80092fa <UART_SetConfig+0x336>
 80092ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80092ce:	d817      	bhi.n	8009300 <UART_SetConfig+0x33c>
 80092d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092d4:	d00b      	beq.n	80092ee <UART_SetConfig+0x32a>
 80092d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092da:	d811      	bhi.n	8009300 <UART_SetConfig+0x33c>
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d003      	beq.n	80092e8 <UART_SetConfig+0x324>
 80092e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092e4:	d006      	beq.n	80092f4 <UART_SetConfig+0x330>
 80092e6:	e00b      	b.n	8009300 <UART_SetConfig+0x33c>
 80092e8:	2300      	movs	r3, #0
 80092ea:	77fb      	strb	r3, [r7, #31]
 80092ec:	e00d      	b.n	800930a <UART_SetConfig+0x346>
 80092ee:	2302      	movs	r3, #2
 80092f0:	77fb      	strb	r3, [r7, #31]
 80092f2:	e00a      	b.n	800930a <UART_SetConfig+0x346>
 80092f4:	2304      	movs	r3, #4
 80092f6:	77fb      	strb	r3, [r7, #31]
 80092f8:	e007      	b.n	800930a <UART_SetConfig+0x346>
 80092fa:	2308      	movs	r3, #8
 80092fc:	77fb      	strb	r3, [r7, #31]
 80092fe:	e004      	b.n	800930a <UART_SetConfig+0x346>
 8009300:	2310      	movs	r3, #16
 8009302:	77fb      	strb	r3, [r7, #31]
 8009304:	e001      	b.n	800930a <UART_SetConfig+0x346>
 8009306:	2310      	movs	r3, #16
 8009308:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009312:	d15a      	bne.n	80093ca <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8009314:	7ffb      	ldrb	r3, [r7, #31]
 8009316:	2b08      	cmp	r3, #8
 8009318:	d827      	bhi.n	800936a <UART_SetConfig+0x3a6>
 800931a:	a201      	add	r2, pc, #4	; (adr r2, 8009320 <UART_SetConfig+0x35c>)
 800931c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009320:	08009345 	.word	0x08009345
 8009324:	0800934d 	.word	0x0800934d
 8009328:	08009355 	.word	0x08009355
 800932c:	0800936b 	.word	0x0800936b
 8009330:	0800935b 	.word	0x0800935b
 8009334:	0800936b 	.word	0x0800936b
 8009338:	0800936b 	.word	0x0800936b
 800933c:	0800936b 	.word	0x0800936b
 8009340:	08009363 	.word	0x08009363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009344:	f7fe f9d0 	bl	80076e8 <HAL_RCC_GetPCLK1Freq>
 8009348:	61b8      	str	r0, [r7, #24]
        break;
 800934a:	e013      	b.n	8009374 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800934c:	f7fe f9e0 	bl	8007710 <HAL_RCC_GetPCLK2Freq>
 8009350:	61b8      	str	r0, [r7, #24]
        break;
 8009352:	e00f      	b.n	8009374 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009354:	4b4b      	ldr	r3, [pc, #300]	; (8009484 <UART_SetConfig+0x4c0>)
 8009356:	61bb      	str	r3, [r7, #24]
        break;
 8009358:	e00c      	b.n	8009374 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800935a:	f7fe f8d7 	bl	800750c <HAL_RCC_GetSysClockFreq>
 800935e:	61b8      	str	r0, [r7, #24]
        break;
 8009360:	e008      	b.n	8009374 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009366:	61bb      	str	r3, [r7, #24]
        break;
 8009368:	e004      	b.n	8009374 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	77bb      	strb	r3, [r7, #30]
        break;
 8009372:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d074      	beq.n	8009464 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	005a      	lsls	r2, r3, #1
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	085b      	lsrs	r3, r3, #1
 8009384:	441a      	add	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	fbb2 f3f3 	udiv	r3, r2, r3
 800938e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	2b0f      	cmp	r3, #15
 8009394:	d916      	bls.n	80093c4 <UART_SetConfig+0x400>
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800939c:	d212      	bcs.n	80093c4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	f023 030f 	bic.w	r3, r3, #15
 80093a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	085b      	lsrs	r3, r3, #1
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	89fb      	ldrh	r3, [r7, #14]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	89fa      	ldrh	r2, [r7, #14]
 80093c0:	60da      	str	r2, [r3, #12]
 80093c2:	e04f      	b.n	8009464 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	77bb      	strb	r3, [r7, #30]
 80093c8:	e04c      	b.n	8009464 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80093ca:	7ffb      	ldrb	r3, [r7, #31]
 80093cc:	2b08      	cmp	r3, #8
 80093ce:	d828      	bhi.n	8009422 <UART_SetConfig+0x45e>
 80093d0:	a201      	add	r2, pc, #4	; (adr r2, 80093d8 <UART_SetConfig+0x414>)
 80093d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d6:	bf00      	nop
 80093d8:	080093fd 	.word	0x080093fd
 80093dc:	08009405 	.word	0x08009405
 80093e0:	0800940d 	.word	0x0800940d
 80093e4:	08009423 	.word	0x08009423
 80093e8:	08009413 	.word	0x08009413
 80093ec:	08009423 	.word	0x08009423
 80093f0:	08009423 	.word	0x08009423
 80093f4:	08009423 	.word	0x08009423
 80093f8:	0800941b 	.word	0x0800941b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093fc:	f7fe f974 	bl	80076e8 <HAL_RCC_GetPCLK1Freq>
 8009400:	61b8      	str	r0, [r7, #24]
        break;
 8009402:	e013      	b.n	800942c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009404:	f7fe f984 	bl	8007710 <HAL_RCC_GetPCLK2Freq>
 8009408:	61b8      	str	r0, [r7, #24]
        break;
 800940a:	e00f      	b.n	800942c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800940c:	4b1d      	ldr	r3, [pc, #116]	; (8009484 <UART_SetConfig+0x4c0>)
 800940e:	61bb      	str	r3, [r7, #24]
        break;
 8009410:	e00c      	b.n	800942c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009412:	f7fe f87b 	bl	800750c <HAL_RCC_GetSysClockFreq>
 8009416:	61b8      	str	r0, [r7, #24]
        break;
 8009418:	e008      	b.n	800942c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800941a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800941e:	61bb      	str	r3, [r7, #24]
        break;
 8009420:	e004      	b.n	800942c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8009422:	2300      	movs	r3, #0
 8009424:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	77bb      	strb	r3, [r7, #30]
        break;
 800942a:	bf00      	nop
    }

    if (pclk != 0U)
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d018      	beq.n	8009464 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	085a      	lsrs	r2, r3, #1
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	441a      	add	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	fbb2 f3f3 	udiv	r3, r2, r3
 8009444:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	2b0f      	cmp	r3, #15
 800944a:	d909      	bls.n	8009460 <UART_SetConfig+0x49c>
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009452:	d205      	bcs.n	8009460 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	b29a      	uxth	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	60da      	str	r2, [r3, #12]
 800945e:	e001      	b.n	8009464 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009470:	7fbb      	ldrb	r3, [r7, #30]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3720      	adds	r7, #32
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	40007c00 	.word	0x40007c00
 8009480:	40023800 	.word	0x40023800
 8009484:	00f42400 	.word	0x00f42400

08009488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	f003 0301 	and.w	r3, r3, #1
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00a      	beq.n	80094b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	f003 0302 	and.w	r3, r3, #2
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	430a      	orrs	r2, r1
 80094d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00a      	beq.n	80094f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	f003 0308 	and.w	r3, r3, #8
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00a      	beq.n	8009518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951c:	f003 0310 	and.w	r3, r3, #16
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00a      	beq.n	800953a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	430a      	orrs	r2, r1
 8009538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953e:	f003 0320 	and.w	r3, r3, #32
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00a      	beq.n	800955c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	430a      	orrs	r2, r1
 800955a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009564:	2b00      	cmp	r3, #0
 8009566:	d01a      	beq.n	800959e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	430a      	orrs	r2, r1
 800957c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009586:	d10a      	bne.n	800959e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	430a      	orrs	r2, r1
 800959c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00a      	beq.n	80095c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	430a      	orrs	r2, r1
 80095be:	605a      	str	r2, [r3, #4]
  }
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af02      	add	r7, sp, #8
 80095d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095dc:	f7fc f832 	bl	8005644 <HAL_GetTick>
 80095e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0308 	and.w	r3, r3, #8
 80095ec:	2b08      	cmp	r3, #8
 80095ee:	d10e      	bne.n	800960e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f82d 	bl	800965e <UART_WaitOnFlagUntilTimeout>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e023      	b.n	8009656 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b04      	cmp	r3, #4
 800961a:	d10e      	bne.n	800963a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800961c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f817 	bl	800965e <UART_WaitOnFlagUntilTimeout>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d001      	beq.n	800963a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e00d      	b.n	8009656 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2220      	movs	r2, #32
 800963e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2220      	movs	r2, #32
 8009644:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b09c      	sub	sp, #112	; 0x70
 8009662:	af00      	add	r7, sp, #0
 8009664:	60f8      	str	r0, [r7, #12]
 8009666:	60b9      	str	r1, [r7, #8]
 8009668:	603b      	str	r3, [r7, #0]
 800966a:	4613      	mov	r3, r2
 800966c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800966e:	e0a5      	b.n	80097bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009676:	f000 80a1 	beq.w	80097bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800967a:	f7fb ffe3 	bl	8005644 <HAL_GetTick>
 800967e:	4602      	mov	r2, r0
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009686:	429a      	cmp	r2, r3
 8009688:	d302      	bcc.n	8009690 <UART_WaitOnFlagUntilTimeout+0x32>
 800968a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800968c:	2b00      	cmp	r3, #0
 800968e:	d13e      	bne.n	800970e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009698:	e853 3f00 	ldrex	r3, [r3]
 800969c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800969e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80096a4:	667b      	str	r3, [r7, #100]	; 0x64
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	461a      	mov	r2, r3
 80096ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80096b6:	e841 2300 	strex	r3, r2, [r1]
 80096ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80096bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1e6      	bne.n	8009690 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3308      	adds	r3, #8
 80096c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096cc:	e853 3f00 	ldrex	r3, [r3]
 80096d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d4:	f023 0301 	bic.w	r3, r3, #1
 80096d8:	663b      	str	r3, [r7, #96]	; 0x60
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3308      	adds	r3, #8
 80096e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80096e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80096e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096ea:	e841 2300 	strex	r3, r2, [r1]
 80096ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80096f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1e5      	bne.n	80096c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2220      	movs	r2, #32
 80096fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2220      	movs	r2, #32
 8009700:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800970a:	2303      	movs	r3, #3
 800970c:	e067      	b.n	80097de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b00      	cmp	r3, #0
 800971a:	d04f      	beq.n	80097bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800972a:	d147      	bne.n	80097bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009734:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	e853 3f00 	ldrex	r3, [r3]
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800974a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	461a      	mov	r2, r3
 8009752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009754:	637b      	str	r3, [r7, #52]	; 0x34
 8009756:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009758:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800975a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800975c:	e841 2300 	strex	r3, r2, [r1]
 8009760:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1e6      	bne.n	8009736 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3308      	adds	r3, #8
 800976e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	e853 3f00 	ldrex	r3, [r3]
 8009776:	613b      	str	r3, [r7, #16]
   return(result);
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f023 0301 	bic.w	r3, r3, #1
 800977e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	3308      	adds	r3, #8
 8009786:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009788:	623a      	str	r2, [r7, #32]
 800978a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978c:	69f9      	ldr	r1, [r7, #28]
 800978e:	6a3a      	ldr	r2, [r7, #32]
 8009790:	e841 2300 	strex	r3, r2, [r1]
 8009794:	61bb      	str	r3, [r7, #24]
   return(result);
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e5      	bne.n	8009768 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2220      	movs	r2, #32
 80097a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2220      	movs	r2, #32
 80097a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2220      	movs	r2, #32
 80097ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e010      	b.n	80097de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	69da      	ldr	r2, [r3, #28]
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	4013      	ands	r3, r2
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	bf0c      	ite	eq
 80097cc:	2301      	moveq	r3, #1
 80097ce:	2300      	movne	r3, #0
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	461a      	mov	r2, r3
 80097d4:	79fb      	ldrb	r3, [r7, #7]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	f43f af4a 	beq.w	8009670 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3770      	adds	r7, #112	; 0x70
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b095      	sub	sp, #84	; 0x54
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	461a      	mov	r2, r3
 800980a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800980c:	643b      	str	r3, [r7, #64]	; 0x40
 800980e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009812:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800981a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e6      	bne.n	80097ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	3308      	adds	r3, #8
 8009826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	e853 3f00 	ldrex	r3, [r3]
 800982e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	f023 0301 	bic.w	r3, r3, #1
 8009836:	64bb      	str	r3, [r7, #72]	; 0x48
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3308      	adds	r3, #8
 800983e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009840:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009848:	e841 2300 	strex	r3, r2, [r1]
 800984c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1e5      	bne.n	8009820 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009858:	2b01      	cmp	r3, #1
 800985a:	d118      	bne.n	800988e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	60bb      	str	r3, [r7, #8]
   return(result);
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	f023 0310 	bic.w	r3, r3, #16
 8009870:	647b      	str	r3, [r7, #68]	; 0x44
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800987a:	61bb      	str	r3, [r7, #24]
 800987c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987e:	6979      	ldr	r1, [r7, #20]
 8009880:	69ba      	ldr	r2, [r7, #24]
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	613b      	str	r3, [r7, #16]
   return(result);
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1e6      	bne.n	800985c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2220      	movs	r2, #32
 8009892:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	665a      	str	r2, [r3, #100]	; 0x64
}
 80098a0:	bf00      	nop
 80098a2:	3754      	adds	r7, #84	; 0x54
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f7ff fb5a 	bl	8008f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098d0:	bf00      	nop
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80098d8:	b480      	push	{r7}
 80098da:	b08f      	sub	sp, #60	; 0x3c
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098e4:	2b21      	cmp	r3, #33	; 0x21
 80098e6:	d14c      	bne.n	8009982 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d132      	bne.n	800995a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fa:	6a3b      	ldr	r3, [r7, #32]
 80098fc:	e853 3f00 	ldrex	r3, [r3]
 8009900:	61fb      	str	r3, [r7, #28]
   return(result);
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009908:	637b      	str	r3, [r7, #52]	; 0x34
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	461a      	mov	r2, r3
 8009910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009914:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009916:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800991a:	e841 2300 	strex	r3, r2, [r1]
 800991e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1e6      	bne.n	80098f4 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	e853 3f00 	ldrex	r3, [r3]
 8009932:	60bb      	str	r3, [r7, #8]
   return(result);
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800993a:	633b      	str	r3, [r7, #48]	; 0x30
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	461a      	mov	r2, r3
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	61bb      	str	r3, [r7, #24]
 8009946:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009948:	6979      	ldr	r1, [r7, #20]
 800994a:	69ba      	ldr	r2, [r7, #24]
 800994c:	e841 2300 	strex	r3, r2, [r1]
 8009950:	613b      	str	r3, [r7, #16]
   return(result);
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d1e6      	bne.n	8009926 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009958:	e013      	b.n	8009982 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800995e:	781a      	ldrb	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009976:	b29b      	uxth	r3, r3
 8009978:	3b01      	subs	r3, #1
 800997a:	b29a      	uxth	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009982:	bf00      	nop
 8009984:	373c      	adds	r7, #60	; 0x3c
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800998e:	b480      	push	{r7}
 8009990:	b091      	sub	sp, #68	; 0x44
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800999a:	2b21      	cmp	r3, #33	; 0x21
 800999c:	d151      	bne.n	8009a42 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d132      	bne.n	8009a10 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	623b      	str	r3, [r7, #32]
   return(result);
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099be:	63bb      	str	r3, [r7, #56]	; 0x38
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	461a      	mov	r2, r3
 80099c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c8:	633b      	str	r3, [r7, #48]	; 0x30
 80099ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e6      	bne.n	80099aa <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	e853 3f00 	ldrex	r3, [r3]
 80099e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099f0:	637b      	str	r3, [r7, #52]	; 0x34
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fa:	61fb      	str	r3, [r7, #28]
 80099fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fe:	69b9      	ldr	r1, [r7, #24]
 8009a00:	69fa      	ldr	r2, [r7, #28]
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	617b      	str	r3, [r7, #20]
   return(result);
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1e6      	bne.n	80099dc <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009a0e:	e018      	b.n	8009a42 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a14:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a18:	881b      	ldrh	r3, [r3, #0]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a24:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2a:	1c9a      	adds	r2, r3, #2
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009a42:	bf00      	nop
 8009a44:	3744      	adds	r7, #68	; 0x44
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b088      	sub	sp, #32
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	e853 3f00 	ldrex	r3, [r3]
 8009a62:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a6a:	61fb      	str	r3, [r7, #28]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	461a      	mov	r2, r3
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	61bb      	str	r3, [r7, #24]
 8009a76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a78:	6979      	ldr	r1, [r7, #20]
 8009a7a:	69ba      	ldr	r2, [r7, #24]
 8009a7c:	e841 2300 	strex	r3, r2, [r1]
 8009a80:	613b      	str	r3, [r7, #16]
   return(result);
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1e6      	bne.n	8009a56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7ff fa6b 	bl	8008f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a9a:	bf00      	nop
 8009a9c:	3720      	adds	r7, #32
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
	...

08009aa4 <__errno>:
 8009aa4:	4b01      	ldr	r3, [pc, #4]	; (8009aac <__errno+0x8>)
 8009aa6:	6818      	ldr	r0, [r3, #0]
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	200000ec 	.word	0x200000ec

08009ab0 <__libc_init_array>:
 8009ab0:	b570      	push	{r4, r5, r6, lr}
 8009ab2:	4d0d      	ldr	r5, [pc, #52]	; (8009ae8 <__libc_init_array+0x38>)
 8009ab4:	4c0d      	ldr	r4, [pc, #52]	; (8009aec <__libc_init_array+0x3c>)
 8009ab6:	1b64      	subs	r4, r4, r5
 8009ab8:	10a4      	asrs	r4, r4, #2
 8009aba:	2600      	movs	r6, #0
 8009abc:	42a6      	cmp	r6, r4
 8009abe:	d109      	bne.n	8009ad4 <__libc_init_array+0x24>
 8009ac0:	4d0b      	ldr	r5, [pc, #44]	; (8009af0 <__libc_init_array+0x40>)
 8009ac2:	4c0c      	ldr	r4, [pc, #48]	; (8009af4 <__libc_init_array+0x44>)
 8009ac4:	f000 fc4e 	bl	800a364 <_init>
 8009ac8:	1b64      	subs	r4, r4, r5
 8009aca:	10a4      	asrs	r4, r4, #2
 8009acc:	2600      	movs	r6, #0
 8009ace:	42a6      	cmp	r6, r4
 8009ad0:	d105      	bne.n	8009ade <__libc_init_array+0x2e>
 8009ad2:	bd70      	pop	{r4, r5, r6, pc}
 8009ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ad8:	4798      	blx	r3
 8009ada:	3601      	adds	r6, #1
 8009adc:	e7ee      	b.n	8009abc <__libc_init_array+0xc>
 8009ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ae2:	4798      	blx	r3
 8009ae4:	3601      	adds	r6, #1
 8009ae6:	e7f2      	b.n	8009ace <__libc_init_array+0x1e>
 8009ae8:	0800a414 	.word	0x0800a414
 8009aec:	0800a414 	.word	0x0800a414
 8009af0:	0800a414 	.word	0x0800a414
 8009af4:	0800a418 	.word	0x0800a418

08009af8 <memset>:
 8009af8:	4402      	add	r2, r0
 8009afa:	4603      	mov	r3, r0
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d100      	bne.n	8009b02 <memset+0xa>
 8009b00:	4770      	bx	lr
 8009b02:	f803 1b01 	strb.w	r1, [r3], #1
 8009b06:	e7f9      	b.n	8009afc <memset+0x4>

08009b08 <siprintf>:
 8009b08:	b40e      	push	{r1, r2, r3}
 8009b0a:	b500      	push	{lr}
 8009b0c:	b09c      	sub	sp, #112	; 0x70
 8009b0e:	ab1d      	add	r3, sp, #116	; 0x74
 8009b10:	9002      	str	r0, [sp, #8]
 8009b12:	9006      	str	r0, [sp, #24]
 8009b14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b18:	4809      	ldr	r0, [pc, #36]	; (8009b40 <siprintf+0x38>)
 8009b1a:	9107      	str	r1, [sp, #28]
 8009b1c:	9104      	str	r1, [sp, #16]
 8009b1e:	4909      	ldr	r1, [pc, #36]	; (8009b44 <siprintf+0x3c>)
 8009b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b24:	9105      	str	r1, [sp, #20]
 8009b26:	6800      	ldr	r0, [r0, #0]
 8009b28:	9301      	str	r3, [sp, #4]
 8009b2a:	a902      	add	r1, sp, #8
 8009b2c:	f000 f868 	bl	8009c00 <_svfiprintf_r>
 8009b30:	9b02      	ldr	r3, [sp, #8]
 8009b32:	2200      	movs	r2, #0
 8009b34:	701a      	strb	r2, [r3, #0]
 8009b36:	b01c      	add	sp, #112	; 0x70
 8009b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b3c:	b003      	add	sp, #12
 8009b3e:	4770      	bx	lr
 8009b40:	200000ec 	.word	0x200000ec
 8009b44:	ffff0208 	.word	0xffff0208

08009b48 <__ssputs_r>:
 8009b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b4c:	688e      	ldr	r6, [r1, #8]
 8009b4e:	429e      	cmp	r6, r3
 8009b50:	4682      	mov	sl, r0
 8009b52:	460c      	mov	r4, r1
 8009b54:	4690      	mov	r8, r2
 8009b56:	461f      	mov	r7, r3
 8009b58:	d838      	bhi.n	8009bcc <__ssputs_r+0x84>
 8009b5a:	898a      	ldrh	r2, [r1, #12]
 8009b5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b60:	d032      	beq.n	8009bc8 <__ssputs_r+0x80>
 8009b62:	6825      	ldr	r5, [r4, #0]
 8009b64:	6909      	ldr	r1, [r1, #16]
 8009b66:	eba5 0901 	sub.w	r9, r5, r1
 8009b6a:	6965      	ldr	r5, [r4, #20]
 8009b6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b74:	3301      	adds	r3, #1
 8009b76:	444b      	add	r3, r9
 8009b78:	106d      	asrs	r5, r5, #1
 8009b7a:	429d      	cmp	r5, r3
 8009b7c:	bf38      	it	cc
 8009b7e:	461d      	movcc	r5, r3
 8009b80:	0553      	lsls	r3, r2, #21
 8009b82:	d531      	bpl.n	8009be8 <__ssputs_r+0xa0>
 8009b84:	4629      	mov	r1, r5
 8009b86:	f000 fb47 	bl	800a218 <_malloc_r>
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	b950      	cbnz	r0, 8009ba4 <__ssputs_r+0x5c>
 8009b8e:	230c      	movs	r3, #12
 8009b90:	f8ca 3000 	str.w	r3, [sl]
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b9a:	81a3      	strh	r3, [r4, #12]
 8009b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba4:	6921      	ldr	r1, [r4, #16]
 8009ba6:	464a      	mov	r2, r9
 8009ba8:	f000 fabe 	bl	800a128 <memcpy>
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	6126      	str	r6, [r4, #16]
 8009bba:	6165      	str	r5, [r4, #20]
 8009bbc:	444e      	add	r6, r9
 8009bbe:	eba5 0509 	sub.w	r5, r5, r9
 8009bc2:	6026      	str	r6, [r4, #0]
 8009bc4:	60a5      	str	r5, [r4, #8]
 8009bc6:	463e      	mov	r6, r7
 8009bc8:	42be      	cmp	r6, r7
 8009bca:	d900      	bls.n	8009bce <__ssputs_r+0x86>
 8009bcc:	463e      	mov	r6, r7
 8009bce:	4632      	mov	r2, r6
 8009bd0:	6820      	ldr	r0, [r4, #0]
 8009bd2:	4641      	mov	r1, r8
 8009bd4:	f000 fab6 	bl	800a144 <memmove>
 8009bd8:	68a3      	ldr	r3, [r4, #8]
 8009bda:	6822      	ldr	r2, [r4, #0]
 8009bdc:	1b9b      	subs	r3, r3, r6
 8009bde:	4432      	add	r2, r6
 8009be0:	60a3      	str	r3, [r4, #8]
 8009be2:	6022      	str	r2, [r4, #0]
 8009be4:	2000      	movs	r0, #0
 8009be6:	e7db      	b.n	8009ba0 <__ssputs_r+0x58>
 8009be8:	462a      	mov	r2, r5
 8009bea:	f000 fb6f 	bl	800a2cc <_realloc_r>
 8009bee:	4606      	mov	r6, r0
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d1e1      	bne.n	8009bb8 <__ssputs_r+0x70>
 8009bf4:	6921      	ldr	r1, [r4, #16]
 8009bf6:	4650      	mov	r0, sl
 8009bf8:	f000 fabe 	bl	800a178 <_free_r>
 8009bfc:	e7c7      	b.n	8009b8e <__ssputs_r+0x46>
	...

08009c00 <_svfiprintf_r>:
 8009c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c04:	4698      	mov	r8, r3
 8009c06:	898b      	ldrh	r3, [r1, #12]
 8009c08:	061b      	lsls	r3, r3, #24
 8009c0a:	b09d      	sub	sp, #116	; 0x74
 8009c0c:	4607      	mov	r7, r0
 8009c0e:	460d      	mov	r5, r1
 8009c10:	4614      	mov	r4, r2
 8009c12:	d50e      	bpl.n	8009c32 <_svfiprintf_r+0x32>
 8009c14:	690b      	ldr	r3, [r1, #16]
 8009c16:	b963      	cbnz	r3, 8009c32 <_svfiprintf_r+0x32>
 8009c18:	2140      	movs	r1, #64	; 0x40
 8009c1a:	f000 fafd 	bl	800a218 <_malloc_r>
 8009c1e:	6028      	str	r0, [r5, #0]
 8009c20:	6128      	str	r0, [r5, #16]
 8009c22:	b920      	cbnz	r0, 8009c2e <_svfiprintf_r+0x2e>
 8009c24:	230c      	movs	r3, #12
 8009c26:	603b      	str	r3, [r7, #0]
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	e0d1      	b.n	8009dd2 <_svfiprintf_r+0x1d2>
 8009c2e:	2340      	movs	r3, #64	; 0x40
 8009c30:	616b      	str	r3, [r5, #20]
 8009c32:	2300      	movs	r3, #0
 8009c34:	9309      	str	r3, [sp, #36]	; 0x24
 8009c36:	2320      	movs	r3, #32
 8009c38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c40:	2330      	movs	r3, #48	; 0x30
 8009c42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009dec <_svfiprintf_r+0x1ec>
 8009c46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c4a:	f04f 0901 	mov.w	r9, #1
 8009c4e:	4623      	mov	r3, r4
 8009c50:	469a      	mov	sl, r3
 8009c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c56:	b10a      	cbz	r2, 8009c5c <_svfiprintf_r+0x5c>
 8009c58:	2a25      	cmp	r2, #37	; 0x25
 8009c5a:	d1f9      	bne.n	8009c50 <_svfiprintf_r+0x50>
 8009c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8009c60:	d00b      	beq.n	8009c7a <_svfiprintf_r+0x7a>
 8009c62:	465b      	mov	r3, fp
 8009c64:	4622      	mov	r2, r4
 8009c66:	4629      	mov	r1, r5
 8009c68:	4638      	mov	r0, r7
 8009c6a:	f7ff ff6d 	bl	8009b48 <__ssputs_r>
 8009c6e:	3001      	adds	r0, #1
 8009c70:	f000 80aa 	beq.w	8009dc8 <_svfiprintf_r+0x1c8>
 8009c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c76:	445a      	add	r2, fp
 8009c78:	9209      	str	r2, [sp, #36]	; 0x24
 8009c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 80a2 	beq.w	8009dc8 <_svfiprintf_r+0x1c8>
 8009c84:	2300      	movs	r3, #0
 8009c86:	f04f 32ff 	mov.w	r2, #4294967295
 8009c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c8e:	f10a 0a01 	add.w	sl, sl, #1
 8009c92:	9304      	str	r3, [sp, #16]
 8009c94:	9307      	str	r3, [sp, #28]
 8009c96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c9a:	931a      	str	r3, [sp, #104]	; 0x68
 8009c9c:	4654      	mov	r4, sl
 8009c9e:	2205      	movs	r2, #5
 8009ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ca4:	4851      	ldr	r0, [pc, #324]	; (8009dec <_svfiprintf_r+0x1ec>)
 8009ca6:	f7f6 facb 	bl	8000240 <memchr>
 8009caa:	9a04      	ldr	r2, [sp, #16]
 8009cac:	b9d8      	cbnz	r0, 8009ce6 <_svfiprintf_r+0xe6>
 8009cae:	06d0      	lsls	r0, r2, #27
 8009cb0:	bf44      	itt	mi
 8009cb2:	2320      	movmi	r3, #32
 8009cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cb8:	0711      	lsls	r1, r2, #28
 8009cba:	bf44      	itt	mi
 8009cbc:	232b      	movmi	r3, #43	; 0x2b
 8009cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8009cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8009cc8:	d015      	beq.n	8009cf6 <_svfiprintf_r+0xf6>
 8009cca:	9a07      	ldr	r2, [sp, #28]
 8009ccc:	4654      	mov	r4, sl
 8009cce:	2000      	movs	r0, #0
 8009cd0:	f04f 0c0a 	mov.w	ip, #10
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cda:	3b30      	subs	r3, #48	; 0x30
 8009cdc:	2b09      	cmp	r3, #9
 8009cde:	d94e      	bls.n	8009d7e <_svfiprintf_r+0x17e>
 8009ce0:	b1b0      	cbz	r0, 8009d10 <_svfiprintf_r+0x110>
 8009ce2:	9207      	str	r2, [sp, #28]
 8009ce4:	e014      	b.n	8009d10 <_svfiprintf_r+0x110>
 8009ce6:	eba0 0308 	sub.w	r3, r0, r8
 8009cea:	fa09 f303 	lsl.w	r3, r9, r3
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	9304      	str	r3, [sp, #16]
 8009cf2:	46a2      	mov	sl, r4
 8009cf4:	e7d2      	b.n	8009c9c <_svfiprintf_r+0x9c>
 8009cf6:	9b03      	ldr	r3, [sp, #12]
 8009cf8:	1d19      	adds	r1, r3, #4
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	9103      	str	r1, [sp, #12]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	bfbb      	ittet	lt
 8009d02:	425b      	neglt	r3, r3
 8009d04:	f042 0202 	orrlt.w	r2, r2, #2
 8009d08:	9307      	strge	r3, [sp, #28]
 8009d0a:	9307      	strlt	r3, [sp, #28]
 8009d0c:	bfb8      	it	lt
 8009d0e:	9204      	strlt	r2, [sp, #16]
 8009d10:	7823      	ldrb	r3, [r4, #0]
 8009d12:	2b2e      	cmp	r3, #46	; 0x2e
 8009d14:	d10c      	bne.n	8009d30 <_svfiprintf_r+0x130>
 8009d16:	7863      	ldrb	r3, [r4, #1]
 8009d18:	2b2a      	cmp	r3, #42	; 0x2a
 8009d1a:	d135      	bne.n	8009d88 <_svfiprintf_r+0x188>
 8009d1c:	9b03      	ldr	r3, [sp, #12]
 8009d1e:	1d1a      	adds	r2, r3, #4
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	9203      	str	r2, [sp, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	bfb8      	it	lt
 8009d28:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d2c:	3402      	adds	r4, #2
 8009d2e:	9305      	str	r3, [sp, #20]
 8009d30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009dfc <_svfiprintf_r+0x1fc>
 8009d34:	7821      	ldrb	r1, [r4, #0]
 8009d36:	2203      	movs	r2, #3
 8009d38:	4650      	mov	r0, sl
 8009d3a:	f7f6 fa81 	bl	8000240 <memchr>
 8009d3e:	b140      	cbz	r0, 8009d52 <_svfiprintf_r+0x152>
 8009d40:	2340      	movs	r3, #64	; 0x40
 8009d42:	eba0 000a 	sub.w	r0, r0, sl
 8009d46:	fa03 f000 	lsl.w	r0, r3, r0
 8009d4a:	9b04      	ldr	r3, [sp, #16]
 8009d4c:	4303      	orrs	r3, r0
 8009d4e:	3401      	adds	r4, #1
 8009d50:	9304      	str	r3, [sp, #16]
 8009d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d56:	4826      	ldr	r0, [pc, #152]	; (8009df0 <_svfiprintf_r+0x1f0>)
 8009d58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d5c:	2206      	movs	r2, #6
 8009d5e:	f7f6 fa6f 	bl	8000240 <memchr>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d038      	beq.n	8009dd8 <_svfiprintf_r+0x1d8>
 8009d66:	4b23      	ldr	r3, [pc, #140]	; (8009df4 <_svfiprintf_r+0x1f4>)
 8009d68:	bb1b      	cbnz	r3, 8009db2 <_svfiprintf_r+0x1b2>
 8009d6a:	9b03      	ldr	r3, [sp, #12]
 8009d6c:	3307      	adds	r3, #7
 8009d6e:	f023 0307 	bic.w	r3, r3, #7
 8009d72:	3308      	adds	r3, #8
 8009d74:	9303      	str	r3, [sp, #12]
 8009d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d78:	4433      	add	r3, r6
 8009d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d7c:	e767      	b.n	8009c4e <_svfiprintf_r+0x4e>
 8009d7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d82:	460c      	mov	r4, r1
 8009d84:	2001      	movs	r0, #1
 8009d86:	e7a5      	b.n	8009cd4 <_svfiprintf_r+0xd4>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	3401      	adds	r4, #1
 8009d8c:	9305      	str	r3, [sp, #20]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	f04f 0c0a 	mov.w	ip, #10
 8009d94:	4620      	mov	r0, r4
 8009d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d9a:	3a30      	subs	r2, #48	; 0x30
 8009d9c:	2a09      	cmp	r2, #9
 8009d9e:	d903      	bls.n	8009da8 <_svfiprintf_r+0x1a8>
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d0c5      	beq.n	8009d30 <_svfiprintf_r+0x130>
 8009da4:	9105      	str	r1, [sp, #20]
 8009da6:	e7c3      	b.n	8009d30 <_svfiprintf_r+0x130>
 8009da8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dac:	4604      	mov	r4, r0
 8009dae:	2301      	movs	r3, #1
 8009db0:	e7f0      	b.n	8009d94 <_svfiprintf_r+0x194>
 8009db2:	ab03      	add	r3, sp, #12
 8009db4:	9300      	str	r3, [sp, #0]
 8009db6:	462a      	mov	r2, r5
 8009db8:	4b0f      	ldr	r3, [pc, #60]	; (8009df8 <_svfiprintf_r+0x1f8>)
 8009dba:	a904      	add	r1, sp, #16
 8009dbc:	4638      	mov	r0, r7
 8009dbe:	f3af 8000 	nop.w
 8009dc2:	1c42      	adds	r2, r0, #1
 8009dc4:	4606      	mov	r6, r0
 8009dc6:	d1d6      	bne.n	8009d76 <_svfiprintf_r+0x176>
 8009dc8:	89ab      	ldrh	r3, [r5, #12]
 8009dca:	065b      	lsls	r3, r3, #25
 8009dcc:	f53f af2c 	bmi.w	8009c28 <_svfiprintf_r+0x28>
 8009dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dd2:	b01d      	add	sp, #116	; 0x74
 8009dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd8:	ab03      	add	r3, sp, #12
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	462a      	mov	r2, r5
 8009dde:	4b06      	ldr	r3, [pc, #24]	; (8009df8 <_svfiprintf_r+0x1f8>)
 8009de0:	a904      	add	r1, sp, #16
 8009de2:	4638      	mov	r0, r7
 8009de4:	f000 f87a 	bl	8009edc <_printf_i>
 8009de8:	e7eb      	b.n	8009dc2 <_svfiprintf_r+0x1c2>
 8009dea:	bf00      	nop
 8009dec:	0800a3d8 	.word	0x0800a3d8
 8009df0:	0800a3e2 	.word	0x0800a3e2
 8009df4:	00000000 	.word	0x00000000
 8009df8:	08009b49 	.word	0x08009b49
 8009dfc:	0800a3de 	.word	0x0800a3de

08009e00 <_printf_common>:
 8009e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e04:	4616      	mov	r6, r2
 8009e06:	4699      	mov	r9, r3
 8009e08:	688a      	ldr	r2, [r1, #8]
 8009e0a:	690b      	ldr	r3, [r1, #16]
 8009e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e10:	4293      	cmp	r3, r2
 8009e12:	bfb8      	it	lt
 8009e14:	4613      	movlt	r3, r2
 8009e16:	6033      	str	r3, [r6, #0]
 8009e18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e1c:	4607      	mov	r7, r0
 8009e1e:	460c      	mov	r4, r1
 8009e20:	b10a      	cbz	r2, 8009e26 <_printf_common+0x26>
 8009e22:	3301      	adds	r3, #1
 8009e24:	6033      	str	r3, [r6, #0]
 8009e26:	6823      	ldr	r3, [r4, #0]
 8009e28:	0699      	lsls	r1, r3, #26
 8009e2a:	bf42      	ittt	mi
 8009e2c:	6833      	ldrmi	r3, [r6, #0]
 8009e2e:	3302      	addmi	r3, #2
 8009e30:	6033      	strmi	r3, [r6, #0]
 8009e32:	6825      	ldr	r5, [r4, #0]
 8009e34:	f015 0506 	ands.w	r5, r5, #6
 8009e38:	d106      	bne.n	8009e48 <_printf_common+0x48>
 8009e3a:	f104 0a19 	add.w	sl, r4, #25
 8009e3e:	68e3      	ldr	r3, [r4, #12]
 8009e40:	6832      	ldr	r2, [r6, #0]
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	42ab      	cmp	r3, r5
 8009e46:	dc26      	bgt.n	8009e96 <_printf_common+0x96>
 8009e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e4c:	1e13      	subs	r3, r2, #0
 8009e4e:	6822      	ldr	r2, [r4, #0]
 8009e50:	bf18      	it	ne
 8009e52:	2301      	movne	r3, #1
 8009e54:	0692      	lsls	r2, r2, #26
 8009e56:	d42b      	bmi.n	8009eb0 <_printf_common+0xb0>
 8009e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e5c:	4649      	mov	r1, r9
 8009e5e:	4638      	mov	r0, r7
 8009e60:	47c0      	blx	r8
 8009e62:	3001      	adds	r0, #1
 8009e64:	d01e      	beq.n	8009ea4 <_printf_common+0xa4>
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	68e5      	ldr	r5, [r4, #12]
 8009e6a:	6832      	ldr	r2, [r6, #0]
 8009e6c:	f003 0306 	and.w	r3, r3, #6
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	bf08      	it	eq
 8009e74:	1aad      	subeq	r5, r5, r2
 8009e76:	68a3      	ldr	r3, [r4, #8]
 8009e78:	6922      	ldr	r2, [r4, #16]
 8009e7a:	bf0c      	ite	eq
 8009e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e80:	2500      	movne	r5, #0
 8009e82:	4293      	cmp	r3, r2
 8009e84:	bfc4      	itt	gt
 8009e86:	1a9b      	subgt	r3, r3, r2
 8009e88:	18ed      	addgt	r5, r5, r3
 8009e8a:	2600      	movs	r6, #0
 8009e8c:	341a      	adds	r4, #26
 8009e8e:	42b5      	cmp	r5, r6
 8009e90:	d11a      	bne.n	8009ec8 <_printf_common+0xc8>
 8009e92:	2000      	movs	r0, #0
 8009e94:	e008      	b.n	8009ea8 <_printf_common+0xa8>
 8009e96:	2301      	movs	r3, #1
 8009e98:	4652      	mov	r2, sl
 8009e9a:	4649      	mov	r1, r9
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	47c0      	blx	r8
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	d103      	bne.n	8009eac <_printf_common+0xac>
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eac:	3501      	adds	r5, #1
 8009eae:	e7c6      	b.n	8009e3e <_printf_common+0x3e>
 8009eb0:	18e1      	adds	r1, r4, r3
 8009eb2:	1c5a      	adds	r2, r3, #1
 8009eb4:	2030      	movs	r0, #48	; 0x30
 8009eb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009eba:	4422      	add	r2, r4
 8009ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ec4:	3302      	adds	r3, #2
 8009ec6:	e7c7      	b.n	8009e58 <_printf_common+0x58>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	4622      	mov	r2, r4
 8009ecc:	4649      	mov	r1, r9
 8009ece:	4638      	mov	r0, r7
 8009ed0:	47c0      	blx	r8
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	d0e6      	beq.n	8009ea4 <_printf_common+0xa4>
 8009ed6:	3601      	adds	r6, #1
 8009ed8:	e7d9      	b.n	8009e8e <_printf_common+0x8e>
	...

08009edc <_printf_i>:
 8009edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	4691      	mov	r9, r2
 8009ee4:	7e27      	ldrb	r7, [r4, #24]
 8009ee6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ee8:	2f78      	cmp	r7, #120	; 0x78
 8009eea:	4680      	mov	r8, r0
 8009eec:	469a      	mov	sl, r3
 8009eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ef2:	d807      	bhi.n	8009f04 <_printf_i+0x28>
 8009ef4:	2f62      	cmp	r7, #98	; 0x62
 8009ef6:	d80a      	bhi.n	8009f0e <_printf_i+0x32>
 8009ef8:	2f00      	cmp	r7, #0
 8009efa:	f000 80d8 	beq.w	800a0ae <_printf_i+0x1d2>
 8009efe:	2f58      	cmp	r7, #88	; 0x58
 8009f00:	f000 80a3 	beq.w	800a04a <_printf_i+0x16e>
 8009f04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f0c:	e03a      	b.n	8009f84 <_printf_i+0xa8>
 8009f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f12:	2b15      	cmp	r3, #21
 8009f14:	d8f6      	bhi.n	8009f04 <_printf_i+0x28>
 8009f16:	a001      	add	r0, pc, #4	; (adr r0, 8009f1c <_printf_i+0x40>)
 8009f18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f1c:	08009f75 	.word	0x08009f75
 8009f20:	08009f89 	.word	0x08009f89
 8009f24:	08009f05 	.word	0x08009f05
 8009f28:	08009f05 	.word	0x08009f05
 8009f2c:	08009f05 	.word	0x08009f05
 8009f30:	08009f05 	.word	0x08009f05
 8009f34:	08009f89 	.word	0x08009f89
 8009f38:	08009f05 	.word	0x08009f05
 8009f3c:	08009f05 	.word	0x08009f05
 8009f40:	08009f05 	.word	0x08009f05
 8009f44:	08009f05 	.word	0x08009f05
 8009f48:	0800a095 	.word	0x0800a095
 8009f4c:	08009fb9 	.word	0x08009fb9
 8009f50:	0800a077 	.word	0x0800a077
 8009f54:	08009f05 	.word	0x08009f05
 8009f58:	08009f05 	.word	0x08009f05
 8009f5c:	0800a0b7 	.word	0x0800a0b7
 8009f60:	08009f05 	.word	0x08009f05
 8009f64:	08009fb9 	.word	0x08009fb9
 8009f68:	08009f05 	.word	0x08009f05
 8009f6c:	08009f05 	.word	0x08009f05
 8009f70:	0800a07f 	.word	0x0800a07f
 8009f74:	680b      	ldr	r3, [r1, #0]
 8009f76:	1d1a      	adds	r2, r3, #4
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	600a      	str	r2, [r1, #0]
 8009f7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f84:	2301      	movs	r3, #1
 8009f86:	e0a3      	b.n	800a0d0 <_printf_i+0x1f4>
 8009f88:	6825      	ldr	r5, [r4, #0]
 8009f8a:	6808      	ldr	r0, [r1, #0]
 8009f8c:	062e      	lsls	r6, r5, #24
 8009f8e:	f100 0304 	add.w	r3, r0, #4
 8009f92:	d50a      	bpl.n	8009faa <_printf_i+0xce>
 8009f94:	6805      	ldr	r5, [r0, #0]
 8009f96:	600b      	str	r3, [r1, #0]
 8009f98:	2d00      	cmp	r5, #0
 8009f9a:	da03      	bge.n	8009fa4 <_printf_i+0xc8>
 8009f9c:	232d      	movs	r3, #45	; 0x2d
 8009f9e:	426d      	negs	r5, r5
 8009fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fa4:	485e      	ldr	r0, [pc, #376]	; (800a120 <_printf_i+0x244>)
 8009fa6:	230a      	movs	r3, #10
 8009fa8:	e019      	b.n	8009fde <_printf_i+0x102>
 8009faa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009fae:	6805      	ldr	r5, [r0, #0]
 8009fb0:	600b      	str	r3, [r1, #0]
 8009fb2:	bf18      	it	ne
 8009fb4:	b22d      	sxthne	r5, r5
 8009fb6:	e7ef      	b.n	8009f98 <_printf_i+0xbc>
 8009fb8:	680b      	ldr	r3, [r1, #0]
 8009fba:	6825      	ldr	r5, [r4, #0]
 8009fbc:	1d18      	adds	r0, r3, #4
 8009fbe:	6008      	str	r0, [r1, #0]
 8009fc0:	0628      	lsls	r0, r5, #24
 8009fc2:	d501      	bpl.n	8009fc8 <_printf_i+0xec>
 8009fc4:	681d      	ldr	r5, [r3, #0]
 8009fc6:	e002      	b.n	8009fce <_printf_i+0xf2>
 8009fc8:	0669      	lsls	r1, r5, #25
 8009fca:	d5fb      	bpl.n	8009fc4 <_printf_i+0xe8>
 8009fcc:	881d      	ldrh	r5, [r3, #0]
 8009fce:	4854      	ldr	r0, [pc, #336]	; (800a120 <_printf_i+0x244>)
 8009fd0:	2f6f      	cmp	r7, #111	; 0x6f
 8009fd2:	bf0c      	ite	eq
 8009fd4:	2308      	moveq	r3, #8
 8009fd6:	230a      	movne	r3, #10
 8009fd8:	2100      	movs	r1, #0
 8009fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fde:	6866      	ldr	r6, [r4, #4]
 8009fe0:	60a6      	str	r6, [r4, #8]
 8009fe2:	2e00      	cmp	r6, #0
 8009fe4:	bfa2      	ittt	ge
 8009fe6:	6821      	ldrge	r1, [r4, #0]
 8009fe8:	f021 0104 	bicge.w	r1, r1, #4
 8009fec:	6021      	strge	r1, [r4, #0]
 8009fee:	b90d      	cbnz	r5, 8009ff4 <_printf_i+0x118>
 8009ff0:	2e00      	cmp	r6, #0
 8009ff2:	d04d      	beq.n	800a090 <_printf_i+0x1b4>
 8009ff4:	4616      	mov	r6, r2
 8009ff6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ffa:	fb03 5711 	mls	r7, r3, r1, r5
 8009ffe:	5dc7      	ldrb	r7, [r0, r7]
 800a000:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a004:	462f      	mov	r7, r5
 800a006:	42bb      	cmp	r3, r7
 800a008:	460d      	mov	r5, r1
 800a00a:	d9f4      	bls.n	8009ff6 <_printf_i+0x11a>
 800a00c:	2b08      	cmp	r3, #8
 800a00e:	d10b      	bne.n	800a028 <_printf_i+0x14c>
 800a010:	6823      	ldr	r3, [r4, #0]
 800a012:	07df      	lsls	r7, r3, #31
 800a014:	d508      	bpl.n	800a028 <_printf_i+0x14c>
 800a016:	6923      	ldr	r3, [r4, #16]
 800a018:	6861      	ldr	r1, [r4, #4]
 800a01a:	4299      	cmp	r1, r3
 800a01c:	bfde      	ittt	le
 800a01e:	2330      	movle	r3, #48	; 0x30
 800a020:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a024:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a028:	1b92      	subs	r2, r2, r6
 800a02a:	6122      	str	r2, [r4, #16]
 800a02c:	f8cd a000 	str.w	sl, [sp]
 800a030:	464b      	mov	r3, r9
 800a032:	aa03      	add	r2, sp, #12
 800a034:	4621      	mov	r1, r4
 800a036:	4640      	mov	r0, r8
 800a038:	f7ff fee2 	bl	8009e00 <_printf_common>
 800a03c:	3001      	adds	r0, #1
 800a03e:	d14c      	bne.n	800a0da <_printf_i+0x1fe>
 800a040:	f04f 30ff 	mov.w	r0, #4294967295
 800a044:	b004      	add	sp, #16
 800a046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a04a:	4835      	ldr	r0, [pc, #212]	; (800a120 <_printf_i+0x244>)
 800a04c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	680e      	ldr	r6, [r1, #0]
 800a054:	061f      	lsls	r7, r3, #24
 800a056:	f856 5b04 	ldr.w	r5, [r6], #4
 800a05a:	600e      	str	r6, [r1, #0]
 800a05c:	d514      	bpl.n	800a088 <_printf_i+0x1ac>
 800a05e:	07d9      	lsls	r1, r3, #31
 800a060:	bf44      	itt	mi
 800a062:	f043 0320 	orrmi.w	r3, r3, #32
 800a066:	6023      	strmi	r3, [r4, #0]
 800a068:	b91d      	cbnz	r5, 800a072 <_printf_i+0x196>
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	f023 0320 	bic.w	r3, r3, #32
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	2310      	movs	r3, #16
 800a074:	e7b0      	b.n	8009fd8 <_printf_i+0xfc>
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	f043 0320 	orr.w	r3, r3, #32
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	2378      	movs	r3, #120	; 0x78
 800a080:	4828      	ldr	r0, [pc, #160]	; (800a124 <_printf_i+0x248>)
 800a082:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a086:	e7e3      	b.n	800a050 <_printf_i+0x174>
 800a088:	065e      	lsls	r6, r3, #25
 800a08a:	bf48      	it	mi
 800a08c:	b2ad      	uxthmi	r5, r5
 800a08e:	e7e6      	b.n	800a05e <_printf_i+0x182>
 800a090:	4616      	mov	r6, r2
 800a092:	e7bb      	b.n	800a00c <_printf_i+0x130>
 800a094:	680b      	ldr	r3, [r1, #0]
 800a096:	6826      	ldr	r6, [r4, #0]
 800a098:	6960      	ldr	r0, [r4, #20]
 800a09a:	1d1d      	adds	r5, r3, #4
 800a09c:	600d      	str	r5, [r1, #0]
 800a09e:	0635      	lsls	r5, r6, #24
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	d501      	bpl.n	800a0a8 <_printf_i+0x1cc>
 800a0a4:	6018      	str	r0, [r3, #0]
 800a0a6:	e002      	b.n	800a0ae <_printf_i+0x1d2>
 800a0a8:	0671      	lsls	r1, r6, #25
 800a0aa:	d5fb      	bpl.n	800a0a4 <_printf_i+0x1c8>
 800a0ac:	8018      	strh	r0, [r3, #0]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	6123      	str	r3, [r4, #16]
 800a0b2:	4616      	mov	r6, r2
 800a0b4:	e7ba      	b.n	800a02c <_printf_i+0x150>
 800a0b6:	680b      	ldr	r3, [r1, #0]
 800a0b8:	1d1a      	adds	r2, r3, #4
 800a0ba:	600a      	str	r2, [r1, #0]
 800a0bc:	681e      	ldr	r6, [r3, #0]
 800a0be:	6862      	ldr	r2, [r4, #4]
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	f7f6 f8bc 	bl	8000240 <memchr>
 800a0c8:	b108      	cbz	r0, 800a0ce <_printf_i+0x1f2>
 800a0ca:	1b80      	subs	r0, r0, r6
 800a0cc:	6060      	str	r0, [r4, #4]
 800a0ce:	6863      	ldr	r3, [r4, #4]
 800a0d0:	6123      	str	r3, [r4, #16]
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0d8:	e7a8      	b.n	800a02c <_printf_i+0x150>
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	4632      	mov	r2, r6
 800a0de:	4649      	mov	r1, r9
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	47d0      	blx	sl
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d0ab      	beq.n	800a040 <_printf_i+0x164>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	079b      	lsls	r3, r3, #30
 800a0ec:	d413      	bmi.n	800a116 <_printf_i+0x23a>
 800a0ee:	68e0      	ldr	r0, [r4, #12]
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	4298      	cmp	r0, r3
 800a0f4:	bfb8      	it	lt
 800a0f6:	4618      	movlt	r0, r3
 800a0f8:	e7a4      	b.n	800a044 <_printf_i+0x168>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	4632      	mov	r2, r6
 800a0fe:	4649      	mov	r1, r9
 800a100:	4640      	mov	r0, r8
 800a102:	47d0      	blx	sl
 800a104:	3001      	adds	r0, #1
 800a106:	d09b      	beq.n	800a040 <_printf_i+0x164>
 800a108:	3501      	adds	r5, #1
 800a10a:	68e3      	ldr	r3, [r4, #12]
 800a10c:	9903      	ldr	r1, [sp, #12]
 800a10e:	1a5b      	subs	r3, r3, r1
 800a110:	42ab      	cmp	r3, r5
 800a112:	dcf2      	bgt.n	800a0fa <_printf_i+0x21e>
 800a114:	e7eb      	b.n	800a0ee <_printf_i+0x212>
 800a116:	2500      	movs	r5, #0
 800a118:	f104 0619 	add.w	r6, r4, #25
 800a11c:	e7f5      	b.n	800a10a <_printf_i+0x22e>
 800a11e:	bf00      	nop
 800a120:	0800a3e9 	.word	0x0800a3e9
 800a124:	0800a3fa 	.word	0x0800a3fa

0800a128 <memcpy>:
 800a128:	440a      	add	r2, r1
 800a12a:	4291      	cmp	r1, r2
 800a12c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a130:	d100      	bne.n	800a134 <memcpy+0xc>
 800a132:	4770      	bx	lr
 800a134:	b510      	push	{r4, lr}
 800a136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a13a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a13e:	4291      	cmp	r1, r2
 800a140:	d1f9      	bne.n	800a136 <memcpy+0xe>
 800a142:	bd10      	pop	{r4, pc}

0800a144 <memmove>:
 800a144:	4288      	cmp	r0, r1
 800a146:	b510      	push	{r4, lr}
 800a148:	eb01 0402 	add.w	r4, r1, r2
 800a14c:	d902      	bls.n	800a154 <memmove+0x10>
 800a14e:	4284      	cmp	r4, r0
 800a150:	4623      	mov	r3, r4
 800a152:	d807      	bhi.n	800a164 <memmove+0x20>
 800a154:	1e43      	subs	r3, r0, #1
 800a156:	42a1      	cmp	r1, r4
 800a158:	d008      	beq.n	800a16c <memmove+0x28>
 800a15a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a15e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a162:	e7f8      	b.n	800a156 <memmove+0x12>
 800a164:	4402      	add	r2, r0
 800a166:	4601      	mov	r1, r0
 800a168:	428a      	cmp	r2, r1
 800a16a:	d100      	bne.n	800a16e <memmove+0x2a>
 800a16c:	bd10      	pop	{r4, pc}
 800a16e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a176:	e7f7      	b.n	800a168 <memmove+0x24>

0800a178 <_free_r>:
 800a178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a17a:	2900      	cmp	r1, #0
 800a17c:	d048      	beq.n	800a210 <_free_r+0x98>
 800a17e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a182:	9001      	str	r0, [sp, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	f1a1 0404 	sub.w	r4, r1, #4
 800a18a:	bfb8      	it	lt
 800a18c:	18e4      	addlt	r4, r4, r3
 800a18e:	f000 f8d3 	bl	800a338 <__malloc_lock>
 800a192:	4a20      	ldr	r2, [pc, #128]	; (800a214 <_free_r+0x9c>)
 800a194:	9801      	ldr	r0, [sp, #4]
 800a196:	6813      	ldr	r3, [r2, #0]
 800a198:	4615      	mov	r5, r2
 800a19a:	b933      	cbnz	r3, 800a1aa <_free_r+0x32>
 800a19c:	6063      	str	r3, [r4, #4]
 800a19e:	6014      	str	r4, [r2, #0]
 800a1a0:	b003      	add	sp, #12
 800a1a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1a6:	f000 b8cd 	b.w	800a344 <__malloc_unlock>
 800a1aa:	42a3      	cmp	r3, r4
 800a1ac:	d90b      	bls.n	800a1c6 <_free_r+0x4e>
 800a1ae:	6821      	ldr	r1, [r4, #0]
 800a1b0:	1862      	adds	r2, r4, r1
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	bf04      	itt	eq
 800a1b6:	681a      	ldreq	r2, [r3, #0]
 800a1b8:	685b      	ldreq	r3, [r3, #4]
 800a1ba:	6063      	str	r3, [r4, #4]
 800a1bc:	bf04      	itt	eq
 800a1be:	1852      	addeq	r2, r2, r1
 800a1c0:	6022      	streq	r2, [r4, #0]
 800a1c2:	602c      	str	r4, [r5, #0]
 800a1c4:	e7ec      	b.n	800a1a0 <_free_r+0x28>
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	b10b      	cbz	r3, 800a1d0 <_free_r+0x58>
 800a1cc:	42a3      	cmp	r3, r4
 800a1ce:	d9fa      	bls.n	800a1c6 <_free_r+0x4e>
 800a1d0:	6811      	ldr	r1, [r2, #0]
 800a1d2:	1855      	adds	r5, r2, r1
 800a1d4:	42a5      	cmp	r5, r4
 800a1d6:	d10b      	bne.n	800a1f0 <_free_r+0x78>
 800a1d8:	6824      	ldr	r4, [r4, #0]
 800a1da:	4421      	add	r1, r4
 800a1dc:	1854      	adds	r4, r2, r1
 800a1de:	42a3      	cmp	r3, r4
 800a1e0:	6011      	str	r1, [r2, #0]
 800a1e2:	d1dd      	bne.n	800a1a0 <_free_r+0x28>
 800a1e4:	681c      	ldr	r4, [r3, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	6053      	str	r3, [r2, #4]
 800a1ea:	4421      	add	r1, r4
 800a1ec:	6011      	str	r1, [r2, #0]
 800a1ee:	e7d7      	b.n	800a1a0 <_free_r+0x28>
 800a1f0:	d902      	bls.n	800a1f8 <_free_r+0x80>
 800a1f2:	230c      	movs	r3, #12
 800a1f4:	6003      	str	r3, [r0, #0]
 800a1f6:	e7d3      	b.n	800a1a0 <_free_r+0x28>
 800a1f8:	6825      	ldr	r5, [r4, #0]
 800a1fa:	1961      	adds	r1, r4, r5
 800a1fc:	428b      	cmp	r3, r1
 800a1fe:	bf04      	itt	eq
 800a200:	6819      	ldreq	r1, [r3, #0]
 800a202:	685b      	ldreq	r3, [r3, #4]
 800a204:	6063      	str	r3, [r4, #4]
 800a206:	bf04      	itt	eq
 800a208:	1949      	addeq	r1, r1, r5
 800a20a:	6021      	streq	r1, [r4, #0]
 800a20c:	6054      	str	r4, [r2, #4]
 800a20e:	e7c7      	b.n	800a1a0 <_free_r+0x28>
 800a210:	b003      	add	sp, #12
 800a212:	bd30      	pop	{r4, r5, pc}
 800a214:	20000248 	.word	0x20000248

0800a218 <_malloc_r>:
 800a218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21a:	1ccd      	adds	r5, r1, #3
 800a21c:	f025 0503 	bic.w	r5, r5, #3
 800a220:	3508      	adds	r5, #8
 800a222:	2d0c      	cmp	r5, #12
 800a224:	bf38      	it	cc
 800a226:	250c      	movcc	r5, #12
 800a228:	2d00      	cmp	r5, #0
 800a22a:	4606      	mov	r6, r0
 800a22c:	db01      	blt.n	800a232 <_malloc_r+0x1a>
 800a22e:	42a9      	cmp	r1, r5
 800a230:	d903      	bls.n	800a23a <_malloc_r+0x22>
 800a232:	230c      	movs	r3, #12
 800a234:	6033      	str	r3, [r6, #0]
 800a236:	2000      	movs	r0, #0
 800a238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a23a:	f000 f87d 	bl	800a338 <__malloc_lock>
 800a23e:	4921      	ldr	r1, [pc, #132]	; (800a2c4 <_malloc_r+0xac>)
 800a240:	680a      	ldr	r2, [r1, #0]
 800a242:	4614      	mov	r4, r2
 800a244:	b99c      	cbnz	r4, 800a26e <_malloc_r+0x56>
 800a246:	4f20      	ldr	r7, [pc, #128]	; (800a2c8 <_malloc_r+0xb0>)
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	b923      	cbnz	r3, 800a256 <_malloc_r+0x3e>
 800a24c:	4621      	mov	r1, r4
 800a24e:	4630      	mov	r0, r6
 800a250:	f000 f862 	bl	800a318 <_sbrk_r>
 800a254:	6038      	str	r0, [r7, #0]
 800a256:	4629      	mov	r1, r5
 800a258:	4630      	mov	r0, r6
 800a25a:	f000 f85d 	bl	800a318 <_sbrk_r>
 800a25e:	1c43      	adds	r3, r0, #1
 800a260:	d123      	bne.n	800a2aa <_malloc_r+0x92>
 800a262:	230c      	movs	r3, #12
 800a264:	6033      	str	r3, [r6, #0]
 800a266:	4630      	mov	r0, r6
 800a268:	f000 f86c 	bl	800a344 <__malloc_unlock>
 800a26c:	e7e3      	b.n	800a236 <_malloc_r+0x1e>
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	1b5b      	subs	r3, r3, r5
 800a272:	d417      	bmi.n	800a2a4 <_malloc_r+0x8c>
 800a274:	2b0b      	cmp	r3, #11
 800a276:	d903      	bls.n	800a280 <_malloc_r+0x68>
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	441c      	add	r4, r3
 800a27c:	6025      	str	r5, [r4, #0]
 800a27e:	e004      	b.n	800a28a <_malloc_r+0x72>
 800a280:	6863      	ldr	r3, [r4, #4]
 800a282:	42a2      	cmp	r2, r4
 800a284:	bf0c      	ite	eq
 800a286:	600b      	streq	r3, [r1, #0]
 800a288:	6053      	strne	r3, [r2, #4]
 800a28a:	4630      	mov	r0, r6
 800a28c:	f000 f85a 	bl	800a344 <__malloc_unlock>
 800a290:	f104 000b 	add.w	r0, r4, #11
 800a294:	1d23      	adds	r3, r4, #4
 800a296:	f020 0007 	bic.w	r0, r0, #7
 800a29a:	1ac2      	subs	r2, r0, r3
 800a29c:	d0cc      	beq.n	800a238 <_malloc_r+0x20>
 800a29e:	1a1b      	subs	r3, r3, r0
 800a2a0:	50a3      	str	r3, [r4, r2]
 800a2a2:	e7c9      	b.n	800a238 <_malloc_r+0x20>
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	6864      	ldr	r4, [r4, #4]
 800a2a8:	e7cc      	b.n	800a244 <_malloc_r+0x2c>
 800a2aa:	1cc4      	adds	r4, r0, #3
 800a2ac:	f024 0403 	bic.w	r4, r4, #3
 800a2b0:	42a0      	cmp	r0, r4
 800a2b2:	d0e3      	beq.n	800a27c <_malloc_r+0x64>
 800a2b4:	1a21      	subs	r1, r4, r0
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f000 f82e 	bl	800a318 <_sbrk_r>
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d1dd      	bne.n	800a27c <_malloc_r+0x64>
 800a2c0:	e7cf      	b.n	800a262 <_malloc_r+0x4a>
 800a2c2:	bf00      	nop
 800a2c4:	20000248 	.word	0x20000248
 800a2c8:	2000024c 	.word	0x2000024c

0800a2cc <_realloc_r>:
 800a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ce:	4607      	mov	r7, r0
 800a2d0:	4614      	mov	r4, r2
 800a2d2:	460e      	mov	r6, r1
 800a2d4:	b921      	cbnz	r1, 800a2e0 <_realloc_r+0x14>
 800a2d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2da:	4611      	mov	r1, r2
 800a2dc:	f7ff bf9c 	b.w	800a218 <_malloc_r>
 800a2e0:	b922      	cbnz	r2, 800a2ec <_realloc_r+0x20>
 800a2e2:	f7ff ff49 	bl	800a178 <_free_r>
 800a2e6:	4625      	mov	r5, r4
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ec:	f000 f830 	bl	800a350 <_malloc_usable_size_r>
 800a2f0:	42a0      	cmp	r0, r4
 800a2f2:	d20f      	bcs.n	800a314 <_realloc_r+0x48>
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	4638      	mov	r0, r7
 800a2f8:	f7ff ff8e 	bl	800a218 <_malloc_r>
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d0f2      	beq.n	800a2e8 <_realloc_r+0x1c>
 800a302:	4631      	mov	r1, r6
 800a304:	4622      	mov	r2, r4
 800a306:	f7ff ff0f 	bl	800a128 <memcpy>
 800a30a:	4631      	mov	r1, r6
 800a30c:	4638      	mov	r0, r7
 800a30e:	f7ff ff33 	bl	800a178 <_free_r>
 800a312:	e7e9      	b.n	800a2e8 <_realloc_r+0x1c>
 800a314:	4635      	mov	r5, r6
 800a316:	e7e7      	b.n	800a2e8 <_realloc_r+0x1c>

0800a318 <_sbrk_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4d06      	ldr	r5, [pc, #24]	; (800a334 <_sbrk_r+0x1c>)
 800a31c:	2300      	movs	r3, #0
 800a31e:	4604      	mov	r4, r0
 800a320:	4608      	mov	r0, r1
 800a322:	602b      	str	r3, [r5, #0]
 800a324:	f7f6 fddc 	bl	8000ee0 <_sbrk>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d102      	bne.n	800a332 <_sbrk_r+0x1a>
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	b103      	cbz	r3, 800a332 <_sbrk_r+0x1a>
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	2000037c 	.word	0x2000037c

0800a338 <__malloc_lock>:
 800a338:	4801      	ldr	r0, [pc, #4]	; (800a340 <__malloc_lock+0x8>)
 800a33a:	f000 b811 	b.w	800a360 <__retarget_lock_acquire_recursive>
 800a33e:	bf00      	nop
 800a340:	20000384 	.word	0x20000384

0800a344 <__malloc_unlock>:
 800a344:	4801      	ldr	r0, [pc, #4]	; (800a34c <__malloc_unlock+0x8>)
 800a346:	f000 b80c 	b.w	800a362 <__retarget_lock_release_recursive>
 800a34a:	bf00      	nop
 800a34c:	20000384 	.word	0x20000384

0800a350 <_malloc_usable_size_r>:
 800a350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a354:	1f18      	subs	r0, r3, #4
 800a356:	2b00      	cmp	r3, #0
 800a358:	bfbc      	itt	lt
 800a35a:	580b      	ldrlt	r3, [r1, r0]
 800a35c:	18c0      	addlt	r0, r0, r3
 800a35e:	4770      	bx	lr

0800a360 <__retarget_lock_acquire_recursive>:
 800a360:	4770      	bx	lr

0800a362 <__retarget_lock_release_recursive>:
 800a362:	4770      	bx	lr

0800a364 <_init>:
 800a364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a366:	bf00      	nop
 800a368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36a:	bc08      	pop	{r3}
 800a36c:	469e      	mov	lr, r3
 800a36e:	4770      	bx	lr

0800a370 <_fini>:
 800a370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a372:	bf00      	nop
 800a374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a376:	bc08      	pop	{r3}
 800a378:	469e      	mov	lr, r3
 800a37a:	4770      	bx	lr
