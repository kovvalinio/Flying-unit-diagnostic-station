
flying_unit_diagnostic_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6a8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800d8a8  0800d8a8  0001d8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbc8  0800dbc8  00020550  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbc8  0800dbc8  0001dbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbd0  0800dbd0  00020550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbd0  0800dbd0  0001dbd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbd4  0800dbd4  0001dbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000550  20000000  0800dbd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ac4  20000550  0800e128  00020550  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003014  0800e128  00023014  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020550  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f76e  00000000  00000000  0002057e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055d3  00000000  00000000  0005fcec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a18  00000000  00000000  000652c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000027d0  00000000  00000000  00067cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c74e  00000000  00000000  0006a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028b1d  00000000  00000000  00096bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e02f  00000000  00000000  000bf713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  001cd742  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b77c  00000000  00000000  001cd814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000550 	.word	0x20000550
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d890 	.word	0x0800d890

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000554 	.word	0x20000554
 800023c:	0800d890 	.word	0x0800d890

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_CRC_Init+0x3c>)
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <MX_CRC_Init+0x40>)
 80005e0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_CRC_Init+0x3c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_CRC_Init+0x3c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_CRC_Init+0x3c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <MX_CRC_Init+0x3c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_CRC_Init+0x3c>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_CRC_Init+0x3c>)
 8000602:	f005 fbbf 	bl	8005d84 <HAL_CRC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800060c:	f000 fbe6 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000658 	.word	0x20000658
 8000618:	40023000 	.word	0x40023000

0800061c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <HAL_CRC_MspInit+0x38>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d10b      	bne.n	8000646 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_CRC_MspInit+0x3c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a09      	ldr	r2, [pc, #36]	; (8000658 <HAL_CRC_MspInit+0x3c>)
 8000634:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b07      	ldr	r3, [pc, #28]	; (8000658 <HAL_CRC_MspInit+0x3c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40023000 	.word	0x40023000
 8000658:	40023800 	.word	0x40023800

0800065c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_DMA_Init+0x38>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <MX_DMA_Init+0x38>)
 8000668:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_DMA_Init+0x38>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2038      	movs	r0, #56	; 0x38
 8000680:	f005 fb49 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000684:	2038      	movs	r0, #56	; 0x38
 8000686:	f005 fb62 	bl	8005d4e <HAL_NVIC_EnableIRQ>

}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	; 0x30
 800069c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b7b      	ldr	r3, [pc, #492]	; (800089c <MX_GPIO_Init+0x204>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a7a      	ldr	r2, [pc, #488]	; (800089c <MX_GPIO_Init+0x204>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b78      	ldr	r3, [pc, #480]	; (800089c <MX_GPIO_Init+0x204>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	61bb      	str	r3, [r7, #24]
 80006c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	4b75      	ldr	r3, [pc, #468]	; (800089c <MX_GPIO_Init+0x204>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a74      	ldr	r2, [pc, #464]	; (800089c <MX_GPIO_Init+0x204>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b72      	ldr	r3, [pc, #456]	; (800089c <MX_GPIO_Init+0x204>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b6f      	ldr	r3, [pc, #444]	; (800089c <MX_GPIO_Init+0x204>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a6e      	ldr	r2, [pc, #440]	; (800089c <MX_GPIO_Init+0x204>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b6c      	ldr	r3, [pc, #432]	; (800089c <MX_GPIO_Init+0x204>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b69      	ldr	r3, [pc, #420]	; (800089c <MX_GPIO_Init+0x204>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a68      	ldr	r2, [pc, #416]	; (800089c <MX_GPIO_Init+0x204>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b66      	ldr	r3, [pc, #408]	; (800089c <MX_GPIO_Init+0x204>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	4b63      	ldr	r3, [pc, #396]	; (800089c <MX_GPIO_Init+0x204>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a62      	ldr	r2, [pc, #392]	; (800089c <MX_GPIO_Init+0x204>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b60      	ldr	r3, [pc, #384]	; (800089c <MX_GPIO_Init+0x204>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000726:	4b5d      	ldr	r3, [pc, #372]	; (800089c <MX_GPIO_Init+0x204>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a5c      	ldr	r2, [pc, #368]	; (800089c <MX_GPIO_Init+0x204>)
 800072c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b5a      	ldr	r3, [pc, #360]	; (800089c <MX_GPIO_Init+0x204>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f244 0181 	movw	r1, #16513	; 0x4081
 8000744:	4856      	ldr	r0, [pc, #344]	; (80008a0 <MX_GPIO_Init+0x208>)
 8000746:	f006 fb0f 	bl	8006d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2140      	movs	r1, #64	; 0x40
 800074e:	4855      	ldr	r0, [pc, #340]	; (80008a4 <MX_GPIO_Init+0x20c>)
 8000750:	f006 fb0a 	bl	8006d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	484f      	ldr	r0, [pc, #316]	; (80008a8 <MX_GPIO_Init+0x210>)
 800076c:	f006 f82c 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin;
 8000770:	2322      	movs	r3, #34	; 0x22
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000780:	230b      	movs	r3, #11
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	4847      	ldr	r0, [pc, #284]	; (80008a8 <MX_GPIO_Init+0x210>)
 800078c:	f006 f81c 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000790:	2386      	movs	r3, #134	; 0x86
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4840      	ldr	r0, [pc, #256]	; (80008ac <MX_GPIO_Init+0x214>)
 80007ac:	f006 f80c 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007b0:	f244 0381 	movw	r3, #16513	; 0x4081
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	4835      	ldr	r0, [pc, #212]	; (80008a0 <MX_GPIO_Init+0x208>)
 80007ca:	f005 fffd 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e0:	230b      	movs	r3, #11
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	482d      	ldr	r0, [pc, #180]	; (80008a0 <MX_GPIO_Init+0x208>)
 80007ec:	f005 ffec 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007f0:	2340      	movs	r3, #64	; 0x40
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4827      	ldr	r0, [pc, #156]	; (80008a4 <MX_GPIO_Init+0x20c>)
 8000808:	f005 ffde 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4821      	ldr	r0, [pc, #132]	; (80008a4 <MX_GPIO_Init+0x20c>)
 8000820:	f005 ffd2 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000824:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000836:	230a      	movs	r3, #10
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	481a      	ldr	r0, [pc, #104]	; (80008ac <MX_GPIO_Init+0x214>)
 8000842:	f005 ffc1 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4814      	ldr	r0, [pc, #80]	; (80008ac <MX_GPIO_Init+0x214>)
 800085c:	f005 ffb4 	bl	80067c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000860:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000872:	230b      	movs	r3, #11
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4809      	ldr	r0, [pc, #36]	; (80008a4 <MX_GPIO_Init+0x20c>)
 800087e:	f005 ffa3 	bl	80067c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2028      	movs	r0, #40	; 0x28
 8000888:	f005 fa45 	bl	8005d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800088c:	2028      	movs	r0, #40	; 0x28
 800088e:	f005 fa5e 	bl	8005d4e <HAL_NVIC_EnableIRQ>

}
 8000892:	bf00      	nop
 8000894:	3730      	adds	r7, #48	; 0x30
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40021800 	.word	0x40021800
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020000 	.word	0x40020000

080008b0 <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
DMA_HandleTypeDef hdma_spi1_rx;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_I2S1_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_I2S1_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_I2S1_Init+0x4c>)
 80008bc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008c0:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_MSB;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_I2S1_Init+0x4c>)
 80008c4:	2210      	movs	r2, #16
 80008c6:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_I2S1_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_I2S1_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_I2S1_Init+0x4c>)
 80008d6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80008da:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_I2S1_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_I2S1_Init+0x4c>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_I2S1_Init+0x4c>)
 80008ea:	f007 f8d5 	bl	8007a98 <HAL_I2S_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 80008f4:	f000 fa72 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000067c 	.word	0x2000067c
 8000900:	40013000 	.word	0x40013000

08000904 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b0ae      	sub	sp, #184	; 0xb8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2290      	movs	r2, #144	; 0x90
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f00c f9b7 	bl	800cc98 <memset>
  if(i2sHandle->Instance==SPI1)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a54      	ldr	r2, [pc, #336]	; (8000a80 <HAL_I2S_MspInit+0x17c>)
 8000930:	4293      	cmp	r3, r2
 8000932:	f040 80a0 	bne.w	8000a76 <HAL_I2S_MspInit+0x172>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000936:	2301      	movs	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800093a:	23c0      	movs	r3, #192	; 0xc0
 800093c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800093e:	2302      	movs	r3, #2
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000942:	2302      	movs	r3, #2
 8000944:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800094a:	2301      	movs	r3, #1
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 800094e:	2300      	movs	r3, #0
 8000950:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4618      	mov	r0, r3
 8000958:	f008 f8cc 	bl	8008af4 <HAL_RCCEx_PeriphCLKConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_I2S_MspInit+0x62>
    {
      Error_Handler();
 8000962:	f000 fa3b 	bl	8000ddc <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000966:	4b47      	ldr	r3, [pc, #284]	; (8000a84 <HAL_I2S_MspInit+0x180>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a46      	ldr	r2, [pc, #280]	; (8000a84 <HAL_I2S_MspInit+0x180>)
 800096c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b44      	ldr	r3, [pc, #272]	; (8000a84 <HAL_I2S_MspInit+0x180>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b41      	ldr	r3, [pc, #260]	; (8000a84 <HAL_I2S_MspInit+0x180>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a40      	ldr	r2, [pc, #256]	; (8000a84 <HAL_I2S_MspInit+0x180>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b3e      	ldr	r3, [pc, #248]	; (8000a84 <HAL_I2S_MspInit+0x180>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <HAL_I2S_MspInit+0x180>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a3a      	ldr	r2, [pc, #232]	; (8000a84 <HAL_I2S_MspInit+0x180>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b38      	ldr	r3, [pc, #224]	; (8000a84 <HAL_I2S_MspInit+0x180>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PD7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009ae:	2330      	movs	r3, #48	; 0x30
 80009b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009c6:	2305      	movs	r3, #5
 80009c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009d0:	4619      	mov	r1, r3
 80009d2:	482d      	ldr	r0, [pc, #180]	; (8000a88 <HAL_I2S_MspInit+0x184>)
 80009d4:	f005 fef8 	bl	80067c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009f0:	2305      	movs	r3, #5
 80009f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4823      	ldr	r0, [pc, #140]	; (8000a8c <HAL_I2S_MspInit+0x188>)
 80009fe:	f005 fee3 	bl	80067c8 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <HAL_I2S_MspInit+0x18c>)
 8000a04:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <HAL_I2S_MspInit+0x190>)
 8000a06:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <HAL_I2S_MspInit+0x18c>)
 8000a0a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000a0e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <HAL_I2S_MspInit+0x18c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <HAL_I2S_MspInit+0x18c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_I2S_MspInit+0x18c>)
 8000a1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a22:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <HAL_I2S_MspInit+0x18c>)
 8000a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a2a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_I2S_MspInit+0x18c>)
 8000a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a32:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_I2S_MspInit+0x18c>)
 8000a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a3a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_I2S_MspInit+0x18c>)
 8000a3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a42:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_I2S_MspInit+0x18c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a4a:	4811      	ldr	r0, [pc, #68]	; (8000a90 <HAL_I2S_MspInit+0x18c>)
 8000a4c:	f005 fa84 	bl	8005f58 <HAL_DMA_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8000a56:	f000 f9c1 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi1_rx);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <HAL_I2S_MspInit+0x18c>)
 8000a5e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a60:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <HAL_I2S_MspInit+0x18c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2023      	movs	r0, #35	; 0x23
 8000a6c:	f005 f953 	bl	8005d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a70:	2023      	movs	r0, #35	; 0x23
 8000a72:	f005 f96c 	bl	8005d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a76:	bf00      	nop
 8000a78:	37b8      	adds	r7, #184	; 0xb8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40013000 	.word	0x40013000
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000
 8000a8c:	40020c00 	.word	0x40020c00
 8000a90:	200006bc 	.word	0x200006bc
 8000a94:	40026410 	.word	0x40026410

08000a98 <FifoWrite_B>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void FifoWrite_B(uint16_t data) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]


	if(fifo_w_ptr_B !=PCM_BIG_BUF){
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <FifoWrite_B+0x48>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 8000aaa:	d00a      	beq.n	8000ac2 <FifoWrite_B+0x2a>
		pcm_big_buf_B[fifo_w_ptr_B] = data;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <FifoWrite_B+0x48>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <FifoWrite_B+0x4c>)
 8000ab2:	88fa      	ldrh	r2, [r7, #6]
 8000ab4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		fifo_w_ptr_B++;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <FifoWrite_B+0x48>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <FifoWrite_B+0x48>)
 8000ac0:	6013      	str	r3, [r2, #0]
	}
	if(fifo_w_ptr_B == PCM_BIG_BUF){
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <FifoWrite_B+0x48>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 8000aca:	d102      	bne.n	8000ad2 <FifoWrite_B+0x3a>
		espTxFlag = 1;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <FifoWrite_B+0x50>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
	}
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000570 	.word	0x20000570
 8000ae4:	20000904 	.word	0x20000904
 8000ae8:	20000574 	.word	0x20000574

08000aec <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback (I2S_HandleTypeDef *hi1s) {
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	  if(hi1s->Instance ==SPI1){
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <HAL_I2S_RxHalfCpltCallback+0x24>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d102      	bne.n	8000b04 <HAL_I2S_RxHalfCpltCallback+0x18>
	  RxFlag_B = 1;
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_I2S_RxHalfCpltCallback+0x28>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
	  }
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40013000 	.word	0x40013000
 8000b14:	2000056d 	.word	0x2000056d

08000b18 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback (I2S_HandleTypeDef *hi1s) {
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	  if(hi1s->Instance ==SPI1){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <HAL_I2S_RxCpltCallback+0x24>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d102      	bne.n	8000b30 <HAL_I2S_RxCpltCallback+0x18>
	  RxFlag_B = 2;
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_I2S_RxCpltCallback+0x28>)
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	701a      	strb	r2, [r3, #0]
	  }
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40013000 	.word	0x40013000
 8000b40:	2000056d 	.word	0x2000056d

08000b44 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <HAL_UART_TxCpltCallback+0x24>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d102      	bne.n	8000b5c <HAL_UART_TxCpltCallback+0x18>

		fifo_w_ptr_B =0;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_UART_TxCpltCallback+0x28>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40004800 	.word	0x40004800
 8000b6c:	20000570 	.word	0x20000570

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b0d5      	sub	sp, #340	; 0x154
 8000b74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f004 ff71 	bl	8005a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f8bd 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f7ff fd8b 	bl	8000698 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000b82:	f000 fc53 	bl	800142c <MX_TIM3_Init>
  MX_DMA_Init();
 8000b86:	f7ff fd69 	bl	800065c <MX_DMA_Init>
  MX_I2S1_Init();
 8000b8a:	f7ff fe91 	bl	80008b0 <MX_I2S1_Init>
  MX_USART3_UART_Init();
 8000b8e:	f000 fcc1 	bl	8001514 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000b92:	f7ff fd21 	bl	80005d8 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8000b96:	f00a f959 	bl	800ae4c <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2S_Receive_DMA(&hi2s1, (uint16_t*)PDM_Rxbuf_B, PDM_BUF);
 8000b9a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b9e:	4949      	ldr	r1, [pc, #292]	; (8000cc4 <main+0x154>)
 8000ba0:	4849      	ldr	r0, [pc, #292]	; (8000cc8 <main+0x158>)
 8000ba2:	f007 f85f 	bl	8007c64 <HAL_I2S_Receive_DMA>

  MX_MEMS_Init();
 8000ba6:	f000 f91e 	bl	8000de6 <MX_MEMS_Init>
  {




	  if(espTxFlag == 0 && fifo_w_ptr_B !=PCM_BIG_BUF){
 8000baa:	4b48      	ldr	r3, [pc, #288]	; (8000ccc <main+0x15c>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14c      	bne.n	8000c4c <main+0xdc>
 8000bb2:	4b47      	ldr	r3, [pc, #284]	; (8000cd0 <main+0x160>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 8000bba:	d047      	beq.n	8000c4c <main+0xdc>
		  if (RxFlag_B == 1) {
 8000bbc:	4b45      	ldr	r3, [pc, #276]	; (8000cd4 <main+0x164>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d11f      	bne.n	8000c04 <main+0x94>

			  pdm2pcm_status_half = PDM_Filter(&PDM_Rxbuf_B[0], &pcmMidBuf_B[0], &PDM1_filter_handler);
 8000bc4:	4a44      	ldr	r2, [pc, #272]	; (8000cd8 <main+0x168>)
 8000bc6:	4945      	ldr	r1, [pc, #276]	; (8000cdc <main+0x16c>)
 8000bc8:	483e      	ldr	r0, [pc, #248]	; (8000cc4 <main+0x154>)
 8000bca:	f00b ffed 	bl	800cba8 <PDM_Filter>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a43      	ldr	r2, [pc, #268]	; (8000ce0 <main+0x170>)
 8000bd2:	6013      	str	r3, [r2, #0]
					 for (int i = 0; i < PCM_MID_BUF; i++) {
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8000bda:	e00c      	b.n	8000bf6 <main+0x86>
						 FifoWrite_B(pcmMidBuf_B[i]);
 8000bdc:	4a3f      	ldr	r2, [pc, #252]	; (8000cdc <main+0x16c>)
 8000bde:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff56 	bl	8000a98 <FifoWrite_B>
					 for (int i = 0; i < PCM_MID_BUF; i++) {
 8000bec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8000bf6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000bfa:	2b2f      	cmp	r3, #47	; 0x2f
 8000bfc:	ddee      	ble.n	8000bdc <main+0x6c>
					 }

			  RxFlag_B= 0;
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <main+0x164>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
				//HAL_GPIO_WritePin(TX_OUTPUT_GPIO_Port, TX_OUTPUT_Pin, GPIO_PIN_RESET);
			}
		  if (RxFlag_B == 2) {
 8000c04:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <main+0x164>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d11f      	bne.n	8000c4c <main+0xdc>
			//HAL_GPIO_WritePin(TX_OUTPUT_GPIO_Port, TX_OUTPUT_Pin, GPIO_PIN_SET);
			  pdm2pcm_status_cplt = PDM_Filter(&PDM_Rxbuf_B[192], &pcmMidBuf_B[0], &PDM1_filter_handler);
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <main+0x168>)
 8000c0e:	4933      	ldr	r1, [pc, #204]	; (8000cdc <main+0x16c>)
 8000c10:	4834      	ldr	r0, [pc, #208]	; (8000ce4 <main+0x174>)
 8000c12:	f00b ffc9 	bl	800cba8 <PDM_Filter>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4a33      	ldr	r2, [pc, #204]	; (8000ce8 <main+0x178>)
 8000c1a:	6013      	str	r3, [r2, #0]
				 for (int i = 0; i < PCM_MID_BUF; i++) {
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000c22:	e00c      	b.n	8000c3e <main+0xce>
					 FifoWrite_B(pcmMidBuf_B[i]);
 8000c24:	4a2d      	ldr	r2, [pc, #180]	; (8000cdc <main+0x16c>)
 8000c26:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff32 	bl	8000a98 <FifoWrite_B>
				 for (int i = 0; i < PCM_MID_BUF; i++) {
 8000c34:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000c38:	3301      	adds	r3, #1
 8000c3a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000c3e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000c42:	2b2f      	cmp	r3, #47	; 0x2f
 8000c44:	ddee      	ble.n	8000c24 <main+0xb4>
				 }
			  RxFlag_B = 0;
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <main+0x164>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_WritePin(TX_OUTPUT_GPIO_Port, TX_OUTPUT_Pin, GPIO_PIN_RESET);
		}
	  }
	  if(espTxFlag == 1){
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <main+0x15c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d1aa      	bne.n	8000baa <main+0x3a>
		  for(int i = 0 ; i < PCM_BIG_BUF ; i++){
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000c5a:	e02a      	b.n	8000cb2 <main+0x142>



		  	  	  	  Accelero_Get_Values(0, &acceleration);
 8000c5c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000c60:	4619      	mov	r1, r3
 8000c62:	2000      	movs	r0, #0
 8000c64:	f000 f8fe 	bl	8000e64 <Accelero_Get_Values>

		  	  	  	  databufforlentgh = sprintf(dataOut, "%d;%d;%d;%d\r",
 8000c68:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8000c6c:	f8d7 4130 	ldr.w	r4, [r7, #304]	; 0x130
 8000c70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
		  	  	               	   	   	   	   	acceleration.x, acceleration.y, acceleration.z, pcm_big_buf_B[i]);
 8000c74:	481d      	ldr	r0, [pc, #116]	; (8000cec <main+0x17c>)
 8000c76:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8000c7a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
		  	  	  	  databufforlentgh = sprintf(dataOut, "%d;%d;%d;%d\r",
 8000c7e:	4638      	mov	r0, r7
 8000c80:	9201      	str	r2, [sp, #4]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	4623      	mov	r3, r4
 8000c86:	460a      	mov	r2, r1
 8000c88:	4919      	ldr	r1, [pc, #100]	; (8000cf0 <main+0x180>)
 8000c8a:	f00c f80d 	bl	800cca8 <siprintf>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
		  			  HAL_UART_Transmit_IT(&huart3, (uint8_t*)dataOut, databufforlentgh);
 8000c94:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 8000c98:	463b      	mov	r3, r7
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <main+0x184>)
 8000c9e:	f008 fff7 	bl	8009c90 <HAL_UART_Transmit_IT>
		  			  HAL_Delay(20);
 8000ca2:	2014      	movs	r0, #20
 8000ca4:	f004 ff38 	bl	8005b18 <HAL_Delay>
		  for(int i = 0 ; i < PCM_BIG_BUF ; i++){
 8000ca8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000cac:	3301      	adds	r3, #1
 8000cae:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000cb2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000cb6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 8000cba:	dbcf      	blt.n	8000c5c <main+0xec>
		  }
			espTxFlag = 0;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <main+0x15c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
	  if(espTxFlag == 0 && fifo_w_ptr_B !=PCM_BIG_BUF){
 8000cc2:	e772      	b.n	8000baa <main+0x3a>
 8000cc4:	20000720 	.word	0x20000720
 8000cc8:	2000067c 	.word	0x2000067c
 8000ccc:	20000574 	.word	0x20000574
 8000cd0:	20000570 	.word	0x20000570
 8000cd4:	2000056d 	.word	0x2000056d
 8000cd8:	20002fb8 	.word	0x20002fb8
 8000cdc:	200008a0 	.word	0x200008a0
 8000ce0:	20000900 	.word	0x20000900
 8000ce4:	200007e0 	.word	0x200007e0
 8000ce8:	2000071c 	.word	0x2000071c
 8000cec:	20000904 	.word	0x20000904
 8000cf0:	0800d8a8 	.word	0x0800d8a8
 8000cf4:	20002f1c 	.word	0x20002f1c

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b094      	sub	sp, #80	; 0x50
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	2234      	movs	r2, #52	; 0x34
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f00b ffc6 	bl	800cc98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d1c:	f007 f9da 	bl	80080d4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d20:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <SystemClock_Config+0xdc>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	4a2b      	ldr	r2, [pc, #172]	; (8000dd4 <SystemClock_Config+0xdc>)
 8000d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <SystemClock_Config+0xdc>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d38:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <SystemClock_Config+0xe0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d40:	4a25      	ldr	r2, [pc, #148]	; (8000dd8 <SystemClock_Config+0xe0>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <SystemClock_Config+0xe0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d58:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d6c:	2360      	movs	r3, #96	; 0x60
 8000d6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d74:	2304      	movs	r3, #4
 8000d76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4618      	mov	r0, r3
 8000d82:	f007 fa07 	bl	8008194 <HAL_RCC_OscConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d8c:	f000 f826 	bl	8000ddc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d90:	f007 f9b0 	bl	80080f4 <HAL_PWREx_EnableOverDrive>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d9a:	f000 f81f 	bl	8000ddc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9e:	230f      	movs	r3, #15
 8000da0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da2:	2302      	movs	r3, #2
 8000da4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	2103      	movs	r1, #3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f007 fc98 	bl	80086f0 <HAL_RCC_ClockConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000dc6:	f000 f809 	bl	8000ddc <Error_Handler>
  }
}
 8000dca:	bf00      	nop
 8000dcc:	3750      	adds	r7, #80	; 0x50
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40007000 	.word	0x40007000

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <Error_Handler+0x8>

08000de6 <MX_MEMS_Init>:
//void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
//
//}

void MX_MEMS_Init(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS02A1_DataLogTerminal_Init();
 8000dea:	f000 f803 	bl	8000df4 <MX_IKS02A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <MX_IKS02A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS02A1_DataLogTerminal_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f8be 	bl	8000f7c <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000e00:	2101      	movs	r1, #1
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f8d4 	bl	8000fb0 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f000 f925 	bl	8001058 <BSP_PB_GetState>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bf0c      	ite	eq
 8000e14:	2301      	moveq	r3, #1
 8000e16:	2300      	movne	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <MX_IKS02A1_DataLogTerminal_Init+0x4c>)
 8000e1e:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */


  IKS02A1_MOTION_SENSOR_Init(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO | MOTION_GYRO);
 8000e20:	2103      	movs	r1, #3
 8000e22:	2000      	movs	r0, #0
 8000e24:	f004 face 	bl	80053c4 <IKS02A1_MOTION_SENSOR_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2DLPC_0, MOTION_ACCELERO);
 8000e28:	2102      	movs	r1, #2
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f004 faca 	bl	80053c4 <IKS02A1_MOTION_SENSOR_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2MDC_0, MOTION_MAGNETO);
 8000e30:	2104      	movs	r1, #4
 8000e32:	2002      	movs	r0, #2
 8000e34:	f004 fac6 	bl	80053c4 <IKS02A1_MOTION_SENSOR_Init>


}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000578 	.word	0x20000578

08000e44 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <BSP_PB_Callback+0x1c>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	20000575 	.word	0x20000575

08000e64 <Accelero_Get_Values>:



}

void Accelero_Get_Values(u_int32_t Instance, IKS02A1_MOTION_SENSOR_Axes_t *acceleration){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]

	IKS02A1_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, acceleration);
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	2102      	movs	r1, #2
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f004 fba2 	bl	80055bc <IKS02A1_MOTION_SENSOR_GetAxes>

}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_MspInit+0x44>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_MspInit+0x44>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_MspInit+0x44>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_MspInit+0x44>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f004 fde0 	bl	8005ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <TIM3_IRQHandler+0x10>)
 8000f22:	f008 fa66 	bl	80093f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20002ed0 	.word	0x20002ed0

08000f30 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <SPI1_IRQHandler+0x10>)
 8000f36:	f006 ff51 	bl	8007ddc <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000067c 	.word	0x2000067c

08000f44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <USART3_IRQHandler+0x10>)
 8000f4a:	f008 ff0f 	bl	8009d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20002f1c 	.word	0x20002f1c

08000f58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000f5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f60:	f005 ff1c 	bl	8006d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <DMA2_Stream0_IRQHandler+0x10>)
 8000f6e:	f005 f993 	bl	8006298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200006bc 	.word	0x200006bc

08000f7c <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <BSP_LED_Init+0x20>)
 8000f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	0800d8f0 	.word	0x0800d8f0

08000fa0 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	460a      	mov	r2, r1
 8000fba:	71fb      	strb	r3, [r7, #7]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	; (8001044 <BSP_PB_Init+0x94>)
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8000fce:	79bb      	ldrb	r3, [r7, #6]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d132      	bne.n	800103a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <BSP_PB_Init+0x98>)
 8000fda:	441a      	add	r2, r3
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	491b      	ldr	r1, [pc, #108]	; (800104c <BSP_PB_Init+0x9c>)
 8000fe0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	f005 fbda 	bl	80067a0 <HAL_EXTI_GetHandle>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000ff2:	f06f 0303 	mvn.w	r3, #3
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e01f      	b.n	800103a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <BSP_PB_Init+0x98>)
 8001000:	1898      	adds	r0, r3, r2
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	4a12      	ldr	r2, [pc, #72]	; (8001050 <BSP_PB_Init+0xa0>)
 8001006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100a:	461a      	mov	r2, r3
 800100c:	2100      	movs	r1, #0
 800100e:	f005 fbad 	bl	800676c <HAL_EXTI_RegisterCallback>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001018:	f06f 0303 	mvn.w	r3, #3
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	e00c      	b.n	800103a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001020:	2028      	movs	r0, #40	; 0x28
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <BSP_PB_Init+0xa4>)
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	2200      	movs	r2, #0
 800102c:	4619      	mov	r1, r3
 800102e:	f004 fe72 	bl	8005d16 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001032:	2328      	movs	r3, #40	; 0x28
 8001034:	4618      	mov	r0, r3
 8001036:	f004 fe8a 	bl	8005d4e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	0800d8f4 	.word	0x0800d8f4
 8001048:	20000404 	.word	0x20000404
 800104c:	0800d8f8 	.word	0x0800d8f8
 8001050:	0800d8fc 	.word	0x0800d8fc
 8001054:	0800d900 	.word	0x0800d900

08001058 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	4a09      	ldr	r2, [pc, #36]	; (800108c <BSP_PB_GetState+0x34>)
 8001066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f005 fe61 	bl	8006d38 <HAL_GPIO_ReadPin>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf0c      	ite	eq
 800107c:	2301      	moveq	r3, #1
 800107e:	2300      	movne	r3, #0
 8001080:	b2db      	uxtb	r3, r3
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000400 	.word	0x20000400

08001090 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff fed5 	bl	8000e44 <BSP_PB_Callback>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}

0800109e <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <BSP_I2C1_Init+0x70>)
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <BSP_I2C1_Init+0x74>)
 80010ba:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <BSP_I2C1_Init+0x78>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	4918      	ldr	r1, [pc, #96]	; (8001124 <BSP_I2C1_Init+0x78>)
 80010c4:	600a      	str	r2, [r1, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d122      	bne.n	8001110 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80010ca:	4814      	ldr	r0, [pc, #80]	; (800111c <BSP_I2C1_Init+0x70>)
 80010cc:	f006 f98c 	bl	80073e8 <HAL_I2C_GetState>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d11c      	bne.n	8001110 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80010d6:	4811      	ldr	r0, [pc, #68]	; (800111c <BSP_I2C1_Init+0x70>)
 80010d8:	f000 f8fe 	bl	80012d8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d116      	bne.n	8001110 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <BSP_I2C1_Init+0x70>)
 80010e4:	f000 f8b4 	bl	8001250 <MX_I2C1_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80010ee:	f06f 0307 	mvn.w	r3, #7
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	e00c      	b.n	8001110 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010f6:	2100      	movs	r1, #0
 80010f8:	4808      	ldr	r0, [pc, #32]	; (800111c <BSP_I2C1_Init+0x70>)
 80010fa:	f006 fc35 	bl	8007968 <HAL_I2CEx_ConfigAnalogFilter>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001104:	f06f 0307 	mvn.w	r3, #7
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	e001      	b.n	8001110 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001110:	687b      	ldr	r3, [r7, #4]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20002e84 	.word	0x20002e84
 8001120:	40005400 	.word	0x40005400
 8001124:	2000057c 	.word	0x2000057c

08001128 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <BSP_I2C1_DeInit+0x48>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d014      	beq.n	8001164 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <BSP_I2C1_DeInit+0x48>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3b01      	subs	r3, #1
 8001140:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <BSP_I2C1_DeInit+0x48>)
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <BSP_I2C1_DeInit+0x48>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10b      	bne.n	8001164 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <BSP_I2C1_DeInit+0x4c>)
 800114e:	f000 f909 	bl	8001364 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001152:	4808      	ldr	r0, [pc, #32]	; (8001174 <BSP_I2C1_DeInit+0x4c>)
 8001154:	f005 fed6 	bl	8006f04 <HAL_I2C_DeInit>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800115e:	f06f 0307 	mvn.w	r3, #7
 8001162:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001164:	687b      	ldr	r3, [r7, #4]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2000057c 	.word	0x2000057c
 8001174:	20002e84 	.word	0x20002e84

08001178 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af04      	add	r7, sp, #16
 800117e:	60ba      	str	r2, [r7, #8]
 8001180:	461a      	mov	r2, r3
 8001182:	4603      	mov	r3, r0
 8001184:	81fb      	strh	r3, [r7, #14]
 8001186:	460b      	mov	r3, r1
 8001188:	81bb      	strh	r3, [r7, #12]
 800118a:	4613      	mov	r3, r2
 800118c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001192:	89ba      	ldrh	r2, [r7, #12]
 8001194:	89f9      	ldrh	r1, [r7, #14]
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	480c      	ldr	r0, [pc, #48]	; (80011d8 <BSP_I2C1_WriteReg+0x60>)
 80011a8:	f005 fef0 	bl	8006f8c <HAL_I2C_Mem_Write>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00c      	beq.n	80011cc <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80011b2:	4809      	ldr	r0, [pc, #36]	; (80011d8 <BSP_I2C1_WriteReg+0x60>)
 80011b4:	f006 f926 	bl	8007404 <HAL_I2C_GetError>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d103      	bne.n	80011c6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80011be:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	e002      	b.n	80011cc <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80011c6:	f06f 0303 	mvn.w	r3, #3
 80011ca:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80011cc:	697b      	ldr	r3, [r7, #20]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20002e84 	.word	0x20002e84

080011dc <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af04      	add	r7, sp, #16
 80011e2:	60ba      	str	r2, [r7, #8]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4603      	mov	r3, r0
 80011e8:	81fb      	strh	r3, [r7, #14]
 80011ea:	460b      	mov	r3, r1
 80011ec:	81bb      	strh	r3, [r7, #12]
 80011ee:	4613      	mov	r3, r2
 80011f0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80011f6:	89ba      	ldrh	r2, [r7, #12]
 80011f8:	89f9      	ldrh	r1, [r7, #14]
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	9302      	str	r3, [sp, #8]
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	480c      	ldr	r0, [pc, #48]	; (800123c <BSP_I2C1_ReadReg+0x60>)
 800120c:	f005 ffd2 	bl	80071b4 <HAL_I2C_Mem_Read>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00c      	beq.n	8001230 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001216:	4809      	ldr	r0, [pc, #36]	; (800123c <BSP_I2C1_ReadReg+0x60>)
 8001218:	f006 f8f4 	bl	8007404 <HAL_I2C_GetError>
 800121c:	4603      	mov	r3, r0
 800121e:	2b04      	cmp	r3, #4
 8001220:	d103      	bne.n	800122a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001222:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	e002      	b.n	8001230 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800122a:	f06f 0303 	mvn.w	r3, #3
 800122e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001230:	697b      	ldr	r3, [r7, #20]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20002e84 	.word	0x20002e84

08001240 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001244:	f004 fc5c 	bl	8005b00 <HAL_GetTick>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a1c      	ldr	r2, [pc, #112]	; (80012d0 <MX_I2C1_Init+0x80>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x2010091A;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <MX_I2C1_Init+0x84>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f005 fda6 	bl	8006de4 <HAL_I2C_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012a2:	2100      	movs	r1, #0
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f006 fb5f 	bl	8007968 <HAL_I2CEx_ConfigAnalogFilter>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80012b4:	2100      	movs	r1, #0
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f006 fba1 	bl	80079fe <HAL_I2CEx_ConfigDigitalFilter>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40005400 	.word	0x40005400
 80012d4:	2010091a 	.word	0x2010091a

080012d8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <I2C1_MspInit+0x84>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	4a1d      	ldr	r2, [pc, #116]	; (800135c <I2C1_MspInit+0x84>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	6313      	str	r3, [r2, #48]	; 0x30
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <I2C1_MspInit+0x84>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80012f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fe:	2312      	movs	r3, #18
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800130a:	2304      	movs	r3, #4
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4812      	ldr	r0, [pc, #72]	; (8001360 <I2C1_MspInit+0x88>)
 8001316:	f005 fa57 	bl	80067c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800131a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001320:	2312      	movs	r3, #18
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800132c:	2304      	movs	r3, #4
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	480a      	ldr	r0, [pc, #40]	; (8001360 <I2C1_MspInit+0x88>)
 8001338:	f005 fa46 	bl	80067c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <I2C1_MspInit+0x84>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <I2C1_MspInit+0x84>)
 8001342:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001346:	6413      	str	r3, [r2, #64]	; 0x40
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <I2C1_MspInit+0x84>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40020400 	.word	0x40020400

08001364 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <I2C1_MspDeInit+0x30>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a08      	ldr	r2, [pc, #32]	; (8001394 <I2C1_MspDeInit+0x30>)
 8001372:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <I2C1_MspDeInit+0x34>)
 800137e:	f005 fbcf 	bl	8006b20 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001382:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001386:	4804      	ldr	r0, [pc, #16]	; (8001398 <I2C1_MspDeInit+0x34>)
 8001388:	f005 fbca 	bl	8006b20 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	40020400 	.word	0x40020400

0800139c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a4:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <_sbrk+0x5c>)
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <_sbrk+0x60>)
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <_sbrk+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_sbrk+0x64>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	; (8001404 <_sbrk+0x68>)
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <_sbrk+0x64>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d207      	bcs.n	80013dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013cc:	f00b fc3a 	bl	800cc44 <__errno>
 80013d0:	4603      	mov	r3, r0
 80013d2:	220c      	movs	r2, #12
 80013d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	e009      	b.n	80013f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_sbrk+0x64>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <_sbrk+0x64>)
 80013ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20080000 	.word	0x20080000
 80013fc:	00000400 	.word	0x00000400
 8001400:	20000580 	.word	0x20000580
 8001404:	20003018 	.word	0x20003018

08001408 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <SystemInit+0x20>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <SystemInit+0x20>)
 8001414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <MX_TIM3_Init+0x94>)
 800144c:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <MX_TIM3_Init+0x98>)
 800144e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001452:	2200      	movs	r2, #0
 8001454:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <MX_TIM3_Init+0x94>)
 800145e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001462:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_TIM3_Init+0x94>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001470:	4813      	ldr	r0, [pc, #76]	; (80014c0 <MX_TIM3_Init+0x94>)
 8001472:	f007 ff67 	bl	8009344 <HAL_TIM_Base_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800147c:	f7ff fcae 	bl	8000ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001484:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4619      	mov	r1, r3
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <MX_TIM3_Init+0x94>)
 800148e:	f008 f8cf 	bl	8009630 <HAL_TIM_ConfigClockSource>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001498:	f7ff fca0 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_TIM3_Init+0x94>)
 80014aa:	f008 faf7 	bl	8009a9c <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014b4:	f7ff fc92 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20002ed0 	.word	0x20002ed0
 80014c4:	40000400 	.word	0x40000400

080014c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <HAL_TIM_Base_MspInit+0x44>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d113      	bne.n	8001502 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_TIM_Base_MspInit+0x48>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <HAL_TIM_Base_MspInit+0x48>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_TIM_Base_MspInit+0x48>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	201d      	movs	r0, #29
 80014f8:	f004 fc0d 	bl	8005d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014fc:	201d      	movs	r0, #29
 80014fe:	f004 fc26 	bl	8005d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40000400 	.word	0x40000400
 8001510:	40023800 	.word	0x40023800

08001514 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <MX_USART3_UART_Init+0x54>)
 800151a:	4a14      	ldr	r2, [pc, #80]	; (800156c <MX_USART3_UART_Init+0x58>)
 800151c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_USART3_UART_Init+0x54>)
 8001520:	4a13      	ldr	r2, [pc, #76]	; (8001570 <MX_USART3_UART_Init+0x5c>)
 8001522:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART3_UART_Init+0x54>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_USART3_UART_Init+0x54>)
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <MX_USART3_UART_Init+0x54>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART3_UART_Init+0x54>)
 8001538:	220c      	movs	r2, #12
 800153a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153c:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <MX_USART3_UART_Init+0x54>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART3_UART_Init+0x54>)
 8001544:	2200      	movs	r2, #0
 8001546:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <MX_USART3_UART_Init+0x54>)
 800154a:	2200      	movs	r2, #0
 800154c:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART3_UART_Init+0x54>)
 8001550:	2200      	movs	r2, #0
 8001552:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <MX_USART3_UART_Init+0x54>)
 8001556:	f008 fb4d 	bl	8009bf4 <HAL_UART_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8001560:	f7ff fc3c 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20002f1c 	.word	0x20002f1c
 800156c:	40004800 	.word	0x40004800
 8001570:	001e8480 	.word	0x001e8480

08001574 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0ae      	sub	sp, #184	; 0xb8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2290      	movs	r2, #144	; 0x90
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f00b fb7f 	bl	800cc98 <memset>
  if(uartHandle->Instance==USART3)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a26      	ldr	r2, [pc, #152]	; (8001638 <HAL_UART_MspInit+0xc4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d144      	bne.n	800162e <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4618      	mov	r0, r3
 80015b4:	f007 fa9e 	bl	8008af4 <HAL_RCCEx_PeriphCLKConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015be:	f7ff fc0d 	bl	8000ddc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_UART_MspInit+0xc8>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_UART_MspInit+0xc8>)
 80015c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_UART_MspInit+0xc8>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_UART_MspInit+0xc8>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a17      	ldr	r2, [pc, #92]	; (800163c <HAL_UART_MspInit+0xc8>)
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_UART_MspInit+0xc8>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800160c:	2307      	movs	r3, #7
 800160e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001612:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001616:	4619      	mov	r1, r3
 8001618:	4809      	ldr	r0, [pc, #36]	; (8001640 <HAL_UART_MspInit+0xcc>)
 800161a:	f005 f8d5 	bl	80067c8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2027      	movs	r0, #39	; 0x27
 8001624:	f004 fb77 	bl	8005d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001628:	2027      	movs	r0, #39	; 0x27
 800162a:	f004 fb90 	bl	8005d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800162e:	bf00      	nop
 8001630:	37b8      	adds	r7, #184	; 0xb8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40004800 	.word	0x40004800
 800163c:	40023800 	.word	0x40023800
 8001640:	40020c00 	.word	0x40020c00

08001644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164a:	490e      	ldr	r1, [pc, #56]	; (8001684 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001660:	4c0b      	ldr	r4, [pc, #44]	; (8001690 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800166e:	f7ff fecb 	bl	8001408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001672:	f00b faed 	bl	800cc50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001676:	f7ff fa7b 	bl	8000b70 <main>
  bx  lr    
 800167a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001684:	20000550 	.word	0x20000550
  ldr r2, =_sidata
 8001688:	0800dbd8 	.word	0x0800dbd8
  ldr r2, =_sbss
 800168c:	20000550 	.word	0x20000550
  ldr r4, =_ebss
 8001690:	20003014 	.word	0x20003014

08001694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC_IRQHandler>
	...

08001698 <IIS2DLPC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_RegisterBusIO(IIS2DLPC_Object_t *pObj, IIS2DLPC_IO_t *pIO)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d103      	bne.n	80016b4 <IIS2DLPC_RegisterBusIO+0x1c>
  {
    ret = IIS2DLPC_ERROR;
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e04d      	b.n	8001750 <IIS2DLPC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	7b1a      	ldrb	r2, [r3, #12]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	699a      	ldr	r2, [r3, #24]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a1b      	ldr	r2, [pc, #108]	; (800175c <IIS2DLPC_RegisterBusIO+0xc4>)
 80016f0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a1a      	ldr	r2, [pc, #104]	; (8001760 <IIS2DLPC_RegisterBusIO+0xc8>)
 80016f6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d103      	bne.n	800170e <IIS2DLPC_RegisterBusIO+0x76>
    {
      ret = IIS2DLPC_ERROR;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e020      	b.n	8001750 <IIS2DLPC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != IIS2DLPC_OK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4798      	blx	r3
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <IIS2DLPC_RegisterBusIO+0x8a>
    {
      ret = IIS2DLPC_ERROR;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e016      	b.n	8001750 <IIS2DLPC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == IIS2DLPC_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d112      	bne.n	8001750 <IIS2DLPC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001730:	2b00      	cmp	r3, #0
 8001732:	d10d      	bne.n	8001750 <IIS2DLPC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8001734:	2305      	movs	r3, #5
 8001736:	72fb      	strb	r3, [r7, #11]

          if (IIS2DLPC_Write_Reg(pObj, IIS2DLPC_CTRL2, data) != IIS2DLPC_OK)
 8001738:	7afb      	ldrb	r3, [r7, #11]
 800173a:	461a      	mov	r2, r3
 800173c:	2121      	movs	r1, #33	; 0x21
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 fd67 	bl	8002212 <IIS2DLPC_Write_Reg>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <IIS2DLPC_RegisterBusIO+0xb8>
          {
            ret = IIS2DLPC_ERROR;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001750:	68fb      	ldr	r3, [r7, #12]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	080025a5 	.word	0x080025a5
 8001760:	080025db 	.word	0x080025db

08001764 <IIS2DLPC_Init>:
 * @brief  Initialize the IIS2DLPC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_Init(IIS2DLPC_Object_t *pObj)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (iis2dlpc_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	331c      	adds	r3, #28
 8001770:	2101      	movs	r1, #1
 8001772:	4618      	mov	r0, r3
 8001774:	f001 fa52 	bl	8002c1c <iis2dlpc_auto_increment_set>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <IIS2DLPC_Init+0x20>
  {
    return IIS2DLPC_ERROR;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	e04b      	b.n	800181c <IIS2DLPC_Init+0xb8>
  }

  /* Enable BDU */
  if (iis2dlpc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	331c      	adds	r3, #28
 8001788:	2101      	movs	r1, #1
 800178a:	4618      	mov	r0, r3
 800178c:	f001 f966 	bl	8002a5c <iis2dlpc_block_data_update_set>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d002      	beq.n	800179c <IIS2DLPC_Init+0x38>
  {
    return IIS2DLPC_ERROR;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e03f      	b.n	800181c <IIS2DLPC_Init+0xb8>
  }

  /* FIFO mode selection */
  if (iis2dlpc_fifo_mode_set(&(pObj->Ctx), IIS2DLPC_BYPASS_MODE) != IIS2DLPC_OK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	331c      	adds	r3, #28
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 fa60 	bl	8002c68 <iis2dlpc_fifo_mode_set>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <IIS2DLPC_Init+0x50>
  {
    return IIS2DLPC_ERROR;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	e033      	b.n	800181c <IIS2DLPC_Init+0xb8>
  }

  /* Power mode selection */
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), IIS2DLPC_HIGH_PERFORMANCE) != IIS2DLPC_OK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	331c      	adds	r3, #28
 80017b8:	2104      	movs	r1, #4
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 ff58 	bl	8002670 <iis2dlpc_power_mode_set>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <IIS2DLPC_Init+0x68>
  {
    return IIS2DLPC_ERROR;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	e027      	b.n	800181c <IIS2DLPC_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a15      	ldr	r2, [pc, #84]	; (8001824 <IIS2DLPC_Init+0xc0>)
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	331c      	adds	r3, #28
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f001 f849 	bl	8002880 <iis2dlpc_data_rate_set>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d002      	beq.n	80017fa <IIS2DLPC_Init+0x96>
  {
    return IIS2DLPC_ERROR;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
 80017f8:	e010      	b.n	800181c <IIS2DLPC_Init+0xb8>
  }

  /* Full scale selection. */
  if (iis2dlpc_full_scale_set(&(pObj->Ctx), IIS2DLPC_2g) != IIS2DLPC_OK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	331c      	adds	r3, #28
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f001 f951 	bl	8002aa8 <iis2dlpc_full_scale_set>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d002      	beq.n	8001812 <IIS2DLPC_Init+0xae>
  {
    return IIS2DLPC_ERROR;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
 8001810:	e004      	b.n	800181c <IIS2DLPC_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2DLPC_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	42c80000 	.word	0x42c80000

08001828 <IIS2DLPC_DeInit>:
 * @brief  Deinitialize the IIS2DLPC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_DeInit(IIS2DLPC_Object_t *pObj)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2DLPC_ACC_Disable(pObj) != IIS2DLPC_OK)
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f888 	bl	8001946 <IIS2DLPC_ACC_Disable>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <IIS2DLPC_DeInit+0x1a>
  {
    return IIS2DLPC_ERROR;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	e010      	b.n	8001864 <IIS2DLPC_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2DLPC_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <IIS2DLPC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ReadID(IIS2DLPC_Object_t *pObj, uint8_t *Id)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  if (iis2dlpc_device_id_get(&(pObj->Ctx), Id) != IIS2DLPC_OK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	331c      	adds	r3, #28
 800187a:	6839      	ldr	r1, [r7, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f001 f9bc 	bl	8002bfa <iis2dlpc_device_id_get>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <IIS2DLPC_ReadID+0x22>
  {
    return IIS2DLPC_ERROR;
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	e000      	b.n	8001890 <IIS2DLPC_ReadID+0x24>
  }

  return IIS2DLPC_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <IIS2DLPC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2DLPC sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_GetCapabilities(IIS2DLPC_Object_t *pObj, IIS2DLPC_Capabilities_t *Capabilities)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2200      	movs	r2, #0
 80018ac:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2200      	movs	r2, #0
 80018b2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2200      	movs	r2, #0
 80018b8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2210      	movs	r2, #16
 80018c4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	4a06      	ldr	r2, [pc, #24]	; (80018f0 <IIS2DLPC_GetCapabilities+0x58>)
 80018d8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  return IIS2DLPC_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	44c80000 	.word	0x44c80000

080018f4 <IIS2DLPC_ACC_Enable>:
 * @brief  Enable the IIS2DLPC accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_Enable(IIS2DLPC_Object_t *pObj)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001902:	2b01      	cmp	r3, #1
 8001904:	d101      	bne.n	800190a <IIS2DLPC_ACC_Enable+0x16>
  {
    return IIS2DLPC_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e019      	b.n	800193e <IIS2DLPC_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != IIS2DLPC_OK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800191c:	461a      	mov	r2, r3
 800191e:	eeb0 0a67 	vmov.f32	s0, s15
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fc90 	bl	8002248 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <IIS2DLPC_ACC_Enable+0x40>
  {
    return IIS2DLPC_ERROR;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	e004      	b.n	800193e <IIS2DLPC_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2DLPC_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <IIS2DLPC_ACC_Disable>:
 * @brief  Disable the IIS2DLPC accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_Disable(IIS2DLPC_Object_t *pObj)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <IIS2DLPC_ACC_Disable+0x16>
  {
    return IIS2DLPC_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	e010      	b.n	800197e <IIS2DLPC_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	331c      	adds	r3, #28
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f000 ff8c 	bl	8002880 <iis2dlpc_data_rate_set>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <IIS2DLPC_ACC_Disable+0x2e>
  {
    return IIS2DLPC_ERROR;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e004      	b.n	800197e <IIS2DLPC_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2DLPC_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <IIS2DLPC_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetSensitivity(IIS2DLPC_Object_t *pObj, float *Sensitivity)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
  iis2dlpc_fs_t full_scale;
  iis2dlpc_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DLPC_OK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	331c      	adds	r3, #28
 800199a:	f107 020b 	add.w	r2, r7, #11
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f001 f8a7 	bl	8002af4 <iis2dlpc_full_scale_get>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <IIS2DLPC_ACC_GetSensitivity+0x2a>
  {
    return IIS2DLPC_ERROR;
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	e0a0      	b.n	8001af4 <IIS2DLPC_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	331c      	adds	r3, #28
 80019b6:	f107 020a 	add.w	r2, r7, #10
 80019ba:	4611      	mov	r1, r2
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fea5 	bl	800270c <iis2dlpc_power_mode_get>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <IIS2DLPC_ACC_GetSensitivity+0x46>
  {
    return IIS2DLPC_ERROR;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
 80019cc:	e092      	b.n	8001af4 <IIS2DLPC_ACC_GetSensitivity+0x16c>
  }

  switch(mode)
 80019ce:	7abb      	ldrb	r3, [r7, #10]
 80019d0:	2b1b      	cmp	r3, #27
 80019d2:	f200 8087 	bhi.w	8001ae4 <IIS2DLPC_ACC_GetSensitivity+0x15c>
 80019d6:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <IIS2DLPC_ACC_GetSensitivity+0x54>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	08001a4d 	.word	0x08001a4d
 80019e0:	08001a99 	.word	0x08001a99
 80019e4:	08001a99 	.word	0x08001a99
 80019e8:	08001a99 	.word	0x08001a99
 80019ec:	08001a99 	.word	0x08001a99
 80019f0:	08001ae5 	.word	0x08001ae5
 80019f4:	08001ae5 	.word	0x08001ae5
 80019f8:	08001ae5 	.word	0x08001ae5
 80019fc:	08001a4d 	.word	0x08001a4d
 8001a00:	08001a99 	.word	0x08001a99
 8001a04:	08001a99 	.word	0x08001a99
 8001a08:	08001a99 	.word	0x08001a99
 8001a0c:	08001ae5 	.word	0x08001ae5
 8001a10:	08001ae5 	.word	0x08001ae5
 8001a14:	08001ae5 	.word	0x08001ae5
 8001a18:	08001ae5 	.word	0x08001ae5
 8001a1c:	08001a4d 	.word	0x08001a4d
 8001a20:	08001a99 	.word	0x08001a99
 8001a24:	08001a99 	.word	0x08001a99
 8001a28:	08001a99 	.word	0x08001a99
 8001a2c:	08001a99 	.word	0x08001a99
 8001a30:	08001ae5 	.word	0x08001ae5
 8001a34:	08001ae5 	.word	0x08001ae5
 8001a38:	08001ae5 	.word	0x08001ae5
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001a99 	.word	0x08001a99
 8001a44:	08001a99 	.word	0x08001a99
 8001a48:	08001a99 	.word	0x08001a99
  {
    case IIS2DLPC_CONT_LOW_PWR_12bit:
    case IIS2DLPC_SINGLE_LOW_PWR_12bit:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
    case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8001a4c:	7afb      	ldrb	r3, [r7, #11]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d81a      	bhi.n	8001a88 <IIS2DLPC_ACC_GetSensitivity+0x100>
 8001a52:	a201      	add	r2, pc, #4	; (adr r2, 8001a58 <IIS2DLPC_ACC_GetSensitivity+0xd0>)
 8001a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a58:	08001a69 	.word	0x08001a69
 8001a5c:	08001a71 	.word	0x08001a71
 8001a60:	08001a79 	.word	0x08001a79
 8001a64:	08001a81 	.word	0x08001a81
      {
        case IIS2DLPC_2g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	4a24      	ldr	r2, [pc, #144]	; (8001afc <IIS2DLPC_ACC_GetSensitivity+0x174>)
 8001a6c:	601a      	str	r2, [r3, #0]
           break;
 8001a6e:	e012      	b.n	8001a96 <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_4g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4a23      	ldr	r2, [pc, #140]	; (8001b00 <IIS2DLPC_ACC_GetSensitivity+0x178>)
 8001a74:	601a      	str	r2, [r3, #0]
          break;
 8001a76:	e00e      	b.n	8001a96 <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_8g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <IIS2DLPC_ACC_GetSensitivity+0x17c>)
 8001a7c:	601a      	str	r2, [r3, #0]
           break;
 8001a7e:	e00a      	b.n	8001a96 <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_16g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	4a21      	ldr	r2, [pc, #132]	; (8001b08 <IIS2DLPC_ACC_GetSensitivity+0x180>)
 8001a84:	601a      	str	r2, [r3, #0]
          break;
 8001a86:	e006      	b.n	8001a96 <IIS2DLPC_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4a20      	ldr	r2, [pc, #128]	; (8001b0c <IIS2DLPC_ACC_GetSensitivity+0x184>)
 8001a8c:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	60fb      	str	r3, [r7, #12]
          break;
 8001a94:	bf00      	nop
      }
      break;
 8001a96:	e02c      	b.n	8001af2 <IIS2DLPC_ACC_GetSensitivity+0x16a>
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8001a98:	7afb      	ldrb	r3, [r7, #11]
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d81a      	bhi.n	8001ad4 <IIS2DLPC_ACC_GetSensitivity+0x14c>
 8001a9e:	a201      	add	r2, pc, #4	; (adr r2, 8001aa4 <IIS2DLPC_ACC_GetSensitivity+0x11c>)
 8001aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa4:	08001ab5 	.word	0x08001ab5
 8001aa8:	08001abd 	.word	0x08001abd
 8001aac:	08001ac5 	.word	0x08001ac5
 8001ab0:	08001acd 	.word	0x08001acd
      {
        case IIS2DLPC_2g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <IIS2DLPC_ACC_GetSensitivity+0x188>)
 8001ab8:	601a      	str	r2, [r3, #0]
           break;
 8001aba:	e012      	b.n	8001ae2 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_4g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <IIS2DLPC_ACC_GetSensitivity+0x18c>)
 8001ac0:	601a      	str	r2, [r3, #0]
          break;
 8001ac2:	e00e      	b.n	8001ae2 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_8g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	4a0d      	ldr	r2, [pc, #52]	; (8001afc <IIS2DLPC_ACC_GetSensitivity+0x174>)
 8001ac8:	601a      	str	r2, [r3, #0]
           break;
 8001aca:	e00a      	b.n	8001ae2 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_16g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4a0c      	ldr	r2, [pc, #48]	; (8001b00 <IIS2DLPC_ACC_GetSensitivity+0x178>)
 8001ad0:	601a      	str	r2, [r3, #0]
          break;
 8001ad2:	e006      	b.n	8001ae2 <IIS2DLPC_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <IIS2DLPC_ACC_GetSensitivity+0x184>)
 8001ad8:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
 8001ade:	60fb      	str	r3, [r7, #12]
          break;
 8001ae0:	bf00      	nop
      }
      break;
 8001ae2:	e006      	b.n	8001af2 <IIS2DLPC_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <IIS2DLPC_ACC_GetSensitivity+0x184>)
 8001ae8:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	60fb      	str	r3, [r7, #12]
      break;
 8001af0:	bf00      	nop
  }

  return ret;
 8001af2:	68fb      	ldr	r3, [r7, #12]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	3f79db23 	.word	0x3f79db23
 8001b00:	3ff9db23 	.word	0x3ff9db23
 8001b04:	4079db23 	.word	0x4079db23
 8001b08:	40f9db23 	.word	0x40f9db23
 8001b0c:	bf800000 	.word	0xbf800000
 8001b10:	3e79db23 	.word	0x3e79db23
 8001b14:	3ef9db23 	.word	0x3ef9db23

08001b18 <IIS2DLPC_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetOutputDataRate(IIS2DLPC_Object_t *pObj, float *Odr)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
  iis2dlpc_odr_t odr_low_level;
  iis2dlpc_mode_t mode;

  /* Get current output data rate. */
  if (iis2dlpc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2DLPC_OK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	331c      	adds	r3, #28
 8001b2a:	f107 020b 	add.w	r2, r7, #11
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 feeb 	bl	800290c <iis2dlpc_data_rate_get>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <IIS2DLPC_ACC_GetOutputDataRate+0x2a>
  {
    return IIS2DLPC_ERROR;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b40:	e1b4      	b.n	8001eac <IIS2DLPC_ACC_GetOutputDataRate+0x394>
  }

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	331c      	adds	r3, #28
 8001b46:	f107 020a 	add.w	r2, r7, #10
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fddd 	bl	800270c <iis2dlpc_power_mode_get>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <IIS2DLPC_ACC_GetOutputDataRate+0x46>
  {
    return IIS2DLPC_ERROR;
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5c:	e1a6      	b.n	8001eac <IIS2DLPC_ACC_GetOutputDataRate+0x394>
  }

  switch (odr_low_level)
 8001b5e:	7afb      	ldrb	r3, [r7, #11]
 8001b60:	2b22      	cmp	r3, #34	; 0x22
 8001b62:	f200 819b 	bhi.w	8001e9c <IIS2DLPC_ACC_GetOutputDataRate+0x384>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <IIS2DLPC_ACC_GetOutputDataRate+0x54>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001bf9 	.word	0x08001bf9
 8001b70:	08001c03 	.word	0x08001c03
 8001b74:	08001ca1 	.word	0x08001ca1
 8001b78:	08001ca9 	.word	0x08001ca9
 8001b7c:	08001cb1 	.word	0x08001cb1
 8001b80:	08001cb9 	.word	0x08001cb9
 8001b84:	08001cc1 	.word	0x08001cc1
 8001b88:	08001cc9 	.word	0x08001cc9
 8001b8c:	08001d65 	.word	0x08001d65
 8001b90:	08001e01 	.word	0x08001e01
 8001b94:	08001e9d 	.word	0x08001e9d
 8001b98:	08001e9d 	.word	0x08001e9d
 8001b9c:	08001e9d 	.word	0x08001e9d
 8001ba0:	08001e9d 	.word	0x08001e9d
 8001ba4:	08001e9d 	.word	0x08001e9d
 8001ba8:	08001e9d 	.word	0x08001e9d
 8001bac:	08001e9d 	.word	0x08001e9d
 8001bb0:	08001e9d 	.word	0x08001e9d
 8001bb4:	08001bf9 	.word	0x08001bf9
 8001bb8:	08001e9d 	.word	0x08001e9d
 8001bbc:	08001e9d 	.word	0x08001e9d
 8001bc0:	08001e9d 	.word	0x08001e9d
 8001bc4:	08001e9d 	.word	0x08001e9d
 8001bc8:	08001e9d 	.word	0x08001e9d
 8001bcc:	08001e9d 	.word	0x08001e9d
 8001bd0:	08001e9d 	.word	0x08001e9d
 8001bd4:	08001e9d 	.word	0x08001e9d
 8001bd8:	08001e9d 	.word	0x08001e9d
 8001bdc:	08001e9d 	.word	0x08001e9d
 8001be0:	08001e9d 	.word	0x08001e9d
 8001be4:	08001e9d 	.word	0x08001e9d
 8001be8:	08001e9d 	.word	0x08001e9d
 8001bec:	08001e9d 	.word	0x08001e9d
 8001bf0:	08001e9d 	.word	0x08001e9d
 8001bf4:	08001bf9 	.word	0x08001bf9
  {
    case IIS2DLPC_XL_ODR_OFF:
    case IIS2DLPC_XL_SET_SW_TRIG:
    case IIS2DLPC_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
      break;
 8001c00:	e153      	b.n	8001eaa <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8001c02:	7abb      	ldrb	r3, [r7, #10]
 8001c04:	2b1b      	cmp	r3, #27
 8001c06:	d843      	bhi.n	8001c90 <IIS2DLPC_ACC_GetOutputDataRate+0x178>
 8001c08:	a201      	add	r2, pc, #4	; (adr r2, 8001c10 <IIS2DLPC_ACC_GetOutputDataRate+0xf8>)
 8001c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0e:	bf00      	nop
 8001c10:	08001c89 	.word	0x08001c89
 8001c14:	08001c89 	.word	0x08001c89
 8001c18:	08001c89 	.word	0x08001c89
 8001c1c:	08001c89 	.word	0x08001c89
 8001c20:	08001c81 	.word	0x08001c81
 8001c24:	08001c91 	.word	0x08001c91
 8001c28:	08001c91 	.word	0x08001c91
 8001c2c:	08001c91 	.word	0x08001c91
 8001c30:	08001c89 	.word	0x08001c89
 8001c34:	08001c89 	.word	0x08001c89
 8001c38:	08001c89 	.word	0x08001c89
 8001c3c:	08001c89 	.word	0x08001c89
 8001c40:	08001c91 	.word	0x08001c91
 8001c44:	08001c91 	.word	0x08001c91
 8001c48:	08001c91 	.word	0x08001c91
 8001c4c:	08001c91 	.word	0x08001c91
 8001c50:	08001c89 	.word	0x08001c89
 8001c54:	08001c89 	.word	0x08001c89
 8001c58:	08001c89 	.word	0x08001c89
 8001c5c:	08001c89 	.word	0x08001c89
 8001c60:	08001c81 	.word	0x08001c81
 8001c64:	08001c91 	.word	0x08001c91
 8001c68:	08001c91 	.word	0x08001c91
 8001c6c:	08001c91 	.word	0x08001c91
 8001c70:	08001c89 	.word	0x08001c89
 8001c74:	08001c89 	.word	0x08001c89
 8001c78:	08001c89 	.word	0x08001c89
 8001c7c:	08001c89 	.word	0x08001c89
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	4a8c      	ldr	r2, [pc, #560]	; (8001eb4 <IIS2DLPC_ACC_GetOutputDataRate+0x39c>)
 8001c84:	601a      	str	r2, [r3, #0]
           break;
 8001c86:	e00a      	b.n	8001c9e <IIS2DLPC_ACC_GetOutputDataRate+0x186>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4a8b      	ldr	r2, [pc, #556]	; (8001eb8 <IIS2DLPC_ACC_GetOutputDataRate+0x3a0>)
 8001c8c:	601a      	str	r2, [r3, #0]
          break;
 8001c8e:	e006      	b.n	8001c9e <IIS2DLPC_ACC_GetOutputDataRate+0x186>

        default:
          *Odr = -1.0f;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	4a8a      	ldr	r2, [pc, #552]	; (8001ebc <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8001c94:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	60fb      	str	r3, [r7, #12]
          break;
 8001c9c:	bf00      	nop
      }
      break;
 8001c9e:	e104      	b.n	8001eaa <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4a84      	ldr	r2, [pc, #528]	; (8001eb4 <IIS2DLPC_ACC_GetOutputDataRate+0x39c>)
 8001ca4:	601a      	str	r2, [r3, #0]
      break;
 8001ca6:	e100      	b.n	8001eaa <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_25Hz:
      *Odr = 25.0f;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	4a85      	ldr	r2, [pc, #532]	; (8001ec0 <IIS2DLPC_ACC_GetOutputDataRate+0x3a8>)
 8001cac:	601a      	str	r2, [r3, #0]
      break;
 8001cae:	e0fc      	b.n	8001eaa <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	4a84      	ldr	r2, [pc, #528]	; (8001ec4 <IIS2DLPC_ACC_GetOutputDataRate+0x3ac>)
 8001cb4:	601a      	str	r2, [r3, #0]
      break;
 8001cb6:	e0f8      	b.n	8001eaa <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_100Hz:
      *Odr = 100.0f;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	4a83      	ldr	r2, [pc, #524]	; (8001ec8 <IIS2DLPC_ACC_GetOutputDataRate+0x3b0>)
 8001cbc:	601a      	str	r2, [r3, #0]
      break;
 8001cbe:	e0f4      	b.n	8001eaa <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_200Hz:
      *Odr = 200.0f;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4a82      	ldr	r2, [pc, #520]	; (8001ecc <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8001cc4:	601a      	str	r2, [r3, #0]
      break;
 8001cc6:	e0f0      	b.n	8001eaa <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_400Hz:
      switch (mode)
 8001cc8:	7abb      	ldrb	r3, [r7, #10]
 8001cca:	2b1b      	cmp	r3, #27
 8001ccc:	d842      	bhi.n	8001d54 <IIS2DLPC_ACC_GetOutputDataRate+0x23c>
 8001cce:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <IIS2DLPC_ACC_GetOutputDataRate+0x1bc>)
 8001cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd4:	08001d4d 	.word	0x08001d4d
 8001cd8:	08001d4d 	.word	0x08001d4d
 8001cdc:	08001d4d 	.word	0x08001d4d
 8001ce0:	08001d4d 	.word	0x08001d4d
 8001ce4:	08001d45 	.word	0x08001d45
 8001ce8:	08001d55 	.word	0x08001d55
 8001cec:	08001d55 	.word	0x08001d55
 8001cf0:	08001d55 	.word	0x08001d55
 8001cf4:	08001d4d 	.word	0x08001d4d
 8001cf8:	08001d4d 	.word	0x08001d4d
 8001cfc:	08001d4d 	.word	0x08001d4d
 8001d00:	08001d4d 	.word	0x08001d4d
 8001d04:	08001d55 	.word	0x08001d55
 8001d08:	08001d55 	.word	0x08001d55
 8001d0c:	08001d55 	.word	0x08001d55
 8001d10:	08001d55 	.word	0x08001d55
 8001d14:	08001d4d 	.word	0x08001d4d
 8001d18:	08001d4d 	.word	0x08001d4d
 8001d1c:	08001d4d 	.word	0x08001d4d
 8001d20:	08001d4d 	.word	0x08001d4d
 8001d24:	08001d45 	.word	0x08001d45
 8001d28:	08001d55 	.word	0x08001d55
 8001d2c:	08001d55 	.word	0x08001d55
 8001d30:	08001d55 	.word	0x08001d55
 8001d34:	08001d4d 	.word	0x08001d4d
 8001d38:	08001d4d 	.word	0x08001d4d
 8001d3c:	08001d4d 	.word	0x08001d4d
 8001d40:	08001d4d 	.word	0x08001d4d
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4a62      	ldr	r2, [pc, #392]	; (8001ed0 <IIS2DLPC_ACC_GetOutputDataRate+0x3b8>)
 8001d48:	601a      	str	r2, [r3, #0]
           break;
 8001d4a:	e00a      	b.n	8001d62 <IIS2DLPC_ACC_GetOutputDataRate+0x24a>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	4a5f      	ldr	r2, [pc, #380]	; (8001ecc <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8001d50:	601a      	str	r2, [r3, #0]
          break;
 8001d52:	e006      	b.n	8001d62 <IIS2DLPC_ACC_GetOutputDataRate+0x24a>

        default:
          *Odr = -1.0f;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4a59      	ldr	r2, [pc, #356]	; (8001ebc <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8001d58:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	60fb      	str	r3, [r7, #12]
          break;
 8001d60:	bf00      	nop
      }
      break;
 8001d62:	e0a2      	b.n	8001eaa <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_800Hz:
      switch (mode)
 8001d64:	7abb      	ldrb	r3, [r7, #10]
 8001d66:	2b1b      	cmp	r3, #27
 8001d68:	d842      	bhi.n	8001df0 <IIS2DLPC_ACC_GetOutputDataRate+0x2d8>
 8001d6a:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <IIS2DLPC_ACC_GetOutputDataRate+0x258>)
 8001d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d70:	08001de9 	.word	0x08001de9
 8001d74:	08001de9 	.word	0x08001de9
 8001d78:	08001de9 	.word	0x08001de9
 8001d7c:	08001de9 	.word	0x08001de9
 8001d80:	08001de1 	.word	0x08001de1
 8001d84:	08001df1 	.word	0x08001df1
 8001d88:	08001df1 	.word	0x08001df1
 8001d8c:	08001df1 	.word	0x08001df1
 8001d90:	08001de9 	.word	0x08001de9
 8001d94:	08001de9 	.word	0x08001de9
 8001d98:	08001de9 	.word	0x08001de9
 8001d9c:	08001de9 	.word	0x08001de9
 8001da0:	08001df1 	.word	0x08001df1
 8001da4:	08001df1 	.word	0x08001df1
 8001da8:	08001df1 	.word	0x08001df1
 8001dac:	08001df1 	.word	0x08001df1
 8001db0:	08001de9 	.word	0x08001de9
 8001db4:	08001de9 	.word	0x08001de9
 8001db8:	08001de9 	.word	0x08001de9
 8001dbc:	08001de9 	.word	0x08001de9
 8001dc0:	08001de1 	.word	0x08001de1
 8001dc4:	08001df1 	.word	0x08001df1
 8001dc8:	08001df1 	.word	0x08001df1
 8001dcc:	08001df1 	.word	0x08001df1
 8001dd0:	08001de9 	.word	0x08001de9
 8001dd4:	08001de9 	.word	0x08001de9
 8001dd8:	08001de9 	.word	0x08001de9
 8001ddc:	08001de9 	.word	0x08001de9
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4a3c      	ldr	r2, [pc, #240]	; (8001ed4 <IIS2DLPC_ACC_GetOutputDataRate+0x3bc>)
 8001de4:	601a      	str	r2, [r3, #0]
           break;
 8001de6:	e00a      	b.n	8001dfe <IIS2DLPC_ACC_GetOutputDataRate+0x2e6>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	4a38      	ldr	r2, [pc, #224]	; (8001ecc <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8001dec:	601a      	str	r2, [r3, #0]
          break;
 8001dee:	e006      	b.n	8001dfe <IIS2DLPC_ACC_GetOutputDataRate+0x2e6>

        default:
          *Odr = -1.0f;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4a32      	ldr	r2, [pc, #200]	; (8001ebc <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8001df4:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	60fb      	str	r3, [r7, #12]
          break;
 8001dfc:	bf00      	nop
      }
      break;
 8001dfe:	e054      	b.n	8001eaa <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_1k6Hz:
      switch (mode)
 8001e00:	7abb      	ldrb	r3, [r7, #10]
 8001e02:	2b1b      	cmp	r3, #27
 8001e04:	d842      	bhi.n	8001e8c <IIS2DLPC_ACC_GetOutputDataRate+0x374>
 8001e06:	a201      	add	r2, pc, #4	; (adr r2, 8001e0c <IIS2DLPC_ACC_GetOutputDataRate+0x2f4>)
 8001e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0c:	08001e85 	.word	0x08001e85
 8001e10:	08001e85 	.word	0x08001e85
 8001e14:	08001e85 	.word	0x08001e85
 8001e18:	08001e85 	.word	0x08001e85
 8001e1c:	08001e7d 	.word	0x08001e7d
 8001e20:	08001e8d 	.word	0x08001e8d
 8001e24:	08001e8d 	.word	0x08001e8d
 8001e28:	08001e8d 	.word	0x08001e8d
 8001e2c:	08001e85 	.word	0x08001e85
 8001e30:	08001e85 	.word	0x08001e85
 8001e34:	08001e85 	.word	0x08001e85
 8001e38:	08001e85 	.word	0x08001e85
 8001e3c:	08001e8d 	.word	0x08001e8d
 8001e40:	08001e8d 	.word	0x08001e8d
 8001e44:	08001e8d 	.word	0x08001e8d
 8001e48:	08001e8d 	.word	0x08001e8d
 8001e4c:	08001e85 	.word	0x08001e85
 8001e50:	08001e85 	.word	0x08001e85
 8001e54:	08001e85 	.word	0x08001e85
 8001e58:	08001e85 	.word	0x08001e85
 8001e5c:	08001e7d 	.word	0x08001e7d
 8001e60:	08001e8d 	.word	0x08001e8d
 8001e64:	08001e8d 	.word	0x08001e8d
 8001e68:	08001e8d 	.word	0x08001e8d
 8001e6c:	08001e85 	.word	0x08001e85
 8001e70:	08001e85 	.word	0x08001e85
 8001e74:	08001e85 	.word	0x08001e85
 8001e78:	08001e85 	.word	0x08001e85
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4a16      	ldr	r2, [pc, #88]	; (8001ed8 <IIS2DLPC_ACC_GetOutputDataRate+0x3c0>)
 8001e80:	601a      	str	r2, [r3, #0]
           break;
 8001e82:	e00a      	b.n	8001e9a <IIS2DLPC_ACC_GetOutputDataRate+0x382>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8001e88:	601a      	str	r2, [r3, #0]
          break;
 8001e8a:	e006      	b.n	8001e9a <IIS2DLPC_ACC_GetOutputDataRate+0x382>

        default:
          *Odr = -1.0f;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8001e90:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	60fb      	str	r3, [r7, #12]
          break;
 8001e98:	bf00      	nop
      }
      break;
 8001e9a:	e006      	b.n	8001eaa <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    default:
      *Odr = -1.0f;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8001ea0:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	60fb      	str	r3, [r7, #12]
      break;
 8001ea8:	bf00      	nop
  }

  return ret;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	41480000 	.word	0x41480000
 8001eb8:	3fcccccd 	.word	0x3fcccccd
 8001ebc:	bf800000 	.word	0xbf800000
 8001ec0:	41c80000 	.word	0x41c80000
 8001ec4:	42480000 	.word	0x42480000
 8001ec8:	42c80000 	.word	0x42c80000
 8001ecc:	43480000 	.word	0x43480000
 8001ed0:	43c80000 	.word	0x43c80000
 8001ed4:	44480000 	.word	0x44480000
 8001ed8:	44c80000 	.word	0x44c80000

08001edc <IIS2DLPC_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_SetOutputDataRate(IIS2DLPC_Object_t *pObj, float Odr)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return IIS2DLPC_ACC_SetOutputDataRate_With_Mode(pObj, Odr, IIS2DLPC_HIGH_PERFORMANCE_MODE, IIS2DLPC_LOW_NOISE_DISABLE);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2100      	movs	r1, #0
 8001eec:	ed97 0a00 	vldr	s0, [r7]
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f805 	bl	8001f00 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>
 8001ef6:	4603      	mov	r3, r0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_SetOutputDataRate_With_Mode(IIS2DLPC_Object_t *pObj, float Odr, IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	71fb      	strb	r3, [r7, #7]
 8001f10:	4613      	mov	r3, r2
 8001f12:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d109      	bne.n	8001f32 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8001f1e:	79ba      	ldrb	r2, [r7, #6]
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	4619      	mov	r1, r3
 8001f24:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f98d 	bl	8002248 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	e008      	b.n	8001f44 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8001f32:	79ba      	ldrb	r2, [r7, #6]
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	4619      	mov	r1, r3
 8001f38:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fa9f 	bl	8002480 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>
 8001f42:	4603      	mov	r3, r0
  }
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <IIS2DLPC_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetFullScale(IIS2DLPC_Object_t *pObj, int32_t *FullScale)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
  iis2dlpc_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS2DLPC_OK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	331c      	adds	r3, #28
 8001f5e:	f107 020b 	add.w	r2, r7, #11
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 fdc5 	bl	8002af4 <iis2dlpc_full_scale_get>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <IIS2DLPC_ACC_GetFullScale+0x2a>
  {
    return IIS2DLPC_ERROR;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
 8001f74:	e027      	b.n	8001fc6 <IIS2DLPC_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d81b      	bhi.n	8001fb4 <IIS2DLPC_ACC_GetFullScale+0x68>
 8001f7c:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <IIS2DLPC_ACC_GetFullScale+0x38>)
 8001f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f82:	bf00      	nop
 8001f84:	08001f95 	.word	0x08001f95
 8001f88:	08001f9d 	.word	0x08001f9d
 8001f8c:	08001fa5 	.word	0x08001fa5
 8001f90:	08001fad 	.word	0x08001fad
  {
    case IIS2DLPC_2g:
      *FullScale =  2;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2202      	movs	r2, #2
 8001f98:	601a      	str	r2, [r3, #0]
      break;
 8001f9a:	e013      	b.n	8001fc4 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_4g:
      *FullScale =  4;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	601a      	str	r2, [r3, #0]
      break;
 8001fa2:	e00f      	b.n	8001fc4 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_8g:
      *FullScale =  8;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	601a      	str	r2, [r3, #0]
      break;
 8001faa:	e00b      	b.n	8001fc4 <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_16g:
      *FullScale = 16;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2210      	movs	r2, #16
 8001fb0:	601a      	str	r2, [r3, #0]
      break;
 8001fb2:	e007      	b.n	8001fc4 <IIS2DLPC_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001fba:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc0:	60fb      	str	r3, [r7, #12]
      break;
 8001fc2:	bf00      	nop
  }

  return ret;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop

08001fd0 <IIS2DLPC_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_SetFullScale(IIS2DLPC_Object_t *pObj, int32_t FullScale)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  iis2dlpc_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? IIS2DLPC_2g
         : (FullScale <= 4) ? IIS2DLPC_4g
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	dd0b      	ble.n	8001ff8 <IIS2DLPC_ACC_SetFullScale+0x28>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	dd06      	ble.n	8001ff4 <IIS2DLPC_ACC_SetFullScale+0x24>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	dc01      	bgt.n	8001ff0 <IIS2DLPC_ACC_SetFullScale+0x20>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e004      	b.n	8001ffa <IIS2DLPC_ACC_SetFullScale+0x2a>
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e002      	b.n	8001ffa <IIS2DLPC_ACC_SetFullScale+0x2a>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <IIS2DLPC_ACC_SetFullScale+0x2a>
 8001ff8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? IIS2DLPC_2g
 8001ffa:	73fb      	strb	r3, [r7, #15]
         : (FullScale <= 8) ? IIS2DLPC_8g
         :                    IIS2DLPC_16g;

  if (iis2dlpc_full_scale_set(&(pObj->Ctx), new_fs) != IIS2DLPC_OK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	331c      	adds	r3, #28
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fd4f 	bl	8002aa8 <iis2dlpc_full_scale_set>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <IIS2DLPC_ACC_SetFullScale+0x46>
  {
    return IIS2DLPC_ERROR;
 8002010:	f04f 33ff 	mov.w	r3, #4294967295
 8002014:	e000      	b.n	8002018 <IIS2DLPC_ACC_SetFullScale+0x48>
  }

  return IIS2DLPC_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <IIS2DLPC_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetAxesRaw(IIS2DLPC_Object_t *pObj, IIS2DLPC_AxesRaw_t *Value)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  iis2dlpc_axis3bit16_t data_raw;
  iis2dlpc_mode_t mode;
  int32_t ret = IIS2DLPC_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	331c      	adds	r3, #28
 8002032:	f107 020b 	add.w	r2, r7, #11
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fb67 	bl	800270c <iis2dlpc_power_mode_get>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <IIS2DLPC_ACC_GetAxesRaw+0x2a>
  {
    return IIS2DLPC_ERROR;
 8002044:	f04f 33ff 	mov.w	r3, #4294967295
 8002048:	e089      	b.n	800215e <IIS2DLPC_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (iis2dlpc_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DLPC_OK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	331c      	adds	r3, #28
 800204e:	f107 020c 	add.w	r2, r7, #12
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f000 fd85 	bl	8002b64 <iis2dlpc_acceleration_raw_get>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <IIS2DLPC_ACC_GetAxesRaw+0x46>
  {
    return IIS2DLPC_ERROR;
 8002060:	f04f 33ff 	mov.w	r3, #4294967295
 8002064:	e07b      	b.n	800215e <IIS2DLPC_ACC_GetAxesRaw+0x13e>
  }

  switch(mode)
 8002066:	7afb      	ldrb	r3, [r7, #11]
 8002068:	2b1b      	cmp	r3, #27
 800206a:	d873      	bhi.n	8002154 <IIS2DLPC_ACC_GetAxesRaw+0x134>
 800206c:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <IIS2DLPC_ACC_GetAxesRaw+0x54>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	080020e5 	.word	0x080020e5
 8002078:	0800211d 	.word	0x0800211d
 800207c:	0800211d 	.word	0x0800211d
 8002080:	0800211d 	.word	0x0800211d
 8002084:	0800211d 	.word	0x0800211d
 8002088:	08002155 	.word	0x08002155
 800208c:	08002155 	.word	0x08002155
 8002090:	08002155 	.word	0x08002155
 8002094:	080020e5 	.word	0x080020e5
 8002098:	0800211d 	.word	0x0800211d
 800209c:	0800211d 	.word	0x0800211d
 80020a0:	0800211d 	.word	0x0800211d
 80020a4:	08002155 	.word	0x08002155
 80020a8:	08002155 	.word	0x08002155
 80020ac:	08002155 	.word	0x08002155
 80020b0:	08002155 	.word	0x08002155
 80020b4:	080020e5 	.word	0x080020e5
 80020b8:	0800211d 	.word	0x0800211d
 80020bc:	0800211d 	.word	0x0800211d
 80020c0:	0800211d 	.word	0x0800211d
 80020c4:	0800211d 	.word	0x0800211d
 80020c8:	08002155 	.word	0x08002155
 80020cc:	08002155 	.word	0x08002155
 80020d0:	08002155 	.word	0x08002155
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	0800211d 	.word	0x0800211d
 80020dc:	0800211d 	.word	0x0800211d
 80020e0:	0800211d 	.word	0x0800211d
    case IIS2DLPC_CONT_LOW_PWR_12bit:
    case IIS2DLPC_SINGLE_LOW_PWR_12bit:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
    case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80020e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	da00      	bge.n	80020ee <IIS2DLPC_ACC_GetAxesRaw+0xce>
 80020ec:	330f      	adds	r3, #15
 80020ee:	111b      	asrs	r3, r3, #4
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 80020f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	da00      	bge.n	8002100 <IIS2DLPC_ACC_GetAxesRaw+0xe0>
 80020fe:	330f      	adds	r3, #15
 8002100:	111b      	asrs	r3, r3, #4
 8002102:	b21a      	sxth	r2, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8002108:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	da00      	bge.n	8002112 <IIS2DLPC_ACC_GetAxesRaw+0xf2>
 8002110:	330f      	adds	r3, #15
 8002112:	111b      	asrs	r3, r3, #4
 8002114:	b21a      	sxth	r2, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	809a      	strh	r2, [r3, #4]
      break;
 800211a:	e01f      	b.n	800215c <IIS2DLPC_ACC_GetAxesRaw+0x13c>
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 800211c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	da00      	bge.n	8002126 <IIS2DLPC_ACC_GetAxesRaw+0x106>
 8002124:	3303      	adds	r3, #3
 8002126:	109b      	asrs	r3, r3, #2
 8002128:	b21a      	sxth	r2, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 800212e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002132:	2b00      	cmp	r3, #0
 8002134:	da00      	bge.n	8002138 <IIS2DLPC_ACC_GetAxesRaw+0x118>
 8002136:	3303      	adds	r3, #3
 8002138:	109b      	asrs	r3, r3, #2
 800213a:	b21a      	sxth	r2, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8002140:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	da00      	bge.n	800214a <IIS2DLPC_ACC_GetAxesRaw+0x12a>
 8002148:	3303      	adds	r3, #3
 800214a:	109b      	asrs	r3, r3, #2
 800214c:	b21a      	sxth	r2, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	809a      	strh	r2, [r3, #4]
      break;
 8002152:	e003      	b.n	800215c <IIS2DLPC_ACC_GetAxesRaw+0x13c>

    default:
      ret = IIS2DLPC_ERROR;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
 8002158:	617b      	str	r3, [r7, #20]
      break;
 800215a:	bf00      	nop
  }

  return ret;
 800215c:	697b      	ldr	r3, [r7, #20]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop

08002168 <IIS2DLPC_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetAxes(IIS2DLPC_Object_t *pObj, IIS2DLPC_Axes_t *Acceleration)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  IIS2DLPC_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (IIS2DLPC_ACC_GetAxesRaw(pObj, &data_raw) != IIS2DLPC_OK)
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	4619      	mov	r1, r3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff4e 	bl	8002020 <IIS2DLPC_ACC_GetAxesRaw>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <IIS2DLPC_ACC_GetAxes+0x28>
  {
    return IIS2DLPC_ERROR;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	e03c      	b.n	800220a <IIS2DLPC_ACC_GetAxes+0xa2>
  }

  /* Get IIS2DLPC actual sensitivity. */
  if (IIS2DLPC_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DLPC_OK)
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	4619      	mov	r1, r3
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fbf6 	bl	8001988 <IIS2DLPC_ACC_GetSensitivity>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <IIS2DLPC_ACC_GetAxes+0x40>
  {
    return IIS2DLPC_ERROR;
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	e030      	b.n	800220a <IIS2DLPC_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80021a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80021ac:	ee07 3a90 	vmov	s15, r3
 80021b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80021b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021c0:	ee17 2a90 	vmov	r2, s15
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80021c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021cc:	ee07 3a90 	vmov	s15, r3
 80021d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80021d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021e0:	ee17 2a90 	vmov	r2, s15
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80021e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80021f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002200:	ee17 2a90 	vmov	r2, s15
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	609a      	str	r2, [r3, #8]

  return IIS2DLPC_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <IIS2DLPC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_Write_Reg(IIS2DLPC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	70fb      	strb	r3, [r7, #3]
 800221e:	4613      	mov	r3, r2
 8002220:	70bb      	strb	r3, [r7, #2]
  if (iis2dlpc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2DLPC_OK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f103 001c 	add.w	r0, r3, #28
 8002228:	1cba      	adds	r2, r7, #2
 800222a:	78f9      	ldrb	r1, [r7, #3]
 800222c:	2301      	movs	r3, #1
 800222e:	f000 fa07 	bl	8002640 <iis2dlpc_write_reg>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <IIS2DLPC_Write_Reg+0x2c>
  {
    return IIS2DLPC_ERROR;
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
 800223c:	e000      	b.n	8002240 <IIS2DLPC_Write_Reg+0x2e>
  }

  return IIS2DLPC_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(IIS2DLPC_Object_t *pObj, float Odr, IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	ed87 0a02 	vstr	s0, [r7, #8]
 8002254:	460b      	mov	r3, r1
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	4613      	mov	r3, r2
 800225a:	71bb      	strb	r3, [r7, #6]
  iis2dlpc_odr_t new_odr;
  iis2dlpc_mode_t new_power_mode;

  switch (Mode)
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	3b01      	subs	r3, #1
 8002260:	2b03      	cmp	r3, #3
 8002262:	d80b      	bhi.n	800227c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x34>
 8002264:	a201      	add	r2, pc, #4	; (adr r2, 800226c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x24>)
 8002266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226a:	bf00      	nop
 800226c:	080022a9 	.word	0x080022a9
 8002270:	080022d5 	.word	0x080022d5
 8002274:	08002301 	.word	0x08002301
 8002278:	0800232d 	.word	0x0800232d
  {
    case IIS2DLPC_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d002      	beq.n	8002288 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE;
 8002282:	2304      	movs	r3, #4
 8002284:	75fb      	strb	r3, [r7, #23]
          break;
 8002286:	e002      	b.n	800228e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x46>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 8002288:	2314      	movs	r3, #20
 800228a:	75fb      	strb	r3, [r7, #23]
          break;
 800228c:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if(Odr < 12.5f)
 800228e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002292:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229e:	d400      	bmi.n	80022a2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80022a0:	e05a      	b.n	8002358 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80022a2:	4b6f      	ldr	r3, [pc, #444]	; (8002460 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80022a4:	60bb      	str	r3, [r7, #8]
      break;
 80022a6:	e057      	b.n	8002358 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE4:
      switch (Noise)
 80022a8:	79bb      	ldrb	r3, [r7, #6]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d002      	beq.n	80022b4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_4;
 80022ae:	2303      	movs	r3, #3
 80022b0:	75fb      	strb	r3, [r7, #23]
          break;
 80022b2:	e002      	b.n	80022ba <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x72>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 80022b4:	2313      	movs	r3, #19
 80022b6:	75fb      	strb	r3, [r7, #23]
          break;
 80022b8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 80022ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80022be:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002464 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80022c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ca:	dc00      	bgt.n	80022ce <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 80022cc:	e044      	b.n	8002358 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80022ce:	4b66      	ldr	r3, [pc, #408]	; (8002468 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80022d0:	60bb      	str	r3, [r7, #8]
      break;
 80022d2:	e041      	b.n	8002358 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE3:
      switch (Noise)
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d002      	beq.n	80022e0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_3;
 80022da:	2302      	movs	r3, #2
 80022dc:	75fb      	strb	r3, [r7, #23]
          break;
 80022de:	e002      	b.n	80022e6 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 80022e0:	2312      	movs	r3, #18
 80022e2:	75fb      	strb	r3, [r7, #23]
          break;
 80022e4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 80022e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ea:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002464 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80022ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f6:	dc00      	bgt.n	80022fa <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 80022f8:	e02e      	b.n	8002358 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80022fa:	4b5b      	ldr	r3, [pc, #364]	; (8002468 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80022fc:	60bb      	str	r3, [r7, #8]
      break;
 80022fe:	e02b      	b.n	8002358 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE2:
      switch (Noise)
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d002      	beq.n	800230c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_2;
 8002306:	2301      	movs	r3, #1
 8002308:	75fb      	strb	r3, [r7, #23]
          break;
 800230a:	e002      	b.n	8002312 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xca>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 800230c:	2311      	movs	r3, #17
 800230e:	75fb      	strb	r3, [r7, #23]
          break;
 8002310:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8002312:	edd7 7a02 	vldr	s15, [r7, #8]
 8002316:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002464 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800231a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002322:	dc00      	bgt.n	8002326 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8002324:	e018      	b.n	8002358 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002326:	4b50      	ldr	r3, [pc, #320]	; (8002468 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002328:	60bb      	str	r3, [r7, #8]
      break;
 800232a:	e015      	b.n	8002358 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE1:
      switch (Noise)
 800232c:	79bb      	ldrb	r3, [r7, #6]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d002      	beq.n	8002338 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_12bit;
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]
          break;
 8002336:	e002      	b.n	800233e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002338:	2310      	movs	r3, #16
 800233a:	75fb      	strb	r3, [r7, #23]
          break;
 800233c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 800233e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002342:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002464 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800234a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234e:	dc00      	bgt.n	8002352 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8002350:	e001      	b.n	8002356 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8002352:	4b45      	ldr	r3, [pc, #276]	; (8002468 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002354:	60bb      	str	r3, [r7, #8]
      break;
 8002356:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? IIS2DLPC_XL_ODR_1Hz6_LP_ONLY
          : (Odr <=   12.5f) ? IIS2DLPC_XL_ODR_12Hz5
 8002358:	edd7 7a02 	vldr	s15, [r7, #8]
 800235c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800246c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x224>
 8002360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002368:	d801      	bhi.n	800236e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x126>
 800236a:	2301      	movs	r3, #1
 800236c:	e04d      	b.n	800240a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800236e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002372:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237e:	d801      	bhi.n	8002384 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002380:	2302      	movs	r3, #2
 8002382:	e042      	b.n	800240a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002384:	edd7 7a02 	vldr	s15, [r7, #8]
 8002388:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800238c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002394:	d801      	bhi.n	800239a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x152>
 8002396:	2303      	movs	r3, #3
 8002398:	e037      	b.n	800240a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800239a:	edd7 7a02 	vldr	s15, [r7, #8]
 800239e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002470 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x228>
 80023a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023aa:	d801      	bhi.n	80023b0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x168>
 80023ac:	2304      	movs	r3, #4
 80023ae:	e02c      	b.n	800240a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80023b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80023b4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002474 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x22c>
 80023b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c0:	d801      	bhi.n	80023c6 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80023c2:	2305      	movs	r3, #5
 80023c4:	e021      	b.n	800240a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80023c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80023ca:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002464 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80023ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d6:	d801      	bhi.n	80023dc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x194>
 80023d8:	2306      	movs	r3, #6
 80023da:	e016      	b.n	800240a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80023dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80023e0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002478 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x230>
 80023e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ec:	d801      	bhi.n	80023f2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 80023ee:	2307      	movs	r3, #7
 80023f0:	e00b      	b.n	800240a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80023f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80023f6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800247c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x234>
 80023fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	d801      	bhi.n	8002408 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8002404:	2308      	movs	r3, #8
 8002406:	e000      	b.n	800240a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002408:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? IIS2DLPC_XL_ODR_1Hz6_LP_ONLY
 800240a:	75bb      	strb	r3, [r7, #22]
          : (Odr <=  400.0f) ? IIS2DLPC_XL_ODR_400Hz
          : (Odr <=  800.0f) ? IIS2DLPC_XL_ODR_800Hz
          :                    IIS2DLPC_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2DLPC_OK)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	331c      	adds	r3, #28
 8002410:	7dba      	ldrb	r2, [r7, #22]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fa33 	bl	8002880 <iis2dlpc_data_rate_set>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return IIS2DLPC_ERROR;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
 8002424:	e018      	b.n	8002458 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), new_power_mode) != IIS2DLPC_OK)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	331c      	adds	r3, #28
 800242a:	7dfa      	ldrb	r2, [r7, #23]
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f91e 	bl	8002670 <iis2dlpc_power_mode_set>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return IIS2DLPC_ERROR;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	e00b      	b.n	8002458 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	79ba      	ldrb	r2, [r7, #6]
 8002452:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2DLPC_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	41480000 	.word	0x41480000
 8002464:	43480000 	.word	0x43480000
 8002468:	43480000 	.word	0x43480000
 800246c:	3fcccccd 	.word	0x3fcccccd
 8002470:	42480000 	.word	0x42480000
 8002474:	42c80000 	.word	0x42c80000
 8002478:	43c80000 	.word	0x43c80000
 800247c:	44480000 	.word	0x44480000

08002480 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(IIS2DLPC_Object_t *pObj, float Odr, IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	ed87 0a02 	vstr	s0, [r7, #8]
 800248c:	460b      	mov	r3, r1
 800248e:	71fb      	strb	r3, [r7, #7]
 8002490:	4613      	mov	r3, r2
 8002492:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	79fa      	ldrb	r2, [r7, #7]
 8002498:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	79ba      	ldrb	r2, [r7, #6]
 80024a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                : (Odr <=   12.5f) ?   12.5f
 80024a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80024a8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002568 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80024ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	d801      	bhi.n	80024ba <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80024b6:	4b2d      	ldr	r3, [pc, #180]	; (800256c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80024b8:	e04d      	b.n	8002556 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   25.0f) ?   25.0f
 80024ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80024be:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80024c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ca:	d801      	bhi.n	80024d0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x50>
 80024cc:	4b28      	ldr	r3, [pc, #160]	; (8002570 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 80024ce:	e042      	b.n	8002556 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   50.0f) ?   50.0f
 80024d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80024d4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80024d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e0:	d801      	bhi.n	80024e6 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x66>
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 80024e4:	e037      	b.n	8002556 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  100.0f) ?  100.0f
 80024e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80024ea:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002578 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80024ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	d801      	bhi.n	80024fc <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x7c>
 80024f8:	4b20      	ldr	r3, [pc, #128]	; (800257c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 80024fa:	e02c      	b.n	8002556 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  200.0f) ?  200.0f
 80024fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002500:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002580 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d801      	bhi.n	8002512 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x92>
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8002510:	e021      	b.n	8002556 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  400.0f) ?  400.0f
 8002512:	edd7 7a02 	vldr	s15, [r7, #8]
 8002516:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002588 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x108>
 800251a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	d801      	bhi.n	8002528 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8002526:	e016      	b.n	8002556 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  800.0f) ?  800.0f
 8002528:	edd7 7a02 	vldr	s15, [r7, #8]
 800252c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002590 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x110>
 8002530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	d801      	bhi.n	800253e <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xbe>
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x114>)
 800253c:	e00b      	b.n	8002556 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                :                    1600.0f;
 800253e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002542:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002598 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x118>
 8002546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	d801      	bhi.n	8002554 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8002552:	e000      	b.n	8002556 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8002554:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	62d3      	str	r3, [r2, #44]	; 0x2c

  return IIS2DLPC_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	3fcccccd 	.word	0x3fcccccd
 800256c:	3fcccccd 	.word	0x3fcccccd
 8002570:	41480000 	.word	0x41480000
 8002574:	41c80000 	.word	0x41c80000
 8002578:	42480000 	.word	0x42480000
 800257c:	42480000 	.word	0x42480000
 8002580:	42c80000 	.word	0x42c80000
 8002584:	42c80000 	.word	0x42c80000
 8002588:	43480000 	.word	0x43480000
 800258c:	43480000 	.word	0x43480000
 8002590:	43c80000 	.word	0x43c80000
 8002594:	43c80000 	.word	0x43c80000
 8002598:	44480000 	.word	0x44480000
 800259c:	44480000 	.word	0x44480000
 80025a0:	44c80000 	.word	0x44c80000

080025a4 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	461a      	mov	r2, r3
 80025b0:	460b      	mov	r3, r1
 80025b2:	72fb      	strb	r3, [r7, #11]
 80025b4:	4613      	mov	r3, r2
 80025b6:	813b      	strh	r3, [r7, #8]
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	695c      	ldr	r4, [r3, #20]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	7b1b      	ldrb	r3, [r3, #12]
 80025c4:	b298      	uxth	r0, r3
 80025c6:	7afb      	ldrb	r3, [r7, #11]
 80025c8:	b299      	uxth	r1, r3
 80025ca:	893b      	ldrh	r3, [r7, #8]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	47a0      	blx	r4
 80025d0:	4603      	mov	r3, r0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd90      	pop	{r4, r7, pc}

080025da <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80025da:	b590      	push	{r4, r7, lr}
 80025dc:	b087      	sub	sp, #28
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	461a      	mov	r2, r3
 80025e6:	460b      	mov	r3, r1
 80025e8:	72fb      	strb	r3, [r7, #11]
 80025ea:	4613      	mov	r3, r2
 80025ec:	813b      	strh	r3, [r7, #8]
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	691c      	ldr	r4, [r3, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	7b1b      	ldrb	r3, [r3, #12]
 80025fa:	b298      	uxth	r0, r3
 80025fc:	7afb      	ldrb	r3, [r7, #11]
 80025fe:	b299      	uxth	r1, r3
 8002600:	893b      	ldrh	r3, [r7, #8]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	47a0      	blx	r4
 8002606:	4603      	mov	r3, r0
}
 8002608:	4618      	mov	r0, r3
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	bd90      	pop	{r4, r7, pc}

08002610 <iis2dlpc_read_reg>:
  *
  */
int32_t iis2dlpc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	461a      	mov	r2, r3
 800261c:	460b      	mov	r3, r1
 800261e:	72fb      	strb	r3, [r7, #11]
 8002620:	4613      	mov	r3, r2
 8002622:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685c      	ldr	r4, [r3, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6898      	ldr	r0, [r3, #8]
 800262c:	893b      	ldrh	r3, [r7, #8]
 800262e:	7af9      	ldrb	r1, [r7, #11]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	47a0      	blx	r4
 8002634:	6178      	str	r0, [r7, #20]
  return ret;
 8002636:	697b      	ldr	r3, [r7, #20]
}
 8002638:	4618      	mov	r0, r3
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	bd90      	pop	{r4, r7, pc}

08002640 <iis2dlpc_write_reg>:
  *
  */
int32_t iis2dlpc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	461a      	mov	r2, r3
 800264c:	460b      	mov	r3, r1
 800264e:	72fb      	strb	r3, [r7, #11]
 8002650:	4613      	mov	r3, r2
 8002652:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681c      	ldr	r4, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6898      	ldr	r0, [r3, #8]
 800265c:	893b      	ldrh	r3, [r7, #8]
 800265e:	7af9      	ldrb	r1, [r7, #11]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	47a0      	blx	r4
 8002664:	6178      	str	r0, [r7, #20]
  return ret;
 8002666:	697b      	ldr	r3, [r7, #20]
}
 8002668:	4618      	mov	r0, r3
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}

08002670 <iis2dlpc_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_set(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t val)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 800267c:	f107 0210 	add.w	r2, r7, #16
 8002680:	2301      	movs	r3, #1
 8002682:	2120      	movs	r1, #32
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ffc3 	bl	8002610 <iis2dlpc_read_reg>
 800268a:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <iis2dlpc_power_mode_set+0x54>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	b2da      	uxtb	r2, r3
 800269c:	7c3b      	ldrb	r3, [r7, #16]
 800269e:	f362 0383 	bfi	r3, r2, #2, #2
 80026a2:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	7c3b      	ldrb	r3, [r7, #16]
 80026ae:	f362 0301 	bfi	r3, r2, #0, #2
 80026b2:	743b      	strb	r3, [r7, #16]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 80026b4:	f107 0210 	add.w	r2, r7, #16
 80026b8:	2301      	movs	r3, #1
 80026ba:	2120      	movs	r1, #32
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f7ff ffbf 	bl	8002640 <iis2dlpc_write_reg>
 80026c2:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d107      	bne.n	80026da <iis2dlpc_power_mode_set+0x6a>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 80026ca:	f107 020c 	add.w	r2, r7, #12
 80026ce:	2301      	movs	r3, #1
 80026d0:	2125      	movs	r1, #37	; 0x25
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ff9c 	bl	8002610 <iis2dlpc_read_reg>
 80026d8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d110      	bne.n	8002702 <iis2dlpc_power_mode_set+0x92>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	7b3b      	ldrb	r3, [r7, #12]
 80026ec:	f362 0382 	bfi	r3, r2, #2, #1
 80026f0:	733b      	strb	r3, [r7, #12]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 80026f2:	f107 020c 	add.w	r2, r7, #12
 80026f6:	2301      	movs	r3, #1
 80026f8:	2125      	movs	r1, #37	; 0x25
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ffa0 	bl	8002640 <iis2dlpc_write_reg>
 8002700:	6178      	str	r0, [r7, #20]

  else {
    ret = ret;
  }

  return ret;
 8002702:	697b      	ldr	r3, [r7, #20]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <iis2dlpc_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_get(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t *val)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002716:	f107 0210 	add.w	r2, r7, #16
 800271a:	2301      	movs	r3, #1
 800271c:	2120      	movs	r1, #32
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ff76 	bl	8002610 <iis2dlpc_read_reg>
 8002724:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	f040 80a3 	bne.w	8002874 <iis2dlpc_power_mode_get+0x168>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 800272e:	f107 020c 	add.w	r2, r7, #12
 8002732:	2301      	movs	r3, #1
 8002734:	2125      	movs	r1, #37	; 0x25
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff ff6a 	bl	8002610 <iis2dlpc_read_reg>
 800273c:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800273e:	7b3b      	ldrb	r3, [r7, #12]
 8002740:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	011a      	lsls	r2, r3, #4
 8002748:	7c3b      	ldrb	r3, [r7, #16]
 800274a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800274e:	b2db      	uxtb	r3, r3
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
             ctrl1.lp_mode)) {
 8002754:	7c3a      	ldrb	r2, [r7, #16]
 8002756:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800275a:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800275c:	4413      	add	r3, r2
 800275e:	2b1b      	cmp	r3, #27
 8002760:	f200 8084 	bhi.w	800286c <iis2dlpc_power_mode_get+0x160>
 8002764:	a201      	add	r2, pc, #4	; (adr r2, 800276c <iis2dlpc_power_mode_get+0x60>)
 8002766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276a:	bf00      	nop
 800276c:	080027fd 	.word	0x080027fd
 8002770:	080027f5 	.word	0x080027f5
 8002774:	080027ed 	.word	0x080027ed
 8002778:	080027e5 	.word	0x080027e5
 800277c:	080027dd 	.word	0x080027dd
 8002780:	0800286d 	.word	0x0800286d
 8002784:	0800286d 	.word	0x0800286d
 8002788:	0800286d 	.word	0x0800286d
 800278c:	0800281d 	.word	0x0800281d
 8002790:	08002815 	.word	0x08002815
 8002794:	0800280d 	.word	0x0800280d
 8002798:	08002805 	.word	0x08002805
 800279c:	0800286d 	.word	0x0800286d
 80027a0:	0800286d 	.word	0x0800286d
 80027a4:	0800286d 	.word	0x0800286d
 80027a8:	0800286d 	.word	0x0800286d
 80027ac:	08002845 	.word	0x08002845
 80027b0:	0800283d 	.word	0x0800283d
 80027b4:	08002835 	.word	0x08002835
 80027b8:	0800282d 	.word	0x0800282d
 80027bc:	08002825 	.word	0x08002825
 80027c0:	0800286d 	.word	0x0800286d
 80027c4:	0800286d 	.word	0x0800286d
 80027c8:	0800286d 	.word	0x0800286d
 80027cc:	08002865 	.word	0x08002865
 80027d0:	0800285d 	.word	0x0800285d
 80027d4:	08002855 	.word	0x08002855
 80027d8:	0800284d 	.word	0x0800284d
      case IIS2DLPC_HIGH_PERFORMANCE:
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2204      	movs	r2, #4
 80027e0:	701a      	strb	r2, [r3, #0]
        break;
 80027e2:	e048      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_4:
        *val = IIS2DLPC_CONT_LOW_PWR_4;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2203      	movs	r2, #3
 80027e8:	701a      	strb	r2, [r3, #0]
        break;
 80027ea:	e044      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_3:
        *val = IIS2DLPC_CONT_LOW_PWR_3;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2202      	movs	r2, #2
 80027f0:	701a      	strb	r2, [r3, #0]
        break;
 80027f2:	e040      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_2:
        *val = IIS2DLPC_CONT_LOW_PWR_2;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
        break;
 80027fa:	e03c      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_12bit:
        *val = IIS2DLPC_CONT_LOW_PWR_12bit;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
        break;
 8002802:	e038      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_4:
        *val = IIS2DLPC_SINGLE_LOW_PWR_4;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	220b      	movs	r2, #11
 8002808:	701a      	strb	r2, [r3, #0]
        break;
 800280a:	e034      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_3:
        *val = IIS2DLPC_SINGLE_LOW_PWR_3;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	220a      	movs	r2, #10
 8002810:	701a      	strb	r2, [r3, #0]
        break;
 8002812:	e030      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_2:
        *val = IIS2DLPC_SINGLE_LOW_PWR_2;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2209      	movs	r2, #9
 8002818:	701a      	strb	r2, [r3, #0]
        break;
 800281a:	e02c      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_12bit:
        *val = IIS2DLPC_SINGLE_LOW_PWR_12bit;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	2208      	movs	r2, #8
 8002820:	701a      	strb	r2, [r3, #0]
        break;
 8002822:	e028      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
        *val = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2214      	movs	r2, #20
 8002828:	701a      	strb	r2, [r3, #0]
        break;
 800282a:	e024      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2213      	movs	r2, #19
 8002830:	701a      	strb	r2, [r3, #0]
        break;
 8002832:	e020      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2212      	movs	r2, #18
 8002838:	701a      	strb	r2, [r3, #0]
        break;
 800283a:	e01c      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	2211      	movs	r2, #17
 8002840:	701a      	strb	r2, [r3, #0]
        break;
 8002842:	e018      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2210      	movs	r2, #16
 8002848:	701a      	strb	r2, [r3, #0]
        break;
 800284a:	e014      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	221b      	movs	r2, #27
 8002850:	701a      	strb	r2, [r3, #0]
        break;
 8002852:	e010      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	221a      	movs	r2, #26
 8002858:	701a      	strb	r2, [r3, #0]
        break;
 800285a:	e00c      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2219      	movs	r2, #25
 8002860:	701a      	strb	r2, [r3, #0]
        break;
 8002862:	e008      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2218      	movs	r2, #24
 8002868:	701a      	strb	r2, [r3, #0]
        break;
 800286a:	e004      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>

      default:
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	2204      	movs	r2, #4
 8002870:	701a      	strb	r2, [r3, #0]
        break;
 8002872:	e000      	b.n	8002876 <iis2dlpc_power_mode_get+0x16a>
    }
  }
 8002874:	bf00      	nop

  return ret;
 8002876:	697b      	ldr	r3, [r7, #20]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <iis2dlpc_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_set(stmdev_ctx_t *ctx, iis2dlpc_odr_t val)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 800288c:	f107 0210 	add.w	r2, r7, #16
 8002890:	2301      	movs	r3, #1
 8002892:	2120      	movs	r1, #32
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff febb 	bl	8002610 <iis2dlpc_read_reg>
 800289a:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10f      	bne.n	80028c2 <iis2dlpc_data_rate_set+0x42>
    ctrl1.odr = (uint8_t) val;
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 030f 	and.w	r3, r3, #15
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	7c3b      	ldrb	r3, [r7, #16]
 80028ac:	f362 1307 	bfi	r3, r2, #4, #4
 80028b0:	743b      	strb	r3, [r7, #16]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 80028b2:	f107 0210 	add.w	r2, r7, #16
 80028b6:	2301      	movs	r3, #1
 80028b8:	2120      	movs	r1, #32
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff fec0 	bl	8002640 <iis2dlpc_write_reg>
 80028c0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <iis2dlpc_data_rate_set+0x58>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 80028c8:	f107 020c 	add.w	r2, r7, #12
 80028cc:	2301      	movs	r3, #1
 80028ce:	2122      	movs	r1, #34	; 0x22
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff fe9d 	bl	8002610 <iis2dlpc_read_reg>
 80028d6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d110      	bne.n	8002900 <iis2dlpc_data_rate_set+0x80>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 80028de:	78fb      	ldrb	r3, [r7, #3]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	7b3b      	ldrb	r3, [r7, #12]
 80028ea:	f362 0301 	bfi	r3, r2, #0, #2
 80028ee:	733b      	strb	r3, [r7, #12]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 80028f0:	f107 020c 	add.w	r2, r7, #12
 80028f4:	2301      	movs	r3, #1
 80028f6:	2122      	movs	r1, #34	; 0x22
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fea1 	bl	8002640 <iis2dlpc_write_reg>
 80028fe:	6178      	str	r0, [r7, #20]

  else {
    ret = ret;
  }

  return ret;
 8002900:	697b      	ldr	r3, [r7, #20]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <iis2dlpc_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_get(stmdev_ctx_t *ctx, iis2dlpc_odr_t *val)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002916:	f107 0210 	add.w	r2, r7, #16
 800291a:	2301      	movs	r3, #1
 800291c:	2120      	movs	r1, #32
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff fe76 	bl	8002610 <iis2dlpc_read_reg>
 8002924:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f040 8091 	bne.w	8002a50 <iis2dlpc_data_rate_get+0x144>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 800292e:	f107 020c 	add.w	r2, r7, #12
 8002932:	2301      	movs	r3, #1
 8002934:	2122      	movs	r1, #34	; 0x22
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fe6a 	bl	8002610 <iis2dlpc_read_reg>
 800293c:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 800293e:	7b3b      	ldrb	r3, [r7, #12]
 8002940:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002944:	b2db      	uxtb	r3, r3
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	7c3a      	ldrb	r2, [r7, #16]
 800294a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	4413      	add	r3, r2
 8002952:	2b22      	cmp	r3, #34	; 0x22
 8002954:	d878      	bhi.n	8002a48 <iis2dlpc_data_rate_get+0x13c>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <iis2dlpc_data_rate_get+0x50>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	080029e9 	.word	0x080029e9
 8002960:	080029f1 	.word	0x080029f1
 8002964:	080029f9 	.word	0x080029f9
 8002968:	08002a01 	.word	0x08002a01
 800296c:	08002a09 	.word	0x08002a09
 8002970:	08002a11 	.word	0x08002a11
 8002974:	08002a19 	.word	0x08002a19
 8002978:	08002a21 	.word	0x08002a21
 800297c:	08002a29 	.word	0x08002a29
 8002980:	08002a31 	.word	0x08002a31
 8002984:	08002a49 	.word	0x08002a49
 8002988:	08002a49 	.word	0x08002a49
 800298c:	08002a49 	.word	0x08002a49
 8002990:	08002a49 	.word	0x08002a49
 8002994:	08002a49 	.word	0x08002a49
 8002998:	08002a49 	.word	0x08002a49
 800299c:	08002a49 	.word	0x08002a49
 80029a0:	08002a49 	.word	0x08002a49
 80029a4:	08002a39 	.word	0x08002a39
 80029a8:	08002a49 	.word	0x08002a49
 80029ac:	08002a49 	.word	0x08002a49
 80029b0:	08002a49 	.word	0x08002a49
 80029b4:	08002a49 	.word	0x08002a49
 80029b8:	08002a49 	.word	0x08002a49
 80029bc:	08002a49 	.word	0x08002a49
 80029c0:	08002a49 	.word	0x08002a49
 80029c4:	08002a49 	.word	0x08002a49
 80029c8:	08002a49 	.word	0x08002a49
 80029cc:	08002a49 	.word	0x08002a49
 80029d0:	08002a49 	.word	0x08002a49
 80029d4:	08002a49 	.word	0x08002a49
 80029d8:	08002a49 	.word	0x08002a49
 80029dc:	08002a49 	.word	0x08002a49
 80029e0:	08002a49 	.word	0x08002a49
 80029e4:	08002a41 	.word	0x08002a41
      case IIS2DLPC_XL_ODR_OFF:
        *val = IIS2DLPC_XL_ODR_OFF;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
        break;
 80029ee:	e030      	b.n	8002a52 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_1Hz6_LP_ONLY:
        *val = IIS2DLPC_XL_ODR_1Hz6_LP_ONLY;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
        break;
 80029f6:	e02c      	b.n	8002a52 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_12Hz5:
        *val = IIS2DLPC_XL_ODR_12Hz5;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2202      	movs	r2, #2
 80029fc:	701a      	strb	r2, [r3, #0]
        break;
 80029fe:	e028      	b.n	8002a52 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_25Hz:
        *val = IIS2DLPC_XL_ODR_25Hz;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2203      	movs	r2, #3
 8002a04:	701a      	strb	r2, [r3, #0]
        break;
 8002a06:	e024      	b.n	8002a52 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_50Hz:
        *val = IIS2DLPC_XL_ODR_50Hz;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	701a      	strb	r2, [r3, #0]
        break;
 8002a0e:	e020      	b.n	8002a52 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_100Hz:
        *val = IIS2DLPC_XL_ODR_100Hz;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2205      	movs	r2, #5
 8002a14:	701a      	strb	r2, [r3, #0]
        break;
 8002a16:	e01c      	b.n	8002a52 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_200Hz:
        *val = IIS2DLPC_XL_ODR_200Hz;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2206      	movs	r2, #6
 8002a1c:	701a      	strb	r2, [r3, #0]
        break;
 8002a1e:	e018      	b.n	8002a52 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_400Hz:
        *val = IIS2DLPC_XL_ODR_400Hz;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	2207      	movs	r2, #7
 8002a24:	701a      	strb	r2, [r3, #0]
        break;
 8002a26:	e014      	b.n	8002a52 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_800Hz:
        *val = IIS2DLPC_XL_ODR_800Hz;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	701a      	strb	r2, [r3, #0]
        break;
 8002a2e:	e010      	b.n	8002a52 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_1k6Hz:
        *val = IIS2DLPC_XL_ODR_1k6Hz;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2209      	movs	r2, #9
 8002a34:	701a      	strb	r2, [r3, #0]
        break;
 8002a36:	e00c      	b.n	8002a52 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_SET_SW_TRIG:
        *val = IIS2DLPC_XL_SET_SW_TRIG;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2212      	movs	r2, #18
 8002a3c:	701a      	strb	r2, [r3, #0]
        break;
 8002a3e:	e008      	b.n	8002a52 <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_SET_PIN_TRIG:
        *val = IIS2DLPC_XL_SET_PIN_TRIG;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2222      	movs	r2, #34	; 0x22
 8002a44:	701a      	strb	r2, [r3, #0]
        break;
 8002a46:	e004      	b.n	8002a52 <iis2dlpc_data_rate_get+0x146>

      default:
        *val = IIS2DLPC_XL_ODR_OFF;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
        break;
 8002a4e:	e000      	b.n	8002a52 <iis2dlpc_data_rate_get+0x146>
    }
  }
 8002a50:	bf00      	nop

  return ret;
 8002a52:	697b      	ldr	r3, [r7, #20]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <iis2dlpc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002a68:	f107 0208 	add.w	r2, r7, #8
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	2121      	movs	r1, #33	; 0x21
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff fdcd 	bl	8002610 <iis2dlpc_read_reg>
 8002a76:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10f      	bne.n	8002a9e <iis2dlpc_block_data_update_set+0x42>
    reg.bdu = val;
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	7a3b      	ldrb	r3, [r7, #8]
 8002a88:	f362 03c3 	bfi	r3, r2, #3, #1
 8002a8c:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002a8e:	f107 0208 	add.w	r2, r7, #8
 8002a92:	2301      	movs	r3, #1
 8002a94:	2121      	movs	r1, #33	; 0x21
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff fdd2 	bl	8002640 <iis2dlpc_write_reg>
 8002a9c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <iis2dlpc_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_set(stmdev_ctx_t *ctx, iis2dlpc_fs_t val)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8002ab4:	f107 0208 	add.w	r2, r7, #8
 8002ab8:	2301      	movs	r3, #1
 8002aba:	2125      	movs	r1, #37	; 0x25
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fda7 	bl	8002610 <iis2dlpc_read_reg>
 8002ac2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10f      	bne.n	8002aea <iis2dlpc_full_scale_set+0x42>
    reg.fs = (uint8_t) val;
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	7a3b      	ldrb	r3, [r7, #8]
 8002ad4:	f362 1305 	bfi	r3, r2, #4, #2
 8002ad8:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8002ada:	f107 0208 	add.w	r2, r7, #8
 8002ade:	2301      	movs	r3, #1
 8002ae0:	2125      	movs	r1, #37	; 0x25
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff fdac 	bl	8002640 <iis2dlpc_write_reg>
 8002ae8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002aea:	68fb      	ldr	r3, [r7, #12]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <iis2dlpc_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_get(stmdev_ctx_t *ctx, iis2dlpc_fs_t *val)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8002afe:	f107 0208 	add.w	r2, r7, #8
 8002b02:	2301      	movs	r3, #1
 8002b04:	2125      	movs	r1, #37	; 0x25
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff fd82 	bl	8002610 <iis2dlpc_read_reg>
 8002b0c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs) {
 8002b0e:	7a3b      	ldrb	r3, [r7, #8]
 8002b10:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d81a      	bhi.n	8002b50 <iis2dlpc_full_scale_get+0x5c>
 8002b1a:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <iis2dlpc_full_scale_get+0x2c>)
 8002b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b20:	08002b31 	.word	0x08002b31
 8002b24:	08002b39 	.word	0x08002b39
 8002b28:	08002b41 	.word	0x08002b41
 8002b2c:	08002b49 	.word	0x08002b49
    case IIS2DLPC_2g:
      *val = IIS2DLPC_2g;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
      break;
 8002b36:	e00f      	b.n	8002b58 <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_4g:
      *val = IIS2DLPC_4g;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
      break;
 8002b3e:	e00b      	b.n	8002b58 <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_8g:
      *val = IIS2DLPC_8g;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2202      	movs	r2, #2
 8002b44:	701a      	strb	r2, [r3, #0]
      break;
 8002b46:	e007      	b.n	8002b58 <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_16g:
      *val = IIS2DLPC_16g;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	701a      	strb	r2, [r3, #0]
      break;
 8002b4e:	e003      	b.n	8002b58 <iis2dlpc_full_scale_get+0x64>

    default:
      *val = IIS2DLPC_2g;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
      break;
 8002b56:	bf00      	nop
  }

  return ret;
 8002b58:	68fb      	ldr	r3, [r7, #12]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop

08002b64 <iis2dlpc_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_OUT_X_L, buff, 6);
 8002b6e:	f107 020c 	add.w	r2, r7, #12
 8002b72:	2306      	movs	r3, #6
 8002b74:	2128      	movs	r1, #40	; 0x28
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff fd4a 	bl	8002610 <iis2dlpc_read_reg>
 8002b7c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002b7e:	7b7b      	ldrb	r3, [r7, #13]
 8002b80:	b21a      	sxth	r2, r3
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	7b3b      	ldrb	r3, [r7, #12]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b21a      	sxth	r2, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	b212      	sxth	r2, r2
 8002ba8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	3302      	adds	r3, #2
 8002bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	021b      	lsls	r3, r3, #8
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	7bbb      	ldrb	r3, [r7, #14]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	b212      	sxth	r2, r2
 8002bc6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002bc8:	7c7a      	ldrb	r2, [r7, #17]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	b212      	sxth	r2, r2
 8002bd0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	7c3b      	ldrb	r3, [r7, #16]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	3304      	adds	r3, #4
 8002bec:	b212      	sxth	r2, r2
 8002bee:	801a      	strh	r2, [r3, #0]
  return ret;
 8002bf0:	697b      	ldr	r3, [r7, #20]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 8002c04:	2301      	movs	r3, #1
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	210f      	movs	r1, #15
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff fd00 	bl	8002610 <iis2dlpc_read_reg>
 8002c10:	60f8      	str	r0, [r7, #12]
  return ret;
 8002c12:	68fb      	ldr	r3, [r7, #12]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <iis2dlpc_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002c28:	f107 0208 	add.w	r2, r7, #8
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	2121      	movs	r1, #33	; 0x21
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff fced 	bl	8002610 <iis2dlpc_read_reg>
 8002c36:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10f      	bne.n	8002c5e <iis2dlpc_auto_increment_set+0x42>
    reg.if_add_inc = val;
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	7a3b      	ldrb	r3, [r7, #8]
 8002c48:	f362 0382 	bfi	r3, r2, #2, #1
 8002c4c:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002c4e:	f107 0208 	add.w	r2, r7, #8
 8002c52:	2301      	movs	r3, #1
 8002c54:	2121      	movs	r1, #33	; 0x21
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff fcf2 	bl	8002640 <iis2dlpc_write_reg>
 8002c5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <iis2dlpc_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_fifo_mode_set(stmdev_ctx_t *ctx,
                               iis2dlpc_fmode_t val)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_fifo_ctrl_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002c74:	f107 0208 	add.w	r2, r7, #8
 8002c78:	2301      	movs	r3, #1
 8002c7a:	212e      	movs	r1, #46	; 0x2e
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff fcc7 	bl	8002610 <iis2dlpc_read_reg>
 8002c82:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10f      	bne.n	8002caa <iis2dlpc_fifo_mode_set+0x42>
    reg.fmode = (uint8_t) val;
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	7a3b      	ldrb	r3, [r7, #8]
 8002c94:	f362 1347 	bfi	r3, r2, #5, #3
 8002c98:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg,
 8002c9a:	f107 0208 	add.w	r2, r7, #8
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	212e      	movs	r1, #46	; 0x2e
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff fccc 	bl	8002640 <iis2dlpc_write_reg>
 8002ca8:	60f8      	str	r0, [r7, #12]
                             1);
  }

  return ret;
 8002caa:	68fb      	ldr	r3, [r7, #12]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <IIS2MDC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d103      	bne.n	8002cd0 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 8002cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	e04b      	b.n	8002d68 <IIS2MDC_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	7b1a      	ldrb	r2, [r3, #12]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	699a      	ldr	r2, [r3, #24]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <IIS2MDC_RegisterBusIO+0xc0>)
 8002d0c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <IIS2MDC_RegisterBusIO+0xc4>)
 8002d12:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 8002d22:	f04f 33ff 	mov.w	r3, #4294967295
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e01e      	b.n	8002d68 <IIS2MDC_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4798      	blx	r3
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	e014      	b.n	8002d68 <IIS2MDC_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d010      	beq.n	8002d68 <IIS2MDC_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10b      	bne.n	8002d68 <IIS2MDC_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	331c      	adds	r3, #28
 8002d54:	2101      	movs	r1, #1
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fbc8 	bl	80034ec <iis2mdc_i2c_interface_set>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <IIS2MDC_RegisterBusIO+0xb4>
          {
            ret = IIS2MDC_ERROR;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
 8002d66:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002d68:	68fb      	ldr	r3, [r7, #12]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	0800316f 	.word	0x0800316f
 8002d78:	080031d1 	.word	0x080031d1

08002d7c <IIS2MDC_Init>:
 * @brief  Initialize the IIS2MDC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	331c      	adds	r3, #28
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fb06 	bl	800339c <iis2mdc_block_data_update_set>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d002      	beq.n	8002d9c <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 8002d96:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9a:	e028      	b.n	8002dee <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	331c      	adds	r3, #28
 8002da0:	2102      	movs	r1, #2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fa75 	bl	8003292 <iis2mdc_operating_mode_set>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	e01c      	b.n	8002dee <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	331c      	adds	r3, #28
 8002db8:	2103      	movs	r1, #3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fa8f 	bl	80032de <iis2mdc_data_rate_set>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dca:	e010      	b.n	8002dee <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	331c      	adds	r3, #28
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fb64 	bl	80034a0 <iis2mdc_self_test_set>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295
 8002de2:	e004      	b.n	8002dee <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <IIS2MDC_DeInit>:
 * @brief  Deinitialize the IIS2MDC magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f874 	bl	8002eec <IIS2MDC_MAG_Disable>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	e004      	b.n	8002e1a <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <IIS2MDC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	331c      	adds	r3, #28
 8002e30:	6839      	ldr	r1, [r7, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fb23 	bl	800347e <iis2mdc_device_id_get>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	e000      	b.n	8002e46 <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <IIS2MDC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
 * @retval Component status
 */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2232      	movs	r2, #50	; 0x32
 8002e82:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <IIS2MDC_GetCapabilities+0x58>)
 8002e98:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	42c80000 	.word	0x42c80000

08002eac <IIS2MDC_MAG_Enable>:
 * @brief Enable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d101      	bne.n	8002ec2 <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e010      	b.n	8002ee4 <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	331c      	adds	r3, #28
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 f9e2 	bl	8003292 <iis2mdc_operating_mode_set>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 8002ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed8:	e004      	b.n	8002ee4 <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <IIS2MDC_MAG_Disable>:
 * @brief Disable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e010      	b.n	8002f24 <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	331c      	adds	r3, #28
 8002f06:	2102      	movs	r1, #2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 f9c2 	bl	8003292 <iis2mdc_operating_mode_set>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 8002f14:	f04f 33ff 	mov.w	r3, #4294967295
 8002f18:	e004      	b.n	8002f24 <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <IIS2MDC_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002f3c:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <IIS2MDC_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	331c      	adds	r3, #28
 8002f5e:	f107 020b 	add.w	r2, r7, #11
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 f9e1 	bl	800332c <iis2mdc_data_rate_get>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d002      	beq.n	8002f76 <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
 8002f74:	e023      	b.n	8002fbe <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8002f76:	7afb      	ldrb	r3, [r7, #11]
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d81b      	bhi.n	8002fb4 <IIS2MDC_MAG_GetOutputDataRate+0x68>
 8002f7c:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002f95 	.word	0x08002f95
 8002f88:	08002f9d 	.word	0x08002f9d
 8002f8c:	08002fa5 	.word	0x08002fa5
 8002f90:	08002fad 	.word	0x08002fad
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 8002f98:	601a      	str	r2, [r3, #0]
      break;
 8002f9a:	e00f      	b.n	8002fbc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4a0b      	ldr	r2, [pc, #44]	; (8002fcc <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 8002fa0:	601a      	str	r2, [r3, #0]
      break;
 8002fa2:	e00b      	b.n	8002fbc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 8002fa8:	601a      	str	r2, [r3, #0]
      break;
 8002faa:	e007      	b.n	8002fbc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	4a09      	ldr	r2, [pc, #36]	; (8002fd4 <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 8002fb0:	601a      	str	r2, [r3, #0]
      break;
 8002fb2:	e003      	b.n	8002fbc <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 8002fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb8:	60fb      	str	r3, [r7, #12]
      break;
 8002fba:	bf00      	nop
  }

  return ret;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	41200000 	.word	0x41200000
 8002fcc:	41a00000 	.word	0x41a00000
 8002fd0:	42480000 	.word	0x42480000
 8002fd4:	42c80000 	.word	0x42c80000

08002fd8 <IIS2MDC_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8002fe4:	edd7 7a00 	vldr	s15, [r7]
 8002fe8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff4:	d801      	bhi.n	8002ffa <IIS2MDC_MAG_SetOutputDataRate+0x22>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e016      	b.n	8003028 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8002ffa:	edd7 7a00 	vldr	s15, [r7]
 8002ffe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300a:	d801      	bhi.n	8003010 <IIS2MDC_MAG_SetOutputDataRate+0x38>
 800300c:	2301      	movs	r3, #1
 800300e:	e00b      	b.n	8003028 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8003010:	edd7 7a00 	vldr	s15, [r7]
 8003014:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003050 <IIS2MDC_MAG_SetOutputDataRate+0x78>
 8003018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800301c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003020:	d801      	bhi.n	8003026 <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 8003022:	2302      	movs	r3, #2
 8003024:	e000      	b.n	8003028 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8003026:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 8003028:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	331c      	adds	r3, #28
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f000 f953 	bl	80032de <iis2mdc_data_rate_set>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 800303e:	f04f 33ff 	mov.w	r3, #4294967295
 8003042:	e000      	b.n	8003046 <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	42480000 	.word	0x42480000

08003054 <IIS2MDC_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2232      	movs	r2, #50	; 0x32
 8003062:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <IIS2MDC_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <IIS2MDC_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	331c      	adds	r3, #28
 8003098:	f107 0208 	add.w	r2, r7, #8
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f9a2 	bl	80033e8 <iis2mdc_magnetic_raw_get>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
 80030ae:	e00c      	b.n	80030ca <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80030b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80030b8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80030c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	331c      	adds	r3, #28
 80030e0:	f107 0210 	add.w	r2, r7, #16
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f97e 	bl	80033e8 <iis2mdc_magnetic_raw_get>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295
 80030f6:	e036      	b.n	8003166 <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 80030f8:	f107 030c 	add.w	r3, r7, #12
 80030fc:	4619      	mov	r1, r3
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff ff14 	bl	8002f2c <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003104:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003108:	ee07 3a90 	vmov	s15, r3
 800310c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003110:	edd7 7a03 	vldr	s15, [r7, #12]
 8003114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800311c:	ee17 2a90 	vmov	r2, s15
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003124:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003128:	ee07 3a90 	vmov	s15, r3
 800312c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003130:	edd7 7a03 	vldr	s15, [r7, #12]
 8003134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800313c:	ee17 2a90 	vmov	r2, s15
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003144:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003150:	edd7 7a03 	vldr	s15, [r7, #12]
 8003154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003158:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800315c:	ee17 2a90 	vmov	r2, s15
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800316e:	b590      	push	{r4, r7, lr}
 8003170:	b087      	sub	sp, #28
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	461a      	mov	r2, r3
 800317a:	460b      	mov	r3, r1
 800317c:	72fb      	strb	r3, [r7, #11]
 800317e:	4613      	mov	r3, r2
 8003180:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10e      	bne.n	80031ac <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	695c      	ldr	r4, [r3, #20]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	7b1b      	ldrb	r3, [r3, #12]
 8003196:	b298      	uxth	r0, r3
 8003198:	7afb      	ldrb	r3, [r7, #11]
 800319a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	b299      	uxth	r1, r3
 80031a2:	893b      	ldrh	r3, [r7, #8]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	47a0      	blx	r4
 80031a8:	4603      	mov	r3, r0
 80031aa:	e00d      	b.n	80031c8 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	695c      	ldr	r4, [r3, #20]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	7b1b      	ldrb	r3, [r3, #12]
 80031b4:	b298      	uxth	r0, r3
 80031b6:	7afb      	ldrb	r3, [r7, #11]
 80031b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	b299      	uxth	r1, r3
 80031c0:	893b      	ldrh	r3, [r7, #8]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	47a0      	blx	r4
 80031c6:	4603      	mov	r3, r0
  }
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	371c      	adds	r7, #28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd90      	pop	{r4, r7, pc}

080031d0 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	461a      	mov	r2, r3
 80031dc:	460b      	mov	r3, r1
 80031de:	72fb      	strb	r3, [r7, #11]
 80031e0:	4613      	mov	r3, r2
 80031e2:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10e      	bne.n	800320e <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	691c      	ldr	r4, [r3, #16]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	7b1b      	ldrb	r3, [r3, #12]
 80031f8:	b298      	uxth	r0, r3
 80031fa:	7afb      	ldrb	r3, [r7, #11]
 80031fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003200:	b2db      	uxtb	r3, r3
 8003202:	b299      	uxth	r1, r3
 8003204:	893b      	ldrh	r3, [r7, #8]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	47a0      	blx	r4
 800320a:	4603      	mov	r3, r0
 800320c:	e00d      	b.n	800322a <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	691c      	ldr	r4, [r3, #16]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	7b1b      	ldrb	r3, [r3, #12]
 8003216:	b298      	uxth	r0, r3
 8003218:	7afb      	ldrb	r3, [r7, #11]
 800321a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800321e:	b2db      	uxtb	r3, r3
 8003220:	b299      	uxth	r1, r3
 8003222:	893b      	ldrh	r3, [r7, #8]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	47a0      	blx	r4
 8003228:	4603      	mov	r3, r0
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	bd90      	pop	{r4, r7, pc}

08003232 <iis2mdc_read_reg>:
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003232:	b590      	push	{r4, r7, lr}
 8003234:	b087      	sub	sp, #28
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	461a      	mov	r2, r3
 800323e:	460b      	mov	r3, r1
 8003240:	72fb      	strb	r3, [r7, #11]
 8003242:	4613      	mov	r3, r2
 8003244:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685c      	ldr	r4, [r3, #4]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6898      	ldr	r0, [r3, #8]
 800324e:	893b      	ldrh	r3, [r7, #8]
 8003250:	7af9      	ldrb	r1, [r7, #11]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	47a0      	blx	r4
 8003256:	6178      	str	r0, [r7, #20]
  return ret;
 8003258:	697b      	ldr	r3, [r7, #20]
}
 800325a:	4618      	mov	r0, r3
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd90      	pop	{r4, r7, pc}

08003262 <iis2mdc_write_reg>:
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003262:	b590      	push	{r4, r7, lr}
 8003264:	b087      	sub	sp, #28
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	461a      	mov	r2, r3
 800326e:	460b      	mov	r3, r1
 8003270:	72fb      	strb	r3, [r7, #11]
 8003272:	4613      	mov	r3, r2
 8003274:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681c      	ldr	r4, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6898      	ldr	r0, [r3, #8]
 800327e:	893b      	ldrh	r3, [r7, #8]
 8003280:	7af9      	ldrb	r1, [r7, #11]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	47a0      	blx	r4
 8003286:	6178      	str	r0, [r7, #20]
  return ret;
 8003288:	697b      	ldr	r3, [r7, #20]
}
 800328a:	4618      	mov	r0, r3
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd90      	pop	{r4, r7, pc}

08003292 <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800329e:	f107 0208 	add.w	r2, r7, #8
 80032a2:	2301      	movs	r3, #1
 80032a4:	2160      	movs	r1, #96	; 0x60
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff ffc3 	bl	8003232 <iis2mdc_read_reg>
 80032ac:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10f      	bne.n	80032d4 <iis2mdc_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	7a3b      	ldrb	r3, [r7, #8]
 80032be:	f362 0301 	bfi	r3, r2, #0, #2
 80032c2:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80032c4:	f107 0208 	add.w	r2, r7, #8
 80032c8:	2301      	movs	r3, #1
 80032ca:	2160      	movs	r1, #96	; 0x60
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ffc8 	bl	8003262 <iis2mdc_write_reg>
 80032d2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80032d4:	68fb      	ldr	r3, [r7, #12]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	460b      	mov	r3, r1
 80032e8:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80032ea:	f107 0208 	add.w	r2, r7, #8
 80032ee:	2301      	movs	r3, #1
 80032f0:	2160      	movs	r1, #96	; 0x60
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ff9d 	bl	8003232 <iis2mdc_read_reg>
 80032f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10f      	bne.n	8003320 <iis2mdc_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	b2da      	uxtb	r2, r3
 8003308:	7a3b      	ldrb	r3, [r7, #8]
 800330a:	f362 0383 	bfi	r3, r2, #2, #2
 800330e:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003310:	f107 0208 	add.w	r2, r7, #8
 8003314:	2301      	movs	r3, #1
 8003316:	2160      	movs	r1, #96	; 0x60
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ffa2 	bl	8003262 <iis2mdc_write_reg>
 800331e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003320:	68fb      	ldr	r3, [r7, #12]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003336:	f107 0208 	add.w	r2, r7, #8
 800333a:	2301      	movs	r3, #1
 800333c:	2160      	movs	r1, #96	; 0x60
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ff77 	bl	8003232 <iis2mdc_read_reg>
 8003344:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 8003346:	7a3b      	ldrb	r3, [r7, #8]
 8003348:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b03      	cmp	r3, #3
 8003350:	d81a      	bhi.n	8003388 <iis2mdc_data_rate_get+0x5c>
 8003352:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <iis2mdc_data_rate_get+0x2c>)
 8003354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003358:	08003369 	.word	0x08003369
 800335c:	08003371 	.word	0x08003371
 8003360:	08003379 	.word	0x08003379
 8003364:	08003381 	.word	0x08003381
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
      break;
 800336e:	e00f      	b.n	8003390 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]
      break;
 8003376:	e00b      	b.n	8003390 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2202      	movs	r2, #2
 800337c:	701a      	strb	r2, [r3, #0]
      break;
 800337e:	e007      	b.n	8003390 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2203      	movs	r2, #3
 8003384:	701a      	strb	r2, [r3, #0]
      break;
 8003386:	e003      	b.n	8003390 <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
      break;
 800338e:	bf00      	nop
  }

  return ret;
 8003390:	68fb      	ldr	r3, [r7, #12]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop

0800339c <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80033a8:	f107 0208 	add.w	r2, r7, #8
 80033ac:	2301      	movs	r3, #1
 80033ae:	2162      	movs	r1, #98	; 0x62
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff3e 	bl	8003232 <iis2mdc_read_reg>
 80033b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10f      	bne.n	80033de <iis2mdc_block_data_update_set+0x42>
    reg.bdu = val;
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	7a3b      	ldrb	r3, [r7, #8]
 80033c8:	f362 1304 	bfi	r3, r2, #4, #1
 80033cc:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80033ce:	f107 0208 	add.w	r2, r7, #8
 80033d2:	2301      	movs	r3, #1
 80033d4:	2162      	movs	r1, #98	; 0x62
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ff43 	bl	8003262 <iis2mdc_write_reg>
 80033dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033de:	68fb      	ldr	r3, [r7, #12]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 80033f2:	f107 020c 	add.w	r2, r7, #12
 80033f6:	2306      	movs	r3, #6
 80033f8:	2168      	movs	r1, #104	; 0x68
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff ff19 	bl	8003232 <iis2mdc_read_reg>
 8003400:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003402:	7b7b      	ldrb	r3, [r7, #13]
 8003404:	b21a      	sxth	r2, r3
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003410:	b29b      	uxth	r3, r3
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	b29a      	uxth	r2, r3
 8003416:	7b3b      	ldrb	r3, [r7, #12]
 8003418:	b29b      	uxth	r3, r3
 800341a:	4413      	add	r3, r2
 800341c:	b29b      	uxth	r3, r3
 800341e:	b21a      	sxth	r2, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	3302      	adds	r3, #2
 800342a:	b212      	sxth	r2, r2
 800342c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	3302      	adds	r3, #2
 8003432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003436:	b29b      	uxth	r3, r3
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	b29a      	uxth	r2, r3
 800343c:	7bbb      	ldrb	r3, [r7, #14]
 800343e:	b29b      	uxth	r3, r3
 8003440:	4413      	add	r3, r2
 8003442:	b29a      	uxth	r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	3302      	adds	r3, #2
 8003448:	b212      	sxth	r2, r2
 800344a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800344c:	7c7a      	ldrb	r2, [r7, #17]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	3304      	adds	r3, #4
 8003452:	b212      	sxth	r2, r2
 8003454:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	3304      	adds	r3, #4
 800345a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800345e:	b29b      	uxth	r3, r3
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	b29a      	uxth	r2, r3
 8003464:	7c3b      	ldrb	r3, [r7, #16]
 8003466:	b29b      	uxth	r3, r3
 8003468:	4413      	add	r3, r2
 800346a:	b29a      	uxth	r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	3304      	adds	r3, #4
 8003470:	b212      	sxth	r2, r2
 8003472:	801a      	strh	r2, [r3, #0]
  return ret;
 8003474:	697b      	ldr	r3, [r7, #20]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8003488:	2301      	movs	r3, #1
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	214f      	movs	r1, #79	; 0x4f
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fecf 	bl	8003232 <iis2mdc_read_reg>
 8003494:	60f8      	str	r0, [r7, #12]
  return ret;
 8003496:	68fb      	ldr	r3, [r7, #12]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80034ac:	f107 0208 	add.w	r2, r7, #8
 80034b0:	2301      	movs	r3, #1
 80034b2:	2162      	movs	r1, #98	; 0x62
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff febc 	bl	8003232 <iis2mdc_read_reg>
 80034ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10f      	bne.n	80034e2 <iis2mdc_self_test_set+0x42>
    reg.self_test = val;
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	7a3b      	ldrb	r3, [r7, #8]
 80034cc:	f362 0341 	bfi	r3, r2, #1, #1
 80034d0:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80034d2:	f107 0208 	add.w	r2, r7, #8
 80034d6:	2301      	movs	r3, #1
 80034d8:	2162      	movs	r1, #98	; 0x62
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fec1 	bl	8003262 <iis2mdc_write_reg>
 80034e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80034e2:	68fb      	ldr	r3, [r7, #12]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80034f8:	f107 0208 	add.w	r2, r7, #8
 80034fc:	2301      	movs	r3, #1
 80034fe:	2162      	movs	r1, #98	; 0x62
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff fe96 	bl	8003232 <iis2mdc_read_reg>
 8003506:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10f      	bne.n	800352e <iis2mdc_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	b2da      	uxtb	r2, r3
 8003516:	7a3b      	ldrb	r3, [r7, #8]
 8003518:	f362 1345 	bfi	r3, r2, #5, #1
 800351c:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800351e:	f107 0208 	add.w	r2, r7, #8
 8003522:	2301      	movs	r3, #1
 8003524:	2162      	movs	r1, #98	; 0x62
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff fe9b 	bl	8003262 <iis2mdc_write_reg>
 800352c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800352e:	68fb      	ldr	r3, [r7, #12]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <ISM330DHCX_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 800354c:	f04f 33ff 	mov.w	r3, #4294967295
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e04d      	b.n	80035f0 <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	7b1a      	ldrb	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	699a      	ldr	r2, [r3, #24]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a1b      	ldr	r2, [pc, #108]	; (80035fc <ISM330DHCX_RegisterBusIO+0xc4>)
 8003590:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1a      	ldr	r2, [pc, #104]	; (8003600 <ISM330DHCX_RegisterBusIO+0xc8>)
 8003596:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d103      	bne.n	80035ae <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	e020      	b.n	80035f0 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4798      	blx	r3
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e016      	b.n	80035f0 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d112      	bne.n	80035f0 <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10d      	bne.n	80035f0 <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80035d4:	230c      	movs	r3, #12
 80035d6:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 80035d8:	7afb      	ldrb	r3, [r7, #11]
 80035da:	461a      	mov	r2, r3
 80035dc:	2112      	movs	r1, #18
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fd61 	bl	80040a6 <ISM330DHCX_Write_Reg>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80035f0:	68fb      	ldr	r3, [r7, #12]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	08004515 	.word	0x08004515
 8003600:	0800454b 	.word	0x0800454b

08003604 <ISM330DHCX_Init>:
 * @brief  Initialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	331c      	adds	r3, #28
 8003610:	2101      	movs	r1, #1
 8003612:	4618      	mov	r0, r3
 8003614:	f001 fd20 	bl	8005058 <ism330dhcx_device_conf_set>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 800361e:	f04f 33ff 	mov.w	r3, #4294967295
 8003622:	e078      	b.n	8003716 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	331c      	adds	r3, #28
 8003628:	2101      	movs	r1, #1
 800362a:	4618      	mov	r0, r3
 800362c:	f001 fd97 	bl	800515e <ism330dhcx_auto_increment_set>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 8003636:	f04f 33ff 	mov.w	r3, #4294967295
 800363a:	e06c      	b.n	8003716 <ISM330DHCX_Init+0x112>
  }

    /* SW reset */
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	331c      	adds	r3, #28
 8003640:	2101      	movs	r1, #1
 8003642:	4618      	mov	r0, r3
 8003644:	f001 fd65 	bl	8005112 <ism330dhcx_reset_set>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
 8003652:	e060      	b.n	8003716 <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	331c      	adds	r3, #28
 8003658:	2101      	movs	r1, #1
 800365a:	4618      	mov	r0, r3
 800365c:	f001 fd7f 	bl	800515e <ism330dhcx_auto_increment_set>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 8003666:	f04f 33ff 	mov.w	r3, #4294967295
 800366a:	e054      	b.n	8003716 <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	331c      	adds	r3, #28
 8003670:	2101      	movs	r1, #1
 8003672:	4618      	mov	r0, r3
 8003674:	f001 fc34 	bl	8004ee0 <ism330dhcx_block_data_update_set>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	e048      	b.n	8003716 <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	331c      	adds	r3, #28
 8003688:	2100      	movs	r1, #0
 800368a:	4618      	mov	r0, r3
 800368c:	f001 fd8d 	bl	80051aa <ism330dhcx_fifo_mode_set>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 8003696:	f04f 33ff 	mov.w	r3, #4294967295
 800369a:	e03c      	b.n	8003716 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2204      	movs	r2, #4
 80036a0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	331c      	adds	r3, #28
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 fff6 	bl	800469c <ism330dhcx_xl_data_rate_set>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295
 80036ba:	e02c      	b.n	8003716 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	331c      	adds	r3, #28
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 ff8c 	bl	80045e0 <ism330dhcx_xl_full_scale_set>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 80036ce:	f04f 33ff 	mov.w	r3, #4294967295
 80036d2:	e020      	b.n	8003716 <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2204      	movs	r2, #4
 80036d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	331c      	adds	r3, #28
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 fa2a 	bl	8004b3c <ism330dhcx_gy_data_rate_set>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 80036ee:	f04f 33ff 	mov.w	r3, #4294967295
 80036f2:	e010      	b.n	8003716 <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	331c      	adds	r3, #28
 80036f8:	210c      	movs	r1, #12
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 f9a6 	bl	8004a4c <ism330dhcx_gy_full_scale_set>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 8003706:	f04f 33ff 	mov.w	r3, #4294967295
 800370a:	e004      	b.n	8003716 <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <ISM330DHCX_DeInit>:
 * @brief  Deinitialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f888 	bl	800383c <ISM330DHCX_ACC_Disable>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8003732:	f04f 33ff 	mov.w	r3, #4294967295
 8003736:	e015      	b.n	8003764 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fa92 	bl	8003c62 <ISM330DHCX_GYRO_Disable>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 8003744:	f04f 33ff 	mov.w	r3, #4294967295
 8003748:	e00c      	b.n	8003764 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <ISM330DHCX_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	331c      	adds	r3, #28
 800377a:	6839      	ldr	r1, [r7, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f001 fcb7 	bl	80050f0 <ism330dhcx_device_id_get>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8003788:	f04f 33ff 	mov.w	r3, #4294967295
 800378c:	e000      	b.n	8003790 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2201      	movs	r2, #1
 80037ac:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2200      	movs	r2, #0
 80037b2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2200      	movs	r2, #0
 80037b8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80037c0:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2210      	movs	r2, #16
 80037c6:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2200      	movs	r2, #0
 80037cc:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <ISM330DHCX_GetCapabilities+0x58>)
 80037d2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	4a06      	ldr	r2, [pc, #24]	; (80037f0 <ISM330DHCX_GetCapabilities+0x58>)
 80037d8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	45d05800 	.word	0x45d05800

080037f4 <ISM330DHCX_ACC_Enable>:
 * @brief  Enable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e014      	b.n	8003834 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f103 021c 	add.w	r2, r3, #28
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003816:	4619      	mov	r1, r3
 8003818:	4610      	mov	r0, r2
 800381a:	f000 ff3f 	bl	800469c <ism330dhcx_xl_data_rate_set>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8003824:	f04f 33ff 	mov.w	r3, #4294967295
 8003828:	e004      	b.n	8003834 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <ISM330DHCX_ACC_Disable>:
 * @brief  Disable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e01f      	b.n	8003892 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f103 021c 	add.w	r2, r3, #28
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	332b      	adds	r3, #43	; 0x2b
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f001 f88c 	bl	800497c <ism330dhcx_xl_data_rate_get>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
 800386e:	e010      	b.n	8003892 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	331c      	adds	r3, #28
 8003874:	2100      	movs	r1, #0
 8003876:	4618      	mov	r0, r3
 8003878:	f000 ff10 	bl	800469c <ism330dhcx_xl_data_rate_set>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8003882:	f04f 33ff 	mov.w	r3, #4294967295
 8003886:	e004      	b.n	8003892 <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <ISM330DHCX_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	331c      	adds	r3, #28
 80038ae:	f107 020b 	add.w	r2, r7, #11
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 feb9 	bl	800462c <ism330dhcx_xl_full_scale_get>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295
 80038c4:	e023      	b.n	800390e <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80038c6:	7afb      	ldrb	r3, [r7, #11]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d81b      	bhi.n	8003904 <ISM330DHCX_ACC_GetSensitivity+0x68>
 80038cc:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	080038e5 	.word	0x080038e5
 80038d8:	080038fd 	.word	0x080038fd
 80038dc:	080038ed 	.word	0x080038ed
 80038e0:	080038f5 	.word	0x080038f5
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	4a0c      	ldr	r2, [pc, #48]	; (8003918 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 80038e8:	601a      	str	r2, [r3, #0]
      break;
 80038ea:	e00f      	b.n	800390c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4a0b      	ldr	r2, [pc, #44]	; (800391c <ISM330DHCX_ACC_GetSensitivity+0x80>)
 80038f0:	601a      	str	r2, [r3, #0]
      break;
 80038f2:	e00b      	b.n	800390c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	4a0a      	ldr	r2, [pc, #40]	; (8003920 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 80038f8:	601a      	str	r2, [r3, #0]
      break;
 80038fa:	e007      	b.n	800390c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	4a09      	ldr	r2, [pc, #36]	; (8003924 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8003900:	601a      	str	r2, [r3, #0]
      break;
 8003902:	e003      	b.n	800390c <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8003904:	f04f 33ff 	mov.w	r3, #4294967295
 8003908:	60fb      	str	r3, [r7, #12]
      break;
 800390a:	bf00      	nop
  }

  return ret;
 800390c:	68fb      	ldr	r3, [r7, #12]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	3d79db23 	.word	0x3d79db23
 800391c:	3df9db23 	.word	0x3df9db23
 8003920:	3e79db23 	.word	0x3e79db23
 8003924:	3ef9db23 	.word	0x3ef9db23

08003928 <ISM330DHCX_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	331c      	adds	r3, #28
 800393a:	f107 020b 	add.w	r2, r7, #11
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f001 f81b 	bl	800497c <ism330dhcx_xl_data_rate_get>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 800394c:	f04f 33ff 	mov.w	r3, #4294967295
 8003950:	e04e      	b.n	80039f0 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003952:	7afb      	ldrb	r3, [r7, #11]
 8003954:	2b0a      	cmp	r3, #10
 8003956:	d846      	bhi.n	80039e6 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8003958:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	0800398d 	.word	0x0800398d
 8003964:	08003997 	.word	0x08003997
 8003968:	0800399f 	.word	0x0800399f
 800396c:	080039a7 	.word	0x080039a7
 8003970:	080039af 	.word	0x080039af
 8003974:	080039b7 	.word	0x080039b7
 8003978:	080039bf 	.word	0x080039bf
 800397c:	080039c7 	.word	0x080039c7
 8003980:	080039cf 	.word	0x080039cf
 8003984:	080039d7 	.word	0x080039d7
 8003988:	080039df 	.word	0x080039df
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
      break;
 8003994:	e02b      	b.n	80039ee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 800399a:	601a      	str	r2, [r3, #0]
      break;
 800399c:	e027      	b.n	80039ee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	4a16      	ldr	r2, [pc, #88]	; (80039fc <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 80039a2:	601a      	str	r2, [r3, #0]
      break;
 80039a4:	e023      	b.n	80039ee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 80039aa:	601a      	str	r2, [r3, #0]
      break;
 80039ac:	e01f      	b.n	80039ee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 80039b2:	601a      	str	r2, [r3, #0]
      break;
 80039b4:	e01b      	b.n	80039ee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 80039ba:	601a      	str	r2, [r3, #0]
      break;
 80039bc:	e017      	b.n	80039ee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_417Hz:
      *Odr = 417.0f;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 80039c2:	601a      	str	r2, [r3, #0]
      break;
 80039c4:	e013      	b.n	80039ee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 80039ca:	601a      	str	r2, [r3, #0]
      break;
 80039cc:	e00f      	b.n	80039ee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	4a10      	ldr	r2, [pc, #64]	; (8003a14 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 80039d2:	601a      	str	r2, [r3, #0]
      break;
 80039d4:	e00b      	b.n	80039ee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	4a0f      	ldr	r2, [pc, #60]	; (8003a18 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 80039da:	601a      	str	r2, [r3, #0]
      break;
 80039dc:	e007      	b.n	80039ee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	4a0e      	ldr	r2, [pc, #56]	; (8003a1c <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 80039e2:	601a      	str	r2, [r3, #0]
      break;
 80039e4:	e003      	b.n	80039ee <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 80039e6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ea:	60fb      	str	r3, [r7, #12]
      break;
 80039ec:	bf00      	nop
  }

  return ret;
 80039ee:	68fb      	ldr	r3, [r7, #12]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	41480000 	.word	0x41480000
 80039fc:	41d00000 	.word	0x41d00000
 8003a00:	42500000 	.word	0x42500000
 8003a04:	42d00000 	.word	0x42d00000
 8003a08:	43500000 	.word	0x43500000
 8003a0c:	43d08000 	.word	0x43d08000
 8003a10:	44504000 	.word	0x44504000
 8003a14:	44d06000 	.word	0x44d06000
 8003a18:	45505000 	.word	0x45505000
 8003a1c:	45d05800 	.word	0x45d05800

08003a20 <ISM330DHCX_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d106      	bne.n	8003a44 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003a36:	ed97 0a00 	vldr	s0, [r7]
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fb4e 	bl	80040dc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8003a40:	4603      	mov	r3, r0
 8003a42:	e005      	b.n	8003a50 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003a44:	ed97 0a00 	vldr	s0, [r7]
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fbd3 	bl	80041f4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8003a4e:	4603      	mov	r3, r0
  }
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <ISM330DHCX_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	331c      	adds	r3, #28
 8003a6a:	f107 020b 	add.w	r2, r7, #11
 8003a6e:	4611      	mov	r1, r2
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fddb 	bl	800462c <ism330dhcx_xl_full_scale_get>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a80:	e023      	b.n	8003aca <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003a82:	7afb      	ldrb	r3, [r7, #11]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d81b      	bhi.n	8003ac0 <ISM330DHCX_ACC_GetFullScale+0x68>
 8003a88:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <ISM330DHCX_ACC_GetFullScale+0x38>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003aa1 	.word	0x08003aa1
 8003a94:	08003ab9 	.word	0x08003ab9
 8003a98:	08003aa9 	.word	0x08003aa9
 8003a9c:	08003ab1 	.word	0x08003ab1
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	601a      	str	r2, [r3, #0]
      break;
 8003aa6:	e00f      	b.n	8003ac8 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	601a      	str	r2, [r3, #0]
      break;
 8003aae:	e00b      	b.n	8003ac8 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	601a      	str	r2, [r3, #0]
      break;
 8003ab6:	e007      	b.n	8003ac8 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2210      	movs	r2, #16
 8003abc:	601a      	str	r2, [r3, #0]
      break;
 8003abe:	e003      	b.n	8003ac8 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8003ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac4:	60fb      	str	r3, [r7, #12]
      break;
 8003ac6:	bf00      	nop
  }

  return ret;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop

08003ad4 <ISM330DHCX_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	dd0b      	ble.n	8003afc <ISM330DHCX_ACC_SetFullScale+0x28>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	dd06      	ble.n	8003af8 <ISM330DHCX_ACC_SetFullScale+0x24>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	dc01      	bgt.n	8003af4 <ISM330DHCX_ACC_SetFullScale+0x20>
 8003af0:	2303      	movs	r3, #3
 8003af2:	e004      	b.n	8003afe <ISM330DHCX_ACC_SetFullScale+0x2a>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e002      	b.n	8003afe <ISM330DHCX_ACC_SetFullScale+0x2a>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e000      	b.n	8003afe <ISM330DHCX_ACC_SetFullScale+0x2a>
 8003afc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 8003afe:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	331c      	adds	r3, #28
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fd69 	bl	80045e0 <ism330dhcx_xl_full_scale_set>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8003b14:	f04f 33ff 	mov.w	r3, #4294967295
 8003b18:	e000      	b.n	8003b1c <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <ISM330DHCX_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	331c      	adds	r3, #28
 8003b32:	f107 0208 	add.w	r2, r7, #8
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 fa42 	bl	8004fc2 <ism330dhcx_acceleration_raw_get>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8003b44:	f04f 33ff 	mov.w	r3, #4294967295
 8003b48:	e00c      	b.n	8003b64 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003b4a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003b52:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003b5a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <ISM330DHCX_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	331c      	adds	r3, #28
 8003b80:	f107 0210 	add.w	r2, r7, #16
 8003b84:	4611      	mov	r1, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fa1b 	bl	8004fc2 <ism330dhcx_acceleration_raw_get>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295
 8003b96:	e03c      	b.n	8003c12 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8003b98:	f107 030c 	add.w	r3, r7, #12
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff fe7c 	bl	800389c <ISM330DHCX_ACC_GetSensitivity>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	e030      	b.n	8003c12 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003bb0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003bb4:	ee07 3a90 	vmov	s15, r3
 8003bb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bc8:	ee17 2a90 	vmov	r2, s15
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003bd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003bd4:	ee07 3a90 	vmov	s15, r3
 8003bd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003be8:	ee17 2a90 	vmov	r2, s15
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003bf0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003bf4:	ee07 3a90 	vmov	s15, r3
 8003bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c08:	ee17 2a90 	vmov	r2, s15
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <ISM330DHCX_GYRO_Enable>:
 * @brief  Enable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e014      	b.n	8003c5a <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f103 021c 	add.w	r2, r3, #28
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f000 ff7c 	bl	8004b3c <ism330dhcx_gy_data_rate_set>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	e004      	b.n	8003c5a <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <ISM330DHCX_GYRO_Disable>:
 * @brief  Disable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e01f      	b.n	8003cb8 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f103 021c 	add.w	r2, r3, #28
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	332c      	adds	r3, #44	; 0x2c
 8003c82:	4619      	mov	r1, r3
 8003c84:	4610      	mov	r0, r2
 8003c86:	f001 f8c9 	bl	8004e1c <ism330dhcx_gy_data_rate_get>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295
 8003c94:	e010      	b.n	8003cb8 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	331c      	adds	r3, #28
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 ff4d 	bl	8004b3c <ism330dhcx_gy_data_rate_set>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cac:	e004      	b.n	8003cb8 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <ISM330DHCX_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	331c      	adds	r3, #28
 8003cd2:	f107 020b 	add.w	r2, r7, #11
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fedd 	bl	8004a98 <ism330dhcx_gy_full_scale_get>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce8:	e039      	b.n	8003d5e <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003cea:	7afb      	ldrb	r3, [r7, #11]
 8003cec:	2b0c      	cmp	r3, #12
 8003cee:	d831      	bhi.n	8003d54 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 8003cf0:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d35 	.word	0x08003d35
 8003cfc:	08003d55 	.word	0x08003d55
 8003d00:	08003d2d 	.word	0x08003d2d
 8003d04:	08003d55 	.word	0x08003d55
 8003d08:	08003d3d 	.word	0x08003d3d
 8003d0c:	08003d55 	.word	0x08003d55
 8003d10:	08003d55 	.word	0x08003d55
 8003d14:	08003d55 	.word	0x08003d55
 8003d18:	08003d45 	.word	0x08003d45
 8003d1c:	08003d55 	.word	0x08003d55
 8003d20:	08003d55 	.word	0x08003d55
 8003d24:	08003d55 	.word	0x08003d55
 8003d28:	08003d4d 	.word	0x08003d4d
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	4a0e      	ldr	r2, [pc, #56]	; (8003d68 <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 8003d30:	601a      	str	r2, [r3, #0]
      break;
 8003d32:	e013      	b.n	8003d5c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	4a0d      	ldr	r2, [pc, #52]	; (8003d6c <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 8003d38:	601a      	str	r2, [r3, #0]
      break;
 8003d3a:	e00f      	b.n	8003d5c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4a0c      	ldr	r2, [pc, #48]	; (8003d70 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8003d40:	601a      	str	r2, [r3, #0]
      break;
 8003d42:	e00b      	b.n	8003d5c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4a0b      	ldr	r2, [pc, #44]	; (8003d74 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8003d48:	601a      	str	r2, [r3, #0]
      break;
 8003d4a:	e007      	b.n	8003d5c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8003d50:	601a      	str	r2, [r3, #0]
      break;
 8003d52:	e003      	b.n	8003d5c <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 8003d54:	f04f 33ff 	mov.w	r3, #4294967295
 8003d58:	60fb      	str	r3, [r7, #12]
      break;
 8003d5a:	bf00      	nop
  }

  return ret;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	408c0000 	.word	0x408c0000
 8003d6c:	410c0000 	.word	0x410c0000
 8003d70:	418c0000 	.word	0x418c0000
 8003d74:	420c0000 	.word	0x420c0000
 8003d78:	428c0000 	.word	0x428c0000

08003d7c <ISM330DHCX_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	331c      	adds	r3, #28
 8003d8e:	f107 020b 	add.w	r2, r7, #11
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f001 f841 	bl	8004e1c <ism330dhcx_gy_data_rate_get>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003da0:	f04f 33ff 	mov.w	r3, #4294967295
 8003da4:	e04e      	b.n	8003e44 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003da6:	7afb      	ldrb	r3, [r7, #11]
 8003da8:	2b0a      	cmp	r3, #10
 8003daa:	d846      	bhi.n	8003e3a <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8003dac:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003de1 	.word	0x08003de1
 8003db8:	08003deb 	.word	0x08003deb
 8003dbc:	08003df3 	.word	0x08003df3
 8003dc0:	08003dfb 	.word	0x08003dfb
 8003dc4:	08003e03 	.word	0x08003e03
 8003dc8:	08003e0b 	.word	0x08003e0b
 8003dcc:	08003e13 	.word	0x08003e13
 8003dd0:	08003e1b 	.word	0x08003e1b
 8003dd4:	08003e23 	.word	0x08003e23
 8003dd8:	08003e2b 	.word	0x08003e2b
 8003ddc:	08003e33 	.word	0x08003e33
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
      break;
 8003de8:	e02b      	b.n	8003e42 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	4a17      	ldr	r2, [pc, #92]	; (8003e4c <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8003dee:	601a      	str	r2, [r3, #0]
      break;
 8003df0:	e027      	b.n	8003e42 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	4a16      	ldr	r2, [pc, #88]	; (8003e50 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 8003df6:	601a      	str	r2, [r3, #0]
      break;
 8003df8:	e023      	b.n	8003e42 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	4a15      	ldr	r2, [pc, #84]	; (8003e54 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 8003dfe:	601a      	str	r2, [r3, #0]
      break;
 8003e00:	e01f      	b.n	8003e42 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8003e06:	601a      	str	r2, [r3, #0]
      break;
 8003e08:	e01b      	b.n	8003e42 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 8003e0e:	601a      	str	r2, [r3, #0]
      break;
 8003e10:	e017      	b.n	8003e42 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_417Hz:
      *Odr = 417.0f;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8003e16:	601a      	str	r2, [r3, #0]
      break;
 8003e18:	e013      	b.n	8003e42 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	4a11      	ldr	r2, [pc, #68]	; (8003e64 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 8003e1e:	601a      	str	r2, [r3, #0]
      break;
 8003e20:	e00f      	b.n	8003e42 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	4a10      	ldr	r2, [pc, #64]	; (8003e68 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8003e26:	601a      	str	r2, [r3, #0]
      break;
 8003e28:	e00b      	b.n	8003e42 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	4a0f      	ldr	r2, [pc, #60]	; (8003e6c <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 8003e2e:	601a      	str	r2, [r3, #0]
      break;
 8003e30:	e007      	b.n	8003e42 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	4a0e      	ldr	r2, [pc, #56]	; (8003e70 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8003e36:	601a      	str	r2, [r3, #0]
      break;
 8003e38:	e003      	b.n	8003e42 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8003e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3e:	60fb      	str	r3, [r7, #12]
      break;
 8003e40:	bf00      	nop
  }

  return ret;
 8003e42:	68fb      	ldr	r3, [r7, #12]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	41480000 	.word	0x41480000
 8003e50:	41d00000 	.word	0x41d00000
 8003e54:	42500000 	.word	0x42500000
 8003e58:	42d00000 	.word	0x42d00000
 8003e5c:	43500000 	.word	0x43500000
 8003e60:	43d08000 	.word	0x43d08000
 8003e64:	44504000 	.word	0x44504000
 8003e68:	44d06000 	.word	0x44d06000
 8003e6c:	45505000 	.word	0x45505000
 8003e70:	45d05800 	.word	0x45d05800

08003e74 <ISM330DHCX_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d106      	bne.n	8003e98 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003e8a:	ed97 0a00 	vldr	s0, [r7]
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fa32 	bl	80042f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8003e94:	4603      	mov	r3, r0
 8003e96:	e005      	b.n	8003ea4 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003e98:	ed97 0a00 	vldr	s0, [r7]
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fab7 	bl	8004410 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 8003ea2:	4603      	mov	r3, r0
  }
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <ISM330DHCX_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	331c      	adds	r3, #28
 8003ebe:	f107 020b 	add.w	r2, r7, #11
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fde7 	bl	8004a98 <ism330dhcx_gy_full_scale_get>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed4:	e03c      	b.n	8003f50 <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 8003ed6:	7afb      	ldrb	r3, [r7, #11]
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d834      	bhi.n	8003f46 <ISM330DHCX_GYRO_GetFullScale+0x9a>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f21 	.word	0x08003f21
 8003ee8:	08003f47 	.word	0x08003f47
 8003eec:	08003f19 	.word	0x08003f19
 8003ef0:	08003f47 	.word	0x08003f47
 8003ef4:	08003f29 	.word	0x08003f29
 8003ef8:	08003f47 	.word	0x08003f47
 8003efc:	08003f47 	.word	0x08003f47
 8003f00:	08003f47 	.word	0x08003f47
 8003f04:	08003f33 	.word	0x08003f33
 8003f08:	08003f47 	.word	0x08003f47
 8003f0c:	08003f47 	.word	0x08003f47
 8003f10:	08003f47 	.word	0x08003f47
 8003f14:	08003f3d 	.word	0x08003f3d
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	227d      	movs	r2, #125	; 0x7d
 8003f1c:	601a      	str	r2, [r3, #0]
      break;
 8003f1e:	e016      	b.n	8003f4e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	22fa      	movs	r2, #250	; 0xfa
 8003f24:	601a      	str	r2, [r3, #0]
      break;
 8003f26:	e012      	b.n	8003f4e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f2e:	601a      	str	r2, [r3, #0]
      break;
 8003f30:	e00d      	b.n	8003f4e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f38:	601a      	str	r2, [r3, #0]
      break;
 8003f3a:	e008      	b.n	8003f4e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003f42:	601a      	str	r2, [r3, #0]
      break;
 8003f44:	e003      	b.n	8003f4e <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 8003f46:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4a:	60fb      	str	r3, [r7, #12]
      break;
 8003f4c:	bf00      	nop
  }

  return ret;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <ISM330DHCX_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b7d      	cmp	r3, #125	; 0x7d
 8003f66:	dd12      	ble.n	8003f8e <ISM330DHCX_GYRO_SetFullScale+0x36>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2bfa      	cmp	r3, #250	; 0xfa
 8003f6c:	dd0d      	ble.n	8003f8a <ISM330DHCX_GYRO_SetFullScale+0x32>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f74:	dd07      	ble.n	8003f86 <ISM330DHCX_GYRO_SetFullScale+0x2e>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f7c:	dc01      	bgt.n	8003f82 <ISM330DHCX_GYRO_SetFullScale+0x2a>
 8003f7e:	2308      	movs	r3, #8
 8003f80:	e006      	b.n	8003f90 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003f82:	230c      	movs	r3, #12
 8003f84:	e004      	b.n	8003f90 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003f86:	2304      	movs	r3, #4
 8003f88:	e002      	b.n	8003f90 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e000      	b.n	8003f90 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8003f8e:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8003f90:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	331c      	adds	r3, #28
 8003f96:	7bfa      	ldrb	r2, [r7, #15]
 8003f98:	4611      	mov	r1, r2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fd56 	bl	8004a4c <ism330dhcx_gy_full_scale_set>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 8003fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003faa:	e000      	b.n	8003fae <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <ISM330DHCX_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	331c      	adds	r3, #28
 8003fc4:	f107 0208 	add.w	r2, r7, #8
 8003fc8:	4611      	mov	r1, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 ffae 	bl	8004f2c <ism330dhcx_angular_rate_raw_get>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	e00c      	b.n	8003ff6 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003fdc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003fe4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003fec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <ISM330DHCX_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b086      	sub	sp, #24
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	331c      	adds	r3, #28
 800400c:	f107 0210 	add.w	r2, r7, #16
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f000 ff8a 	bl	8004f2c <ism330dhcx_angular_rate_raw_get>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 800401e:	f04f 33ff 	mov.w	r3, #4294967295
 8004022:	e03c      	b.n	800409e <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004024:	f107 030c 	add.w	r3, r7, #12
 8004028:	4619      	mov	r1, r3
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fe48 	bl	8003cc0 <ISM330DHCX_GYRO_GetSensitivity>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8004036:	f04f 33ff 	mov.w	r3, #4294967295
 800403a:	e030      	b.n	800409e <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800403c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004040:	ee07 3a90 	vmov	s15, r3
 8004044:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004048:	edd7 7a03 	vldr	s15, [r7, #12]
 800404c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004050:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004054:	ee17 2a90 	vmov	r2, s15
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800405c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004060:	ee07 3a90 	vmov	s15, r3
 8004064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004068:	edd7 7a03 	vldr	s15, [r7, #12]
 800406c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004070:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004074:	ee17 2a90 	vmov	r2, s15
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800407c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004080:	ee07 3a90 	vmov	s15, r3
 8004084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004088:	edd7 7a03 	vldr	s15, [r7, #12]
 800408c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004094:	ee17 2a90 	vmov	r2, s15
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <ISM330DHCX_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	70fb      	strb	r3, [r7, #3]
 80040b2:	4613      	mov	r3, r2
 80040b4:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f103 001c 	add.w	r0, r3, #28
 80040bc:	1cba      	adds	r2, r7, #2
 80040be:	78f9      	ldrb	r1, [r7, #3]
 80040c0:	2301      	movs	r3, #1
 80040c2:	f000 fa75 	bl	80045b0 <ism330dhcx_write_reg>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 80040cc:	f04f 33ff 	mov.w	r3, #4294967295
 80040d0:	e000      	b.n	80040d4 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 80040e8:	edd7 7a00 	vldr	s15, [r7]
 80040ec:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80040f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f8:	d801      	bhi.n	80040fe <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e058      	b.n	80041b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80040fe:	edd7 7a00 	vldr	s15, [r7]
 8004102:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800410a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410e:	d801      	bhi.n	8004114 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004110:	2302      	movs	r3, #2
 8004112:	e04d      	b.n	80041b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004114:	edd7 7a00 	vldr	s15, [r7]
 8004118:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80041d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 800411c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004124:	d801      	bhi.n	800412a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004126:	2303      	movs	r3, #3
 8004128:	e042      	b.n	80041b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800412a:	edd7 7a00 	vldr	s15, [r7]
 800412e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80041dc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413a:	d801      	bhi.n	8004140 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 800413c:	2304      	movs	r3, #4
 800413e:	e037      	b.n	80041b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004140:	edd7 7a00 	vldr	s15, [r7]
 8004144:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80041e0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800414c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004150:	d801      	bhi.n	8004156 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004152:	2305      	movs	r3, #5
 8004154:	e02c      	b.n	80041b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004156:	edd7 7a00 	vldr	s15, [r7]
 800415a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80041e4 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 800415e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004166:	d801      	bhi.n	800416c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004168:	2306      	movs	r3, #6
 800416a:	e021      	b.n	80041b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800416c:	edd7 7a00 	vldr	s15, [r7]
 8004170:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80041e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417c:	d801      	bhi.n	8004182 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 800417e:	2307      	movs	r3, #7
 8004180:	e016      	b.n	80041b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004182:	edd7 7a00 	vldr	s15, [r7]
 8004186:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80041ec <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 800418a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004192:	d801      	bhi.n	8004198 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004194:	2308      	movs	r3, #8
 8004196:	e00b      	b.n	80041b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004198:	edd7 7a00 	vldr	s15, [r7]
 800419c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80041f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 80041a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a8:	d801      	bhi.n	80041ae <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 80041aa:	2309      	movs	r3, #9
 80041ac:	e000      	b.n	80041b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80041ae:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80041b0:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
          :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	331c      	adds	r3, #28
 80041b6:	7bfa      	ldrb	r2, [r7, #15]
 80041b8:	4611      	mov	r1, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fa6e 	bl	800469c <ism330dhcx_xl_data_rate_set>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80041c6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ca:	e000      	b.n	80041ce <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	42500000 	.word	0x42500000
 80041dc:	42d00000 	.word	0x42d00000
 80041e0:	43500000 	.word	0x43500000
 80041e4:	43d08000 	.word	0x43d08000
 80041e8:	44504000 	.word	0x44504000
 80041ec:	44d06000 	.word	0x44d06000
 80041f0:	45505000 	.word	0x45505000

080041f4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8004200:	edd7 7a00 	vldr	s15, [r7]
 8004204:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800420c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004210:	d801      	bhi.n	8004216 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004212:	2301      	movs	r3, #1
 8004214:	e058      	b.n	80042c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004216:	edd7 7a00 	vldr	s15, [r7]
 800421a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800421e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004226:	d801      	bhi.n	800422c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004228:	2302      	movs	r3, #2
 800422a:	e04d      	b.n	80042c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800422c:	edd7 7a00 	vldr	s15, [r7]
 8004230:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80042dc <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423c:	d801      	bhi.n	8004242 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800423e:	2303      	movs	r3, #3
 8004240:	e042      	b.n	80042c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004242:	edd7 7a00 	vldr	s15, [r7]
 8004246:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80042e0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 800424a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800424e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004252:	d801      	bhi.n	8004258 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004254:	2304      	movs	r3, #4
 8004256:	e037      	b.n	80042c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004258:	edd7 7a00 	vldr	s15, [r7]
 800425c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80042e4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004268:	d801      	bhi.n	800426e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 800426a:	2305      	movs	r3, #5
 800426c:	e02c      	b.n	80042c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800426e:	edd7 7a00 	vldr	s15, [r7]
 8004272:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80042e8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800427a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427e:	d801      	bhi.n	8004284 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004280:	2306      	movs	r3, #6
 8004282:	e021      	b.n	80042c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004284:	edd7 7a00 	vldr	s15, [r7]
 8004288:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80042ec <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800428c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004294:	d801      	bhi.n	800429a <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004296:	2307      	movs	r3, #7
 8004298:	e016      	b.n	80042c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800429a:	edd7 7a00 	vldr	s15, [r7]
 800429e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80042f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80042a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042aa:	d801      	bhi.n	80042b0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80042ac:	2308      	movs	r3, #8
 80042ae:	e00b      	b.n	80042c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80042b0:	edd7 7a00 	vldr	s15, [r7]
 80042b4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80042f4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 80042b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c0:	d801      	bhi.n	80042c6 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 80042c2:	2309      	movs	r3, #9
 80042c4:	e000      	b.n	80042c8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80042c6:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
                :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	42500000 	.word	0x42500000
 80042e0:	42d00000 	.word	0x42d00000
 80042e4:	43500000 	.word	0x43500000
 80042e8:	43d08000 	.word	0x43d08000
 80042ec:	44504000 	.word	0x44504000
 80042f0:	44d06000 	.word	0x44d06000
 80042f4:	45505000 	.word	0x45505000

080042f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8004304:	edd7 7a00 	vldr	s15, [r7]
 8004308:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800430c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004314:	d801      	bhi.n	800431a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004316:	2301      	movs	r3, #1
 8004318:	e058      	b.n	80043cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800431a:	edd7 7a00 	vldr	s15, [r7]
 800431e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432a:	d801      	bhi.n	8004330 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800432c:	2302      	movs	r3, #2
 800432e:	e04d      	b.n	80043cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004330:	edd7 7a00 	vldr	s15, [r7]
 8004334:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80043f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800433c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004340:	d801      	bhi.n	8004346 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004342:	2303      	movs	r3, #3
 8004344:	e042      	b.n	80043cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004346:	edd7 7a00 	vldr	s15, [r7]
 800434a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80043f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 800434e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004356:	d801      	bhi.n	800435c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004358:	2304      	movs	r3, #4
 800435a:	e037      	b.n	80043cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800435c:	edd7 7a00 	vldr	s15, [r7]
 8004360:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80043fc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004364:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436c:	d801      	bhi.n	8004372 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800436e:	2305      	movs	r3, #5
 8004370:	e02c      	b.n	80043cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004372:	edd7 7a00 	vldr	s15, [r7]
 8004376:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004400 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800437a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800437e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004382:	d801      	bhi.n	8004388 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004384:	2306      	movs	r3, #6
 8004386:	e021      	b.n	80043cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004388:	edd7 7a00 	vldr	s15, [r7]
 800438c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004404 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004398:	d801      	bhi.n	800439e <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800439a:	2307      	movs	r3, #7
 800439c:	e016      	b.n	80043cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800439e:	edd7 7a00 	vldr	s15, [r7]
 80043a2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004408 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80043a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ae:	d801      	bhi.n	80043b4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80043b0:	2308      	movs	r3, #8
 80043b2:	e00b      	b.n	80043cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80043b4:	edd7 7a00 	vldr	s15, [r7]
 80043b8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800440c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80043bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c4:	d801      	bhi.n	80043ca <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80043c6:	2309      	movs	r3, #9
 80043c8:	e000      	b.n	80043cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80043ca:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80043cc:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
          :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	331c      	adds	r3, #28
 80043d2:	7bfa      	ldrb	r2, [r7, #15]
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fbb0 	bl	8004b3c <ism330dhcx_gy_data_rate_set>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 80043e2:	f04f 33ff 	mov.w	r3, #4294967295
 80043e6:	e000      	b.n	80043ea <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	42500000 	.word	0x42500000
 80043f8:	42d00000 	.word	0x42d00000
 80043fc:	43500000 	.word	0x43500000
 8004400:	43d08000 	.word	0x43d08000
 8004404:	44504000 	.word	0x44504000
 8004408:	44d06000 	.word	0x44d06000
 800440c:	45505000 	.word	0x45505000

08004410 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800441c:	edd7 7a00 	vldr	s15, [r7]
 8004420:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442c:	d801      	bhi.n	8004432 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800442e:	2301      	movs	r3, #1
 8004430:	e058      	b.n	80044e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004432:	edd7 7a00 	vldr	s15, [r7]
 8004436:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800443a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800443e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004442:	d801      	bhi.n	8004448 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004444:	2302      	movs	r3, #2
 8004446:	e04d      	b.n	80044e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004448:	edd7 7a00 	vldr	s15, [r7]
 800444c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80044f8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004458:	d801      	bhi.n	800445e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800445a:	2303      	movs	r3, #3
 800445c:	e042      	b.n	80044e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800445e:	edd7 7a00 	vldr	s15, [r7]
 8004462:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80044fc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004466:	eef4 7ac7 	vcmpe.f32	s15, s14
 800446a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446e:	d801      	bhi.n	8004474 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004470:	2304      	movs	r3, #4
 8004472:	e037      	b.n	80044e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004474:	edd7 7a00 	vldr	s15, [r7]
 8004478:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004500 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800447c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004484:	d801      	bhi.n	800448a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004486:	2305      	movs	r3, #5
 8004488:	e02c      	b.n	80044e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800448a:	edd7 7a00 	vldr	s15, [r7]
 800448e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004504 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449a:	d801      	bhi.n	80044a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800449c:	2306      	movs	r3, #6
 800449e:	e021      	b.n	80044e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80044a0:	edd7 7a00 	vldr	s15, [r7]
 80044a4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004508 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80044a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b0:	d801      	bhi.n	80044b6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80044b2:	2307      	movs	r3, #7
 80044b4:	e016      	b.n	80044e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80044b6:	edd7 7a00 	vldr	s15, [r7]
 80044ba:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800450c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80044be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c6:	d801      	bhi.n	80044cc <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80044c8:	2308      	movs	r3, #8
 80044ca:	e00b      	b.n	80044e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80044cc:	edd7 7a00 	vldr	s15, [r7]
 80044d0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004510 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80044d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044dc:	d801      	bhi.n	80044e2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80044de:	2309      	movs	r3, #9
 80044e0:	e000      	b.n	80044e4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80044e2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
                 :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	42500000 	.word	0x42500000
 80044fc:	42d00000 	.word	0x42d00000
 8004500:	43500000 	.word	0x43500000
 8004504:	43d08000 	.word	0x43d08000
 8004508:	44504000 	.word	0x44504000
 800450c:	44d06000 	.word	0x44d06000
 8004510:	45505000 	.word	0x45505000

08004514 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004514:	b590      	push	{r4, r7, lr}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	461a      	mov	r2, r3
 8004520:	460b      	mov	r3, r1
 8004522:	72fb      	strb	r3, [r7, #11]
 8004524:	4613      	mov	r3, r2
 8004526:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	695c      	ldr	r4, [r3, #20]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	7b1b      	ldrb	r3, [r3, #12]
 8004534:	b298      	uxth	r0, r3
 8004536:	7afb      	ldrb	r3, [r7, #11]
 8004538:	b299      	uxth	r1, r3
 800453a:	893b      	ldrh	r3, [r7, #8]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	47a0      	blx	r4
 8004540:	4603      	mov	r3, r0
}
 8004542:	4618      	mov	r0, r3
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	bd90      	pop	{r4, r7, pc}

0800454a <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800454a:	b590      	push	{r4, r7, lr}
 800454c:	b087      	sub	sp, #28
 800454e:	af00      	add	r7, sp, #0
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	461a      	mov	r2, r3
 8004556:	460b      	mov	r3, r1
 8004558:	72fb      	strb	r3, [r7, #11]
 800455a:	4613      	mov	r3, r2
 800455c:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	691c      	ldr	r4, [r3, #16]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	7b1b      	ldrb	r3, [r3, #12]
 800456a:	b298      	uxth	r0, r3
 800456c:	7afb      	ldrb	r3, [r7, #11]
 800456e:	b299      	uxth	r1, r3
 8004570:	893b      	ldrh	r3, [r7, #8]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	47a0      	blx	r4
 8004576:	4603      	mov	r3, r0
}
 8004578:	4618      	mov	r0, r3
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	bd90      	pop	{r4, r7, pc}

08004580 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	461a      	mov	r2, r3
 800458c:	460b      	mov	r3, r1
 800458e:	72fb      	strb	r3, [r7, #11]
 8004590:	4613      	mov	r3, r2
 8004592:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	685c      	ldr	r4, [r3, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6898      	ldr	r0, [r3, #8]
 800459c:	893b      	ldrh	r3, [r7, #8]
 800459e:	7af9      	ldrb	r1, [r7, #11]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	47a0      	blx	r4
 80045a4:	6178      	str	r0, [r7, #20]
  return ret;
 80045a6:	697b      	ldr	r3, [r7, #20]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd90      	pop	{r4, r7, pc}

080045b0 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	461a      	mov	r2, r3
 80045bc:	460b      	mov	r3, r1
 80045be:	72fb      	strb	r3, [r7, #11]
 80045c0:	4613      	mov	r3, r2
 80045c2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681c      	ldr	r4, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6898      	ldr	r0, [r3, #8]
 80045cc:	893b      	ldrh	r3, [r7, #8]
 80045ce:	7af9      	ldrb	r1, [r7, #11]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	47a0      	blx	r4
 80045d4:	6178      	str	r0, [r7, #20]
  return ret;
 80045d6:	697b      	ldr	r3, [r7, #20]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd90      	pop	{r4, r7, pc}

080045e0 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80045ec:	f107 0208 	add.w	r2, r7, #8
 80045f0:	2301      	movs	r3, #1
 80045f2:	2110      	movs	r1, #16
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff ffc3 	bl	8004580 <ism330dhcx_read_reg>
 80045fa:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0) {
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10f      	bne.n	8004622 <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	b2da      	uxtb	r2, r3
 800460a:	7a3b      	ldrb	r3, [r7, #8]
 800460c:	f362 0383 	bfi	r3, r2, #2, #2
 8004610:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004612:	f107 0208 	add.w	r2, r7, #8
 8004616:	2301      	movs	r3, #1
 8004618:	2110      	movs	r1, #16
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff ffc8 	bl	80045b0 <ism330dhcx_write_reg>
 8004620:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004622:	68fb      	ldr	r3, [r7, #12]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004636:	f107 0208 	add.w	r2, r7, #8
 800463a:	2301      	movs	r3, #1
 800463c:	2110      	movs	r1, #16
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff ff9e 	bl	8004580 <ism330dhcx_read_reg>
 8004644:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl) {
 8004646:	7a3b      	ldrb	r3, [r7, #8]
 8004648:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b03      	cmp	r3, #3
 8004650:	d81a      	bhi.n	8004688 <ism330dhcx_xl_full_scale_get+0x5c>
 8004652:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <ism330dhcx_xl_full_scale_get+0x2c>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	08004669 	.word	0x08004669
 800465c:	08004671 	.word	0x08004671
 8004660:	08004679 	.word	0x08004679
 8004664:	08004681 	.word	0x08004681
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
      break;
 800466e:	e00f      	b.n	8004690 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2201      	movs	r2, #1
 8004674:	701a      	strb	r2, [r3, #0]
      break;
 8004676:	e00b      	b.n	8004690 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2202      	movs	r2, #2
 800467c:	701a      	strb	r2, [r3, #0]
      break;
 800467e:	e007      	b.n	8004690 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2203      	movs	r2, #3
 8004684:	701a      	strb	r2, [r3, #0]
      break;
 8004686:	e003      	b.n	8004690 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
      break;
 800468e:	bf00      	nop
  }

  return ret;
 8004690:	68fb      	ldr	r3, [r7, #12]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop

0800469c <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 80046ac:	f107 030c 	add.w	r3, r7, #12
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fd9f 	bl	80051f6 <ism330dhcx_fsm_enable_get>
 80046b8:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f040 80c4 	bne.w	800484a <ism330dhcx_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80046c2:	7b3b      	ldrb	r3, [r7, #12]
 80046c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80046c8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80046ca:	7b3b      	ldrb	r3, [r7, #12]
 80046cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80046d0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80046d2:	4313      	orrs	r3, r2
 80046d4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80046d6:	7b3b      	ldrb	r3, [r7, #12]
 80046d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80046dc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80046de:	4313      	orrs	r3, r2
 80046e0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80046e2:	7b3b      	ldrb	r3, [r7, #12]
 80046e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80046e8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80046ea:	4313      	orrs	r3, r2
 80046ec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80046ee:	7b3b      	ldrb	r3, [r7, #12]
 80046f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80046f4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80046f6:	4313      	orrs	r3, r2
 80046f8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80046fa:	7b3b      	ldrb	r3, [r7, #12]
 80046fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004700:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004702:	4313      	orrs	r3, r2
 8004704:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004706:	7b3b      	ldrb	r3, [r7, #12]
 8004708:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800470c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800470e:	4313      	orrs	r3, r2
 8004710:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004712:	7b3b      	ldrb	r3, [r7, #12]
 8004714:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004718:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800471a:	4313      	orrs	r3, r2
 800471c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800471e:	7b7b      	ldrb	r3, [r7, #13]
 8004720:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004724:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004726:	4313      	orrs	r3, r2
 8004728:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800472a:	7b7b      	ldrb	r3, [r7, #13]
 800472c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004730:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004732:	4313      	orrs	r3, r2
 8004734:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8004736:	7b7b      	ldrb	r3, [r7, #13]
 8004738:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800473c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800473e:	4313      	orrs	r3, r2
 8004740:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8004742:	7b7b      	ldrb	r3, [r7, #13]
 8004744:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004748:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800474a:	4313      	orrs	r3, r2
 800474c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800474e:	7b7b      	ldrb	r3, [r7, #13]
 8004750:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004754:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8004756:	4313      	orrs	r3, r2
 8004758:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800475a:	7b7b      	ldrb	r3, [r7, #13]
 800475c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004760:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8004762:	4313      	orrs	r3, r2
 8004764:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004766:	7b7b      	ldrb	r3, [r7, #13]
 8004768:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800476c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800476e:	4313      	orrs	r3, r2
 8004770:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8004772:	7b7b      	ldrb	r3, [r7, #13]
 8004774:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004778:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800477a:	4313      	orrs	r3, r2
 800477c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800477e:	2b01      	cmp	r3, #1
 8004780:	d163      	bne.n	800484a <ism330dhcx_xl_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8004782:	f107 030b 	add.w	r3, r7, #11
 8004786:	4619      	mov	r1, r3
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fd61 	bl	8005250 <ism330dhcx_fsm_data_rate_get>
 800478e:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d159      	bne.n	800484a <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8004796:	7afb      	ldrb	r3, [r7, #11]
 8004798:	2b03      	cmp	r3, #3
 800479a:	d853      	bhi.n	8004844 <ism330dhcx_xl_data_rate_set+0x1a8>
 800479c:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <ism330dhcx_xl_data_rate_set+0x108>)
 800479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a2:	bf00      	nop
 80047a4:	080047b5 	.word	0x080047b5
 80047a8:	080047c7 	.word	0x080047c7
 80047ac:	080047e5 	.word	0x080047e5
 80047b0:	0800480f 	.word	0x0800480f
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80047ba:	2301      	movs	r3, #1
 80047bc:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80047be:	e045      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	75fb      	strb	r3, [r7, #23]
            break;
 80047c4:	e042      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80047c6:	78fb      	ldrb	r3, [r7, #3]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80047cc:	2302      	movs	r3, #2
 80047ce:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80047d0:	e03c      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d102      	bne.n	80047de <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80047d8:	2302      	movs	r3, #2
 80047da:	75fb      	strb	r3, [r7, #23]
            break;
 80047dc:	e036      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	75fb      	strb	r3, [r7, #23]
            break;
 80047e2:	e033      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d102      	bne.n	80047f0 <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80047ea:	2303      	movs	r3, #3
 80047ec:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80047ee:	e02d      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d102      	bne.n	80047fc <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80047f6:	2303      	movs	r3, #3
 80047f8:	75fb      	strb	r3, [r7, #23]
            break;
 80047fa:	e027      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d102      	bne.n	8004808 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004802:	2303      	movs	r3, #3
 8004804:	75fb      	strb	r3, [r7, #23]
            break;
 8004806:	e021      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	75fb      	strb	r3, [r7, #23]
            break;
 800480c:	e01e      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d102      	bne.n	800481a <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004814:	2304      	movs	r3, #4
 8004816:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004818:	e018      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 800481a:	78fb      	ldrb	r3, [r7, #3]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d102      	bne.n	8004826 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004820:	2304      	movs	r3, #4
 8004822:	75fb      	strb	r3, [r7, #23]
            break;
 8004824:	e012      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	2b02      	cmp	r3, #2
 800482a:	d102      	bne.n	8004832 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800482c:	2304      	movs	r3, #4
 800482e:	75fb      	strb	r3, [r7, #23]
            break;
 8004830:	e00c      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	2b03      	cmp	r3, #3
 8004836:	d102      	bne.n	800483e <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004838:	2304      	movs	r3, #4
 800483a:	75fb      	strb	r3, [r7, #23]
            break;
 800483c:	e006      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	75fb      	strb	r3, [r7, #23]
            break;
 8004842:	e003      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8004844:	78fb      	ldrb	r3, [r7, #3]
 8004846:	75fb      	strb	r3, [r7, #23]
            break;
 8004848:	e000      	b.n	800484c <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 800484a:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 800484c:	2300      	movs	r3, #0
 800484e:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d16d      	bne.n	8004932 <ism330dhcx_xl_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8004856:	f107 030a 	add.w	r3, r7, #10
 800485a:	4619      	mov	r1, r3
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 fd3f 	bl	80052e0 <ism330dhcx_mlc_get>
 8004862:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8004864:	7abb      	ldrb	r3, [r7, #10]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d163      	bne.n	8004932 <ism330dhcx_xl_data_rate_set+0x296>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 800486a:	f107 0309 	add.w	r3, r7, #9
 800486e:	4619      	mov	r1, r3
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 fd5f 	bl	8005334 <ism330dhcx_mlc_data_rate_get>
 8004876:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d159      	bne.n	8004932 <ism330dhcx_xl_data_rate_set+0x296>
        switch (mlc_odr) {
 800487e:	7a7b      	ldrb	r3, [r7, #9]
 8004880:	2b03      	cmp	r3, #3
 8004882:	d853      	bhi.n	800492c <ism330dhcx_xl_data_rate_set+0x290>
 8004884:	a201      	add	r2, pc, #4	; (adr r2, 800488c <ism330dhcx_xl_data_rate_set+0x1f0>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	0800489d 	.word	0x0800489d
 8004890:	080048af 	.word	0x080048af
 8004894:	080048cd 	.word	0x080048cd
 8004898:	080048f7 	.word	0x080048f7
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800489c:	78fb      	ldrb	r3, [r7, #3]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d102      	bne.n	80048a8 <ism330dhcx_xl_data_rate_set+0x20c>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80048a2:	2301      	movs	r3, #1
 80048a4:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80048a6:	e045      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	75fb      	strb	r3, [r7, #23]
            break;
 80048ac:	e042      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d102      	bne.n	80048ba <ism330dhcx_xl_data_rate_set+0x21e>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80048b4:	2302      	movs	r3, #2
 80048b6:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80048b8:	e03c      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d102      	bne.n	80048c6 <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80048c0:	2302      	movs	r3, #2
 80048c2:	75fb      	strb	r3, [r7, #23]
            break;
 80048c4:	e036      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	75fb      	strb	r3, [r7, #23]
            break;
 80048ca:	e033      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <ism330dhcx_xl_data_rate_set+0x23c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80048d2:	2303      	movs	r3, #3
 80048d4:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80048d6:	e02d      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d102      	bne.n	80048e4 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80048de:	2303      	movs	r3, #3
 80048e0:	75fb      	strb	r3, [r7, #23]
            break;
 80048e2:	e027      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d102      	bne.n	80048f0 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80048ea:	2303      	movs	r3, #3
 80048ec:	75fb      	strb	r3, [r7, #23]
            break;
 80048ee:	e021      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	75fb      	strb	r3, [r7, #23]
            break;
 80048f4:	e01e      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80048f6:	78fb      	ldrb	r3, [r7, #3]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d102      	bne.n	8004902 <ism330dhcx_xl_data_rate_set+0x266>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80048fc:	2304      	movs	r3, #4
 80048fe:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004900:	e018      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8004902:	78fb      	ldrb	r3, [r7, #3]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d102      	bne.n	800490e <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004908:	2304      	movs	r3, #4
 800490a:	75fb      	strb	r3, [r7, #23]
            break;
 800490c:	e012      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	2b02      	cmp	r3, #2
 8004912:	d102      	bne.n	800491a <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004914:	2304      	movs	r3, #4
 8004916:	75fb      	strb	r3, [r7, #23]
            break;
 8004918:	e00c      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d102      	bne.n	8004926 <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004920:	2304      	movs	r3, #4
 8004922:	75fb      	strb	r3, [r7, #23]
            break;
 8004924:	e006      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	75fb      	strb	r3, [r7, #23]
            break;
 800492a:	e003      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	75fb      	strb	r3, [r7, #23]
            break;
 8004930:	e000      	b.n	8004934 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 8004932:	bf00      	nop
    }
  }

  if (ret == 0) {
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d107      	bne.n	800494a <ism330dhcx_xl_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800493a:	f107 0208 	add.w	r2, r7, #8
 800493e:	2301      	movs	r3, #1
 8004940:	2110      	movs	r1, #16
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7ff fe1c 	bl	8004580 <ism330dhcx_read_reg>
 8004948:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0) {
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10f      	bne.n	8004970 <ism330dhcx_xl_data_rate_set+0x2d4>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8004950:	7dfb      	ldrb	r3, [r7, #23]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	b2da      	uxtb	r2, r3
 8004958:	7a3b      	ldrb	r3, [r7, #8]
 800495a:	f362 1307 	bfi	r3, r2, #4, #4
 800495e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004960:	f107 0208 	add.w	r2, r7, #8
 8004964:	2301      	movs	r3, #1
 8004966:	2110      	movs	r1, #16
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff fe21 	bl	80045b0 <ism330dhcx_write_reg>
 800496e:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004970:	693b      	ldr	r3, [r7, #16]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop

0800497c <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004986:	f107 0208 	add.w	r2, r7, #8
 800498a:	2301      	movs	r3, #1
 800498c:	2110      	movs	r1, #16
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff fdf6 	bl	8004580 <ism330dhcx_read_reg>
 8004994:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl) {
 8004996:	7a3b      	ldrb	r3, [r7, #8]
 8004998:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b0b      	cmp	r3, #11
 80049a0:	d84a      	bhi.n	8004a38 <ism330dhcx_xl_data_rate_get+0xbc>
 80049a2:	a201      	add	r2, pc, #4	; (adr r2, 80049a8 <ism330dhcx_xl_data_rate_get+0x2c>)
 80049a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a8:	080049d9 	.word	0x080049d9
 80049ac:	080049e1 	.word	0x080049e1
 80049b0:	080049e9 	.word	0x080049e9
 80049b4:	080049f1 	.word	0x080049f1
 80049b8:	080049f9 	.word	0x080049f9
 80049bc:	08004a01 	.word	0x08004a01
 80049c0:	08004a09 	.word	0x08004a09
 80049c4:	08004a11 	.word	0x08004a11
 80049c8:	08004a19 	.word	0x08004a19
 80049cc:	08004a21 	.word	0x08004a21
 80049d0:	08004a29 	.word	0x08004a29
 80049d4:	08004a31 	.word	0x08004a31
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2200      	movs	r2, #0
 80049dc:	701a      	strb	r2, [r3, #0]
      break;
 80049de:	e02f      	b.n	8004a40 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2201      	movs	r2, #1
 80049e4:	701a      	strb	r2, [r3, #0]
      break;
 80049e6:	e02b      	b.n	8004a40 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2202      	movs	r2, #2
 80049ec:	701a      	strb	r2, [r3, #0]
      break;
 80049ee:	e027      	b.n	8004a40 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2203      	movs	r2, #3
 80049f4:	701a      	strb	r2, [r3, #0]
      break;
 80049f6:	e023      	b.n	8004a40 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2204      	movs	r2, #4
 80049fc:	701a      	strb	r2, [r3, #0]
      break;
 80049fe:	e01f      	b.n	8004a40 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2205      	movs	r2, #5
 8004a04:	701a      	strb	r2, [r3, #0]
      break;
 8004a06:	e01b      	b.n	8004a40 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_417Hz:
      *val = ISM330DHCX_XL_ODR_417Hz;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2206      	movs	r2, #6
 8004a0c:	701a      	strb	r2, [r3, #0]
      break;
 8004a0e:	e017      	b.n	8004a40 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2207      	movs	r2, #7
 8004a14:	701a      	strb	r2, [r3, #0]
      break;
 8004a16:	e013      	b.n	8004a40 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1667Hz:
      *val = ISM330DHCX_XL_ODR_1667Hz;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2208      	movs	r2, #8
 8004a1c:	701a      	strb	r2, [r3, #0]
      break;
 8004a1e:	e00f      	b.n	8004a40 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3333Hz:
      *val = ISM330DHCX_XL_ODR_3333Hz;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2209      	movs	r2, #9
 8004a24:	701a      	strb	r2, [r3, #0]
      break;
 8004a26:	e00b      	b.n	8004a40 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	220a      	movs	r2, #10
 8004a2c:	701a      	strb	r2, [r3, #0]
      break;
 8004a2e:	e007      	b.n	8004a40 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6Hz5:
      *val = ISM330DHCX_XL_ODR_6Hz5;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	220b      	movs	r2, #11
 8004a34:	701a      	strb	r2, [r3, #0]
      break;
 8004a36:	e003      	b.n	8004a40 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
      break;
 8004a3e:	bf00      	nop
  }

  return ret;
 8004a40:	68fb      	ldr	r3, [r7, #12]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop

08004a4c <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004a58:	f107 0208 	add.w	r2, r7, #8
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	2111      	movs	r1, #17
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7ff fd8d 	bl	8004580 <ism330dhcx_read_reg>
 8004a66:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0) {
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10f      	bne.n	8004a8e <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	7a3b      	ldrb	r3, [r7, #8]
 8004a78:	f362 0303 	bfi	r3, r2, #0, #4
 8004a7c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8004a7e:	f107 0208 	add.w	r2, r7, #8
 8004a82:	2301      	movs	r3, #1
 8004a84:	2111      	movs	r1, #17
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff fd92 	bl	80045b0 <ism330dhcx_write_reg>
 8004a8c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004aa2:	f107 0208 	add.w	r2, r7, #8
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	2111      	movs	r1, #17
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff fd68 	bl	8004580 <ism330dhcx_read_reg>
 8004ab0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g) {
 8004ab2:	7a3b      	ldrb	r3, [r7, #8]
 8004ab4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b0c      	cmp	r3, #12
 8004abc:	d834      	bhi.n	8004b28 <ism330dhcx_gy_full_scale_get+0x90>
 8004abe:	a201      	add	r2, pc, #4	; (adr r2, 8004ac4 <ism330dhcx_gy_full_scale_get+0x2c>)
 8004ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac4:	08004b01 	.word	0x08004b01
 8004ac8:	08004b21 	.word	0x08004b21
 8004acc:	08004af9 	.word	0x08004af9
 8004ad0:	08004b29 	.word	0x08004b29
 8004ad4:	08004b09 	.word	0x08004b09
 8004ad8:	08004b29 	.word	0x08004b29
 8004adc:	08004b29 	.word	0x08004b29
 8004ae0:	08004b29 	.word	0x08004b29
 8004ae4:	08004b11 	.word	0x08004b11
 8004ae8:	08004b29 	.word	0x08004b29
 8004aec:	08004b29 	.word	0x08004b29
 8004af0:	08004b29 	.word	0x08004b29
 8004af4:	08004b19 	.word	0x08004b19
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2202      	movs	r2, #2
 8004afc:	701a      	strb	r2, [r3, #0]
      break;
 8004afe:	e017      	b.n	8004b30 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
      break;
 8004b06:	e013      	b.n	8004b30 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	701a      	strb	r2, [r3, #0]
      break;
 8004b0e:	e00f      	b.n	8004b30 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2208      	movs	r2, #8
 8004b14:	701a      	strb	r2, [r3, #0]
      break;
 8004b16:	e00b      	b.n	8004b30 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	220c      	movs	r2, #12
 8004b1c:	701a      	strb	r2, [r3, #0]
      break;
 8004b1e:	e007      	b.n	8004b30 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
      break;
 8004b26:	e003      	b.n	8004b30 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	701a      	strb	r2, [r3, #0]
      break;
 8004b2e:	bf00      	nop
  }

  return ret;
 8004b30:	68fb      	ldr	r3, [r7, #12]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop

08004b3c <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8004b4c:	f107 030c 	add.w	r3, r7, #12
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fb4f 	bl	80051f6 <ism330dhcx_fsm_enable_get>
 8004b58:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f040 80c4 	bne.w	8004cea <ism330dhcx_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004b62:	7b3b      	ldrb	r3, [r7, #12]
 8004b64:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004b68:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004b6a:	7b3b      	ldrb	r3, [r7, #12]
 8004b6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004b70:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004b72:	4313      	orrs	r3, r2
 8004b74:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004b76:	7b3b      	ldrb	r3, [r7, #12]
 8004b78:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004b7c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004b82:	7b3b      	ldrb	r3, [r7, #12]
 8004b84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004b88:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004b8e:	7b3b      	ldrb	r3, [r7, #12]
 8004b90:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004b94:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004b96:	4313      	orrs	r3, r2
 8004b98:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004b9a:	7b3b      	ldrb	r3, [r7, #12]
 8004b9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004ba0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004ba6:	7b3b      	ldrb	r3, [r7, #12]
 8004ba8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004bac:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004bb2:	7b3b      	ldrb	r3, [r7, #12]
 8004bb4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004bb8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004bbe:	7b7b      	ldrb	r3, [r7, #13]
 8004bc0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004bc4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8004bca:	7b7b      	ldrb	r3, [r7, #13]
 8004bcc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004bd0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8004bd6:	7b7b      	ldrb	r3, [r7, #13]
 8004bd8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004bdc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8004bde:	4313      	orrs	r3, r2
 8004be0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8004be2:	7b7b      	ldrb	r3, [r7, #13]
 8004be4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004be8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8004bea:	4313      	orrs	r3, r2
 8004bec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8004bee:	7b7b      	ldrb	r3, [r7, #13]
 8004bf0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004bf4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8004bfa:	7b7b      	ldrb	r3, [r7, #13]
 8004bfc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004c00:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8004c02:	4313      	orrs	r3, r2
 8004c04:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004c06:	7b7b      	ldrb	r3, [r7, #13]
 8004c08:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004c0c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8004c12:	7b7b      	ldrb	r3, [r7, #13]
 8004c14:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004c18:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d163      	bne.n	8004cea <ism330dhcx_gy_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8004c22:	f107 030b 	add.w	r3, r7, #11
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fb11 	bl	8005250 <ism330dhcx_fsm_data_rate_get>
 8004c2e:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d159      	bne.n	8004cea <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8004c36:	7afb      	ldrb	r3, [r7, #11]
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d853      	bhi.n	8004ce4 <ism330dhcx_gy_data_rate_set+0x1a8>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <ism330dhcx_gy_data_rate_set+0x108>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004c55 	.word	0x08004c55
 8004c48:	08004c67 	.word	0x08004c67
 8004c4c:	08004c85 	.word	0x08004c85
 8004c50:	08004caf 	.word	0x08004caf
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004c5e:	e045      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	75fb      	strb	r3, [r7, #23]
            break;
 8004c64:	e042      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d102      	bne.n	8004c72 <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004c70:	e03c      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d102      	bne.n	8004c7e <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	75fb      	strb	r3, [r7, #23]
            break;
 8004c7c:	e036      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004c7e:	78fb      	ldrb	r3, [r7, #3]
 8004c80:	75fb      	strb	r3, [r7, #23]
            break;
 8004c82:	e033      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004c84:	78fb      	ldrb	r3, [r7, #3]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d102      	bne.n	8004c90 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004c8e:	e02d      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d102      	bne.n	8004c9c <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004c96:	2303      	movs	r3, #3
 8004c98:	75fb      	strb	r3, [r7, #23]
            break;
 8004c9a:	e027      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d102      	bne.n	8004ca8 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	75fb      	strb	r3, [r7, #23]
            break;
 8004ca6:	e021      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	75fb      	strb	r3, [r7, #23]
            break;
 8004cac:	e01e      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d102      	bne.n	8004cba <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004cb8:	e018      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d102      	bne.n	8004cc6 <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	75fb      	strb	r3, [r7, #23]
            break;
 8004cc4:	e012      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8004cc6:	78fb      	ldrb	r3, [r7, #3]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d102      	bne.n	8004cd2 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004ccc:	2304      	movs	r3, #4
 8004cce:	75fb      	strb	r3, [r7, #23]
            break;
 8004cd0:	e00c      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d102      	bne.n	8004cde <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004cd8:	2304      	movs	r3, #4
 8004cda:	75fb      	strb	r3, [r7, #23]
            break;
 8004cdc:	e006      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	75fb      	strb	r3, [r7, #23]
            break;
 8004ce2:	e003      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	75fb      	strb	r3, [r7, #23]
            break;
 8004ce8:	e000      	b.n	8004cec <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 8004cea:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8004cec:	2300      	movs	r3, #0
 8004cee:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d16d      	bne.n	8004dd2 <ism330dhcx_gy_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8004cf6:	f107 030a 	add.w	r3, r7, #10
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 faef 	bl	80052e0 <ism330dhcx_mlc_get>
 8004d02:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8004d04:	7abb      	ldrb	r3, [r7, #10]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d163      	bne.n	8004dd2 <ism330dhcx_gy_data_rate_set+0x296>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8004d0a:	f107 0309 	add.w	r3, r7, #9
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fb0f 	bl	8005334 <ism330dhcx_mlc_data_rate_get>
 8004d16:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d159      	bne.n	8004dd2 <ism330dhcx_gy_data_rate_set+0x296>
        switch (mlc_odr) {
 8004d1e:	7a7b      	ldrb	r3, [r7, #9]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d853      	bhi.n	8004dcc <ism330dhcx_gy_data_rate_set+0x290>
 8004d24:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <ism330dhcx_gy_data_rate_set+0x1f0>)
 8004d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2a:	bf00      	nop
 8004d2c:	08004d3d 	.word	0x08004d3d
 8004d30:	08004d4f 	.word	0x08004d4f
 8004d34:	08004d6d 	.word	0x08004d6d
 8004d38:	08004d97 	.word	0x08004d97
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d102      	bne.n	8004d48 <ism330dhcx_gy_data_rate_set+0x20c>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004d46:	e045      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	75fb      	strb	r3, [r7, #23]
            break;
 8004d4c:	e042      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004d4e:	78fb      	ldrb	r3, [r7, #3]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d102      	bne.n	8004d5a <ism330dhcx_gy_data_rate_set+0x21e>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004d54:	2302      	movs	r3, #2
 8004d56:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004d58:	e03c      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d102      	bne.n	8004d66 <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004d60:	2302      	movs	r3, #2
 8004d62:	75fb      	strb	r3, [r7, #23]
            break;
 8004d64:	e036      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	75fb      	strb	r3, [r7, #23]
            break;
 8004d6a:	e033      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004d6c:	78fb      	ldrb	r3, [r7, #3]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <ism330dhcx_gy_data_rate_set+0x23c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004d72:	2303      	movs	r3, #3
 8004d74:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004d76:	e02d      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d102      	bne.n	8004d84 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	75fb      	strb	r3, [r7, #23]
            break;
 8004d82:	e027      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d102      	bne.n	8004d90 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	75fb      	strb	r3, [r7, #23]
            break;
 8004d8e:	e021      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	75fb      	strb	r3, [r7, #23]
            break;
 8004d94:	e01e      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <ism330dhcx_gy_data_rate_set+0x266>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004d9c:	2304      	movs	r3, #4
 8004d9e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004da0:	e018      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d102      	bne.n	8004dae <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004da8:	2304      	movs	r3, #4
 8004daa:	75fb      	strb	r3, [r7, #23]
            break;
 8004dac:	e012      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d102      	bne.n	8004dba <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004db4:	2304      	movs	r3, #4
 8004db6:	75fb      	strb	r3, [r7, #23]
            break;
 8004db8:	e00c      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d102      	bne.n	8004dc6 <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	75fb      	strb	r3, [r7, #23]
            break;
 8004dc4:	e006      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	75fb      	strb	r3, [r7, #23]
            break;
 8004dca:	e003      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	75fb      	strb	r3, [r7, #23]
            break;
 8004dd0:	e000      	b.n	8004dd4 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8004dd2:	bf00      	nop
    }
  }

  if (ret == 0) {
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d107      	bne.n	8004dea <ism330dhcx_gy_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004dda:	f107 0208 	add.w	r2, r7, #8
 8004dde:	2301      	movs	r3, #1
 8004de0:	2111      	movs	r1, #17
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff fbcc 	bl	8004580 <ism330dhcx_read_reg>
 8004de8:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0) {
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10f      	bne.n	8004e10 <ism330dhcx_gy_data_rate_set+0x2d4>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8004df0:	7dfb      	ldrb	r3, [r7, #23]
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	7a3b      	ldrb	r3, [r7, #8]
 8004dfa:	f362 1307 	bfi	r3, r2, #4, #4
 8004dfe:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8004e00:	f107 0208 	add.w	r2, r7, #8
 8004e04:	2301      	movs	r3, #1
 8004e06:	2111      	movs	r1, #17
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff fbd1 	bl	80045b0 <ism330dhcx_write_reg>
 8004e0e:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8004e10:	693b      	ldr	r3, [r7, #16]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop

08004e1c <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004e26:	f107 0208 	add.w	r2, r7, #8
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	2111      	movs	r1, #17
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff fba6 	bl	8004580 <ism330dhcx_read_reg>
 8004e34:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g) {
 8004e36:	7a3b      	ldrb	r3, [r7, #8]
 8004e38:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b0a      	cmp	r3, #10
 8004e40:	d844      	bhi.n	8004ecc <ism330dhcx_gy_data_rate_get+0xb0>
 8004e42:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <ism330dhcx_gy_data_rate_get+0x2c>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e75 	.word	0x08004e75
 8004e4c:	08004e7d 	.word	0x08004e7d
 8004e50:	08004e85 	.word	0x08004e85
 8004e54:	08004e8d 	.word	0x08004e8d
 8004e58:	08004e95 	.word	0x08004e95
 8004e5c:	08004e9d 	.word	0x08004e9d
 8004e60:	08004ea5 	.word	0x08004ea5
 8004e64:	08004ead 	.word	0x08004ead
 8004e68:	08004eb5 	.word	0x08004eb5
 8004e6c:	08004ebd 	.word	0x08004ebd
 8004e70:	08004ec5 	.word	0x08004ec5
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2200      	movs	r2, #0
 8004e78:	701a      	strb	r2, [r3, #0]
      break;
 8004e7a:	e02b      	b.n	8004ed4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	701a      	strb	r2, [r3, #0]
      break;
 8004e82:	e027      	b.n	8004ed4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2202      	movs	r2, #2
 8004e88:	701a      	strb	r2, [r3, #0]
      break;
 8004e8a:	e023      	b.n	8004ed4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2203      	movs	r2, #3
 8004e90:	701a      	strb	r2, [r3, #0]
      break;
 8004e92:	e01f      	b.n	8004ed4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	2204      	movs	r2, #4
 8004e98:	701a      	strb	r2, [r3, #0]
      break;
 8004e9a:	e01b      	b.n	8004ed4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2205      	movs	r2, #5
 8004ea0:	701a      	strb	r2, [r3, #0]
      break;
 8004ea2:	e017      	b.n	8004ed4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_417Hz:
      *val = ISM330DHCX_GY_ODR_417Hz;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2206      	movs	r2, #6
 8004ea8:	701a      	strb	r2, [r3, #0]
      break;
 8004eaa:	e013      	b.n	8004ed4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	2207      	movs	r2, #7
 8004eb0:	701a      	strb	r2, [r3, #0]
      break;
 8004eb2:	e00f      	b.n	8004ed4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1667Hz:
      *val = ISM330DHCX_GY_ODR_1667Hz;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2208      	movs	r2, #8
 8004eb8:	701a      	strb	r2, [r3, #0]
      break;
 8004eba:	e00b      	b.n	8004ed4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3333Hz:
      *val = ISM330DHCX_GY_ODR_3333Hz;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2209      	movs	r2, #9
 8004ec0:	701a      	strb	r2, [r3, #0]
      break;
 8004ec2:	e007      	b.n	8004ed4 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	220a      	movs	r2, #10
 8004ec8:	701a      	strb	r2, [r3, #0]
      break;
 8004eca:	e003      	b.n	8004ed4 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
      break;
 8004ed2:	bf00      	nop
  }

  return ret;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop

08004ee0 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8004eec:	f107 0208 	add.w	r2, r7, #8
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	2112      	movs	r1, #18
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff fb43 	bl	8004580 <ism330dhcx_read_reg>
 8004efa:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10f      	bne.n	8004f22 <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	7a3b      	ldrb	r3, [r7, #8]
 8004f0c:	f362 1386 	bfi	r3, r2, #6, #1
 8004f10:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8004f12:	f107 0208 	add.w	r2, r7, #8
 8004f16:	2301      	movs	r3, #1
 8004f18:	2112      	movs	r1, #18
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fb48 	bl	80045b0 <ism330dhcx_write_reg>
 8004f20:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8004f22:	68fb      	ldr	r3, [r7, #12]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8004f36:	f107 020c 	add.w	r2, r7, #12
 8004f3a:	2306      	movs	r3, #6
 8004f3c:	2122      	movs	r1, #34	; 0x22
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff fb1e 	bl	8004580 <ism330dhcx_read_reg>
 8004f44:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004f46:	7b7b      	ldrb	r3, [r7, #13]
 8004f48:	b21a      	sxth	r2, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	7b3b      	ldrb	r3, [r7, #12]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	4413      	add	r3, r2
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	b21a      	sxth	r2, r3
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004f68:	7bfa      	ldrb	r2, [r7, #15]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	3302      	adds	r3, #2
 8004f6e:	b212      	sxth	r2, r2
 8004f70:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	3302      	adds	r3, #2
 8004f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	021b      	lsls	r3, r3, #8
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	7bbb      	ldrb	r3, [r7, #14]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	4413      	add	r3, r2
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	b212      	sxth	r2, r2
 8004f8e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004f90:	7c7a      	ldrb	r2, [r7, #17]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	3304      	adds	r3, #4
 8004f96:	b212      	sxth	r2, r2
 8004f98:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	7c3b      	ldrb	r3, [r7, #16]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	4413      	add	r3, r2
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	b212      	sxth	r2, r2
 8004fb6:	801a      	strh	r2, [r3, #0]
  return ret;
 8004fb8:	697b      	ldr	r3, [r7, #20]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b086      	sub	sp, #24
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8004fcc:	f107 020c 	add.w	r2, r7, #12
 8004fd0:	2306      	movs	r3, #6
 8004fd2:	2128      	movs	r1, #40	; 0x28
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fad3 	bl	8004580 <ism330dhcx_read_reg>
 8004fda:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004fdc:	7b7b      	ldrb	r3, [r7, #13]
 8004fde:	b21a      	sxth	r2, r3
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	7b3b      	ldrb	r3, [r7, #12]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	b21a      	sxth	r2, r3
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004ffe:	7bfa      	ldrb	r2, [r7, #15]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	3302      	adds	r3, #2
 8005004:	b212      	sxth	r2, r2
 8005006:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	3302      	adds	r3, #2
 800500c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005010:	b29b      	uxth	r3, r3
 8005012:	021b      	lsls	r3, r3, #8
 8005014:	b29a      	uxth	r2, r3
 8005016:	7bbb      	ldrb	r3, [r7, #14]
 8005018:	b29b      	uxth	r3, r3
 800501a:	4413      	add	r3, r2
 800501c:	b29a      	uxth	r2, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	3302      	adds	r3, #2
 8005022:	b212      	sxth	r2, r2
 8005024:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005026:	7c7a      	ldrb	r2, [r7, #17]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	3304      	adds	r3, #4
 800502c:	b212      	sxth	r2, r2
 800502e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	3304      	adds	r3, #4
 8005034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005038:	b29b      	uxth	r3, r3
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	b29a      	uxth	r2, r3
 800503e:	7c3b      	ldrb	r3, [r7, #16]
 8005040:	b29b      	uxth	r3, r3
 8005042:	4413      	add	r3, r2
 8005044:	b29a      	uxth	r2, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	3304      	adds	r3, #4
 800504a:	b212      	sxth	r2, r2
 800504c:	801a      	strh	r2, [r3, #0]
  return ret;
 800504e:	697b      	ldr	r3, [r7, #20]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	460b      	mov	r3, r1
 8005062:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8005064:	f107 0208 	add.w	r2, r7, #8
 8005068:	2301      	movs	r3, #1
 800506a:	2118      	movs	r1, #24
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff fa87 	bl	8004580 <ism330dhcx_read_reg>
 8005072:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0) {
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10f      	bne.n	800509a <ism330dhcx_device_conf_set+0x42>
    ctrl9_xl.device_conf = (uint8_t)val;
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	b2da      	uxtb	r2, r3
 8005082:	7a3b      	ldrb	r3, [r7, #8]
 8005084:	f362 0341 	bfi	r3, r2, #1, #1
 8005088:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 800508a:	f107 0208 	add.w	r2, r7, #8
 800508e:	2301      	movs	r3, #1
 8005090:	2118      	movs	r1, #24
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff fa8c 	bl	80045b0 <ism330dhcx_write_reg>
 8005098:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 800509a:	68fb      	ldr	r3, [r7, #12]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80050b0:	f107 0208 	add.w	r2, r7, #8
 80050b4:	2301      	movs	r3, #1
 80050b6:	2101      	movs	r1, #1
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f7ff fa61 	bl	8004580 <ism330dhcx_read_reg>
 80050be:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10f      	bne.n	80050e6 <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 80050c6:	78fb      	ldrb	r3, [r7, #3]
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	7a3b      	ldrb	r3, [r7, #8]
 80050d0:	f362 1387 	bfi	r3, r2, #6, #2
 80050d4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80050d6:	f107 0208 	add.w	r2, r7, #8
 80050da:	2301      	movs	r3, #1
 80050dc:	2101      	movs	r1, #1
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff fa66 	bl	80045b0 <ism330dhcx_write_reg>
 80050e4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80050e6:	68fb      	ldr	r3, [r7, #12]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 80050fa:	2301      	movs	r3, #1
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	210f      	movs	r1, #15
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff fa3d 	bl	8004580 <ism330dhcx_read_reg>
 8005106:	60f8      	str	r0, [r7, #12]
  return ret;
 8005108:	68fb      	ldr	r3, [r7, #12]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	460b      	mov	r3, r1
 800511c:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800511e:	f107 0208 	add.w	r2, r7, #8
 8005122:	2301      	movs	r3, #1
 8005124:	2112      	movs	r1, #18
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff fa2a 	bl	8004580 <ism330dhcx_read_reg>
 800512c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10f      	bne.n	8005154 <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	b2da      	uxtb	r2, r3
 800513c:	7a3b      	ldrb	r3, [r7, #8]
 800513e:	f362 0300 	bfi	r3, r2, #0, #1
 8005142:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005144:	f107 0208 	add.w	r2, r7, #8
 8005148:	2301      	movs	r3, #1
 800514a:	2112      	movs	r1, #18
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff fa2f 	bl	80045b0 <ism330dhcx_write_reg>
 8005152:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8005154:	68fb      	ldr	r3, [r7, #12]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	460b      	mov	r3, r1
 8005168:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 800516a:	f107 0208 	add.w	r2, r7, #8
 800516e:	2301      	movs	r3, #1
 8005170:	2112      	movs	r1, #18
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fa04 	bl	8004580 <ism330dhcx_read_reg>
 8005178:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10f      	bne.n	80051a0 <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	b2da      	uxtb	r2, r3
 8005188:	7a3b      	ldrb	r3, [r7, #8]
 800518a:	f362 0382 	bfi	r3, r2, #2, #1
 800518e:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005190:	f107 0208 	add.w	r2, r7, #8
 8005194:	2301      	movs	r3, #1
 8005196:	2112      	movs	r1, #18
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7ff fa09 	bl	80045b0 <ism330dhcx_write_reg>
 800519e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80051a0:	68fb      	ldr	r3, [r7, #12]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b084      	sub	sp, #16
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	460b      	mov	r3, r1
 80051b4:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80051b6:	f107 0208 	add.w	r2, r7, #8
 80051ba:	2301      	movs	r3, #1
 80051bc:	210a      	movs	r1, #10
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff f9de 	bl	8004580 <ism330dhcx_read_reg>
 80051c4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10f      	bne.n	80051ec <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	7a3b      	ldrb	r3, [r7, #8]
 80051d6:	f362 0302 	bfi	r3, r2, #0, #3
 80051da:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 80051dc:	f107 0208 	add.w	r2, r7, #8
 80051e0:	2301      	movs	r3, #1
 80051e2:	210a      	movs	r1, #10
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff f9e3 	bl	80045b0 <ism330dhcx_write_reg>
 80051ea:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 80051ec:	68fb      	ldr	r3, [r7, #12]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b084      	sub	sp, #16
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005200:	2102      	movs	r1, #2
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff ff4e 	bl	80050a4 <ism330dhcx_mem_bank_set>
 8005208:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d106      	bne.n	800521e <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 8005210:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8005212:	2301      	movs	r3, #1
 8005214:	2146      	movs	r1, #70	; 0x46
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7ff f9b2 	bl	8004580 <ism330dhcx_read_reg>
 800521c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d107      	bne.n	8005234 <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8005228:	2301      	movs	r3, #1
 800522a:	2147      	movs	r1, #71	; 0x47
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff f9a7 	bl	8004580 <ism330dhcx_read_reg>
 8005232:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800523a:	2100      	movs	r1, #0
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff ff31 	bl	80050a4 <ism330dhcx_mem_bank_set>
 8005242:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005244:	68fb      	ldr	r3, [r7, #12]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800525a:	2102      	movs	r1, #2
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ff21 	bl	80050a4 <ism330dhcx_mem_bank_set>
 8005262:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d107      	bne.n	800527a <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 800526a:	f107 0208 	add.w	r2, r7, #8
 800526e:	2301      	movs	r3, #1
 8005270:	215f      	movs	r1, #95	; 0x5f
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff f984 	bl	8004580 <ism330dhcx_read_reg>
 8005278:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d104      	bne.n	800528a <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005280:	2100      	movs	r1, #0
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff ff0e 	bl	80050a4 <ism330dhcx_mem_bank_set>
 8005288:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 800528a:	7a3b      	ldrb	r3, [r7, #8]
 800528c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b03      	cmp	r3, #3
 8005294:	d81a      	bhi.n	80052cc <ism330dhcx_fsm_data_rate_get+0x7c>
 8005296:	a201      	add	r2, pc, #4	; (adr r2, 800529c <ism330dhcx_fsm_data_rate_get+0x4c>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052ad 	.word	0x080052ad
 80052a0:	080052b5 	.word	0x080052b5
 80052a4:	080052bd 	.word	0x080052bd
 80052a8:	080052c5 	.word	0x080052c5
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
      break;
 80052b2:	e00f      	b.n	80052d4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2201      	movs	r2, #1
 80052b8:	701a      	strb	r2, [r3, #0]
      break;
 80052ba:	e00b      	b.n	80052d4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2202      	movs	r2, #2
 80052c0:	701a      	strb	r2, [r3, #0]
      break;
 80052c2:	e007      	b.n	80052d4 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2203      	movs	r2, #3
 80052c8:	701a      	strb	r2, [r3, #0]
      break;
 80052ca:	e003      	b.n	80052d4 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2200      	movs	r2, #0
 80052d0:	701a      	strb	r2, [r3, #0]
      break;
 80052d2:	bf00      	nop
  }

  return ret;
 80052d4:	68fb      	ldr	r3, [r7, #12]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop

080052e0 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80052ea:	2102      	movs	r1, #2
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff fed9 	bl	80050a4 <ism330dhcx_mem_bank_set>
 80052f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d107      	bne.n	800530a <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80052fa:	f107 0208 	add.w	r2, r7, #8
 80052fe:	2301      	movs	r3, #1
 8005300:	2105      	movs	r1, #5
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7ff f93c 	bl	8004580 <ism330dhcx_read_reg>
 8005308:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10b      	bne.n	8005328 <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005310:	2100      	movs	r1, #0
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff fec6 	bl	80050a4 <ism330dhcx_mem_bank_set>
 8005318:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 800531a:	7a3b      	ldrb	r3, [r7, #8]
 800531c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005328:	68fb      	ldr	r3, [r7, #12]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800533e:	2102      	movs	r1, #2
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff feaf 	bl	80050a4 <ism330dhcx_mem_bank_set>
 8005346:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d107      	bne.n	800535e <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 800534e:	f107 0208 	add.w	r2, r7, #8
 8005352:	2301      	movs	r3, #1
 8005354:	2160      	movs	r1, #96	; 0x60
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff f912 	bl	8004580 <ism330dhcx_read_reg>
 800535c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d12a      	bne.n	80053ba <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8005364:	7a3b      	ldrb	r3, [r7, #8]
 8005366:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b03      	cmp	r3, #3
 800536e:	d81b      	bhi.n	80053a8 <ism330dhcx_mlc_data_rate_get+0x74>
 8005370:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <ism330dhcx_mlc_data_rate_get+0x44>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	08005389 	.word	0x08005389
 800537c:	08005391 	.word	0x08005391
 8005380:	08005399 	.word	0x08005399
 8005384:	080053a1 	.word	0x080053a1
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]
        break;
 800538e:	e00f      	b.n	80053b0 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2201      	movs	r2, #1
 8005394:	701a      	strb	r2, [r3, #0]
        break;
 8005396:	e00b      	b.n	80053b0 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2202      	movs	r2, #2
 800539c:	701a      	strb	r2, [r3, #0]
        break;
 800539e:	e007      	b.n	80053b0 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2203      	movs	r2, #3
 80053a4:	701a      	strb	r2, [r3, #0]
        break;
 80053a6:	e003      	b.n	80053b0 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]
        break;
 80053ae:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80053b0:	2100      	movs	r1, #0
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff fe76 	bl	80050a4 <ism330dhcx_mem_bank_set>
 80053b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80053ba:	68fb      	ldr	r3, [r7, #12]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <IKS02A1_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS02A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08e      	sub	sp, #56	; 0x38
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 80053d2:	2301      	movs	r3, #1
 80053d4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS02A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d06e      	beq.n	80054be <IKS02A1_MOTION_SENSOR_Init+0xfa>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	f200 809d 	bhi.w	8005522 <IKS02A1_MOTION_SENSOR_Init+0x15e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <IKS02A1_MOTION_SENSOR_Init+0x32>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d032      	beq.n	800545a <IKS02A1_MOTION_SENSOR_Init+0x96>
 80053f4:	e095      	b.n	8005522 <IKS02A1_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS02A1_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case IKS02A1_ISM330DHCX_0:
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 80053f6:	6838      	ldr	r0, [r7, #0]
 80053f8:	f000 f924 	bl	8005644 <ISM330DHCX_0_Probe>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <IKS02A1_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005402:	f04f 33ff 	mov.w	r3, #4294967295
 8005406:	e0cc      	b.n	80055a2 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005408:	4a68      	ldr	r2, [pc, #416]	; (80055ac <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	4967      	ldr	r1, [pc, #412]	; (80055b0 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800541a:	f107 010c 	add.w	r1, r7, #12
 800541e:	4610      	mov	r0, r2
 8005420:	4798      	blx	r3
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <IKS02A1_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005428:	f06f 0306 	mvn.w	r3, #6
 800542c:	e0b9      	b.n	80055a2 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800542e:	7b3b      	ldrb	r3, [r7, #12]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d103      	bne.n	800543c <IKS02A1_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	f043 0302 	orr.w	r3, r3, #2
 800543a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800543c:	7b7b      	ldrb	r3, [r7, #13]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d103      	bne.n	800544a <IKS02A1_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800544a:	7bbb      	ldrb	r3, [r7, #14]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d16c      	bne.n	800552a <IKS02A1_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	f043 0304 	orr.w	r3, r3, #4
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005458:	e067      	b.n	800552a <IKS02A1_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS02A1_MOTION_SENSOR_IIS2DLPC_0 == 1)
    case IKS02A1_IIS2DLPC_0:
      if (IIS2DLPC_0_Probe(Functions) != BSP_ERROR_NONE)
 800545a:	6838      	ldr	r0, [r7, #0]
 800545c:	f000 f9ae 	bl	80057bc <IIS2DLPC_0_Probe>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <IKS02A1_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8005466:	f04f 33ff 	mov.w	r3, #4294967295
 800546a:	e09a      	b.n	80055a2 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800546c:	4a4f      	ldr	r2, [pc, #316]	; (80055ac <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	494e      	ldr	r1, [pc, #312]	; (80055b0 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800547e:	f107 010c 	add.w	r1, r7, #12
 8005482:	4610      	mov	r0, r2
 8005484:	4798      	blx	r3
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <IKS02A1_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800548c:	f06f 0306 	mvn.w	r3, #6
 8005490:	e087      	b.n	80055a2 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005492:	7b3b      	ldrb	r3, [r7, #12]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d103      	bne.n	80054a0 <IKS02A1_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	f043 0302 	orr.w	r3, r3, #2
 800549e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80054a0:	7b7b      	ldrb	r3, [r7, #13]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d103      	bne.n	80054ae <IKS02A1_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	f043 0301 	orr.w	r3, r3, #1
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80054ae:	7bbb      	ldrb	r3, [r7, #14]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d13c      	bne.n	800552e <IKS02A1_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	f043 0304 	orr.w	r3, r3, #4
 80054ba:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80054bc:	e037      	b.n	800552e <IKS02A1_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS02A1_MOTION_SENSOR_IIS2MDC_0 == 1)
    case IKS02A1_IIS2MDC_0:
      if (IIS2MDC_0_Probe(Functions) != BSP_ERROR_NONE)
 80054be:	6838      	ldr	r0, [r7, #0]
 80054c0:	f000 fa24 	bl	800590c <IIS2MDC_0_Probe>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <IKS02A1_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 80054ca:	f04f 33ff 	mov.w	r3, #4294967295
 80054ce:	e068      	b.n	80055a2 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80054d0:	4a36      	ldr	r2, [pc, #216]	; (80055ac <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	4935      	ldr	r1, [pc, #212]	; (80055b0 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80054e2:	f107 010c 	add.w	r1, r7, #12
 80054e6:	4610      	mov	r0, r2
 80054e8:	4798      	blx	r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <IKS02A1_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80054f0:	f06f 0306 	mvn.w	r3, #6
 80054f4:	e055      	b.n	80055a2 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80054f6:	7b3b      	ldrb	r3, [r7, #12]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d103      	bne.n	8005504 <IKS02A1_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80054fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fe:	f043 0302 	orr.w	r3, r3, #2
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005504:	7b7b      	ldrb	r3, [r7, #13]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d103      	bne.n	8005512 <IKS02A1_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550c:	f043 0301 	orr.w	r3, r3, #1
 8005510:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005512:	7bbb      	ldrb	r3, [r7, #14]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d10c      	bne.n	8005532 <IKS02A1_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	f043 0304 	orr.w	r3, r3, #4
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005520:	e007      	b.n	8005532 <IKS02A1_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005522:	f06f 0301 	mvn.w	r3, #1
 8005526:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005528:	e004      	b.n	8005534 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 800552a:	bf00      	nop
 800552c:	e002      	b.n	8005534 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 800552e:	bf00      	nop
 8005530:	e000      	b.n	8005534 <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 8005532:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <IKS02A1_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800553a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553c:	e031      	b.n	80055a2 <IKS02A1_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 800553e:	2300      	movs	r3, #0
 8005540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005542:	e02a      	b.n	800559a <IKS02A1_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	4013      	ands	r3, r2
 800554a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800554c:	429a      	cmp	r2, r3
 800554e:	d11e      	bne.n	800558e <IKS02A1_MOTION_SENSOR_Init+0x1ca>
 8005550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	4013      	ands	r3, r2
 8005556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005558:	429a      	cmp	r2, r3
 800555a:	d118      	bne.n	800558e <IKS02A1_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800555c:	4a15      	ldr	r2, [pc, #84]	; (80055b4 <IKS02A1_MOTION_SENSOR_Init+0x1f0>)
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005564:	4814      	ldr	r0, [pc, #80]	; (80055b8 <IKS02A1_MOTION_SENSOR_Init+0x1f4>)
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	4413      	add	r3, r2
 800556e:	440b      	add	r3, r1
 8005570:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	490e      	ldr	r1, [pc, #56]	; (80055b0 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800557e:	4610      	mov	r0, r2
 8005580:	4798      	blx	r3
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <IKS02A1_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005588:	f06f 0304 	mvn.w	r3, #4
 800558c:	e009      	b.n	80055a2 <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	3301      	adds	r3, #1
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559c:	2b02      	cmp	r3, #2
 800559e:	d9d1      	bls.n	8005544 <IKS02A1_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 80055a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3738      	adds	r7, #56	; 0x38
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	200005a8 	.word	0x200005a8
 80055b0:	20002fa0 	.word	0x20002fa0
 80055b4:	200004d0 	.word	0x200004d0
 80055b8:	20000584 	.word	0x20000584

080055bc <IKS02A1_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS02A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS02A1_MOTION_SENSOR_Axes_t *Axes)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS02A1_MOTION_INSTANCES_NBR)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d903      	bls.n	80055d6 <IKS02A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80055ce:	f06f 0301 	mvn.w	r3, #1
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	e029      	b.n	800562a <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80055d6:	4a17      	ldr	r2, [pc, #92]	; (8005634 <IKS02A1_MOTION_SENSOR_GetAxes+0x78>)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4013      	ands	r3, r2
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d11d      	bne.n	8005624 <IKS02A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 80055e8:	4a13      	ldr	r2, [pc, #76]	; (8005638 <IKS02A1_MOTION_SENSOR_GetAxes+0x7c>)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055f0:	4812      	ldr	r0, [pc, #72]	; (800563c <IKS02A1_MOTION_SENSOR_GetAxes+0x80>)
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4613      	mov	r3, r2
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	4413      	add	r3, r2
 80055fa:	440b      	add	r3, r1
 80055fc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	490f      	ldr	r1, [pc, #60]	; (8005640 <IKS02A1_MOTION_SENSOR_GetAxes+0x84>)
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4610      	mov	r0, r2
 800560e:	4798      	blx	r3
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <IKS02A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005616:	f06f 0304 	mvn.w	r3, #4
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	e005      	b.n	800562a <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e002      	b.n	800562a <IKS02A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005624:	f06f 0301 	mvn.w	r3, #1
 8005628:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800562a:	697b      	ldr	r3, [r7, #20]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	200005b4 	.word	0x200005b4
 8005638:	200004d0 	.word	0x200004d0
 800563c:	20000584 	.word	0x20000584
 8005640:	20002fa0 	.word	0x20002fa0

08005644 <ISM330DHCX_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b092      	sub	sp, #72	; 0x48
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t            io_ctx;
  uint8_t                    id;
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800564c:	2300      	movs	r3, #0
 800564e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = ISM330DHCX_I2C_BUS; /* I2C */
 8005650:	2300      	movs	r3, #0
 8005652:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = ISM330DHCX_I2C_ADD_H;
 8005654:	23d7      	movs	r3, #215	; 0xd7
 8005656:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 800565a:	4b4a      	ldr	r3, [pc, #296]	; (8005784 <ISM330DHCX_0_Probe+0x140>)
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 800565e:	4b4a      	ldr	r3, [pc, #296]	; (8005788 <ISM330DHCX_0_Probe+0x144>)
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 8005662:	4b4a      	ldr	r3, [pc, #296]	; (800578c <ISM330DHCX_0_Probe+0x148>)
 8005664:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 8005666:	4b4a      	ldr	r3, [pc, #296]	; (8005790 <ISM330DHCX_0_Probe+0x14c>)
 8005668:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 800566a:	4b4a      	ldr	r3, [pc, #296]	; (8005794 <ISM330DHCX_0_Probe+0x150>)
 800566c:	643b      	str	r3, [r7, #64]	; 0x40

  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 800566e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005672:	4619      	mov	r1, r3
 8005674:	4848      	ldr	r0, [pc, #288]	; (8005798 <ISM330DHCX_0_Probe+0x154>)
 8005676:	f7fd ff5f 	bl	8003538 <ISM330DHCX_RegisterBusIO>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <ISM330DHCX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005680:	f06f 0306 	mvn.w	r3, #6
 8005684:	647b      	str	r3, [r7, #68]	; 0x44
 8005686:	e077      	b.n	8005778 <ISM330DHCX_0_Probe+0x134>
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 8005688:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800568c:	4619      	mov	r1, r3
 800568e:	4842      	ldr	r0, [pc, #264]	; (8005798 <ISM330DHCX_0_Probe+0x154>)
 8005690:	f7fe f86c 	bl	800376c <ISM330DHCX_ReadID>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <ISM330DHCX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800569a:	f06f 0306 	mvn.w	r3, #6
 800569e:	647b      	str	r3, [r7, #68]	; 0x44
 80056a0:	e06a      	b.n	8005778 <ISM330DHCX_0_Probe+0x134>
  }
  else if (id != ISM330DHCX_ID)
 80056a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056a6:	2b6b      	cmp	r3, #107	; 0x6b
 80056a8:	d003      	beq.n	80056b2 <ISM330DHCX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80056aa:	f06f 0306 	mvn.w	r3, #6
 80056ae:	647b      	str	r3, [r7, #68]	; 0x44
 80056b0:	e062      	b.n	8005778 <ISM330DHCX_0_Probe+0x134>
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 80056b2:	f107 0308 	add.w	r3, r7, #8
 80056b6:	4619      	mov	r1, r3
 80056b8:	4837      	ldr	r0, [pc, #220]	; (8005798 <ISM330DHCX_0_Probe+0x154>)
 80056ba:	f7fe f86d 	bl	8003798 <ISM330DHCX_GetCapabilities>
    MotionCtx[IKS02A1_ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80056be:	7a7b      	ldrb	r3, [r7, #9]
 80056c0:	461a      	mov	r2, r3
 80056c2:	7a3b      	ldrb	r3, [r7, #8]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	431a      	orrs	r2, r3
 80056c8:	7abb      	ldrb	r3, [r7, #10]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4313      	orrs	r3, r2
 80056ce:	4a33      	ldr	r2, [pc, #204]	; (800579c <ISM330DHCX_0_Probe+0x158>)
 80056d0:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS02A1_ISM330DHCX_0] = &ism330dhcx_obj_0;
 80056d2:	4b33      	ldr	r3, [pc, #204]	; (80057a0 <ISM330DHCX_0_Probe+0x15c>)
 80056d4:	4a30      	ldr	r2, [pc, #192]	; (8005798 <ISM330DHCX_0_Probe+0x154>)
 80056d6:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 80056d8:	4b32      	ldr	r3, [pc, #200]	; (80057a4 <ISM330DHCX_0_Probe+0x160>)
 80056da:	4a33      	ldr	r2, [pc, #204]	; (80057a8 <ISM330DHCX_0_Probe+0x164>)
 80056dc:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80056de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d11d      	bne.n	8005720 <ISM330DHCX_0_Probe+0xdc>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d018      	beq.n	8005720 <ISM330DHCX_0_Probe+0xdc>
 80056ee:	7a7b      	ldrb	r3, [r7, #9]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d115      	bne.n	8005720 <ISM330DHCX_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 80056f4:	4b2d      	ldr	r3, [pc, #180]	; (80057ac <ISM330DHCX_0_Probe+0x168>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	4a2d      	ldr	r2, [pc, #180]	; (80057b0 <ISM330DHCX_0_Probe+0x16c>)
 80056fa:	492e      	ldr	r1, [pc, #184]	; (80057b4 <ISM330DHCX_0_Probe+0x170>)
 80056fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 8005700:	4b28      	ldr	r3, [pc, #160]	; (80057a4 <ISM330DHCX_0_Probe+0x160>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a26      	ldr	r2, [pc, #152]	; (80057a0 <ISM330DHCX_0_Probe+0x15c>)
 8005708:	6812      	ldr	r2, [r2, #0]
 800570a:	4610      	mov	r0, r2
 800570c:	4798      	blx	r3
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <ISM330DHCX_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005714:	f06f 0304 	mvn.w	r3, #4
 8005718:	647b      	str	r3, [r7, #68]	; 0x44
 800571a:	e001      	b.n	8005720 <ISM330DHCX_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800571c:	2300      	movs	r3, #0
 800571e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005722:	2b00      	cmp	r3, #0
 8005724:	d11d      	bne.n	8005762 <ISM330DHCX_0_Probe+0x11e>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f003 0302 	and.w	r3, r3, #2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d018      	beq.n	8005762 <ISM330DHCX_0_Probe+0x11e>
 8005730:	7a3b      	ldrb	r3, [r7, #8]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d115      	bne.n	8005762 <ISM330DHCX_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005736:	4b1d      	ldr	r3, [pc, #116]	; (80057ac <ISM330DHCX_0_Probe+0x168>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	4a1d      	ldr	r2, [pc, #116]	; (80057b0 <ISM330DHCX_0_Probe+0x16c>)
 800573c:	491e      	ldr	r1, [pc, #120]	; (80057b8 <ISM330DHCX_0_Probe+0x174>)
 800573e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&ISM330DHCX_ACC_Driver;

      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 8005742:	4b18      	ldr	r3, [pc, #96]	; (80057a4 <ISM330DHCX_0_Probe+0x160>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a15      	ldr	r2, [pc, #84]	; (80057a0 <ISM330DHCX_0_Probe+0x15c>)
 800574a:	6812      	ldr	r2, [r2, #0]
 800574c:	4610      	mov	r0, r2
 800574e:	4798      	blx	r3
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <ISM330DHCX_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005756:	f06f 0304 	mvn.w	r3, #4
 800575a:	647b      	str	r3, [r7, #68]	; 0x44
 800575c:	e001      	b.n	8005762 <ISM330DHCX_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800575e:	2300      	movs	r3, #0
 8005760:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005764:	2b00      	cmp	r3, #0
 8005766:	d107      	bne.n	8005778 <ISM330DHCX_0_Probe+0x134>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <ISM330DHCX_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005772:	f06f 0304 	mvn.w	r3, #4
 8005776:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800577a:	4618      	mov	r0, r3
 800577c:	3748      	adds	r7, #72	; 0x48
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	080010ad 	.word	0x080010ad
 8005788:	08001129 	.word	0x08001129
 800578c:	080011dd 	.word	0x080011dd
 8005790:	08001179 	.word	0x08001179
 8005794:	08001241 	.word	0x08001241
 8005798:	200005c0 	.word	0x200005c0
 800579c:	200005b4 	.word	0x200005b4
 80057a0:	20002fa0 	.word	0x20002fa0
 80057a4:	200005a8 	.word	0x200005a8
 80057a8:	20000478 	.word	0x20000478
 80057ac:	200004d0 	.word	0x200004d0
 80057b0:	20000584 	.word	0x20000584
 80057b4:	200004ac 	.word	0x200004ac
 80057b8:	20000488 	.word	0x20000488

080057bc <IIS2DLPC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t IIS2DLPC_0_Probe(uint32_t Functions)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b092      	sub	sp, #72	; 0x48
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  IIS2DLPC_IO_t            io_ctx;
  uint8_t                  id;
  static IIS2DLPC_Object_t iis2dlpc_obj_0;
  IIS2DLPC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80057c4:	2300      	movs	r3, #0
 80057c6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2DLPC_I2C_BUS; /* I2C */
 80057c8:	2300      	movs	r3, #0
 80057ca:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = IIS2DLPC_I2C_ADD_H;
 80057cc:	2333      	movs	r3, #51	; 0x33
 80057ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 80057d2:	4b41      	ldr	r3, [pc, #260]	; (80058d8 <IIS2DLPC_0_Probe+0x11c>)
 80057d4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 80057d6:	4b41      	ldr	r3, [pc, #260]	; (80058dc <IIS2DLPC_0_Probe+0x120>)
 80057d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 80057da:	4b41      	ldr	r3, [pc, #260]	; (80058e0 <IIS2DLPC_0_Probe+0x124>)
 80057dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 80057de:	4b41      	ldr	r3, [pc, #260]	; (80058e4 <IIS2DLPC_0_Probe+0x128>)
 80057e0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 80057e2:	4b41      	ldr	r3, [pc, #260]	; (80058e8 <IIS2DLPC_0_Probe+0x12c>)
 80057e4:	643b      	str	r3, [r7, #64]	; 0x40

  if (IIS2DLPC_RegisterBusIO(&iis2dlpc_obj_0, &io_ctx) != IIS2DLPC_OK)
 80057e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ea:	4619      	mov	r1, r3
 80057ec:	483f      	ldr	r0, [pc, #252]	; (80058ec <IIS2DLPC_0_Probe+0x130>)
 80057ee:	f7fb ff53 	bl	8001698 <IIS2DLPC_RegisterBusIO>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <IIS2DLPC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057f8:	f06f 0306 	mvn.w	r3, #6
 80057fc:	647b      	str	r3, [r7, #68]	; 0x44
 80057fe:	e065      	b.n	80058cc <IIS2DLPC_0_Probe+0x110>
  }
  else if (IIS2DLPC_ReadID(&iis2dlpc_obj_0, &id) != IIS2DLPC_OK)
 8005800:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005804:	4619      	mov	r1, r3
 8005806:	4839      	ldr	r0, [pc, #228]	; (80058ec <IIS2DLPC_0_Probe+0x130>)
 8005808:	f7fc f830 	bl	800186c <IIS2DLPC_ReadID>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <IIS2DLPC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005812:	f06f 0306 	mvn.w	r3, #6
 8005816:	647b      	str	r3, [r7, #68]	; 0x44
 8005818:	e058      	b.n	80058cc <IIS2DLPC_0_Probe+0x110>
  }
  else if (id != IIS2DLPC_ID)
 800581a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800581e:	2b44      	cmp	r3, #68	; 0x44
 8005820:	d003      	beq.n	800582a <IIS2DLPC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005822:	f06f 0306 	mvn.w	r3, #6
 8005826:	647b      	str	r3, [r7, #68]	; 0x44
 8005828:	e050      	b.n	80058cc <IIS2DLPC_0_Probe+0x110>
  }
  else
  {
    (void)IIS2DLPC_GetCapabilities(&iis2dlpc_obj_0, &cap);
 800582a:	f107 0308 	add.w	r3, r7, #8
 800582e:	4619      	mov	r1, r3
 8005830:	482e      	ldr	r0, [pc, #184]	; (80058ec <IIS2DLPC_0_Probe+0x130>)
 8005832:	f7fc f831 	bl	8001898 <IIS2DLPC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2DLPC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005836:	7a7b      	ldrb	r3, [r7, #9]
 8005838:	461a      	mov	r2, r3
 800583a:	7a3b      	ldrb	r3, [r7, #8]
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	431a      	orrs	r2, r3
 8005840:	7abb      	ldrb	r3, [r7, #10]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4313      	orrs	r3, r2
 8005846:	4a2a      	ldr	r2, [pc, #168]	; (80058f0 <IIS2DLPC_0_Probe+0x134>)
 8005848:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS02A1_IIS2DLPC_0] = &iis2dlpc_obj_0;
 800584a:	4b2a      	ldr	r3, [pc, #168]	; (80058f4 <IIS2DLPC_0_Probe+0x138>)
 800584c:	4a27      	ldr	r2, [pc, #156]	; (80058ec <IIS2DLPC_0_Probe+0x130>)
 800584e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2DLPC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2DLPC_COMMON_Driver;
 8005850:	4b29      	ldr	r3, [pc, #164]	; (80058f8 <IIS2DLPC_0_Probe+0x13c>)
 8005852:	4a2a      	ldr	r2, [pc, #168]	; (80058fc <IIS2DLPC_0_Probe+0x140>)
 8005854:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <IIS2DLPC_0_Probe+0xb6>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d005      	beq.n	8005872 <IIS2DLPC_0_Probe+0xb6>
 8005866:	7a7b      	ldrb	r3, [r7, #9]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d102      	bne.n	8005872 <IIS2DLPC_0_Probe+0xb6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800586c:	f06f 0304 	mvn.w	r3, #4
 8005870:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005874:	2b00      	cmp	r3, #0
 8005876:	d11e      	bne.n	80058b6 <IIS2DLPC_0_Probe+0xfa>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d019      	beq.n	80058b6 <IIS2DLPC_0_Probe+0xfa>
 8005882:	7a3b      	ldrb	r3, [r7, #8]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d116      	bne.n	80058b6 <IIS2DLPC_0_Probe+0xfa>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2DLPC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005888:	4b1d      	ldr	r3, [pc, #116]	; (8005900 <IIS2DLPC_0_Probe+0x144>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	4a1d      	ldr	r2, [pc, #116]	; (8005904 <IIS2DLPC_0_Probe+0x148>)
 800588e:	3303      	adds	r3, #3
 8005890:	491d      	ldr	r1, [pc, #116]	; (8005908 <IIS2DLPC_0_Probe+0x14c>)
 8005892:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&IIS2DLPC_ACC_Driver;

      if (MotionDrv[IKS02A1_IIS2DLPC_0]->Init(MotionCompObj[IKS02A1_IIS2DLPC_0]) != IIS2DLPC_OK)
 8005896:	4b18      	ldr	r3, [pc, #96]	; (80058f8 <IIS2DLPC_0_Probe+0x13c>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a15      	ldr	r2, [pc, #84]	; (80058f4 <IIS2DLPC_0_Probe+0x138>)
 800589e:	6852      	ldr	r2, [r2, #4]
 80058a0:	4610      	mov	r0, r2
 80058a2:	4798      	blx	r3
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <IIS2DLPC_0_Probe+0xf6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058aa:	f06f 0304 	mvn.w	r3, #4
 80058ae:	647b      	str	r3, [r7, #68]	; 0x44
 80058b0:	e001      	b.n	80058b6 <IIS2DLPC_0_Probe+0xfa>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80058b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d107      	bne.n	80058cc <IIS2DLPC_0_Probe+0x110>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <IIS2DLPC_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80058c6:	f06f 0304 	mvn.w	r3, #4
 80058ca:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80058cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3748      	adds	r7, #72	; 0x48
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	080010ad 	.word	0x080010ad
 80058dc:	08001129 	.word	0x08001129
 80058e0:	080011dd 	.word	0x080011dd
 80058e4:	08001179 	.word	0x08001179
 80058e8:	08001241 	.word	0x08001241
 80058ec:	200005f0 	.word	0x200005f0
 80058f0:	200005b4 	.word	0x200005b4
 80058f4:	20002fa0 	.word	0x20002fa0
 80058f8:	200005a8 	.word	0x200005a8
 80058fc:	20000410 	.word	0x20000410
 8005900:	200004d0 	.word	0x200004d0
 8005904:	20000584 	.word	0x20000584
 8005908:	20000420 	.word	0x20000420

0800590c <IIS2MDC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t IIS2MDC_0_Probe(uint32_t Functions)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b092      	sub	sp, #72	; 0x48
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  IIS2MDC_IO_t            io_ctx;
  uint8_t                 id;
  static IIS2MDC_Object_t iis2mdc_obj_0;
  IIS2MDC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005914:	2300      	movs	r3, #0
 8005916:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 8005918:	2300      	movs	r3, #0
 800591a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 800591c:	233d      	movs	r3, #61	; 0x3d
 800591e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 8005922:	4b41      	ldr	r3, [pc, #260]	; (8005a28 <IIS2MDC_0_Probe+0x11c>)
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 8005926:	4b41      	ldr	r3, [pc, #260]	; (8005a2c <IIS2MDC_0_Probe+0x120>)
 8005928:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 800592a:	4b41      	ldr	r3, [pc, #260]	; (8005a30 <IIS2MDC_0_Probe+0x124>)
 800592c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 800592e:	4b41      	ldr	r3, [pc, #260]	; (8005a34 <IIS2MDC_0_Probe+0x128>)
 8005930:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 8005932:	4b41      	ldr	r3, [pc, #260]	; (8005a38 <IIS2MDC_0_Probe+0x12c>)
 8005934:	643b      	str	r3, [r7, #64]	; 0x40

  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8005936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800593a:	4619      	mov	r1, r3
 800593c:	483f      	ldr	r0, [pc, #252]	; (8005a3c <IIS2MDC_0_Probe+0x130>)
 800593e:	f7fd f9b9 	bl	8002cb4 <IIS2MDC_RegisterBusIO>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d003      	beq.n	8005950 <IIS2MDC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005948:	f06f 0306 	mvn.w	r3, #6
 800594c:	647b      	str	r3, [r7, #68]	; 0x44
 800594e:	e065      	b.n	8005a1c <IIS2MDC_0_Probe+0x110>
  }
  else if (IIS2MDC_ReadID(&iis2mdc_obj_0, &id) != IIS2MDC_OK)
 8005950:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005954:	4619      	mov	r1, r3
 8005956:	4839      	ldr	r0, [pc, #228]	; (8005a3c <IIS2MDC_0_Probe+0x130>)
 8005958:	f7fd fa63 	bl	8002e22 <IIS2MDC_ReadID>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <IIS2MDC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005962:	f06f 0306 	mvn.w	r3, #6
 8005966:	647b      	str	r3, [r7, #68]	; 0x44
 8005968:	e058      	b.n	8005a1c <IIS2MDC_0_Probe+0x110>
  }
  else if (id != IIS2MDC_ID)
 800596a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d003      	beq.n	800597a <IIS2MDC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005972:	f06f 0306 	mvn.w	r3, #6
 8005976:	647b      	str	r3, [r7, #68]	; 0x44
 8005978:	e050      	b.n	8005a1c <IIS2MDC_0_Probe+0x110>
  }
  else
  {
    (void)IIS2MDC_GetCapabilities(&iis2mdc_obj_0, &cap);
 800597a:	f107 0308 	add.w	r3, r7, #8
 800597e:	4619      	mov	r1, r3
 8005980:	482e      	ldr	r0, [pc, #184]	; (8005a3c <IIS2MDC_0_Probe+0x130>)
 8005982:	f7fd fa65 	bl	8002e50 <IIS2MDC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005986:	7a7b      	ldrb	r3, [r7, #9]
 8005988:	461a      	mov	r2, r3
 800598a:	7a3b      	ldrb	r3, [r7, #8]
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	431a      	orrs	r2, r3
 8005990:	7abb      	ldrb	r3, [r7, #10]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4313      	orrs	r3, r2
 8005996:	4a2a      	ldr	r2, [pc, #168]	; (8005a40 <IIS2MDC_0_Probe+0x134>)
 8005998:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS02A1_IIS2MDC_0] = &iis2mdc_obj_0;
 800599a:	4b2a      	ldr	r3, [pc, #168]	; (8005a44 <IIS2MDC_0_Probe+0x138>)
 800599c:	4a27      	ldr	r2, [pc, #156]	; (8005a3c <IIS2MDC_0_Probe+0x130>)
 800599e:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2MDC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2MDC_COMMON_Driver;
 80059a0:	4b29      	ldr	r3, [pc, #164]	; (8005a48 <IIS2MDC_0_Probe+0x13c>)
 80059a2:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <IIS2MDC_0_Probe+0x140>)
 80059a4:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80059a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <IIS2MDC_0_Probe+0xb6>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d005      	beq.n	80059c2 <IIS2MDC_0_Probe+0xb6>
 80059b6:	7a7b      	ldrb	r3, [r7, #9]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d102      	bne.n	80059c2 <IIS2MDC_0_Probe+0xb6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80059bc:	f06f 0304 	mvn.w	r3, #4
 80059c0:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80059c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <IIS2MDC_0_Probe+0xd2>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d005      	beq.n	80059de <IIS2MDC_0_Probe+0xd2>
 80059d2:	7a3b      	ldrb	r3, [r7, #8]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d102      	bne.n	80059de <IIS2MDC_0_Probe+0xd2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80059d8:	f06f 0304 	mvn.w	r3, #4
 80059dc:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80059de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d11b      	bne.n	8005a1c <IIS2MDC_0_Probe+0x110>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d016      	beq.n	8005a1c <IIS2MDC_0_Probe+0x110>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80059ee:	4b18      	ldr	r3, [pc, #96]	; (8005a50 <IIS2MDC_0_Probe+0x144>)
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	4a18      	ldr	r2, [pc, #96]	; (8005a54 <IIS2MDC_0_Probe+0x148>)
 80059f4:	3306      	adds	r3, #6
 80059f6:	4918      	ldr	r1, [pc, #96]	; (8005a58 <IIS2MDC_0_Probe+0x14c>)
 80059f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&IIS2MDC_MAG_Driver;

      if (MotionDrv[IKS02A1_IIS2MDC_0]->Init(MotionCompObj[IKS02A1_IIS2MDC_0]) != IIS2MDC_OK)
 80059fc:	4b12      	ldr	r3, [pc, #72]	; (8005a48 <IIS2MDC_0_Probe+0x13c>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a10      	ldr	r2, [pc, #64]	; (8005a44 <IIS2MDC_0_Probe+0x138>)
 8005a04:	6892      	ldr	r2, [r2, #8]
 8005a06:	4610      	mov	r0, r2
 8005a08:	4798      	blx	r3
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <IIS2MDC_0_Probe+0x10c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a10:	f06f 0304 	mvn.w	r3, #4
 8005a14:	647b      	str	r3, [r7, #68]	; 0x44
 8005a16:	e001      	b.n	8005a1c <IIS2MDC_0_Probe+0x110>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
  }
  return ret;
 8005a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3748      	adds	r7, #72	; 0x48
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	080010ad 	.word	0x080010ad
 8005a2c:	08001129 	.word	0x08001129
 8005a30:	080011dd 	.word	0x080011dd
 8005a34:	08001179 	.word	0x08001179
 8005a38:	08001241 	.word	0x08001241
 8005a3c:	20000624 	.word	0x20000624
 8005a40:	200005b4 	.word	0x200005b4
 8005a44:	20002fa0 	.word	0x20002fa0
 8005a48:	200005a8 	.word	0x200005a8
 8005a4c:	20000444 	.word	0x20000444
 8005a50:	200004d0 	.word	0x200004d0
 8005a54:	20000584 	.word	0x20000584
 8005a58:	20000454 	.word	0x20000454

08005a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a60:	2003      	movs	r0, #3
 8005a62:	f000 f94d 	bl	8005d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a66:	2000      	movs	r0, #0
 8005a68:	f000 f806 	bl	8005a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a6c:	f7fb fa08 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a80:	4b12      	ldr	r3, [pc, #72]	; (8005acc <HAL_InitTick+0x54>)
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	4b12      	ldr	r3, [pc, #72]	; (8005ad0 <HAL_InitTick+0x58>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f967 	bl	8005d6a <HAL_SYSTICK_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e00e      	b.n	8005ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b0f      	cmp	r3, #15
 8005aaa:	d80a      	bhi.n	8005ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005aac:	2200      	movs	r2, #0
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab4:	f000 f92f 	bl	8005d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ab8:	4a06      	ldr	r2, [pc, #24]	; (8005ad4 <HAL_InitTick+0x5c>)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e000      	b.n	8005ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	2000040c 	.word	0x2000040c
 8005ad0:	200004e8 	.word	0x200004e8
 8005ad4:	200004e4 	.word	0x200004e4

08005ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <HAL_IncTick+0x20>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4b06      	ldr	r3, [pc, #24]	; (8005afc <HAL_IncTick+0x24>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	4a04      	ldr	r2, [pc, #16]	; (8005afc <HAL_IncTick+0x24>)
 8005aea:	6013      	str	r3, [r2, #0]
}
 8005aec:	bf00      	nop
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	200004e8 	.word	0x200004e8
 8005afc:	20002fac 	.word	0x20002fac

08005b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return uwTick;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <HAL_GetTick+0x14>)
 8005b06:	681b      	ldr	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20002fac 	.word	0x20002fac

08005b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b20:	f7ff ffee 	bl	8005b00 <HAL_GetTick>
 8005b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d005      	beq.n	8005b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b32:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <HAL_Delay+0x44>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b3e:	bf00      	nop
 8005b40:	f7ff ffde 	bl	8005b00 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d8f7      	bhi.n	8005b40 <HAL_Delay+0x28>
  {
  }
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	200004e8 	.word	0x200004e8

08005b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b8e:	4a04      	ldr	r2, [pc, #16]	; (8005ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	60d3      	str	r3, [r2, #12]
}
 8005b94:	bf00      	nop
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	e000ed00 	.word	0xe000ed00
 8005ba4:	05fa0000 	.word	0x05fa0000

08005ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bac:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	0a1b      	lsrs	r3, r3, #8
 8005bb2:	f003 0307 	and.w	r3, r3, #7
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	e000ed00 	.word	0xe000ed00

08005bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	db0b      	blt.n	8005bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bd6:	79fb      	ldrb	r3, [r7, #7]
 8005bd8:	f003 021f 	and.w	r2, r3, #31
 8005bdc:	4907      	ldr	r1, [pc, #28]	; (8005bfc <__NVIC_EnableIRQ+0x38>)
 8005bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	2001      	movs	r0, #1
 8005be6:	fa00 f202 	lsl.w	r2, r0, r2
 8005bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	e000e100 	.word	0xe000e100

08005c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	6039      	str	r1, [r7, #0]
 8005c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	db0a      	blt.n	8005c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	490c      	ldr	r1, [pc, #48]	; (8005c4c <__NVIC_SetPriority+0x4c>)
 8005c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c1e:	0112      	lsls	r2, r2, #4
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	440b      	add	r3, r1
 8005c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c28:	e00a      	b.n	8005c40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	4908      	ldr	r1, [pc, #32]	; (8005c50 <__NVIC_SetPriority+0x50>)
 8005c30:	79fb      	ldrb	r3, [r7, #7]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	3b04      	subs	r3, #4
 8005c38:	0112      	lsls	r2, r2, #4
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	761a      	strb	r2, [r3, #24]
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	e000e100 	.word	0xe000e100
 8005c50:	e000ed00 	.word	0xe000ed00

08005c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b089      	sub	sp, #36	; 0x24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f1c3 0307 	rsb	r3, r3, #7
 8005c6e:	2b04      	cmp	r3, #4
 8005c70:	bf28      	it	cs
 8005c72:	2304      	movcs	r3, #4
 8005c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	2b06      	cmp	r3, #6
 8005c7c:	d902      	bls.n	8005c84 <NVIC_EncodePriority+0x30>
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	3b03      	subs	r3, #3
 8005c82:	e000      	b.n	8005c86 <NVIC_EncodePriority+0x32>
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c88:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	43da      	mvns	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	401a      	ands	r2, r3
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	43d9      	mvns	r1, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cac:	4313      	orrs	r3, r2
         );
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3724      	adds	r7, #36	; 0x24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
	...

08005cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ccc:	d301      	bcc.n	8005cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e00f      	b.n	8005cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cd2:	4a0a      	ldr	r2, [pc, #40]	; (8005cfc <SysTick_Config+0x40>)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cda:	210f      	movs	r1, #15
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce0:	f7ff ff8e 	bl	8005c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <SysTick_Config+0x40>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cea:	4b04      	ldr	r3, [pc, #16]	; (8005cfc <SysTick_Config+0x40>)
 8005cec:	2207      	movs	r2, #7
 8005cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	e000e010 	.word	0xe000e010

08005d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff ff29 	bl	8005b60 <__NVIC_SetPriorityGrouping>
}
 8005d0e:	bf00      	nop
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b086      	sub	sp, #24
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005d24:	2300      	movs	r3, #0
 8005d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d28:	f7ff ff3e 	bl	8005ba8 <__NVIC_GetPriorityGrouping>
 8005d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	6978      	ldr	r0, [r7, #20]
 8005d34:	f7ff ff8e 	bl	8005c54 <NVIC_EncodePriority>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d3e:	4611      	mov	r1, r2
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff ff5d 	bl	8005c00 <__NVIC_SetPriority>
}
 8005d46:	bf00      	nop
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	4603      	mov	r3, r0
 8005d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff ff31 	bl	8005bc4 <__NVIC_EnableIRQ>
}
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b082      	sub	sp, #8
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7ff ffa2 	bl	8005cbc <SysTick_Config>
 8005d78:	4603      	mov	r3, r0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e054      	b.n	8005e40 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	7f5b      	ldrb	r3, [r3, #29]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d105      	bne.n	8005dac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fa fc38 	bl	800061c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	791b      	ldrb	r3, [r3, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10c      	bne.n	8005dd4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a22      	ldr	r2, [pc, #136]	; (8005e48 <HAL_CRC_Init+0xc4>)
 8005dc0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0218 	bic.w	r2, r2, #24
 8005dd0:	609a      	str	r2, [r3, #8]
 8005dd2:	e00c      	b.n	8005dee <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6899      	ldr	r1, [r3, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f834 	bl	8005e4c <HAL_CRCEx_Polynomial_Set>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e028      	b.n	8005e40 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	795b      	ldrb	r3, [r3, #5]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d105      	bne.n	8005e02 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dfe:	611a      	str	r2, [r3, #16]
 8005e00:	e004      	b.n	8005e0c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6912      	ldr	r2, [r2, #16]
 8005e0a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695a      	ldr	r2, [r3, #20]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699a      	ldr	r2, [r3, #24]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	04c11db7 	.word	0x04c11db7

08005e4c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005e5c:	231f      	movs	r3, #31
 8005e5e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005e60:	bf00      	nop
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1e5a      	subs	r2, r3, #1
 8005e66:	613a      	str	r2, [r7, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d009      	beq.n	8005e80 <HAL_CRCEx_Polynomial_Set+0x34>
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f003 031f 	and.w	r3, r3, #31
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	fa22 f303 	lsr.w	r3, r2, r3
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0f0      	beq.n	8005e62 <HAL_CRCEx_Polynomial_Set+0x16>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b18      	cmp	r3, #24
 8005e84:	d846      	bhi.n	8005f14 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005e86:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <HAL_CRCEx_Polynomial_Set+0x40>)
 8005e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8c:	08005f1b 	.word	0x08005f1b
 8005e90:	08005f15 	.word	0x08005f15
 8005e94:	08005f15 	.word	0x08005f15
 8005e98:	08005f15 	.word	0x08005f15
 8005e9c:	08005f15 	.word	0x08005f15
 8005ea0:	08005f15 	.word	0x08005f15
 8005ea4:	08005f15 	.word	0x08005f15
 8005ea8:	08005f15 	.word	0x08005f15
 8005eac:	08005f09 	.word	0x08005f09
 8005eb0:	08005f15 	.word	0x08005f15
 8005eb4:	08005f15 	.word	0x08005f15
 8005eb8:	08005f15 	.word	0x08005f15
 8005ebc:	08005f15 	.word	0x08005f15
 8005ec0:	08005f15 	.word	0x08005f15
 8005ec4:	08005f15 	.word	0x08005f15
 8005ec8:	08005f15 	.word	0x08005f15
 8005ecc:	08005efd 	.word	0x08005efd
 8005ed0:	08005f15 	.word	0x08005f15
 8005ed4:	08005f15 	.word	0x08005f15
 8005ed8:	08005f15 	.word	0x08005f15
 8005edc:	08005f15 	.word	0x08005f15
 8005ee0:	08005f15 	.word	0x08005f15
 8005ee4:	08005f15 	.word	0x08005f15
 8005ee8:	08005f15 	.word	0x08005f15
 8005eec:	08005ef1 	.word	0x08005ef1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b06      	cmp	r3, #6
 8005ef4:	d913      	bls.n	8005f1e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005efa:	e010      	b.n	8005f1e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	2b07      	cmp	r3, #7
 8005f00:	d90f      	bls.n	8005f22 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005f06:	e00c      	b.n	8005f22 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b0f      	cmp	r3, #15
 8005f0c:	d90b      	bls.n	8005f26 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005f12:	e008      	b.n	8005f26 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	75fb      	strb	r3, [r7, #23]
      break;
 8005f18:	e006      	b.n	8005f28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005f1a:	bf00      	nop
 8005f1c:	e004      	b.n	8005f28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005f1e:	bf00      	nop
 8005f20:	e002      	b.n	8005f28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005f22:	bf00      	nop
 8005f24:	e000      	b.n	8005f28 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005f26:	bf00      	nop
  }
  if (status == HAL_OK)
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10d      	bne.n	8005f4a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f023 0118 	bic.w	r1, r3, #24
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005f64:	f7ff fdcc 	bl	8005b00 <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e099      	b.n	80060a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0201 	bic.w	r2, r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f94:	e00f      	b.n	8005fb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f96:	f7ff fdb3 	bl	8005b00 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b05      	cmp	r3, #5
 8005fa2:	d908      	bls.n	8005fb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2203      	movs	r2, #3
 8005fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e078      	b.n	80060a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e8      	bne.n	8005f96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4b38      	ldr	r3, [pc, #224]	; (80060b0 <HAL_DMA_Init+0x158>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	2b04      	cmp	r3, #4
 800600e:	d107      	bne.n	8006020 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	4313      	orrs	r3, r2
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f023 0307 	bic.w	r3, r3, #7
 8006036:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b04      	cmp	r3, #4
 8006048:	d117      	bne.n	800607a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00e      	beq.n	800607a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fb09 	bl	8006674 <DMA_CheckFifoParam>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d008      	beq.n	800607a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2240      	movs	r2, #64	; 0x40
 800606c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006076:	2301      	movs	r3, #1
 8006078:	e016      	b.n	80060a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fac0 	bl	8006608 <DMA_CalcBaseAndBitshift>
 8006088:	4603      	mov	r3, r0
 800608a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006090:	223f      	movs	r2, #63	; 0x3f
 8006092:	409a      	lsls	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	e010803f 	.word	0xe010803f

080060b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_DMA_Start_IT+0x26>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e048      	b.n	800616c <HAL_DMA_Start_IT+0xb8>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d137      	bne.n	800615e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2202      	movs	r2, #2
 80060f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fa52 	bl	80065ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610c:	223f      	movs	r2, #63	; 0x3f
 800610e:	409a      	lsls	r2, r3
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0216 	orr.w	r2, r2, #22
 8006122:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695a      	ldr	r2, [r3, #20]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006132:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	d007      	beq.n	800614c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0208 	orr.w	r2, r2, #8
 800614a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	e005      	b.n	800616a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006166:	2302      	movs	r3, #2
 8006168:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800616a:	7dfb      	ldrb	r3, [r7, #23]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006180:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006182:	f7ff fcbd 	bl	8005b00 <HAL_GetTick>
 8006186:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d008      	beq.n	80061a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2280      	movs	r2, #128	; 0x80
 8006198:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e052      	b.n	800624c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0216 	bic.w	r2, r2, #22
 80061b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695a      	ldr	r2, [r3, #20]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d103      	bne.n	80061d6 <HAL_DMA_Abort+0x62>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d007      	beq.n	80061e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0208 	bic.w	r2, r2, #8
 80061e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 0201 	bic.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061f6:	e013      	b.n	8006220 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061f8:	f7ff fc82 	bl	8005b00 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	2b05      	cmp	r3, #5
 8006204:	d90c      	bls.n	8006220 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2203      	movs	r2, #3
 8006210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e015      	b.n	800624c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e4      	bne.n	80061f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006232:	223f      	movs	r2, #63	; 0x3f
 8006234:	409a      	lsls	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d004      	beq.n	8006272 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2280      	movs	r2, #128	; 0x80
 800626c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e00c      	b.n	800628c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2205      	movs	r2, #5
 8006276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0201 	bic.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80062a4:	4b92      	ldr	r3, [pc, #584]	; (80064f0 <HAL_DMA_IRQHandler+0x258>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a92      	ldr	r2, [pc, #584]	; (80064f4 <HAL_DMA_IRQHandler+0x25c>)
 80062aa:	fba2 2303 	umull	r2, r3, r2, r3
 80062ae:	0a9b      	lsrs	r3, r3, #10
 80062b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c2:	2208      	movs	r2, #8
 80062c4:	409a      	lsls	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4013      	ands	r3, r2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d01a      	beq.n	8006304 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d013      	beq.n	8006304 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0204 	bic.w	r2, r2, #4
 80062ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f0:	2208      	movs	r2, #8
 80062f2:	409a      	lsls	r2, r3
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fc:	f043 0201 	orr.w	r2, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006308:	2201      	movs	r2, #1
 800630a:	409a      	lsls	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4013      	ands	r3, r2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d012      	beq.n	800633a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006326:	2201      	movs	r2, #1
 8006328:	409a      	lsls	r2, r3
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006332:	f043 0202 	orr.w	r2, r3, #2
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633e:	2204      	movs	r2, #4
 8006340:	409a      	lsls	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4013      	ands	r3, r2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d012      	beq.n	8006370 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00b      	beq.n	8006370 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635c:	2204      	movs	r2, #4
 800635e:	409a      	lsls	r2, r3
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006368:	f043 0204 	orr.w	r2, r3, #4
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006374:	2210      	movs	r2, #16
 8006376:	409a      	lsls	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4013      	ands	r3, r2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d043      	beq.n	8006408 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d03c      	beq.n	8006408 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006392:	2210      	movs	r2, #16
 8006394:	409a      	lsls	r2, r3
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d018      	beq.n	80063da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d108      	bne.n	80063c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d024      	beq.n	8006408 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
 80063c6:	e01f      	b.n	8006408 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01b      	beq.n	8006408 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
 80063d8:	e016      	b.n	8006408 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d107      	bne.n	80063f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0208 	bic.w	r2, r2, #8
 80063f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640c:	2220      	movs	r2, #32
 800640e:	409a      	lsls	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4013      	ands	r3, r2
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 808e 	beq.w	8006536 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8086 	beq.w	8006536 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642e:	2220      	movs	r2, #32
 8006430:	409a      	lsls	r2, r3
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b05      	cmp	r3, #5
 8006440:	d136      	bne.n	80064b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0216 	bic.w	r2, r2, #22
 8006450:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	695a      	ldr	r2, [r3, #20]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006460:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	2b00      	cmp	r3, #0
 8006468:	d103      	bne.n	8006472 <HAL_DMA_IRQHandler+0x1da>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0208 	bic.w	r2, r2, #8
 8006480:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006486:	223f      	movs	r2, #63	; 0x3f
 8006488:	409a      	lsls	r2, r3
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d07d      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	4798      	blx	r3
        }
        return;
 80064ae:	e078      	b.n	80065a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d01c      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d108      	bne.n	80064de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d030      	beq.n	8006536 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	4798      	blx	r3
 80064dc:	e02b      	b.n	8006536 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d027      	beq.n	8006536 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
 80064ee:	e022      	b.n	8006536 <HAL_DMA_IRQHandler+0x29e>
 80064f0:	2000040c 	.word	0x2000040c
 80064f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10f      	bne.n	8006526 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0210 	bic.w	r2, r2, #16
 8006514:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653a:	2b00      	cmp	r3, #0
 800653c:	d032      	beq.n	80065a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d022      	beq.n	8006590 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2205      	movs	r2, #5
 800654e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0201 	bic.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	3301      	adds	r3, #1
 8006566:	60bb      	str	r3, [r7, #8]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	429a      	cmp	r2, r3
 800656c:	d307      	bcc.n	800657e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f2      	bne.n	8006562 <HAL_DMA_IRQHandler+0x2ca>
 800657c:	e000      	b.n	8006580 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800657e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4798      	blx	r3
 80065a0:	e000      	b.n	80065a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80065a2:	bf00      	nop
    }
  }
}
 80065a4:	3718      	adds	r7, #24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop

080065ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2b40      	cmp	r3, #64	; 0x40
 80065d8:	d108      	bne.n	80065ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80065ea:	e007      	b.n	80065fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	60da      	str	r2, [r3, #12]
}
 80065fc:	bf00      	nop
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	3b10      	subs	r3, #16
 8006618:	4a13      	ldr	r2, [pc, #76]	; (8006668 <DMA_CalcBaseAndBitshift+0x60>)
 800661a:	fba2 2303 	umull	r2, r3, r2, r3
 800661e:	091b      	lsrs	r3, r3, #4
 8006620:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006622:	4a12      	ldr	r2, [pc, #72]	; (800666c <DMA_CalcBaseAndBitshift+0x64>)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b03      	cmp	r3, #3
 8006634:	d908      	bls.n	8006648 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <DMA_CalcBaseAndBitshift+0x68>)
 800663e:	4013      	ands	r3, r2
 8006640:	1d1a      	adds	r2, r3, #4
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	659a      	str	r2, [r3, #88]	; 0x58
 8006646:	e006      	b.n	8006656 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	4b08      	ldr	r3, [pc, #32]	; (8006670 <DMA_CalcBaseAndBitshift+0x68>)
 8006650:	4013      	ands	r3, r2
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	aaaaaaab 	.word	0xaaaaaaab
 800666c:	0800d91c 	.word	0x0800d91c
 8006670:	fffffc00 	.word	0xfffffc00

08006674 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006684:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d11f      	bne.n	80066ce <DMA_CheckFifoParam+0x5a>
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b03      	cmp	r3, #3
 8006692:	d856      	bhi.n	8006742 <DMA_CheckFifoParam+0xce>
 8006694:	a201      	add	r2, pc, #4	; (adr r2, 800669c <DMA_CheckFifoParam+0x28>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066ad 	.word	0x080066ad
 80066a0:	080066bf 	.word	0x080066bf
 80066a4:	080066ad 	.word	0x080066ad
 80066a8:	08006743 	.word	0x08006743
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d046      	beq.n	8006746 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066bc:	e043      	b.n	8006746 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066c6:	d140      	bne.n	800674a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066cc:	e03d      	b.n	800674a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d6:	d121      	bne.n	800671c <DMA_CheckFifoParam+0xa8>
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d837      	bhi.n	800674e <DMA_CheckFifoParam+0xda>
 80066de:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <DMA_CheckFifoParam+0x70>)
 80066e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e4:	080066f5 	.word	0x080066f5
 80066e8:	080066fb 	.word	0x080066fb
 80066ec:	080066f5 	.word	0x080066f5
 80066f0:	0800670d 	.word	0x0800670d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	73fb      	strb	r3, [r7, #15]
      break;
 80066f8:	e030      	b.n	800675c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d025      	beq.n	8006752 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800670a:	e022      	b.n	8006752 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006714:	d11f      	bne.n	8006756 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800671a:	e01c      	b.n	8006756 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d903      	bls.n	800672a <DMA_CheckFifoParam+0xb6>
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b03      	cmp	r3, #3
 8006726:	d003      	beq.n	8006730 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006728:	e018      	b.n	800675c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	73fb      	strb	r3, [r7, #15]
      break;
 800672e:	e015      	b.n	800675c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00e      	beq.n	800675a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	73fb      	strb	r3, [r7, #15]
      break;
 8006740:	e00b      	b.n	800675a <DMA_CheckFifoParam+0xe6>
      break;
 8006742:	bf00      	nop
 8006744:	e00a      	b.n	800675c <DMA_CheckFifoParam+0xe8>
      break;
 8006746:	bf00      	nop
 8006748:	e008      	b.n	800675c <DMA_CheckFifoParam+0xe8>
      break;
 800674a:	bf00      	nop
 800674c:	e006      	b.n	800675c <DMA_CheckFifoParam+0xe8>
      break;
 800674e:	bf00      	nop
 8006750:	e004      	b.n	800675c <DMA_CheckFifoParam+0xe8>
      break;
 8006752:	bf00      	nop
 8006754:	e002      	b.n	800675c <DMA_CheckFifoParam+0xe8>
      break;   
 8006756:	bf00      	nop
 8006758:	e000      	b.n	800675c <DMA_CheckFifoParam+0xe8>
      break;
 800675a:	bf00      	nop
    }
  } 
  
  return status; 
 800675c:	7bfb      	ldrb	r3, [r7, #15]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop

0800676c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	460b      	mov	r3, r1
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800677e:	7afb      	ldrb	r3, [r7, #11]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d103      	bne.n	800678c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	605a      	str	r2, [r3, #4]
      break;
 800678a:	e002      	b.n	8006792 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	75fb      	strb	r3, [r7, #23]
      break;
 8006790:	bf00      	nop
  }

  return status;
 8006792:	7dfb      	ldrb	r3, [r7, #23]
}
 8006794:	4618      	mov	r0, r3
 8006796:	371c      	adds	r7, #28
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e003      	b.n	80067bc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80067ba:	2300      	movs	r3, #0
  }
}
 80067bc:	4618      	mov	r0, r3
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b089      	sub	sp, #36	; 0x24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80067d6:	2300      	movs	r3, #0
 80067d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80067da:	2300      	movs	r3, #0
 80067dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80067de:	2300      	movs	r3, #0
 80067e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80067e2:	2300      	movs	r3, #0
 80067e4:	61fb      	str	r3, [r7, #28]
 80067e6:	e175      	b.n	8006ad4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80067e8:	2201      	movs	r2, #1
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4013      	ands	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	429a      	cmp	r2, r3
 8006802:	f040 8164 	bne.w	8006ace <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	2b01      	cmp	r3, #1
 8006810:	d005      	beq.n	800681e <HAL_GPIO_Init+0x56>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d130      	bne.n	8006880 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	2203      	movs	r2, #3
 800682a:	fa02 f303 	lsl.w	r3, r2, r3
 800682e:	43db      	mvns	r3, r3
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	4013      	ands	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	fa02 f303 	lsl.w	r3, r2, r3
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	4313      	orrs	r3, r2
 8006846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006854:	2201      	movs	r2, #1
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	fa02 f303 	lsl.w	r3, r2, r3
 800685c:	43db      	mvns	r3, r3
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	4013      	ands	r3, r2
 8006862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	091b      	lsrs	r3, r3, #4
 800686a:	f003 0201 	and.w	r2, r3, #1
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	4313      	orrs	r3, r2
 8006878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f003 0303 	and.w	r3, r3, #3
 8006888:	2b03      	cmp	r3, #3
 800688a:	d017      	beq.n	80068bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	2203      	movs	r2, #3
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	43db      	mvns	r3, r3
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	4013      	ands	r3, r2
 80068a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	fa02 f303 	lsl.w	r3, r2, r3
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d123      	bne.n	8006910 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	08da      	lsrs	r2, r3, #3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3208      	adds	r2, #8
 80068d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	220f      	movs	r2, #15
 80068e0:	fa02 f303 	lsl.w	r3, r2, r3
 80068e4:	43db      	mvns	r3, r3
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	4013      	ands	r3, r2
 80068ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	691a      	ldr	r2, [r3, #16]
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	fa02 f303 	lsl.w	r3, r2, r3
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	4313      	orrs	r3, r2
 8006900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	08da      	lsrs	r2, r3, #3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3208      	adds	r2, #8
 800690a:	69b9      	ldr	r1, [r7, #24]
 800690c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	2203      	movs	r2, #3
 800691c:	fa02 f303 	lsl.w	r3, r2, r3
 8006920:	43db      	mvns	r3, r3
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	4013      	ands	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f003 0203 	and.w	r2, r3, #3
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	fa02 f303 	lsl.w	r3, r2, r3
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	4313      	orrs	r3, r2
 800693c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 80be 	beq.w	8006ace <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006952:	4b66      	ldr	r3, [pc, #408]	; (8006aec <HAL_GPIO_Init+0x324>)
 8006954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006956:	4a65      	ldr	r2, [pc, #404]	; (8006aec <HAL_GPIO_Init+0x324>)
 8006958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800695c:	6453      	str	r3, [r2, #68]	; 0x44
 800695e:	4b63      	ldr	r3, [pc, #396]	; (8006aec <HAL_GPIO_Init+0x324>)
 8006960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800696a:	4a61      	ldr	r2, [pc, #388]	; (8006af0 <HAL_GPIO_Init+0x328>)
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	089b      	lsrs	r3, r3, #2
 8006970:	3302      	adds	r3, #2
 8006972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006976:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	220f      	movs	r2, #15
 8006982:	fa02 f303 	lsl.w	r3, r2, r3
 8006986:	43db      	mvns	r3, r3
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	4013      	ands	r3, r2
 800698c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a58      	ldr	r2, [pc, #352]	; (8006af4 <HAL_GPIO_Init+0x32c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d037      	beq.n	8006a06 <HAL_GPIO_Init+0x23e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a57      	ldr	r2, [pc, #348]	; (8006af8 <HAL_GPIO_Init+0x330>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d031      	beq.n	8006a02 <HAL_GPIO_Init+0x23a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a56      	ldr	r2, [pc, #344]	; (8006afc <HAL_GPIO_Init+0x334>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d02b      	beq.n	80069fe <HAL_GPIO_Init+0x236>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a55      	ldr	r2, [pc, #340]	; (8006b00 <HAL_GPIO_Init+0x338>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d025      	beq.n	80069fa <HAL_GPIO_Init+0x232>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a54      	ldr	r2, [pc, #336]	; (8006b04 <HAL_GPIO_Init+0x33c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d01f      	beq.n	80069f6 <HAL_GPIO_Init+0x22e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a53      	ldr	r2, [pc, #332]	; (8006b08 <HAL_GPIO_Init+0x340>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d019      	beq.n	80069f2 <HAL_GPIO_Init+0x22a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a52      	ldr	r2, [pc, #328]	; (8006b0c <HAL_GPIO_Init+0x344>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d013      	beq.n	80069ee <HAL_GPIO_Init+0x226>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a51      	ldr	r2, [pc, #324]	; (8006b10 <HAL_GPIO_Init+0x348>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00d      	beq.n	80069ea <HAL_GPIO_Init+0x222>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a50      	ldr	r2, [pc, #320]	; (8006b14 <HAL_GPIO_Init+0x34c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d007      	beq.n	80069e6 <HAL_GPIO_Init+0x21e>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a4f      	ldr	r2, [pc, #316]	; (8006b18 <HAL_GPIO_Init+0x350>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d101      	bne.n	80069e2 <HAL_GPIO_Init+0x21a>
 80069de:	2309      	movs	r3, #9
 80069e0:	e012      	b.n	8006a08 <HAL_GPIO_Init+0x240>
 80069e2:	230a      	movs	r3, #10
 80069e4:	e010      	b.n	8006a08 <HAL_GPIO_Init+0x240>
 80069e6:	2308      	movs	r3, #8
 80069e8:	e00e      	b.n	8006a08 <HAL_GPIO_Init+0x240>
 80069ea:	2307      	movs	r3, #7
 80069ec:	e00c      	b.n	8006a08 <HAL_GPIO_Init+0x240>
 80069ee:	2306      	movs	r3, #6
 80069f0:	e00a      	b.n	8006a08 <HAL_GPIO_Init+0x240>
 80069f2:	2305      	movs	r3, #5
 80069f4:	e008      	b.n	8006a08 <HAL_GPIO_Init+0x240>
 80069f6:	2304      	movs	r3, #4
 80069f8:	e006      	b.n	8006a08 <HAL_GPIO_Init+0x240>
 80069fa:	2303      	movs	r3, #3
 80069fc:	e004      	b.n	8006a08 <HAL_GPIO_Init+0x240>
 80069fe:	2302      	movs	r3, #2
 8006a00:	e002      	b.n	8006a08 <HAL_GPIO_Init+0x240>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e000      	b.n	8006a08 <HAL_GPIO_Init+0x240>
 8006a06:	2300      	movs	r3, #0
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	f002 0203 	and.w	r2, r2, #3
 8006a0e:	0092      	lsls	r2, r2, #2
 8006a10:	4093      	lsls	r3, r2
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006a18:	4935      	ldr	r1, [pc, #212]	; (8006af0 <HAL_GPIO_Init+0x328>)
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	089b      	lsrs	r3, r3, #2
 8006a1e:	3302      	adds	r3, #2
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a26:	4b3d      	ldr	r3, [pc, #244]	; (8006b1c <HAL_GPIO_Init+0x354>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	43db      	mvns	r3, r3
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	4013      	ands	r3, r2
 8006a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006a4a:	4a34      	ldr	r2, [pc, #208]	; (8006b1c <HAL_GPIO_Init+0x354>)
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a50:	4b32      	ldr	r3, [pc, #200]	; (8006b1c <HAL_GPIO_Init+0x354>)
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006a74:	4a29      	ldr	r2, [pc, #164]	; (8006b1c <HAL_GPIO_Init+0x354>)
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006a7a:	4b28      	ldr	r3, [pc, #160]	; (8006b1c <HAL_GPIO_Init+0x354>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	43db      	mvns	r3, r3
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	4013      	ands	r3, r2
 8006a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a9e:	4a1f      	ldr	r2, [pc, #124]	; (8006b1c <HAL_GPIO_Init+0x354>)
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006aa4:	4b1d      	ldr	r3, [pc, #116]	; (8006b1c <HAL_GPIO_Init+0x354>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	43db      	mvns	r3, r3
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ac8:	4a14      	ldr	r2, [pc, #80]	; (8006b1c <HAL_GPIO_Init+0x354>)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	2b0f      	cmp	r3, #15
 8006ad8:	f67f ae86 	bls.w	80067e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006adc:	bf00      	nop
 8006ade:	bf00      	nop
 8006ae0:	3724      	adds	r7, #36	; 0x24
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40023800 	.word	0x40023800
 8006af0:	40013800 	.word	0x40013800
 8006af4:	40020000 	.word	0x40020000
 8006af8:	40020400 	.word	0x40020400
 8006afc:	40020800 	.word	0x40020800
 8006b00:	40020c00 	.word	0x40020c00
 8006b04:	40021000 	.word	0x40021000
 8006b08:	40021400 	.word	0x40021400
 8006b0c:	40021800 	.word	0x40021800
 8006b10:	40021c00 	.word	0x40021c00
 8006b14:	40022000 	.word	0x40022000
 8006b18:	40022400 	.word	0x40022400
 8006b1c:	40013c00 	.word	0x40013c00

08006b20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	e0d9      	b.n	8006cf0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	fa02 f303 	lsl.w	r3, r2, r3
 8006b44:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	f040 80c9 	bne.w	8006cea <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006b58:	4a6b      	ldr	r2, [pc, #428]	; (8006d08 <HAL_GPIO_DeInit+0x1e8>)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	089b      	lsrs	r3, r3, #2
 8006b5e:	3302      	adds	r3, #2
 8006b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b64:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f003 0303 	and.w	r3, r3, #3
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	220f      	movs	r2, #15
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	4013      	ands	r3, r2
 8006b78:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a63      	ldr	r2, [pc, #396]	; (8006d0c <HAL_GPIO_DeInit+0x1ec>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d037      	beq.n	8006bf2 <HAL_GPIO_DeInit+0xd2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a62      	ldr	r2, [pc, #392]	; (8006d10 <HAL_GPIO_DeInit+0x1f0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d031      	beq.n	8006bee <HAL_GPIO_DeInit+0xce>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a61      	ldr	r2, [pc, #388]	; (8006d14 <HAL_GPIO_DeInit+0x1f4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d02b      	beq.n	8006bea <HAL_GPIO_DeInit+0xca>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a60      	ldr	r2, [pc, #384]	; (8006d18 <HAL_GPIO_DeInit+0x1f8>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d025      	beq.n	8006be6 <HAL_GPIO_DeInit+0xc6>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a5f      	ldr	r2, [pc, #380]	; (8006d1c <HAL_GPIO_DeInit+0x1fc>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d01f      	beq.n	8006be2 <HAL_GPIO_DeInit+0xc2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a5e      	ldr	r2, [pc, #376]	; (8006d20 <HAL_GPIO_DeInit+0x200>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d019      	beq.n	8006bde <HAL_GPIO_DeInit+0xbe>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a5d      	ldr	r2, [pc, #372]	; (8006d24 <HAL_GPIO_DeInit+0x204>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d013      	beq.n	8006bda <HAL_GPIO_DeInit+0xba>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a5c      	ldr	r2, [pc, #368]	; (8006d28 <HAL_GPIO_DeInit+0x208>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00d      	beq.n	8006bd6 <HAL_GPIO_DeInit+0xb6>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a5b      	ldr	r2, [pc, #364]	; (8006d2c <HAL_GPIO_DeInit+0x20c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d007      	beq.n	8006bd2 <HAL_GPIO_DeInit+0xb2>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a5a      	ldr	r2, [pc, #360]	; (8006d30 <HAL_GPIO_DeInit+0x210>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d101      	bne.n	8006bce <HAL_GPIO_DeInit+0xae>
 8006bca:	2309      	movs	r3, #9
 8006bcc:	e012      	b.n	8006bf4 <HAL_GPIO_DeInit+0xd4>
 8006bce:	230a      	movs	r3, #10
 8006bd0:	e010      	b.n	8006bf4 <HAL_GPIO_DeInit+0xd4>
 8006bd2:	2308      	movs	r3, #8
 8006bd4:	e00e      	b.n	8006bf4 <HAL_GPIO_DeInit+0xd4>
 8006bd6:	2307      	movs	r3, #7
 8006bd8:	e00c      	b.n	8006bf4 <HAL_GPIO_DeInit+0xd4>
 8006bda:	2306      	movs	r3, #6
 8006bdc:	e00a      	b.n	8006bf4 <HAL_GPIO_DeInit+0xd4>
 8006bde:	2305      	movs	r3, #5
 8006be0:	e008      	b.n	8006bf4 <HAL_GPIO_DeInit+0xd4>
 8006be2:	2304      	movs	r3, #4
 8006be4:	e006      	b.n	8006bf4 <HAL_GPIO_DeInit+0xd4>
 8006be6:	2303      	movs	r3, #3
 8006be8:	e004      	b.n	8006bf4 <HAL_GPIO_DeInit+0xd4>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e002      	b.n	8006bf4 <HAL_GPIO_DeInit+0xd4>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <HAL_GPIO_DeInit+0xd4>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	f002 0203 	and.w	r2, r2, #3
 8006bfa:	0092      	lsls	r2, r2, #2
 8006bfc:	4093      	lsls	r3, r2
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d132      	bne.n	8006c6a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006c04:	4b4b      	ldr	r3, [pc, #300]	; (8006d34 <HAL_GPIO_DeInit+0x214>)
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	43db      	mvns	r3, r3
 8006c0c:	4949      	ldr	r1, [pc, #292]	; (8006d34 <HAL_GPIO_DeInit+0x214>)
 8006c0e:	4013      	ands	r3, r2
 8006c10:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006c12:	4b48      	ldr	r3, [pc, #288]	; (8006d34 <HAL_GPIO_DeInit+0x214>)
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	4946      	ldr	r1, [pc, #280]	; (8006d34 <HAL_GPIO_DeInit+0x214>)
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006c20:	4b44      	ldr	r3, [pc, #272]	; (8006d34 <HAL_GPIO_DeInit+0x214>)
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	43db      	mvns	r3, r3
 8006c28:	4942      	ldr	r1, [pc, #264]	; (8006d34 <HAL_GPIO_DeInit+0x214>)
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006c2e:	4b41      	ldr	r3, [pc, #260]	; (8006d34 <HAL_GPIO_DeInit+0x214>)
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	43db      	mvns	r3, r3
 8006c36:	493f      	ldr	r1, [pc, #252]	; (8006d34 <HAL_GPIO_DeInit+0x214>)
 8006c38:	4013      	ands	r3, r2
 8006c3a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	220f      	movs	r2, #15
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006c4c:	4a2e      	ldr	r2, [pc, #184]	; (8006d08 <HAL_GPIO_DeInit+0x1e8>)
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	089b      	lsrs	r3, r3, #2
 8006c52:	3302      	adds	r3, #2
 8006c54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	43da      	mvns	r2, r3
 8006c5c:	482a      	ldr	r0, [pc, #168]	; (8006d08 <HAL_GPIO_DeInit+0x1e8>)
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	089b      	lsrs	r3, r3, #2
 8006c62:	400a      	ands	r2, r1
 8006c64:	3302      	adds	r3, #2
 8006c66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	2103      	movs	r1, #3
 8006c74:	fa01 f303 	lsl.w	r3, r1, r3
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	401a      	ands	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	08da      	lsrs	r2, r3, #3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3208      	adds	r2, #8
 8006c88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	220f      	movs	r2, #15
 8006c96:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9a:	43db      	mvns	r3, r3
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	08d2      	lsrs	r2, r2, #3
 8006ca0:	4019      	ands	r1, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3208      	adds	r2, #8
 8006ca6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68da      	ldr	r2, [r3, #12]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	2103      	movs	r1, #3
 8006cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb8:	43db      	mvns	r3, r3
 8006cba:	401a      	ands	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ccc:	43db      	mvns	r3, r3
 8006cce:	401a      	ands	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	2103      	movs	r1, #3
 8006cde:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	401a      	ands	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	3301      	adds	r3, #1
 8006cee:	617b      	str	r3, [r7, #20]
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2b0f      	cmp	r3, #15
 8006cf4:	f67f af22 	bls.w	8006b3c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40013800 	.word	0x40013800
 8006d0c:	40020000 	.word	0x40020000
 8006d10:	40020400 	.word	0x40020400
 8006d14:	40020800 	.word	0x40020800
 8006d18:	40020c00 	.word	0x40020c00
 8006d1c:	40021000 	.word	0x40021000
 8006d20:	40021400 	.word	0x40021400
 8006d24:	40021800 	.word	0x40021800
 8006d28:	40021c00 	.word	0x40021c00
 8006d2c:	40022000 	.word	0x40022000
 8006d30:	40022400 	.word	0x40022400
 8006d34:	40013c00 	.word	0x40013c00

08006d38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	887b      	ldrh	r3, [r7, #2]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d002      	beq.n	8006d56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d50:	2301      	movs	r3, #1
 8006d52:	73fb      	strb	r3, [r7, #15]
 8006d54:	e001      	b.n	8006d5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	807b      	strh	r3, [r7, #2]
 8006d74:	4613      	mov	r3, r2
 8006d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d78:	787b      	ldrb	r3, [r7, #1]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d7e:	887a      	ldrh	r2, [r7, #2]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006d84:	e003      	b.n	8006d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006d86:	887b      	ldrh	r3, [r7, #2]
 8006d88:	041a      	lsls	r2, r3, #16
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	619a      	str	r2, [r3, #24]
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
	...

08006d9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006da6:	4b08      	ldr	r3, [pc, #32]	; (8006dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006da8:	695a      	ldr	r2, [r3, #20]
 8006daa:	88fb      	ldrh	r3, [r7, #6]
 8006dac:	4013      	ands	r3, r2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d006      	beq.n	8006dc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006db2:	4a05      	ldr	r2, [pc, #20]	; (8006dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006db4:	88fb      	ldrh	r3, [r7, #6]
 8006db6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006db8:	88fb      	ldrh	r3, [r7, #6]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 f806 	bl	8006dcc <HAL_GPIO_EXTI_Callback>
  }
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	40013c00 	.word	0x40013c00

08006dcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006dd6:	bf00      	nop
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
	...

08006de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e07f      	b.n	8006ef6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d106      	bne.n	8006e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f8a9 	bl	8006f62 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2224      	movs	r2, #36	; 0x24
 8006e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d107      	bne.n	8006e5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689a      	ldr	r2, [r3, #8]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e5a:	609a      	str	r2, [r3, #8]
 8006e5c:	e006      	b.n	8006e6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006e6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d104      	bne.n	8006e7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6859      	ldr	r1, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	4b1d      	ldr	r3, [pc, #116]	; (8006f00 <HAL_I2C_Init+0x11c>)
 8006e8a:	430b      	orrs	r3, r1
 8006e8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691a      	ldr	r2, [r3, #16]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	69d9      	ldr	r1, [r3, #28]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a1a      	ldr	r2, [r3, #32]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0201 	orr.w	r2, r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	02008000 	.word	0x02008000

08006f04 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e021      	b.n	8006f5a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2224      	movs	r2, #36	; 0x24
 8006f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0201 	bic.w	r2, r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f821 	bl	8006f76 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
	...

08006f8c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af02      	add	r7, sp, #8
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	4608      	mov	r0, r1
 8006f96:	4611      	mov	r1, r2
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	817b      	strh	r3, [r7, #10]
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	813b      	strh	r3, [r7, #8]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	f040 80f9 	bne.w	80071a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <HAL_I2C_Mem_Write+0x34>
 8006fba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d105      	bne.n	8006fcc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fc6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e0ed      	b.n	80071a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d101      	bne.n	8006fda <HAL_I2C_Mem_Write+0x4e>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e0e6      	b.n	80071a8 <HAL_I2C_Mem_Write+0x21c>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006fe2:	f7fe fd8d 	bl	8005b00 <HAL_GetTick>
 8006fe6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	2319      	movs	r3, #25
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 fadd 	bl	80075b4 <I2C_WaitOnFlagUntilTimeout>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e0d1      	b.n	80071a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2221      	movs	r2, #33	; 0x21
 8007008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2240      	movs	r2, #64	; 0x40
 8007010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a3a      	ldr	r2, [r7, #32]
 800701e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007024:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800702c:	88f8      	ldrh	r0, [r7, #6]
 800702e:	893a      	ldrh	r2, [r7, #8]
 8007030:	8979      	ldrh	r1, [r7, #10]
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	9301      	str	r3, [sp, #4]
 8007036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	4603      	mov	r3, r0
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 f9ed 	bl	800741c <I2C_RequestMemoryWrite>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d005      	beq.n	8007054 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e0a9      	b.n	80071a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007058:	b29b      	uxth	r3, r3
 800705a:	2bff      	cmp	r3, #255	; 0xff
 800705c:	d90e      	bls.n	800707c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	22ff      	movs	r2, #255	; 0xff
 8007062:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007068:	b2da      	uxtb	r2, r3
 800706a:	8979      	ldrh	r1, [r7, #10]
 800706c:	2300      	movs	r3, #0
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 fc45 	bl	8007904 <I2C_TransferConfig>
 800707a:	e00f      	b.n	800709c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800708a:	b2da      	uxtb	r2, r3
 800708c:	8979      	ldrh	r1, [r7, #10]
 800708e:	2300      	movs	r3, #0
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 fc34 	bl	8007904 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 fac7 	bl	8007634 <I2C_WaitOnTXISFlagUntilTimeout>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e07b      	b.n	80071a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	781a      	ldrb	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	3b01      	subs	r3, #1
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d8:	3b01      	subs	r3, #1
 80070da:	b29a      	uxth	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d034      	beq.n	8007154 <HAL_I2C_Mem_Write+0x1c8>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d130      	bne.n	8007154 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f8:	2200      	movs	r2, #0
 80070fa:	2180      	movs	r1, #128	; 0x80
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 fa59 	bl	80075b4 <I2C_WaitOnFlagUntilTimeout>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e04d      	b.n	80071a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007110:	b29b      	uxth	r3, r3
 8007112:	2bff      	cmp	r3, #255	; 0xff
 8007114:	d90e      	bls.n	8007134 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	22ff      	movs	r2, #255	; 0xff
 800711a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007120:	b2da      	uxtb	r2, r3
 8007122:	8979      	ldrh	r1, [r7, #10]
 8007124:	2300      	movs	r3, #0
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 fbe9 	bl	8007904 <I2C_TransferConfig>
 8007132:	e00f      	b.n	8007154 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007142:	b2da      	uxtb	r2, r3
 8007144:	8979      	ldrh	r1, [r7, #10]
 8007146:	2300      	movs	r3, #0
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 fbd8 	bl	8007904 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007158:	b29b      	uxth	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d19e      	bne.n	800709c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 faa6 	bl	80076b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e01a      	b.n	80071a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2220      	movs	r2, #32
 8007178:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6859      	ldr	r1, [r3, #4]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <HAL_I2C_Mem_Write+0x224>)
 8007186:	400b      	ands	r3, r1
 8007188:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2220      	movs	r2, #32
 800718e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e000      	b.n	80071a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80071a6:	2302      	movs	r3, #2
  }
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	fe00e800 	.word	0xfe00e800

080071b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	4608      	mov	r0, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	461a      	mov	r2, r3
 80071c2:	4603      	mov	r3, r0
 80071c4:	817b      	strh	r3, [r7, #10]
 80071c6:	460b      	mov	r3, r1
 80071c8:	813b      	strh	r3, [r7, #8]
 80071ca:	4613      	mov	r3, r2
 80071cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	f040 80fd 	bne.w	80073d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <HAL_I2C_Mem_Read+0x34>
 80071e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d105      	bne.n	80071f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e0f1      	b.n	80073d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d101      	bne.n	8007202 <HAL_I2C_Mem_Read+0x4e>
 80071fe:	2302      	movs	r3, #2
 8007200:	e0ea      	b.n	80073d8 <HAL_I2C_Mem_Read+0x224>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800720a:	f7fe fc79 	bl	8005b00 <HAL_GetTick>
 800720e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	2319      	movs	r3, #25
 8007216:	2201      	movs	r2, #1
 8007218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f9c9 	bl	80075b4 <I2C_WaitOnFlagUntilTimeout>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e0d5      	b.n	80073d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2222      	movs	r2, #34	; 0x22
 8007230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2240      	movs	r2, #64	; 0x40
 8007238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a3a      	ldr	r2, [r7, #32]
 8007246:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800724c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007254:	88f8      	ldrh	r0, [r7, #6]
 8007256:	893a      	ldrh	r2, [r7, #8]
 8007258:	8979      	ldrh	r1, [r7, #10]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	9301      	str	r3, [sp, #4]
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	4603      	mov	r3, r0
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 f92d 	bl	80074c4 <I2C_RequestMemoryRead>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e0ad      	b.n	80073d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007280:	b29b      	uxth	r3, r3
 8007282:	2bff      	cmp	r3, #255	; 0xff
 8007284:	d90e      	bls.n	80072a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	22ff      	movs	r2, #255	; 0xff
 800728a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007290:	b2da      	uxtb	r2, r3
 8007292:	8979      	ldrh	r1, [r7, #10]
 8007294:	4b52      	ldr	r3, [pc, #328]	; (80073e0 <HAL_I2C_Mem_Read+0x22c>)
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fb31 	bl	8007904 <I2C_TransferConfig>
 80072a2:	e00f      	b.n	80072c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b2:	b2da      	uxtb	r2, r3
 80072b4:	8979      	ldrh	r1, [r7, #10]
 80072b6:	4b4a      	ldr	r3, [pc, #296]	; (80073e0 <HAL_I2C_Mem_Read+0x22c>)
 80072b8:	9300      	str	r3, [sp, #0]
 80072ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fb20 	bl	8007904 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	2200      	movs	r2, #0
 80072cc:	2104      	movs	r1, #4
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f970 	bl	80075b4 <I2C_WaitOnFlagUntilTimeout>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e07c      	b.n	80073d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007314:	b29b      	uxth	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d034      	beq.n	8007384 <HAL_I2C_Mem_Read+0x1d0>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731e:	2b00      	cmp	r3, #0
 8007320:	d130      	bne.n	8007384 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	2200      	movs	r2, #0
 800732a:	2180      	movs	r1, #128	; 0x80
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f941 	bl	80075b4 <I2C_WaitOnFlagUntilTimeout>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e04d      	b.n	80073d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007340:	b29b      	uxth	r3, r3
 8007342:	2bff      	cmp	r3, #255	; 0xff
 8007344:	d90e      	bls.n	8007364 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	22ff      	movs	r2, #255	; 0xff
 800734a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007350:	b2da      	uxtb	r2, r3
 8007352:	8979      	ldrh	r1, [r7, #10]
 8007354:	2300      	movs	r3, #0
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 fad1 	bl	8007904 <I2C_TransferConfig>
 8007362:	e00f      	b.n	8007384 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007368:	b29a      	uxth	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007372:	b2da      	uxtb	r2, r3
 8007374:	8979      	ldrh	r1, [r7, #10]
 8007376:	2300      	movs	r3, #0
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f000 fac0 	bl	8007904 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d19a      	bne.n	80072c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 f98e 	bl	80076b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e01a      	b.n	80073d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2220      	movs	r2, #32
 80073a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6859      	ldr	r1, [r3, #4]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	4b0b      	ldr	r3, [pc, #44]	; (80073e4 <HAL_I2C_Mem_Read+0x230>)
 80073b6:	400b      	ands	r3, r1
 80073b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2220      	movs	r2, #32
 80073be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	e000      	b.n	80073d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80073d6:	2302      	movs	r3, #2
  }
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	80002400 	.word	0x80002400
 80073e4:	fe00e800 	.word	0xfe00e800

080073e8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073f6:	b2db      	uxtb	r3, r3
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007410:	4618      	mov	r0, r3
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af02      	add	r7, sp, #8
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	4608      	mov	r0, r1
 8007426:	4611      	mov	r1, r2
 8007428:	461a      	mov	r2, r3
 800742a:	4603      	mov	r3, r0
 800742c:	817b      	strh	r3, [r7, #10]
 800742e:	460b      	mov	r3, r1
 8007430:	813b      	strh	r3, [r7, #8]
 8007432:	4613      	mov	r3, r2
 8007434:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007436:	88fb      	ldrh	r3, [r7, #6]
 8007438:	b2da      	uxtb	r2, r3
 800743a:	8979      	ldrh	r1, [r7, #10]
 800743c:	4b20      	ldr	r3, [pc, #128]	; (80074c0 <I2C_RequestMemoryWrite+0xa4>)
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 fa5d 	bl	8007904 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	69b9      	ldr	r1, [r7, #24]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 f8f0 	bl	8007634 <I2C_WaitOnTXISFlagUntilTimeout>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e02c      	b.n	80074b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800745e:	88fb      	ldrh	r3, [r7, #6]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d105      	bne.n	8007470 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007464:	893b      	ldrh	r3, [r7, #8]
 8007466:	b2da      	uxtb	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	629a      	str	r2, [r3, #40]	; 0x28
 800746e:	e015      	b.n	800749c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007470:	893b      	ldrh	r3, [r7, #8]
 8007472:	0a1b      	lsrs	r3, r3, #8
 8007474:	b29b      	uxth	r3, r3
 8007476:	b2da      	uxtb	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800747e:	69fa      	ldr	r2, [r7, #28]
 8007480:	69b9      	ldr	r1, [r7, #24]
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 f8d6 	bl	8007634 <I2C_WaitOnTXISFlagUntilTimeout>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e012      	b.n	80074b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007492:	893b      	ldrh	r3, [r7, #8]
 8007494:	b2da      	uxtb	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	2200      	movs	r2, #0
 80074a4:	2180      	movs	r1, #128	; 0x80
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 f884 	bl	80075b4 <I2C_WaitOnFlagUntilTimeout>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	80002000 	.word	0x80002000

080074c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af02      	add	r7, sp, #8
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	4608      	mov	r0, r1
 80074ce:	4611      	mov	r1, r2
 80074d0:	461a      	mov	r2, r3
 80074d2:	4603      	mov	r3, r0
 80074d4:	817b      	strh	r3, [r7, #10]
 80074d6:	460b      	mov	r3, r1
 80074d8:	813b      	strh	r3, [r7, #8]
 80074da:	4613      	mov	r3, r2
 80074dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80074de:	88fb      	ldrh	r3, [r7, #6]
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	8979      	ldrh	r1, [r7, #10]
 80074e4:	4b20      	ldr	r3, [pc, #128]	; (8007568 <I2C_RequestMemoryRead+0xa4>)
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	2300      	movs	r3, #0
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f000 fa0a 	bl	8007904 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074f0:	69fa      	ldr	r2, [r7, #28]
 80074f2:	69b9      	ldr	r1, [r7, #24]
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 f89d 	bl	8007634 <I2C_WaitOnTXISFlagUntilTimeout>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e02c      	b.n	800755e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007504:	88fb      	ldrh	r3, [r7, #6]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d105      	bne.n	8007516 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800750a:	893b      	ldrh	r3, [r7, #8]
 800750c:	b2da      	uxtb	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	629a      	str	r2, [r3, #40]	; 0x28
 8007514:	e015      	b.n	8007542 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007516:	893b      	ldrh	r3, [r7, #8]
 8007518:	0a1b      	lsrs	r3, r3, #8
 800751a:	b29b      	uxth	r3, r3
 800751c:	b2da      	uxtb	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007524:	69fa      	ldr	r2, [r7, #28]
 8007526:	69b9      	ldr	r1, [r7, #24]
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 f883 	bl	8007634 <I2C_WaitOnTXISFlagUntilTimeout>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d001      	beq.n	8007538 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e012      	b.n	800755e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007538:	893b      	ldrh	r3, [r7, #8]
 800753a:	b2da      	uxtb	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2200      	movs	r2, #0
 800754a:	2140      	movs	r1, #64	; 0x40
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f831 	bl	80075b4 <I2C_WaitOnFlagUntilTimeout>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e000      	b.n	800755e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	80002000 	.word	0x80002000

0800756c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b02      	cmp	r3, #2
 8007580:	d103      	bne.n	800758a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2200      	movs	r2, #0
 8007588:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b01      	cmp	r3, #1
 8007596:	d007      	beq.n	80075a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0201 	orr.w	r2, r2, #1
 80075a6:	619a      	str	r2, [r3, #24]
  }
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	603b      	str	r3, [r7, #0]
 80075c0:	4613      	mov	r3, r2
 80075c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075c4:	e022      	b.n	800760c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075cc:	d01e      	beq.n	800760c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ce:	f7fe fa97 	bl	8005b00 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d302      	bcc.n	80075e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d113      	bne.n	800760c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e8:	f043 0220 	orr.w	r2, r3, #32
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e00f      	b.n	800762c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699a      	ldr	r2, [r3, #24]
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	4013      	ands	r3, r2
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	429a      	cmp	r2, r3
 800761a:	bf0c      	ite	eq
 800761c:	2301      	moveq	r3, #1
 800761e:	2300      	movne	r3, #0
 8007620:	b2db      	uxtb	r3, r3
 8007622:	461a      	mov	r2, r3
 8007624:	79fb      	ldrb	r3, [r7, #7]
 8007626:	429a      	cmp	r2, r3
 8007628:	d0cd      	beq.n	80075c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007640:	e02c      	b.n	800769c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	68b9      	ldr	r1, [r7, #8]
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 f870 	bl	800772c <I2C_IsErrorOccurred>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e02a      	b.n	80076ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765c:	d01e      	beq.n	800769c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800765e:	f7fe fa4f 	bl	8005b00 <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	429a      	cmp	r2, r3
 800766c:	d302      	bcc.n	8007674 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d113      	bne.n	800769c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007678:	f043 0220 	orr.w	r2, r3, #32
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2220      	movs	r2, #32
 8007684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e007      	b.n	80076ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d1cb      	bne.n	8007642 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076c0:	e028      	b.n	8007714 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	68b9      	ldr	r1, [r7, #8]
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 f830 	bl	800772c <I2C_IsErrorOccurred>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e026      	b.n	8007724 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d6:	f7fe fa13 	bl	8005b00 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d302      	bcc.n	80076ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d113      	bne.n	8007714 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f0:	f043 0220 	orr.w	r2, r3, #32
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e007      	b.n	8007724 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b20      	cmp	r3, #32
 8007720:	d1cf      	bne.n	80076c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08a      	sub	sp, #40	; 0x28
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007746:	2300      	movs	r3, #0
 8007748:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	f003 0310 	and.w	r3, r3, #16
 8007754:	2b00      	cmp	r3, #0
 8007756:	d075      	beq.n	8007844 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2210      	movs	r2, #16
 800775e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007760:	e056      	b.n	8007810 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007768:	d052      	beq.n	8007810 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800776a:	f7fe f9c9 	bl	8005b00 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	429a      	cmp	r2, r3
 8007778:	d302      	bcc.n	8007780 <I2C_IsErrorOccurred+0x54>
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d147      	bne.n	8007810 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800778a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007792:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800779e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077a2:	d12e      	bne.n	8007802 <I2C_IsErrorOccurred+0xd6>
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077aa:	d02a      	beq.n	8007802 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80077ac:	7cfb      	ldrb	r3, [r7, #19]
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d027      	beq.n	8007802 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077c0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80077c2:	f7fe f99d 	bl	8005b00 <HAL_GetTick>
 80077c6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077c8:	e01b      	b.n	8007802 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80077ca:	f7fe f999 	bl	8005b00 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b19      	cmp	r3, #25
 80077d6:	d914      	bls.n	8007802 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077dc:	f043 0220 	orr.w	r2, r3, #32
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b20      	cmp	r3, #32
 800780e:	d1dc      	bne.n	80077ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b20      	cmp	r3, #32
 800781c:	d003      	beq.n	8007826 <I2C_IsErrorOccurred+0xfa>
 800781e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007822:	2b00      	cmp	r3, #0
 8007824:	d09d      	beq.n	8007762 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800782a:	2b00      	cmp	r3, #0
 800782c:	d103      	bne.n	8007836 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2220      	movs	r2, #32
 8007834:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	f043 0304 	orr.w	r3, r3, #4
 800783c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00b      	beq.n	800786e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	f043 0301 	orr.w	r3, r3, #1
 800785c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007866:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00b      	beq.n	8007890 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	f043 0308 	orr.w	r3, r3, #8
 800787e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007888:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00b      	beq.n	80078b2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	f043 0302 	orr.w	r3, r3, #2
 80078a0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80078b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d01c      	beq.n	80078f4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f7ff fe56 	bl	800756c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6859      	ldr	r1, [r3, #4]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	4b0d      	ldr	r3, [pc, #52]	; (8007900 <I2C_IsErrorOccurred+0x1d4>)
 80078cc:	400b      	ands	r3, r1
 80078ce:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	431a      	orrs	r2, r3
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2220      	movs	r2, #32
 80078e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80078f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3728      	adds	r7, #40	; 0x28
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	fe00e800 	.word	0xfe00e800

08007904 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	607b      	str	r3, [r7, #4]
 800790e:	460b      	mov	r3, r1
 8007910:	817b      	strh	r3, [r7, #10]
 8007912:	4613      	mov	r3, r2
 8007914:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007916:	897b      	ldrh	r3, [r7, #10]
 8007918:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800791c:	7a7b      	ldrb	r3, [r7, #9]
 800791e:	041b      	lsls	r3, r3, #16
 8007920:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007924:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	4313      	orrs	r3, r2
 800792e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007932:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	0d5b      	lsrs	r3, r3, #21
 800793e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007942:	4b08      	ldr	r3, [pc, #32]	; (8007964 <I2C_TransferConfig+0x60>)
 8007944:	430b      	orrs	r3, r1
 8007946:	43db      	mvns	r3, r3
 8007948:	ea02 0103 	and.w	r1, r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	430a      	orrs	r2, r1
 8007954:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007956:	bf00      	nop
 8007958:	371c      	adds	r7, #28
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	03ff63ff 	.word	0x03ff63ff

08007968 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b20      	cmp	r3, #32
 800797c:	d138      	bne.n	80079f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007984:	2b01      	cmp	r3, #1
 8007986:	d101      	bne.n	800798c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007988:	2302      	movs	r3, #2
 800798a:	e032      	b.n	80079f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2224      	movs	r2, #36	; 0x24
 8007998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0201 	bic.w	r2, r2, #1
 80079aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6819      	ldr	r1, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0201 	orr.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	e000      	b.n	80079f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80079f0:	2302      	movs	r3, #2
  }
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b085      	sub	sp, #20
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d139      	bne.n	8007a88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e033      	b.n	8007a8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2224      	movs	r2, #36	; 0x24
 8007a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f022 0201 	bic.w	r2, r2, #1
 8007a40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007a50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	021b      	lsls	r3, r3, #8
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	e000      	b.n	8007a8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a88:	2302      	movs	r3, #2
  }
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
	...

08007a98 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b088      	sub	sp, #32
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e0d2      	b.n	8007c50 <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d106      	bne.n	8007ac4 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7f8 ff20 	bl	8000904 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69d9      	ldr	r1, [r3, #28]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	4b60      	ldr	r3, [pc, #384]	; (8007c58 <HAL_I2S_Init+0x1c0>)
 8007ad8:	400b      	ands	r3, r1
 8007ada:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d067      	beq.n	8007bbc <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d102      	bne.n	8007afa <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007af4:	2310      	movs	r3, #16
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	e001      	b.n	8007afe <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007afa:	2320      	movs	r3, #32
 8007afc:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	2b20      	cmp	r3, #32
 8007b04:	d802      	bhi.n	8007b0c <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d102      	bne.n	8007b1a <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8007b14:	4b51      	ldr	r3, [pc, #324]	; (8007c5c <HAL_I2S_Init+0x1c4>)
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	e003      	b.n	8007b22 <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f9dc 	bl	8007ed8 <I2S_GetClockFreq>
 8007b20:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b2a:	d125      	bne.n	8007b78 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d010      	beq.n	8007b56 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	461a      	mov	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b50:	3305      	adds	r3, #5
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	e01f      	b.n	8007b96 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	00db      	lsls	r3, r3, #3
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	461a      	mov	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b72:	3305      	adds	r3, #5
 8007b74:	613b      	str	r3, [r7, #16]
 8007b76:	e00e      	b.n	8007b96 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b80:	4613      	mov	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	461a      	mov	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b92:	3305      	adds	r3, #5
 8007b94:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	4a31      	ldr	r2, [pc, #196]	; (8007c60 <HAL_I2S_Init+0x1c8>)
 8007b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9e:	08db      	lsrs	r3, r3, #3
 8007ba0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	085b      	lsrs	r3, r3, #1
 8007bb2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	021b      	lsls	r3, r3, #8
 8007bb8:	61bb      	str	r3, [r7, #24]
 8007bba:	e003      	b.n	8007bc4 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d902      	bls.n	8007bd0 <HAL_I2S_Init+0x138>
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	2bff      	cmp	r3, #255	; 0xff
 8007bce:	d907      	bls.n	8007be0 <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd4:	f043 0210 	orr.w	r2, r3, #16
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e037      	b.n	8007c50 <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	691a      	ldr	r2, [r3, #16]
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	ea42 0103 	orr.w	r1, r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69da      	ldr	r2, [r3, #28]
 8007bfa:	4b17      	ldr	r3, [pc, #92]	; (8007c58 <HAL_I2S_Init+0x1c0>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	6851      	ldr	r1, [r2, #4]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	6892      	ldr	r2, [r2, #8]
 8007c06:	4311      	orrs	r1, r2
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	68d2      	ldr	r2, [r2, #12]
 8007c0c:	4311      	orrs	r1, r2
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	6992      	ldr	r2, [r2, #24]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	431a      	orrs	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c1e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	2b30      	cmp	r3, #48	; 0x30
 8007c26:	d003      	beq.n	8007c30 <HAL_I2S_Init+0x198>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	2bb0      	cmp	r3, #176	; 0xb0
 8007c2e:	d107      	bne.n	8007c40 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69da      	ldr	r2, [r3, #28]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c3e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3720      	adds	r7, #32
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	fffff040 	.word	0xfffff040
 8007c5c:	00bb8000 	.word	0x00bb8000
 8007c60:	cccccccd 	.word	0xcccccccd

08007c64 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <HAL_I2S_Receive_DMA+0x1a>
 8007c78:	88fb      	ldrh	r3, [r7, #6]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e0a1      	b.n	8007dc6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d101      	bne.n	8007c92 <HAL_I2S_Receive_DMA+0x2e>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e099      	b.n	8007dc6 <HAL_I2S_Receive_DMA+0x162>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d005      	beq.n	8007cb2 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 8007cae:	2302      	movs	r3, #2
 8007cb0:	e089      	b.n	8007dc6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2204      	movs	r2, #4
 8007cb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pRxBuffPtr = pData;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	629a      	str	r2, [r3, #40]	; 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	f003 0307 	and.w	r3, r3, #7
 8007cd0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d002      	beq.n	8007cde <HAL_I2S_Receive_DMA+0x7a>
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2b05      	cmp	r3, #5
 8007cdc:	d10a      	bne.n	8007cf4 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8007cde:	88fb      	ldrh	r3, [r7, #6]
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8007ce8:	88fb      	ldrh	r3, [r7, #6]
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	85da      	strh	r2, [r3, #46]	; 0x2e
 8007cf2:	e005      	b.n	8007d00 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	88fa      	ldrh	r2, [r7, #6]
 8007cf8:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = Size;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	88fa      	ldrh	r2, [r7, #6]
 8007cfe:	85da      	strh	r2, [r3, #46]	; 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d04:	4a32      	ldr	r2, [pc, #200]	; (8007dd0 <HAL_I2S_Receive_DMA+0x16c>)
 8007d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0c:	4a31      	ldr	r2, [pc, #196]	; (8007dd4 <HAL_I2S_Receive_DMA+0x170>)
 8007d0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d14:	4a30      	ldr	r2, [pc, #192]	; (8007dd8 <HAL_I2S_Receive_DMA+0x174>)
 8007d16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d26:	d10a      	bne.n	8007d3e <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007d28:	2300      	movs	r3, #0
 8007d2a:	613b      	str	r3, [r7, #16]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	613b      	str	r3, [r7, #16]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	613b      	str	r3, [r7, #16]
 8007d3c:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	330c      	adds	r3, #12
 8007d48:	4619      	mov	r1, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4e:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d54:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8007d56:	f7fe f9ad 	bl	80060b4 <HAL_DMA_Start_IT>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00f      	beq.n	8007d80 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d64:	f043 0208 	orr.w	r2, r3, #8
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e022      	b.n	8007dc6 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d107      	bne.n	8007d9e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69da      	ldr	r2, [r3, #28]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d9c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d107      	bne.n	8007dbc <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f042 0201 	orr.w	r2, r2, #1
 8007dba:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	08007fb3 	.word	0x08007fb3
 8007dd4:	08007f71 	.word	0x08007f71
 8007dd8:	08007fcf 	.word	0x08007fcf

08007ddc <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	099b      	lsrs	r3, r3, #6
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10e      	bne.n	8007e1e <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f003 0301 	and.w	r3, r3, #1
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d009      	beq.n	8007e1e <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	099b      	lsrs	r3, r3, #6
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f92d 	bl	8008076 <I2S_Receive_IT>
    return;
 8007e1c:	e044      	b.n	8007ea8 <HAL_I2S_IRQHandler+0xcc>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	085b      	lsrs	r3, r3, #1
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d009      	beq.n	8007e3e <HAL_I2S_IRQHandler+0x62>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	09db      	lsrs	r3, r3, #7
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_I2S_IRQHandler+0x62>
  {
    I2S_Transmit_IT(hi2s);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f8ef 	bl	800801a <I2S_Transmit_IT>
    return;
 8007e3c:	e034      	b.n	8007ea8 <HAL_I2S_IRQHandler+0xcc>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	095b      	lsrs	r3, r3, #5
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d02e      	beq.n	8007ea8 <HAL_I2S_IRQHandler+0xcc>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	099b      	lsrs	r3, r3, #6
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00d      	beq.n	8007e72 <HAL_I2S_IRQHandler+0x96>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007e64:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6a:	f043 0202 	orr.w	r2, r3, #2
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	08db      	lsrs	r3, r3, #3
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00d      	beq.n	8007e9a <HAL_I2S_IRQHandler+0xbe>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e8c:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e92:	f043 0204 	orr.w	r2, r3, #4
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f80d 	bl	8007ec2 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b083      	sub	sp, #12
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
	...

08007ed8 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d02d      	beq.n	8007f44 <I2S_GetClockFreq+0x6c>
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d12e      	bne.n	8007f4a <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007eec:	4b1c      	ldr	r3, [pc, #112]	; (8007f60 <I2S_GetClockFreq+0x88>)
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d108      	bne.n	8007f0a <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ef8:	4b19      	ldr	r3, [pc, #100]	; (8007f60 <I2S_GetClockFreq+0x88>)
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f00:	4a18      	ldr	r2, [pc, #96]	; (8007f64 <I2S_GetClockFreq+0x8c>)
 8007f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f06:	617b      	str	r3, [r7, #20]
 8007f08:	e007      	b.n	8007f1a <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007f0a:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <I2S_GetClockFreq+0x88>)
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f12:	4a15      	ldr	r2, [pc, #84]	; (8007f68 <I2S_GetClockFreq+0x90>)
 8007f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f18:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8007f1a:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <I2S_GetClockFreq+0x88>)
 8007f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f20:	0f1b      	lsrs	r3, r3, #28
 8007f22:	f003 0307 	and.w	r3, r3, #7
 8007f26:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8007f28:	4b0d      	ldr	r3, [pc, #52]	; (8007f60 <I2S_GetClockFreq+0x88>)
 8007f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f2e:	099b      	lsrs	r3, r3, #6
 8007f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	fb02 f203 	mul.w	r2, r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f40:	613b      	str	r3, [r7, #16]

      break;
 8007f42:	e005      	b.n	8007f50 <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 8007f44:	4b09      	ldr	r3, [pc, #36]	; (8007f6c <I2S_GetClockFreq+0x94>)
 8007f46:	613b      	str	r3, [r7, #16]
      break;
 8007f48:	e002      	b.n	8007f50 <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	613b      	str	r3, [r7, #16]
      break;
 8007f4e:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 8007f50:	693b      	ldr	r3, [r7, #16]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	371c      	adds	r7, #28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	40023800 	.word	0x40023800
 8007f64:	00f42400 	.word	0x00f42400
 8007f68:	007a1200 	.word	0x007a1200
 8007f6c:	00bb8000 	.word	0x00bb8000

08007f70 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10e      	bne.n	8007fa4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 0201 	bic.w	r2, r2, #1
 8007f94:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f7f8 fdb7 	bl	8000b18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007faa:	bf00      	nop
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f7f8 fd93 	bl	8000aec <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007fc6:	bf00      	nop
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 0203 	bic.w	r2, r2, #3
 8007fea:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	84da      	strh	r2, [r3, #38]	; 0x26
  hi2s->RxXferCount = 0U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	85da      	strh	r2, [r3, #46]	; 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008004:	f043 0208 	orr.w	r2, r3, #8
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f7ff ff58 	bl	8007ec2 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008012:	bf00      	nop
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	881a      	ldrh	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	1c9a      	adds	r2, r3, #2
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	621a      	str	r2, [r3, #32]
  hi2s->TxXferCount--;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	b29a      	uxth	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	84da      	strh	r2, [r3, #38]	; 0x26

  if (hi2s->TxXferCount == 0U)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800804a:	b29b      	uxth	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10e      	bne.n	800806e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800805e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7ff ff20 	bl	8007eae <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b082      	sub	sp, #8
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008088:	b292      	uxth	r2, r2
 800808a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	1c9a      	adds	r2, r3, #2
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	629a      	str	r2, [r3, #40]	; 0x28
  hi2s->RxXferCount--;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b01      	subs	r3, #1
 800809e:	b29a      	uxth	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  if (hi2s->RxXferCount == 0U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10e      	bne.n	80080cc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80080bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7f8 fd26 	bl	8000b18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80080cc:	bf00      	nop
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80080d4:	b480      	push	{r7}
 80080d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080d8:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a04      	ldr	r2, [pc, #16]	; (80080f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080e2:	6013      	str	r3, [r2, #0]
}
 80080e4:	bf00      	nop
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40007000 	.word	0x40007000

080080f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80080fe:	4b23      	ldr	r3, [pc, #140]	; (800818c <HAL_PWREx_EnableOverDrive+0x98>)
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	4a22      	ldr	r2, [pc, #136]	; (800818c <HAL_PWREx_EnableOverDrive+0x98>)
 8008104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008108:	6413      	str	r3, [r2, #64]	; 0x40
 800810a:	4b20      	ldr	r3, [pc, #128]	; (800818c <HAL_PWREx_EnableOverDrive+0x98>)
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008112:	603b      	str	r3, [r7, #0]
 8008114:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008116:	4b1e      	ldr	r3, [pc, #120]	; (8008190 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a1d      	ldr	r2, [pc, #116]	; (8008190 <HAL_PWREx_EnableOverDrive+0x9c>)
 800811c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008120:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008122:	f7fd fced 	bl	8005b00 <HAL_GetTick>
 8008126:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008128:	e009      	b.n	800813e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800812a:	f7fd fce9 	bl	8005b00 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008138:	d901      	bls.n	800813e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e022      	b.n	8008184 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800813e:	4b14      	ldr	r3, [pc, #80]	; (8008190 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800814a:	d1ee      	bne.n	800812a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800814c:	4b10      	ldr	r3, [pc, #64]	; (8008190 <HAL_PWREx_EnableOverDrive+0x9c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a0f      	ldr	r2, [pc, #60]	; (8008190 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008156:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008158:	f7fd fcd2 	bl	8005b00 <HAL_GetTick>
 800815c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800815e:	e009      	b.n	8008174 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008160:	f7fd fcce 	bl	8005b00 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800816e:	d901      	bls.n	8008174 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e007      	b.n	8008184 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008174:	4b06      	ldr	r3, [pc, #24]	; (8008190 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008180:	d1ee      	bne.n	8008160 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	40023800 	.word	0x40023800
 8008190:	40007000 	.word	0x40007000

08008194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800819c:	2300      	movs	r3, #0
 800819e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e29b      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 8087 	beq.w	80082c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80081b8:	4b96      	ldr	r3, [pc, #600]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f003 030c 	and.w	r3, r3, #12
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d00c      	beq.n	80081de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081c4:	4b93      	ldr	r3, [pc, #588]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	f003 030c 	and.w	r3, r3, #12
 80081cc:	2b08      	cmp	r3, #8
 80081ce:	d112      	bne.n	80081f6 <HAL_RCC_OscConfig+0x62>
 80081d0:	4b90      	ldr	r3, [pc, #576]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081dc:	d10b      	bne.n	80081f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081de:	4b8d      	ldr	r3, [pc, #564]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d06c      	beq.n	80082c4 <HAL_RCC_OscConfig+0x130>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d168      	bne.n	80082c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e275      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081fe:	d106      	bne.n	800820e <HAL_RCC_OscConfig+0x7a>
 8008200:	4b84      	ldr	r3, [pc, #528]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a83      	ldr	r2, [pc, #524]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	e02e      	b.n	800826c <HAL_RCC_OscConfig+0xd8>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d10c      	bne.n	8008230 <HAL_RCC_OscConfig+0x9c>
 8008216:	4b7f      	ldr	r3, [pc, #508]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a7e      	ldr	r2, [pc, #504]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800821c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	4b7c      	ldr	r3, [pc, #496]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a7b      	ldr	r2, [pc, #492]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800822c:	6013      	str	r3, [r2, #0]
 800822e:	e01d      	b.n	800826c <HAL_RCC_OscConfig+0xd8>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008238:	d10c      	bne.n	8008254 <HAL_RCC_OscConfig+0xc0>
 800823a:	4b76      	ldr	r3, [pc, #472]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a75      	ldr	r2, [pc, #468]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	4b73      	ldr	r3, [pc, #460]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a72      	ldr	r2, [pc, #456]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800824c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008250:	6013      	str	r3, [r2, #0]
 8008252:	e00b      	b.n	800826c <HAL_RCC_OscConfig+0xd8>
 8008254:	4b6f      	ldr	r3, [pc, #444]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a6e      	ldr	r2, [pc, #440]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800825a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	4b6c      	ldr	r3, [pc, #432]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a6b      	ldr	r2, [pc, #428]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800826a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d013      	beq.n	800829c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008274:	f7fd fc44 	bl	8005b00 <HAL_GetTick>
 8008278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800827a:	e008      	b.n	800828e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800827c:	f7fd fc40 	bl	8005b00 <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	2b64      	cmp	r3, #100	; 0x64
 8008288:	d901      	bls.n	800828e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e229      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800828e:	4b61      	ldr	r3, [pc, #388]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d0f0      	beq.n	800827c <HAL_RCC_OscConfig+0xe8>
 800829a:	e014      	b.n	80082c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800829c:	f7fd fc30 	bl	8005b00 <HAL_GetTick>
 80082a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082a2:	e008      	b.n	80082b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082a4:	f7fd fc2c 	bl	8005b00 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b64      	cmp	r3, #100	; 0x64
 80082b0:	d901      	bls.n	80082b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e215      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80082b6:	4b57      	ldr	r3, [pc, #348]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1f0      	bne.n	80082a4 <HAL_RCC_OscConfig+0x110>
 80082c2:	e000      	b.n	80082c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d069      	beq.n	80083a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80082d2:	4b50      	ldr	r3, [pc, #320]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f003 030c 	and.w	r3, r3, #12
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00b      	beq.n	80082f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082de:	4b4d      	ldr	r3, [pc, #308]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f003 030c 	and.w	r3, r3, #12
 80082e6:	2b08      	cmp	r3, #8
 80082e8:	d11c      	bne.n	8008324 <HAL_RCC_OscConfig+0x190>
 80082ea:	4b4a      	ldr	r3, [pc, #296]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d116      	bne.n	8008324 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082f6:	4b47      	ldr	r3, [pc, #284]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d005      	beq.n	800830e <HAL_RCC_OscConfig+0x17a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d001      	beq.n	800830e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e1e9      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800830e:	4b41      	ldr	r3, [pc, #260]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	493d      	ldr	r1, [pc, #244]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800831e:	4313      	orrs	r3, r2
 8008320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008322:	e040      	b.n	80083a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d023      	beq.n	8008374 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800832c:	4b39      	ldr	r3, [pc, #228]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a38      	ldr	r2, [pc, #224]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008332:	f043 0301 	orr.w	r3, r3, #1
 8008336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008338:	f7fd fbe2 	bl	8005b00 <HAL_GetTick>
 800833c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800833e:	e008      	b.n	8008352 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008340:	f7fd fbde 	bl	8005b00 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d901      	bls.n	8008352 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e1c7      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008352:	4b30      	ldr	r3, [pc, #192]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0f0      	beq.n	8008340 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800835e:	4b2d      	ldr	r3, [pc, #180]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	00db      	lsls	r3, r3, #3
 800836c:	4929      	ldr	r1, [pc, #164]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800836e:	4313      	orrs	r3, r2
 8008370:	600b      	str	r3, [r1, #0]
 8008372:	e018      	b.n	80083a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008374:	4b27      	ldr	r3, [pc, #156]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a26      	ldr	r2, [pc, #152]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800837a:	f023 0301 	bic.w	r3, r3, #1
 800837e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008380:	f7fd fbbe 	bl	8005b00 <HAL_GetTick>
 8008384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008386:	e008      	b.n	800839a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008388:	f7fd fbba 	bl	8005b00 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b02      	cmp	r3, #2
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e1a3      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800839a:	4b1e      	ldr	r3, [pc, #120]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0302 	and.w	r3, r3, #2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1f0      	bne.n	8008388 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0308 	and.w	r3, r3, #8
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d038      	beq.n	8008424 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d019      	beq.n	80083ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80083ba:	4b16      	ldr	r3, [pc, #88]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80083bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083be:	4a15      	ldr	r2, [pc, #84]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80083c0:	f043 0301 	orr.w	r3, r3, #1
 80083c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083c6:	f7fd fb9b 	bl	8005b00 <HAL_GetTick>
 80083ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083cc:	e008      	b.n	80083e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083ce:	f7fd fb97 	bl	8005b00 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d901      	bls.n	80083e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e180      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083e0:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80083e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d0f0      	beq.n	80083ce <HAL_RCC_OscConfig+0x23a>
 80083ec:	e01a      	b.n	8008424 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083ee:	4b09      	ldr	r3, [pc, #36]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80083f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083f2:	4a08      	ldr	r2, [pc, #32]	; (8008414 <HAL_RCC_OscConfig+0x280>)
 80083f4:	f023 0301 	bic.w	r3, r3, #1
 80083f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083fa:	f7fd fb81 	bl	8005b00 <HAL_GetTick>
 80083fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008400:	e00a      	b.n	8008418 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008402:	f7fd fb7d 	bl	8005b00 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	2b02      	cmp	r3, #2
 800840e:	d903      	bls.n	8008418 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e166      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
 8008414:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008418:	4b92      	ldr	r3, [pc, #584]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 800841a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1ee      	bne.n	8008402 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 80a4 	beq.w	800857a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008432:	4b8c      	ldr	r3, [pc, #560]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10d      	bne.n	800845a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800843e:	4b89      	ldr	r3, [pc, #548]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008442:	4a88      	ldr	r2, [pc, #544]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008448:	6413      	str	r3, [r2, #64]	; 0x40
 800844a:	4b86      	ldr	r3, [pc, #536]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008452:	60bb      	str	r3, [r7, #8]
 8008454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008456:	2301      	movs	r3, #1
 8008458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800845a:	4b83      	ldr	r3, [pc, #524]	; (8008668 <HAL_RCC_OscConfig+0x4d4>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008462:	2b00      	cmp	r3, #0
 8008464:	d118      	bne.n	8008498 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008466:	4b80      	ldr	r3, [pc, #512]	; (8008668 <HAL_RCC_OscConfig+0x4d4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a7f      	ldr	r2, [pc, #508]	; (8008668 <HAL_RCC_OscConfig+0x4d4>)
 800846c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008472:	f7fd fb45 	bl	8005b00 <HAL_GetTick>
 8008476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008478:	e008      	b.n	800848c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800847a:	f7fd fb41 	bl	8005b00 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b64      	cmp	r3, #100	; 0x64
 8008486:	d901      	bls.n	800848c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e12a      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800848c:	4b76      	ldr	r3, [pc, #472]	; (8008668 <HAL_RCC_OscConfig+0x4d4>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0f0      	beq.n	800847a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d106      	bne.n	80084ae <HAL_RCC_OscConfig+0x31a>
 80084a0:	4b70      	ldr	r3, [pc, #448]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80084a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a4:	4a6f      	ldr	r2, [pc, #444]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80084a6:	f043 0301 	orr.w	r3, r3, #1
 80084aa:	6713      	str	r3, [r2, #112]	; 0x70
 80084ac:	e02d      	b.n	800850a <HAL_RCC_OscConfig+0x376>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10c      	bne.n	80084d0 <HAL_RCC_OscConfig+0x33c>
 80084b6:	4b6b      	ldr	r3, [pc, #428]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80084b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ba:	4a6a      	ldr	r2, [pc, #424]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80084bc:	f023 0301 	bic.w	r3, r3, #1
 80084c0:	6713      	str	r3, [r2, #112]	; 0x70
 80084c2:	4b68      	ldr	r3, [pc, #416]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80084c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c6:	4a67      	ldr	r2, [pc, #412]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80084c8:	f023 0304 	bic.w	r3, r3, #4
 80084cc:	6713      	str	r3, [r2, #112]	; 0x70
 80084ce:	e01c      	b.n	800850a <HAL_RCC_OscConfig+0x376>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	2b05      	cmp	r3, #5
 80084d6:	d10c      	bne.n	80084f2 <HAL_RCC_OscConfig+0x35e>
 80084d8:	4b62      	ldr	r3, [pc, #392]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80084da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084dc:	4a61      	ldr	r2, [pc, #388]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80084de:	f043 0304 	orr.w	r3, r3, #4
 80084e2:	6713      	str	r3, [r2, #112]	; 0x70
 80084e4:	4b5f      	ldr	r3, [pc, #380]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80084e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e8:	4a5e      	ldr	r2, [pc, #376]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80084ea:	f043 0301 	orr.w	r3, r3, #1
 80084ee:	6713      	str	r3, [r2, #112]	; 0x70
 80084f0:	e00b      	b.n	800850a <HAL_RCC_OscConfig+0x376>
 80084f2:	4b5c      	ldr	r3, [pc, #368]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80084f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f6:	4a5b      	ldr	r2, [pc, #364]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80084f8:	f023 0301 	bic.w	r3, r3, #1
 80084fc:	6713      	str	r3, [r2, #112]	; 0x70
 80084fe:	4b59      	ldr	r3, [pc, #356]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008502:	4a58      	ldr	r2, [pc, #352]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008504:	f023 0304 	bic.w	r3, r3, #4
 8008508:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d015      	beq.n	800853e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008512:	f7fd faf5 	bl	8005b00 <HAL_GetTick>
 8008516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008518:	e00a      	b.n	8008530 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800851a:	f7fd faf1 	bl	8005b00 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	f241 3288 	movw	r2, #5000	; 0x1388
 8008528:	4293      	cmp	r3, r2
 800852a:	d901      	bls.n	8008530 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e0d8      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008530:	4b4c      	ldr	r3, [pc, #304]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008534:	f003 0302 	and.w	r3, r3, #2
 8008538:	2b00      	cmp	r3, #0
 800853a:	d0ee      	beq.n	800851a <HAL_RCC_OscConfig+0x386>
 800853c:	e014      	b.n	8008568 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800853e:	f7fd fadf 	bl	8005b00 <HAL_GetTick>
 8008542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008544:	e00a      	b.n	800855c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008546:	f7fd fadb 	bl	8005b00 <HAL_GetTick>
 800854a:	4602      	mov	r2, r0
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	f241 3288 	movw	r2, #5000	; 0x1388
 8008554:	4293      	cmp	r3, r2
 8008556:	d901      	bls.n	800855c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e0c2      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800855c:	4b41      	ldr	r3, [pc, #260]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 800855e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1ee      	bne.n	8008546 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008568:	7dfb      	ldrb	r3, [r7, #23]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d105      	bne.n	800857a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800856e:	4b3d      	ldr	r3, [pc, #244]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	4a3c      	ldr	r2, [pc, #240]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008578:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 80ae 	beq.w	80086e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008584:	4b37      	ldr	r3, [pc, #220]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f003 030c 	and.w	r3, r3, #12
 800858c:	2b08      	cmp	r3, #8
 800858e:	d06d      	beq.n	800866c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	2b02      	cmp	r3, #2
 8008596:	d14b      	bne.n	8008630 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008598:	4b32      	ldr	r3, [pc, #200]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a31      	ldr	r2, [pc, #196]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 800859e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a4:	f7fd faac 	bl	8005b00 <HAL_GetTick>
 80085a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085aa:	e008      	b.n	80085be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085ac:	f7fd faa8 	bl	8005b00 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d901      	bls.n	80085be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e091      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085be:	4b29      	ldr	r3, [pc, #164]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1f0      	bne.n	80085ac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	69da      	ldr	r2, [r3, #28]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	431a      	orrs	r2, r3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	019b      	lsls	r3, r3, #6
 80085da:	431a      	orrs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e0:	085b      	lsrs	r3, r3, #1
 80085e2:	3b01      	subs	r3, #1
 80085e4:	041b      	lsls	r3, r3, #16
 80085e6:	431a      	orrs	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	061b      	lsls	r3, r3, #24
 80085ee:	431a      	orrs	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f4:	071b      	lsls	r3, r3, #28
 80085f6:	491b      	ldr	r1, [pc, #108]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085fc:	4b19      	ldr	r3, [pc, #100]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a18      	ldr	r2, [pc, #96]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008608:	f7fd fa7a 	bl	8005b00 <HAL_GetTick>
 800860c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800860e:	e008      	b.n	8008622 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008610:	f7fd fa76 	bl	8005b00 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	2b02      	cmp	r3, #2
 800861c:	d901      	bls.n	8008622 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e05f      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008622:	4b10      	ldr	r3, [pc, #64]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0f0      	beq.n	8008610 <HAL_RCC_OscConfig+0x47c>
 800862e:	e057      	b.n	80086e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008630:	4b0c      	ldr	r3, [pc, #48]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a0b      	ldr	r2, [pc, #44]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800863a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800863c:	f7fd fa60 	bl	8005b00 <HAL_GetTick>
 8008640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008642:	e008      	b.n	8008656 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008644:	f7fd fa5c 	bl	8005b00 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	2b02      	cmp	r3, #2
 8008650:	d901      	bls.n	8008656 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e045      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008656:	4b03      	ldr	r3, [pc, #12]	; (8008664 <HAL_RCC_OscConfig+0x4d0>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1f0      	bne.n	8008644 <HAL_RCC_OscConfig+0x4b0>
 8008662:	e03d      	b.n	80086e0 <HAL_RCC_OscConfig+0x54c>
 8008664:	40023800 	.word	0x40023800
 8008668:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800866c:	4b1f      	ldr	r3, [pc, #124]	; (80086ec <HAL_RCC_OscConfig+0x558>)
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d030      	beq.n	80086dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008684:	429a      	cmp	r2, r3
 8008686:	d129      	bne.n	80086dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008692:	429a      	cmp	r2, r3
 8008694:	d122      	bne.n	80086dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800869c:	4013      	ands	r3, r2
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d119      	bne.n	80086dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b2:	085b      	lsrs	r3, r3, #1
 80086b4:	3b01      	subs	r3, #1
 80086b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d10f      	bne.n	80086dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d107      	bne.n	80086dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086d8:	429a      	cmp	r2, r3
 80086da:	d001      	beq.n	80086e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e000      	b.n	80086e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	40023800 	.word	0x40023800

080086f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e0d0      	b.n	80088aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008708:	4b6a      	ldr	r3, [pc, #424]	; (80088b4 <HAL_RCC_ClockConfig+0x1c4>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 030f 	and.w	r3, r3, #15
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	429a      	cmp	r2, r3
 8008714:	d910      	bls.n	8008738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008716:	4b67      	ldr	r3, [pc, #412]	; (80088b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f023 020f 	bic.w	r2, r3, #15
 800871e:	4965      	ldr	r1, [pc, #404]	; (80088b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	4313      	orrs	r3, r2
 8008724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008726:	4b63      	ldr	r3, [pc, #396]	; (80088b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 030f 	and.w	r3, r3, #15
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	429a      	cmp	r2, r3
 8008732:	d001      	beq.n	8008738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e0b8      	b.n	80088aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 0302 	and.w	r3, r3, #2
 8008740:	2b00      	cmp	r3, #0
 8008742:	d020      	beq.n	8008786 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0304 	and.w	r3, r3, #4
 800874c:	2b00      	cmp	r3, #0
 800874e:	d005      	beq.n	800875c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008750:	4b59      	ldr	r3, [pc, #356]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	4a58      	ldr	r2, [pc, #352]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800875a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0308 	and.w	r3, r3, #8
 8008764:	2b00      	cmp	r3, #0
 8008766:	d005      	beq.n	8008774 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008768:	4b53      	ldr	r3, [pc, #332]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	4a52      	ldr	r2, [pc, #328]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 800876e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008772:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008774:	4b50      	ldr	r3, [pc, #320]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	494d      	ldr	r1, [pc, #308]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008782:	4313      	orrs	r3, r2
 8008784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d040      	beq.n	8008814 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d107      	bne.n	80087aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800879a:	4b47      	ldr	r3, [pc, #284]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d115      	bne.n	80087d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e07f      	b.n	80088aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d107      	bne.n	80087c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087b2:	4b41      	ldr	r3, [pc, #260]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d109      	bne.n	80087d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e073      	b.n	80088aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087c2:	4b3d      	ldr	r3, [pc, #244]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e06b      	b.n	80088aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087d2:	4b39      	ldr	r3, [pc, #228]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f023 0203 	bic.w	r2, r3, #3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	4936      	ldr	r1, [pc, #216]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087e4:	f7fd f98c 	bl	8005b00 <HAL_GetTick>
 80087e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ea:	e00a      	b.n	8008802 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087ec:	f7fd f988 	bl	8005b00 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e053      	b.n	80088aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008802:	4b2d      	ldr	r3, [pc, #180]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f003 020c 	and.w	r2, r3, #12
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	429a      	cmp	r2, r3
 8008812:	d1eb      	bne.n	80087ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008814:	4b27      	ldr	r3, [pc, #156]	; (80088b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 030f 	and.w	r3, r3, #15
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	429a      	cmp	r2, r3
 8008820:	d210      	bcs.n	8008844 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008822:	4b24      	ldr	r3, [pc, #144]	; (80088b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f023 020f 	bic.w	r2, r3, #15
 800882a:	4922      	ldr	r1, [pc, #136]	; (80088b4 <HAL_RCC_ClockConfig+0x1c4>)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	4313      	orrs	r3, r2
 8008830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008832:	4b20      	ldr	r3, [pc, #128]	; (80088b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 030f 	and.w	r3, r3, #15
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	429a      	cmp	r2, r3
 800883e:	d001      	beq.n	8008844 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e032      	b.n	80088aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d008      	beq.n	8008862 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008850:	4b19      	ldr	r3, [pc, #100]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	4916      	ldr	r1, [pc, #88]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 800885e:	4313      	orrs	r3, r2
 8008860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0308 	and.w	r3, r3, #8
 800886a:	2b00      	cmp	r3, #0
 800886c:	d009      	beq.n	8008882 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800886e:	4b12      	ldr	r3, [pc, #72]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	490e      	ldr	r1, [pc, #56]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 800887e:	4313      	orrs	r3, r2
 8008880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008882:	f000 f821 	bl	80088c8 <HAL_RCC_GetSysClockFreq>
 8008886:	4602      	mov	r2, r0
 8008888:	4b0b      	ldr	r3, [pc, #44]	; (80088b8 <HAL_RCC_ClockConfig+0x1c8>)
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	091b      	lsrs	r3, r3, #4
 800888e:	f003 030f 	and.w	r3, r3, #15
 8008892:	490a      	ldr	r1, [pc, #40]	; (80088bc <HAL_RCC_ClockConfig+0x1cc>)
 8008894:	5ccb      	ldrb	r3, [r1, r3]
 8008896:	fa22 f303 	lsr.w	r3, r2, r3
 800889a:	4a09      	ldr	r2, [pc, #36]	; (80088c0 <HAL_RCC_ClockConfig+0x1d0>)
 800889c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800889e:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <HAL_RCC_ClockConfig+0x1d4>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fd f8e8 	bl	8005a78 <HAL_InitTick>

  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	40023c00 	.word	0x40023c00
 80088b8:	40023800 	.word	0x40023800
 80088bc:	0800d904 	.word	0x0800d904
 80088c0:	2000040c 	.word	0x2000040c
 80088c4:	200004e4 	.word	0x200004e4

080088c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80088cc:	b084      	sub	sp, #16
 80088ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	607b      	str	r3, [r7, #4]
 80088d4:	2300      	movs	r3, #0
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	2300      	movs	r3, #0
 80088da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80088dc:	2300      	movs	r3, #0
 80088de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088e0:	4b67      	ldr	r3, [pc, #412]	; (8008a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f003 030c 	and.w	r3, r3, #12
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	d00d      	beq.n	8008908 <HAL_RCC_GetSysClockFreq+0x40>
 80088ec:	2b08      	cmp	r3, #8
 80088ee:	f200 80bd 	bhi.w	8008a6c <HAL_RCC_GetSysClockFreq+0x1a4>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <HAL_RCC_GetSysClockFreq+0x34>
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	d003      	beq.n	8008902 <HAL_RCC_GetSysClockFreq+0x3a>
 80088fa:	e0b7      	b.n	8008a6c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80088fc:	4b61      	ldr	r3, [pc, #388]	; (8008a84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80088fe:	60bb      	str	r3, [r7, #8]
      break;
 8008900:	e0b7      	b.n	8008a72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008902:	4b61      	ldr	r3, [pc, #388]	; (8008a88 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008904:	60bb      	str	r3, [r7, #8]
      break;
 8008906:	e0b4      	b.n	8008a72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008908:	4b5d      	ldr	r3, [pc, #372]	; (8008a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008910:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008912:	4b5b      	ldr	r3, [pc, #364]	; (8008a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d04d      	beq.n	80089ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800891e:	4b58      	ldr	r3, [pc, #352]	; (8008a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	099b      	lsrs	r3, r3, #6
 8008924:	461a      	mov	r2, r3
 8008926:	f04f 0300 	mov.w	r3, #0
 800892a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800892e:	f04f 0100 	mov.w	r1, #0
 8008932:	ea02 0800 	and.w	r8, r2, r0
 8008936:	ea03 0901 	and.w	r9, r3, r1
 800893a:	4640      	mov	r0, r8
 800893c:	4649      	mov	r1, r9
 800893e:	f04f 0200 	mov.w	r2, #0
 8008942:	f04f 0300 	mov.w	r3, #0
 8008946:	014b      	lsls	r3, r1, #5
 8008948:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800894c:	0142      	lsls	r2, r0, #5
 800894e:	4610      	mov	r0, r2
 8008950:	4619      	mov	r1, r3
 8008952:	ebb0 0008 	subs.w	r0, r0, r8
 8008956:	eb61 0109 	sbc.w	r1, r1, r9
 800895a:	f04f 0200 	mov.w	r2, #0
 800895e:	f04f 0300 	mov.w	r3, #0
 8008962:	018b      	lsls	r3, r1, #6
 8008964:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008968:	0182      	lsls	r2, r0, #6
 800896a:	1a12      	subs	r2, r2, r0
 800896c:	eb63 0301 	sbc.w	r3, r3, r1
 8008970:	f04f 0000 	mov.w	r0, #0
 8008974:	f04f 0100 	mov.w	r1, #0
 8008978:	00d9      	lsls	r1, r3, #3
 800897a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800897e:	00d0      	lsls	r0, r2, #3
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	eb12 0208 	adds.w	r2, r2, r8
 8008988:	eb43 0309 	adc.w	r3, r3, r9
 800898c:	f04f 0000 	mov.w	r0, #0
 8008990:	f04f 0100 	mov.w	r1, #0
 8008994:	0259      	lsls	r1, r3, #9
 8008996:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800899a:	0250      	lsls	r0, r2, #9
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	4610      	mov	r0, r2
 80089a2:	4619      	mov	r1, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	461a      	mov	r2, r3
 80089a8:	f04f 0300 	mov.w	r3, #0
 80089ac:	f7f7 fc98 	bl	80002e0 <__aeabi_uldivmod>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4613      	mov	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	e04a      	b.n	8008a50 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089ba:	4b31      	ldr	r3, [pc, #196]	; (8008a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	099b      	lsrs	r3, r3, #6
 80089c0:	461a      	mov	r2, r3
 80089c2:	f04f 0300 	mov.w	r3, #0
 80089c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80089ca:	f04f 0100 	mov.w	r1, #0
 80089ce:	ea02 0400 	and.w	r4, r2, r0
 80089d2:	ea03 0501 	and.w	r5, r3, r1
 80089d6:	4620      	mov	r0, r4
 80089d8:	4629      	mov	r1, r5
 80089da:	f04f 0200 	mov.w	r2, #0
 80089de:	f04f 0300 	mov.w	r3, #0
 80089e2:	014b      	lsls	r3, r1, #5
 80089e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80089e8:	0142      	lsls	r2, r0, #5
 80089ea:	4610      	mov	r0, r2
 80089ec:	4619      	mov	r1, r3
 80089ee:	1b00      	subs	r0, r0, r4
 80089f0:	eb61 0105 	sbc.w	r1, r1, r5
 80089f4:	f04f 0200 	mov.w	r2, #0
 80089f8:	f04f 0300 	mov.w	r3, #0
 80089fc:	018b      	lsls	r3, r1, #6
 80089fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008a02:	0182      	lsls	r2, r0, #6
 8008a04:	1a12      	subs	r2, r2, r0
 8008a06:	eb63 0301 	sbc.w	r3, r3, r1
 8008a0a:	f04f 0000 	mov.w	r0, #0
 8008a0e:	f04f 0100 	mov.w	r1, #0
 8008a12:	00d9      	lsls	r1, r3, #3
 8008a14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a18:	00d0      	lsls	r0, r2, #3
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	1912      	adds	r2, r2, r4
 8008a20:	eb45 0303 	adc.w	r3, r5, r3
 8008a24:	f04f 0000 	mov.w	r0, #0
 8008a28:	f04f 0100 	mov.w	r1, #0
 8008a2c:	0299      	lsls	r1, r3, #10
 8008a2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008a32:	0290      	lsls	r0, r2, #10
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f04f 0300 	mov.w	r3, #0
 8008a44:	f7f7 fc4c 	bl	80002e0 <__aeabi_uldivmod>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008a50:	4b0b      	ldr	r3, [pc, #44]	; (8008a80 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	0c1b      	lsrs	r3, r3, #16
 8008a56:	f003 0303 	and.w	r3, r3, #3
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a68:	60bb      	str	r3, [r7, #8]
      break;
 8008a6a:	e002      	b.n	8008a72 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a6c:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008a6e:	60bb      	str	r3, [r7, #8]
      break;
 8008a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a72:	68bb      	ldr	r3, [r7, #8]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008a7e:	bf00      	nop
 8008a80:	40023800 	.word	0x40023800
 8008a84:	00f42400 	.word	0x00f42400
 8008a88:	007a1200 	.word	0x007a1200

08008a8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a90:	4b03      	ldr	r3, [pc, #12]	; (8008aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a92:	681b      	ldr	r3, [r3, #0]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	2000040c 	.word	0x2000040c

08008aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008aa8:	f7ff fff0 	bl	8008a8c <HAL_RCC_GetHCLKFreq>
 8008aac:	4602      	mov	r2, r0
 8008aae:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	0a9b      	lsrs	r3, r3, #10
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	4903      	ldr	r1, [pc, #12]	; (8008ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008aba:	5ccb      	ldrb	r3, [r1, r3]
 8008abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	40023800 	.word	0x40023800
 8008ac8:	0800d914 	.word	0x0800d914

08008acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008ad0:	f7ff ffdc 	bl	8008a8c <HAL_RCC_GetHCLKFreq>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	4b05      	ldr	r3, [pc, #20]	; (8008aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	0b5b      	lsrs	r3, r3, #13
 8008adc:	f003 0307 	and.w	r3, r3, #7
 8008ae0:	4903      	ldr	r1, [pc, #12]	; (8008af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ae2:	5ccb      	ldrb	r3, [r1, r3]
 8008ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	40023800 	.word	0x40023800
 8008af0:	0800d914 	.word	0x0800d914

08008af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b088      	sub	sp, #32
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008afc:	2300      	movs	r3, #0
 8008afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008b00:	2300      	movs	r3, #0
 8008b02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0301 	and.w	r3, r3, #1
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d012      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008b1c:	4b69      	ldr	r3, [pc, #420]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	4a68      	ldr	r2, [pc, #416]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008b26:	6093      	str	r3, [r2, #8]
 8008b28:	4b66      	ldr	r3, [pc, #408]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b2a:	689a      	ldr	r2, [r3, #8]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b30:	4964      	ldr	r1, [pc, #400]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d017      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b4e:	4b5d      	ldr	r3, [pc, #372]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5c:	4959      	ldr	r1, [pc, #356]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b6c:	d101      	bne.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d017      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008b8a:	4b4e      	ldr	r3, [pc, #312]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b98:	494a      	ldr	r1, [pc, #296]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ba8:	d101      	bne.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008baa:	2301      	movs	r3, #1
 8008bac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0320 	and.w	r3, r3, #32
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 808b 	beq.w	8008cee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008bd8:	4b3a      	ldr	r3, [pc, #232]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bdc:	4a39      	ldr	r2, [pc, #228]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008be2:	6413      	str	r3, [r2, #64]	; 0x40
 8008be4:	4b37      	ldr	r3, [pc, #220]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bec:	60bb      	str	r3, [r7, #8]
 8008bee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008bf0:	4b35      	ldr	r3, [pc, #212]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a34      	ldr	r2, [pc, #208]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bfc:	f7fc ff80 	bl	8005b00 <HAL_GetTick>
 8008c00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008c02:	e008      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c04:	f7fc ff7c 	bl	8005b00 <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	2b64      	cmp	r3, #100	; 0x64
 8008c10:	d901      	bls.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e38f      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008c16:	4b2c      	ldr	r3, [pc, #176]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0f0      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008c22:	4b28      	ldr	r3, [pc, #160]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d035      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d02e      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c40:	4b20      	ldr	r3, [pc, #128]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008c4a:	4b1e      	ldr	r3, [pc, #120]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4e:	4a1d      	ldr	r2, [pc, #116]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008c56:	4b1b      	ldr	r3, [pc, #108]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5a:	4a1a      	ldr	r2, [pc, #104]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008c62:	4a18      	ldr	r2, [pc, #96]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008c68:	4b16      	ldr	r3, [pc, #88]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d114      	bne.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c74:	f7fc ff44 	bl	8005b00 <HAL_GetTick>
 8008c78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c7a:	e00a      	b.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c7c:	f7fc ff40 	bl	8005b00 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d901      	bls.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e351      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c92:	4b0c      	ldr	r3, [pc, #48]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0ee      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008caa:	d111      	bne.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008cac:	4b05      	ldr	r3, [pc, #20]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008cb8:	4b04      	ldr	r3, [pc, #16]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008cba:	400b      	ands	r3, r1
 8008cbc:	4901      	ldr	r1, [pc, #4]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	608b      	str	r3, [r1, #8]
 8008cc2:	e00b      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008cc4:	40023800 	.word	0x40023800
 8008cc8:	40007000 	.word	0x40007000
 8008ccc:	0ffffcff 	.word	0x0ffffcff
 8008cd0:	4bb3      	ldr	r3, [pc, #716]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	4ab2      	ldr	r2, [pc, #712]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008cd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008cda:	6093      	str	r3, [r2, #8]
 8008cdc:	4bb0      	ldr	r3, [pc, #704]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008cde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ce8:	49ad      	ldr	r1, [pc, #692]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0310 	and.w	r3, r3, #16
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d010      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008cfa:	4ba9      	ldr	r3, [pc, #676]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d00:	4aa7      	ldr	r2, [pc, #668]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008d0a:	4ba5      	ldr	r3, [pc, #660]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d14:	49a2      	ldr	r1, [pc, #648]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00a      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d28:	4b9d      	ldr	r3, [pc, #628]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d36:	499a      	ldr	r1, [pc, #616]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008d4a:	4b95      	ldr	r3, [pc, #596]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d58:	4991      	ldr	r1, [pc, #580]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00a      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008d6c:	4b8c      	ldr	r3, [pc, #560]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d7a:	4989      	ldr	r1, [pc, #548]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00a      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d8e:	4b84      	ldr	r3, [pc, #528]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9c:	4980      	ldr	r1, [pc, #512]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00a      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008db0:	4b7b      	ldr	r3, [pc, #492]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db6:	f023 0203 	bic.w	r2, r3, #3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dbe:	4978      	ldr	r1, [pc, #480]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00a      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008dd2:	4b73      	ldr	r3, [pc, #460]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dd8:	f023 020c 	bic.w	r2, r3, #12
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008de0:	496f      	ldr	r1, [pc, #444]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00a      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008df4:	4b6a      	ldr	r3, [pc, #424]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dfa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e02:	4967      	ldr	r1, [pc, #412]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00a      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008e16:	4b62      	ldr	r3, [pc, #392]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e24:	495e      	ldr	r1, [pc, #376]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00a      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008e38:	4b59      	ldr	r3, [pc, #356]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e46:	4956      	ldr	r1, [pc, #344]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00a      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008e5a:	4b51      	ldr	r3, [pc, #324]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e68:	494d      	ldr	r1, [pc, #308]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00a      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008e7c:	4b48      	ldr	r3, [pc, #288]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e8a:	4945      	ldr	r1, [pc, #276]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00a      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008e9e:	4b40      	ldr	r3, [pc, #256]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eac:	493c      	ldr	r1, [pc, #240]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00a      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ec0:	4b37      	ldr	r3, [pc, #220]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ec6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ece:	4934      	ldr	r1, [pc, #208]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d011      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008ee2:	4b2f      	ldr	r3, [pc, #188]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ef0:	492b      	ldr	r1, [pc, #172]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f00:	d101      	bne.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008f02:	2301      	movs	r3, #1
 8008f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0308 	and.w	r3, r3, #8
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008f12:	2301      	movs	r3, #1
 8008f14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00a      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f22:	4b1f      	ldr	r3, [pc, #124]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f30:	491b      	ldr	r1, [pc, #108]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f32:	4313      	orrs	r3, r2
 8008f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00b      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008f44:	4b16      	ldr	r3, [pc, #88]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f54:	4912      	ldr	r1, [pc, #72]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008f68:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f6e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f78:	4909      	ldr	r1, [pc, #36]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00f      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f8c:	4b04      	ldr	r3, [pc, #16]	; (8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f9c:	e002      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008f9e:	bf00      	nop
 8008fa0:	40023800 	.word	0x40023800
 8008fa4:	4986      	ldr	r1, [pc, #536]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00b      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008fb8:	4b81      	ldr	r3, [pc, #516]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fc8:	497d      	ldr	r1, [pc, #500]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d006      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 80d6 	beq.w	8009190 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008fe4:	4b76      	ldr	r3, [pc, #472]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a75      	ldr	r2, [pc, #468]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ff0:	f7fc fd86 	bl	8005b00 <HAL_GetTick>
 8008ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008ff6:	e008      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008ff8:	f7fc fd82 	bl	8005b00 <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b64      	cmp	r3, #100	; 0x64
 8009004:	d901      	bls.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e195      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800900a:	4b6d      	ldr	r3, [pc, #436]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1f0      	bne.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	d021      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009026:	2b00      	cmp	r3, #0
 8009028:	d11d      	bne.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800902a:	4b65      	ldr	r3, [pc, #404]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800902c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009030:	0c1b      	lsrs	r3, r3, #16
 8009032:	f003 0303 	and.w	r3, r3, #3
 8009036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009038:	4b61      	ldr	r3, [pc, #388]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800903a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800903e:	0e1b      	lsrs	r3, r3, #24
 8009040:	f003 030f 	and.w	r3, r3, #15
 8009044:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	019a      	lsls	r2, r3, #6
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	041b      	lsls	r3, r3, #16
 8009050:	431a      	orrs	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	061b      	lsls	r3, r3, #24
 8009056:	431a      	orrs	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	071b      	lsls	r3, r3, #28
 800905e:	4958      	ldr	r1, [pc, #352]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009060:	4313      	orrs	r3, r2
 8009062:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d004      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800907a:	d00a      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009084:	2b00      	cmp	r3, #0
 8009086:	d02e      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009090:	d129      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009092:	4b4b      	ldr	r3, [pc, #300]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009098:	0c1b      	lsrs	r3, r3, #16
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80090a0:	4b47      	ldr	r3, [pc, #284]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090a6:	0f1b      	lsrs	r3, r3, #28
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	019a      	lsls	r2, r3, #6
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	041b      	lsls	r3, r3, #16
 80090b8:	431a      	orrs	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	061b      	lsls	r3, r3, #24
 80090c0:	431a      	orrs	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	071b      	lsls	r3, r3, #28
 80090c6:	493e      	ldr	r1, [pc, #248]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090c8:	4313      	orrs	r3, r2
 80090ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80090ce:	4b3c      	ldr	r3, [pc, #240]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090d4:	f023 021f 	bic.w	r2, r3, #31
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	3b01      	subs	r3, #1
 80090de:	4938      	ldr	r1, [pc, #224]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090e0:	4313      	orrs	r3, r2
 80090e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d01d      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80090f2:	4b33      	ldr	r3, [pc, #204]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090f8:	0e1b      	lsrs	r3, r3, #24
 80090fa:	f003 030f 	and.w	r3, r3, #15
 80090fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009100:	4b2f      	ldr	r3, [pc, #188]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009106:	0f1b      	lsrs	r3, r3, #28
 8009108:	f003 0307 	and.w	r3, r3, #7
 800910c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	019a      	lsls	r2, r3, #6
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	041b      	lsls	r3, r3, #16
 800911a:	431a      	orrs	r2, r3
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	061b      	lsls	r3, r3, #24
 8009120:	431a      	orrs	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	071b      	lsls	r3, r3, #28
 8009126:	4926      	ldr	r1, [pc, #152]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009128:	4313      	orrs	r3, r2
 800912a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d011      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	019a      	lsls	r2, r3, #6
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	041b      	lsls	r3, r3, #16
 8009146:	431a      	orrs	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	061b      	lsls	r3, r3, #24
 800914e:	431a      	orrs	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	071b      	lsls	r3, r3, #28
 8009156:	491a      	ldr	r1, [pc, #104]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009158:	4313      	orrs	r3, r2
 800915a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800915e:	4b18      	ldr	r3, [pc, #96]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a17      	ldr	r2, [pc, #92]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800916a:	f7fc fcc9 	bl	8005b00 <HAL_GetTick>
 800916e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009170:	e008      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009172:	f7fc fcc5 	bl	8005b00 <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	2b64      	cmp	r3, #100	; 0x64
 800917e:	d901      	bls.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	e0d8      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009184:	4b0e      	ldr	r3, [pc, #56]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d0f0      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	2b01      	cmp	r3, #1
 8009194:	f040 80ce 	bne.w	8009334 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009198:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a08      	ldr	r2, [pc, #32]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800919e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091a4:	f7fc fcac 	bl	8005b00 <HAL_GetTick>
 80091a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80091aa:	e00b      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80091ac:	f7fc fca8 	bl	8005b00 <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	2b64      	cmp	r3, #100	; 0x64
 80091b8:	d904      	bls.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e0bb      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80091be:	bf00      	nop
 80091c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80091c4:	4b5e      	ldr	r3, [pc, #376]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091d0:	d0ec      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d003      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d009      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d02e      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d12a      	bne.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80091fa:	4b51      	ldr	r3, [pc, #324]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80091fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009200:	0c1b      	lsrs	r3, r3, #16
 8009202:	f003 0303 	and.w	r3, r3, #3
 8009206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009208:	4b4d      	ldr	r3, [pc, #308]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800920a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800920e:	0f1b      	lsrs	r3, r3, #28
 8009210:	f003 0307 	and.w	r3, r3, #7
 8009214:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	019a      	lsls	r2, r3, #6
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	041b      	lsls	r3, r3, #16
 8009220:	431a      	orrs	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	061b      	lsls	r3, r3, #24
 8009228:	431a      	orrs	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	071b      	lsls	r3, r3, #28
 800922e:	4944      	ldr	r1, [pc, #272]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009230:	4313      	orrs	r3, r2
 8009232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009236:	4b42      	ldr	r3, [pc, #264]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800923c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009244:	3b01      	subs	r3, #1
 8009246:	021b      	lsls	r3, r3, #8
 8009248:	493d      	ldr	r1, [pc, #244]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800924a:	4313      	orrs	r3, r2
 800924c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d022      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009264:	d11d      	bne.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009266:	4b36      	ldr	r3, [pc, #216]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800926c:	0e1b      	lsrs	r3, r3, #24
 800926e:	f003 030f 	and.w	r3, r3, #15
 8009272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009274:	4b32      	ldr	r3, [pc, #200]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800927a:	0f1b      	lsrs	r3, r3, #28
 800927c:	f003 0307 	and.w	r3, r3, #7
 8009280:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	019a      	lsls	r2, r3, #6
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	041b      	lsls	r3, r3, #16
 800928e:	431a      	orrs	r2, r3
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	061b      	lsls	r3, r3, #24
 8009294:	431a      	orrs	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	071b      	lsls	r3, r3, #28
 800929a:	4929      	ldr	r1, [pc, #164]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800929c:	4313      	orrs	r3, r2
 800929e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0308 	and.w	r3, r3, #8
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d028      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80092ae:	4b24      	ldr	r3, [pc, #144]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092b4:	0e1b      	lsrs	r3, r3, #24
 80092b6:	f003 030f 	and.w	r3, r3, #15
 80092ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80092bc:	4b20      	ldr	r3, [pc, #128]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c2:	0c1b      	lsrs	r3, r3, #16
 80092c4:	f003 0303 	and.w	r3, r3, #3
 80092c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	019a      	lsls	r2, r3, #6
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	041b      	lsls	r3, r3, #16
 80092d4:	431a      	orrs	r2, r3
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	061b      	lsls	r3, r3, #24
 80092da:	431a      	orrs	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	071b      	lsls	r3, r3, #28
 80092e2:	4917      	ldr	r1, [pc, #92]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80092ea:	4b15      	ldr	r3, [pc, #84]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f8:	4911      	ldr	r1, [pc, #68]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092fa:	4313      	orrs	r3, r2
 80092fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009300:	4b0f      	ldr	r3, [pc, #60]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a0e      	ldr	r2, [pc, #56]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800930a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800930c:	f7fc fbf8 	bl	8005b00 <HAL_GetTick>
 8009310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009312:	e008      	b.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009314:	f7fc fbf4 	bl	8005b00 <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	2b64      	cmp	r3, #100	; 0x64
 8009320:	d901      	bls.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e007      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009326:	4b06      	ldr	r3, [pc, #24]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800932e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009332:	d1ef      	bne.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3720      	adds	r7, #32
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	40023800 	.word	0x40023800

08009344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e049      	b.n	80093ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d106      	bne.n	8009370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7f8 f8ac 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2202      	movs	r2, #2
 8009374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3304      	adds	r3, #4
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f000 fa50 	bl	8009828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	f003 0302 	and.w	r3, r3, #2
 8009404:	2b02      	cmp	r3, #2
 8009406:	d122      	bne.n	800944e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	f003 0302 	and.w	r3, r3, #2
 8009412:	2b02      	cmp	r3, #2
 8009414:	d11b      	bne.n	800944e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f06f 0202 	mvn.w	r2, #2
 800941e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	f003 0303 	and.w	r3, r3, #3
 8009430:	2b00      	cmp	r3, #0
 8009432:	d003      	beq.n	800943c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f9d9 	bl	80097ec <HAL_TIM_IC_CaptureCallback>
 800943a:	e005      	b.n	8009448 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f9cb 	bl	80097d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f9dc 	bl	8009800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	f003 0304 	and.w	r3, r3, #4
 8009458:	2b04      	cmp	r3, #4
 800945a:	d122      	bne.n	80094a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	f003 0304 	and.w	r3, r3, #4
 8009466:	2b04      	cmp	r3, #4
 8009468:	d11b      	bne.n	80094a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f06f 0204 	mvn.w	r2, #4
 8009472:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2202      	movs	r2, #2
 8009478:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009484:	2b00      	cmp	r3, #0
 8009486:	d003      	beq.n	8009490 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f9af 	bl	80097ec <HAL_TIM_IC_CaptureCallback>
 800948e:	e005      	b.n	800949c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f9a1 	bl	80097d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f9b2 	bl	8009800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	f003 0308 	and.w	r3, r3, #8
 80094ac:	2b08      	cmp	r3, #8
 80094ae:	d122      	bne.n	80094f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	f003 0308 	and.w	r3, r3, #8
 80094ba:	2b08      	cmp	r3, #8
 80094bc:	d11b      	bne.n	80094f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f06f 0208 	mvn.w	r2, #8
 80094c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2204      	movs	r2, #4
 80094cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	69db      	ldr	r3, [r3, #28]
 80094d4:	f003 0303 	and.w	r3, r3, #3
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d003      	beq.n	80094e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f985 	bl	80097ec <HAL_TIM_IC_CaptureCallback>
 80094e2:	e005      	b.n	80094f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f977 	bl	80097d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f988 	bl	8009800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	f003 0310 	and.w	r3, r3, #16
 8009500:	2b10      	cmp	r3, #16
 8009502:	d122      	bne.n	800954a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	f003 0310 	and.w	r3, r3, #16
 800950e:	2b10      	cmp	r3, #16
 8009510:	d11b      	bne.n	800954a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f06f 0210 	mvn.w	r2, #16
 800951a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2208      	movs	r2, #8
 8009520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800952c:	2b00      	cmp	r3, #0
 800952e:	d003      	beq.n	8009538 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f95b 	bl	80097ec <HAL_TIM_IC_CaptureCallback>
 8009536:	e005      	b.n	8009544 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f94d 	bl	80097d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f95e 	bl	8009800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	2b01      	cmp	r3, #1
 8009556:	d10e      	bne.n	8009576 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	2b01      	cmp	r3, #1
 8009564:	d107      	bne.n	8009576 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f06f 0201 	mvn.w	r2, #1
 800956e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f927 	bl	80097c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009580:	2b80      	cmp	r3, #128	; 0x80
 8009582:	d10e      	bne.n	80095a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800958e:	2b80      	cmp	r3, #128	; 0x80
 8009590:	d107      	bne.n	80095a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800959a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fb15 	bl	8009bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095b0:	d10e      	bne.n	80095d0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095bc:	2b80      	cmp	r3, #128	; 0x80
 80095be:	d107      	bne.n	80095d0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80095c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fb08 	bl	8009be0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095da:	2b40      	cmp	r3, #64	; 0x40
 80095dc:	d10e      	bne.n	80095fc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e8:	2b40      	cmp	r3, #64	; 0x40
 80095ea:	d107      	bne.n	80095fc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f90c 	bl	8009814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	f003 0320 	and.w	r3, r3, #32
 8009606:	2b20      	cmp	r3, #32
 8009608:	d10e      	bne.n	8009628 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f003 0320 	and.w	r3, r3, #32
 8009614:	2b20      	cmp	r3, #32
 8009616:	d107      	bne.n	8009628 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f06f 0220 	mvn.w	r2, #32
 8009620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fac8 	bl	8009bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009644:	2b01      	cmp	r3, #1
 8009646:	d101      	bne.n	800964c <HAL_TIM_ConfigClockSource+0x1c>
 8009648:	2302      	movs	r3, #2
 800964a:	e0b4      	b.n	80097b6 <HAL_TIM_ConfigClockSource+0x186>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2202      	movs	r2, #2
 8009658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	4b56      	ldr	r3, [pc, #344]	; (80097c0 <HAL_TIM_ConfigClockSource+0x190>)
 8009668:	4013      	ands	r3, r2
 800966a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009684:	d03e      	beq.n	8009704 <HAL_TIM_ConfigClockSource+0xd4>
 8009686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800968a:	f200 8087 	bhi.w	800979c <HAL_TIM_ConfigClockSource+0x16c>
 800968e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009692:	f000 8086 	beq.w	80097a2 <HAL_TIM_ConfigClockSource+0x172>
 8009696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800969a:	d87f      	bhi.n	800979c <HAL_TIM_ConfigClockSource+0x16c>
 800969c:	2b70      	cmp	r3, #112	; 0x70
 800969e:	d01a      	beq.n	80096d6 <HAL_TIM_ConfigClockSource+0xa6>
 80096a0:	2b70      	cmp	r3, #112	; 0x70
 80096a2:	d87b      	bhi.n	800979c <HAL_TIM_ConfigClockSource+0x16c>
 80096a4:	2b60      	cmp	r3, #96	; 0x60
 80096a6:	d050      	beq.n	800974a <HAL_TIM_ConfigClockSource+0x11a>
 80096a8:	2b60      	cmp	r3, #96	; 0x60
 80096aa:	d877      	bhi.n	800979c <HAL_TIM_ConfigClockSource+0x16c>
 80096ac:	2b50      	cmp	r3, #80	; 0x50
 80096ae:	d03c      	beq.n	800972a <HAL_TIM_ConfigClockSource+0xfa>
 80096b0:	2b50      	cmp	r3, #80	; 0x50
 80096b2:	d873      	bhi.n	800979c <HAL_TIM_ConfigClockSource+0x16c>
 80096b4:	2b40      	cmp	r3, #64	; 0x40
 80096b6:	d058      	beq.n	800976a <HAL_TIM_ConfigClockSource+0x13a>
 80096b8:	2b40      	cmp	r3, #64	; 0x40
 80096ba:	d86f      	bhi.n	800979c <HAL_TIM_ConfigClockSource+0x16c>
 80096bc:	2b30      	cmp	r3, #48	; 0x30
 80096be:	d064      	beq.n	800978a <HAL_TIM_ConfigClockSource+0x15a>
 80096c0:	2b30      	cmp	r3, #48	; 0x30
 80096c2:	d86b      	bhi.n	800979c <HAL_TIM_ConfigClockSource+0x16c>
 80096c4:	2b20      	cmp	r3, #32
 80096c6:	d060      	beq.n	800978a <HAL_TIM_ConfigClockSource+0x15a>
 80096c8:	2b20      	cmp	r3, #32
 80096ca:	d867      	bhi.n	800979c <HAL_TIM_ConfigClockSource+0x16c>
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d05c      	beq.n	800978a <HAL_TIM_ConfigClockSource+0x15a>
 80096d0:	2b10      	cmp	r3, #16
 80096d2:	d05a      	beq.n	800978a <HAL_TIM_ConfigClockSource+0x15a>
 80096d4:	e062      	b.n	800979c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6818      	ldr	r0, [r3, #0]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	6899      	ldr	r1, [r3, #8]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	685a      	ldr	r2, [r3, #4]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	f000 f9b9 	bl	8009a5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80096f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	609a      	str	r2, [r3, #8]
      break;
 8009702:	e04f      	b.n	80097a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6818      	ldr	r0, [r3, #0]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	6899      	ldr	r1, [r3, #8]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	f000 f9a2 	bl	8009a5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689a      	ldr	r2, [r3, #8]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009726:	609a      	str	r2, [r3, #8]
      break;
 8009728:	e03c      	b.n	80097a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6818      	ldr	r0, [r3, #0]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	6859      	ldr	r1, [r3, #4]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	461a      	mov	r2, r3
 8009738:	f000 f916 	bl	8009968 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2150      	movs	r1, #80	; 0x50
 8009742:	4618      	mov	r0, r3
 8009744:	f000 f96f 	bl	8009a26 <TIM_ITRx_SetConfig>
      break;
 8009748:	e02c      	b.n	80097a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6818      	ldr	r0, [r3, #0]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	6859      	ldr	r1, [r3, #4]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	461a      	mov	r2, r3
 8009758:	f000 f935 	bl	80099c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2160      	movs	r1, #96	; 0x60
 8009762:	4618      	mov	r0, r3
 8009764:	f000 f95f 	bl	8009a26 <TIM_ITRx_SetConfig>
      break;
 8009768:	e01c      	b.n	80097a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6818      	ldr	r0, [r3, #0]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	6859      	ldr	r1, [r3, #4]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	461a      	mov	r2, r3
 8009778:	f000 f8f6 	bl	8009968 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2140      	movs	r1, #64	; 0x40
 8009782:	4618      	mov	r0, r3
 8009784:	f000 f94f 	bl	8009a26 <TIM_ITRx_SetConfig>
      break;
 8009788:	e00c      	b.n	80097a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4619      	mov	r1, r3
 8009794:	4610      	mov	r0, r2
 8009796:	f000 f946 	bl	8009a26 <TIM_ITRx_SetConfig>
      break;
 800979a:	e003      	b.n	80097a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	73fb      	strb	r3, [r7, #15]
      break;
 80097a0:	e000      	b.n	80097a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	fffeff88 	.word	0xfffeff88

080097c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a40      	ldr	r2, [pc, #256]	; (800993c <TIM_Base_SetConfig+0x114>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d013      	beq.n	8009868 <TIM_Base_SetConfig+0x40>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009846:	d00f      	beq.n	8009868 <TIM_Base_SetConfig+0x40>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a3d      	ldr	r2, [pc, #244]	; (8009940 <TIM_Base_SetConfig+0x118>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d00b      	beq.n	8009868 <TIM_Base_SetConfig+0x40>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a3c      	ldr	r2, [pc, #240]	; (8009944 <TIM_Base_SetConfig+0x11c>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d007      	beq.n	8009868 <TIM_Base_SetConfig+0x40>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a3b      	ldr	r2, [pc, #236]	; (8009948 <TIM_Base_SetConfig+0x120>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d003      	beq.n	8009868 <TIM_Base_SetConfig+0x40>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a3a      	ldr	r2, [pc, #232]	; (800994c <TIM_Base_SetConfig+0x124>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d108      	bne.n	800987a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800986e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	4313      	orrs	r3, r2
 8009878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a2f      	ldr	r2, [pc, #188]	; (800993c <TIM_Base_SetConfig+0x114>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d02b      	beq.n	80098da <TIM_Base_SetConfig+0xb2>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009888:	d027      	beq.n	80098da <TIM_Base_SetConfig+0xb2>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a2c      	ldr	r2, [pc, #176]	; (8009940 <TIM_Base_SetConfig+0x118>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d023      	beq.n	80098da <TIM_Base_SetConfig+0xb2>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a2b      	ldr	r2, [pc, #172]	; (8009944 <TIM_Base_SetConfig+0x11c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d01f      	beq.n	80098da <TIM_Base_SetConfig+0xb2>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a2a      	ldr	r2, [pc, #168]	; (8009948 <TIM_Base_SetConfig+0x120>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d01b      	beq.n	80098da <TIM_Base_SetConfig+0xb2>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a29      	ldr	r2, [pc, #164]	; (800994c <TIM_Base_SetConfig+0x124>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d017      	beq.n	80098da <TIM_Base_SetConfig+0xb2>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a28      	ldr	r2, [pc, #160]	; (8009950 <TIM_Base_SetConfig+0x128>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d013      	beq.n	80098da <TIM_Base_SetConfig+0xb2>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a27      	ldr	r2, [pc, #156]	; (8009954 <TIM_Base_SetConfig+0x12c>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d00f      	beq.n	80098da <TIM_Base_SetConfig+0xb2>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a26      	ldr	r2, [pc, #152]	; (8009958 <TIM_Base_SetConfig+0x130>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d00b      	beq.n	80098da <TIM_Base_SetConfig+0xb2>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a25      	ldr	r2, [pc, #148]	; (800995c <TIM_Base_SetConfig+0x134>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d007      	beq.n	80098da <TIM_Base_SetConfig+0xb2>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a24      	ldr	r2, [pc, #144]	; (8009960 <TIM_Base_SetConfig+0x138>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d003      	beq.n	80098da <TIM_Base_SetConfig+0xb2>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a23      	ldr	r2, [pc, #140]	; (8009964 <TIM_Base_SetConfig+0x13c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d108      	bne.n	80098ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	689a      	ldr	r2, [r3, #8]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a0a      	ldr	r2, [pc, #40]	; (800993c <TIM_Base_SetConfig+0x114>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d003      	beq.n	8009920 <TIM_Base_SetConfig+0xf8>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a0c      	ldr	r2, [pc, #48]	; (800994c <TIM_Base_SetConfig+0x124>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d103      	bne.n	8009928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	691a      	ldr	r2, [r3, #16]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	615a      	str	r2, [r3, #20]
}
 800992e:	bf00      	nop
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	40010000 	.word	0x40010000
 8009940:	40000400 	.word	0x40000400
 8009944:	40000800 	.word	0x40000800
 8009948:	40000c00 	.word	0x40000c00
 800994c:	40010400 	.word	0x40010400
 8009950:	40014000 	.word	0x40014000
 8009954:	40014400 	.word	0x40014400
 8009958:	40014800 	.word	0x40014800
 800995c:	40001800 	.word	0x40001800
 8009960:	40001c00 	.word	0x40001c00
 8009964:	40002000 	.word	0x40002000

08009968 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6a1b      	ldr	r3, [r3, #32]
 8009978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	f023 0201 	bic.w	r2, r3, #1
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	011b      	lsls	r3, r3, #4
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	4313      	orrs	r3, r2
 800999c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f023 030a 	bic.w	r3, r3, #10
 80099a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	621a      	str	r2, [r3, #32]
}
 80099ba:	bf00      	nop
 80099bc:	371c      	adds	r7, #28
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099c6:	b480      	push	{r7}
 80099c8:	b087      	sub	sp, #28
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	60f8      	str	r0, [r7, #12]
 80099ce:	60b9      	str	r1, [r7, #8]
 80099d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	f023 0210 	bic.w	r2, r3, #16
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6a1b      	ldr	r3, [r3, #32]
 80099e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	031b      	lsls	r3, r3, #12
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	011b      	lsls	r3, r3, #4
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	621a      	str	r2, [r3, #32]
}
 8009a1a:	bf00      	nop
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a26:	b480      	push	{r7}
 8009a28:	b085      	sub	sp, #20
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	f043 0307 	orr.w	r3, r3, #7
 8009a48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	609a      	str	r2, [r3, #8]
}
 8009a50:	bf00      	nop
 8009a52:	3714      	adds	r7, #20
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b087      	sub	sp, #28
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
 8009a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	021a      	lsls	r2, r3, #8
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	431a      	orrs	r2, r3
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	697a      	ldr	r2, [r7, #20]
 8009a8e:	609a      	str	r2, [r3, #8]
}
 8009a90:	bf00      	nop
 8009a92:	371c      	adds	r7, #28
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b085      	sub	sp, #20
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d101      	bne.n	8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	e06d      	b.n	8009b90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a30      	ldr	r2, [pc, #192]	; (8009b9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d004      	beq.n	8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a2f      	ldr	r2, [pc, #188]	; (8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d108      	bne.n	8009afa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009aee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a20      	ldr	r2, [pc, #128]	; (8009b9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d022      	beq.n	8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b26:	d01d      	beq.n	8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a1d      	ldr	r2, [pc, #116]	; (8009ba4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d018      	beq.n	8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a1c      	ldr	r2, [pc, #112]	; (8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d013      	beq.n	8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a1a      	ldr	r2, [pc, #104]	; (8009bac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d00e      	beq.n	8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a15      	ldr	r2, [pc, #84]	; (8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d009      	beq.n	8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a16      	ldr	r2, [pc, #88]	; (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d004      	beq.n	8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a15      	ldr	r2, [pc, #84]	; (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d10c      	bne.n	8009b7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68ba      	ldr	r2, [r7, #8]
 8009b7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3714      	adds	r7, #20
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	40010000 	.word	0x40010000
 8009ba0:	40010400 	.word	0x40010400
 8009ba4:	40000400 	.word	0x40000400
 8009ba8:	40000800 	.word	0x40000800
 8009bac:	40000c00 	.word	0x40000c00
 8009bb0:	40014000 	.word	0x40014000
 8009bb4:	40001800 	.word	0x40001800

08009bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d101      	bne.n	8009c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e040      	b.n	8009c88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d106      	bne.n	8009c1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7f7 fcac 	bl	8001574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2224      	movs	r2, #36	; 0x24
 8009c20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 0201 	bic.w	r2, r2, #1
 8009c30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fb9a 	bl	800a36c <UART_SetConfig>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d101      	bne.n	8009c42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e022      	b.n	8009c88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d002      	beq.n	8009c50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fdf0 	bl	800a830 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	689a      	ldr	r2, [r3, #8]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f042 0201 	orr.w	r2, r2, #1
 8009c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fe77 	bl	800a974 <UART_CheckIdleState>
 8009c86:	4603      	mov	r3, r0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b08b      	sub	sp, #44	; 0x2c
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ca2:	2b20      	cmp	r3, #32
 8009ca4:	d156      	bne.n	8009d54 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <HAL_UART_Transmit_IT+0x22>
 8009cac:	88fb      	ldrh	r3, [r7, #6]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e04f      	b.n	8009d56 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d101      	bne.n	8009cc4 <HAL_UART_Transmit_IT+0x34>
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	e048      	b.n	8009d56 <HAL_UART_Transmit_IT+0xc6>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	88fa      	ldrh	r2, [r7, #6]
 8009cd6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	88fa      	ldrh	r2, [r7, #6]
 8009cde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2221      	movs	r2, #33	; 0x21
 8009cf4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cfe:	d107      	bne.n	8009d10 <HAL_UART_Transmit_IT+0x80>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d103      	bne.n	8009d10 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4a16      	ldr	r2, [pc, #88]	; (8009d64 <HAL_UART_Transmit_IT+0xd4>)
 8009d0c:	669a      	str	r2, [r3, #104]	; 0x68
 8009d0e:	e002      	b.n	8009d16 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4a15      	ldr	r2, [pc, #84]	; (8009d68 <HAL_UART_Transmit_IT+0xd8>)
 8009d14:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	e853 3f00 	ldrex	r3, [r3]
 8009d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	623b      	str	r3, [r7, #32]
 8009d3e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	69f9      	ldr	r1, [r7, #28]
 8009d42:	6a3a      	ldr	r2, [r7, #32]
 8009d44:	e841 2300 	strex	r3, r2, [r1]
 8009d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e6      	bne.n	8009d1e <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	e000      	b.n	8009d56 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8009d54:	2302      	movs	r3, #2
  }
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	372c      	adds	r7, #44	; 0x2c
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	0800ad37 	.word	0x0800ad37
 8009d68:	0800ac81 	.word	0x0800ac81

08009d6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b0ba      	sub	sp, #232	; 0xe8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009d96:	f640 030f 	movw	r3, #2063	; 0x80f
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009da0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d115      	bne.n	8009dd4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dac:	f003 0320 	and.w	r3, r3, #32
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00f      	beq.n	8009dd4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009db8:	f003 0320 	and.w	r3, r3, #32
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d009      	beq.n	8009dd4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 82a4 	beq.w	800a312 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	4798      	blx	r3
      }
      return;
 8009dd2:	e29e      	b.n	800a312 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009dd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 8117 	beq.w	800a00c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d106      	bne.n	8009df8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009dea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009dee:	4b85      	ldr	r3, [pc, #532]	; (800a004 <HAL_UART_IRQHandler+0x298>)
 8009df0:	4013      	ands	r3, r2
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 810a 	beq.w	800a00c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d011      	beq.n	8009e28 <HAL_UART_IRQHandler+0xbc>
 8009e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00b      	beq.n	8009e28 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2201      	movs	r2, #1
 8009e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e1e:	f043 0201 	orr.w	r2, r3, #1
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e2c:	f003 0302 	and.w	r3, r3, #2
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d011      	beq.n	8009e58 <HAL_UART_IRQHandler+0xec>
 8009e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e38:	f003 0301 	and.w	r3, r3, #1
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00b      	beq.n	8009e58 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2202      	movs	r2, #2
 8009e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e4e:	f043 0204 	orr.w	r2, r3, #4
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e5c:	f003 0304 	and.w	r3, r3, #4
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d011      	beq.n	8009e88 <HAL_UART_IRQHandler+0x11c>
 8009e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e68:	f003 0301 	and.w	r3, r3, #1
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00b      	beq.n	8009e88 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2204      	movs	r2, #4
 8009e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e7e:	f043 0202 	orr.w	r2, r3, #2
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e8c:	f003 0308 	and.w	r3, r3, #8
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d017      	beq.n	8009ec4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e98:	f003 0320 	and.w	r3, r3, #32
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d105      	bne.n	8009eac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009ea0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ea4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00b      	beq.n	8009ec4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2208      	movs	r2, #8
 8009eb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eba:	f043 0208 	orr.w	r2, r3, #8
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d012      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x18a>
 8009ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ed4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00c      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ee4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eec:	f043 0220 	orr.w	r2, r3, #32
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 820a 	beq.w	800a316 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f06:	f003 0320 	and.w	r3, r3, #32
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00d      	beq.n	8009f2a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f12:	f003 0320 	and.w	r3, r3, #32
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d007      	beq.n	8009f2a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d003      	beq.n	8009f2a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f3e:	2b40      	cmp	r3, #64	; 0x40
 8009f40:	d005      	beq.n	8009f4e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d04f      	beq.n	8009fee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fe1d 	bl	800ab8e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f5e:	2b40      	cmp	r3, #64	; 0x40
 8009f60:	d141      	bne.n	8009fe6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	3308      	adds	r3, #8
 8009f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f70:	e853 3f00 	ldrex	r3, [r3]
 8009f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	3308      	adds	r3, #8
 8009f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f9e:	e841 2300 	strex	r3, r2, [r1]
 8009fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1d9      	bne.n	8009f62 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d013      	beq.n	8009fde <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fba:	4a13      	ldr	r2, [pc, #76]	; (800a008 <HAL_UART_IRQHandler+0x29c>)
 8009fbc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fc f946 	bl	8006254 <HAL_DMA_Abort_IT>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d017      	beq.n	8009ffe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009fd8:	4610      	mov	r0, r2
 8009fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fdc:	e00f      	b.n	8009ffe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f9a4 	bl	800a32c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe4:	e00b      	b.n	8009ffe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f9a0 	bl	800a32c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fec:	e007      	b.n	8009ffe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f99c 	bl	800a32c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009ffc:	e18b      	b.n	800a316 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ffe:	bf00      	nop
    return;
 800a000:	e189      	b.n	800a316 <HAL_UART_IRQHandler+0x5aa>
 800a002:	bf00      	nop
 800a004:	04000120 	.word	0x04000120
 800a008:	0800ac55 	.word	0x0800ac55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a010:	2b01      	cmp	r3, #1
 800a012:	f040 8144 	bne.w	800a29e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a01a:	f003 0310 	and.w	r3, r3, #16
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 813d 	beq.w	800a29e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a028:	f003 0310 	and.w	r3, r3, #16
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 8136 	beq.w	800a29e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2210      	movs	r2, #16
 800a038:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a044:	2b40      	cmp	r3, #64	; 0x40
 800a046:	f040 80b2 	bne.w	800a1ae <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a056:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 815d 	beq.w	800a31a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a06a:	429a      	cmp	r2, r3
 800a06c:	f080 8155 	bcs.w	800a31a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a076:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a084:	f000 8085 	beq.w	800a192 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a094:	e853 3f00 	ldrex	r3, [r3]
 800a098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a09c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a0b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a0be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a0c2:	e841 2300 	strex	r3, r2, [r1]
 800a0c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a0ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1da      	bne.n	800a088 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	3308      	adds	r3, #8
 800a0d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0dc:	e853 3f00 	ldrex	r3, [r3]
 800a0e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0e4:	f023 0301 	bic.w	r3, r3, #1
 800a0e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	3308      	adds	r3, #8
 800a0f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a0f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a0fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a102:	e841 2300 	strex	r3, r2, [r1]
 800a106:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1e1      	bne.n	800a0d2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3308      	adds	r3, #8
 800a114:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a118:	e853 3f00 	ldrex	r3, [r3]
 800a11c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a11e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3308      	adds	r3, #8
 800a12e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a132:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a134:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a136:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a138:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a13a:	e841 2300 	strex	r3, r2, [r1]
 800a13e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1e3      	bne.n	800a10e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2220      	movs	r2, #32
 800a14a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a15a:	e853 3f00 	ldrex	r3, [r3]
 800a15e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a162:	f023 0310 	bic.w	r3, r3, #16
 800a166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	461a      	mov	r2, r3
 800a170:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a174:	65bb      	str	r3, [r7, #88]	; 0x58
 800a176:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a178:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a17a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a17c:	e841 2300 	strex	r3, r2, [r1]
 800a180:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1e4      	bne.n	800a152 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fb fff1 	bl	8006174 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f8ca 	bl	800a340 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1ac:	e0b5      	b.n	800a31a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	f000 80a7 	beq.w	800a31e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800a1d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f000 80a2 	beq.w	800a31e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e2:	e853 3f00 	ldrex	r3, [r3]
 800a1e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a1fc:	647b      	str	r3, [r7, #68]	; 0x44
 800a1fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a200:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a204:	e841 2300 	strex	r3, r2, [r1]
 800a208:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a20a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1e4      	bne.n	800a1da <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3308      	adds	r3, #8
 800a216:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	e853 3f00 	ldrex	r3, [r3]
 800a21e:	623b      	str	r3, [r7, #32]
   return(result);
 800a220:	6a3b      	ldr	r3, [r7, #32]
 800a222:	f023 0301 	bic.w	r3, r3, #1
 800a226:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	3308      	adds	r3, #8
 800a230:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a234:	633a      	str	r2, [r7, #48]	; 0x30
 800a236:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a23a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a23c:	e841 2300 	strex	r3, r2, [r1]
 800a240:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1e3      	bne.n	800a210 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2220      	movs	r2, #32
 800a24c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	e853 3f00 	ldrex	r3, [r3]
 800a266:	60fb      	str	r3, [r7, #12]
   return(result);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f023 0310 	bic.w	r3, r3, #16
 800a26e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	461a      	mov	r2, r3
 800a278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a27c:	61fb      	str	r3, [r7, #28]
 800a27e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a280:	69b9      	ldr	r1, [r7, #24]
 800a282:	69fa      	ldr	r2, [r7, #28]
 800a284:	e841 2300 	strex	r3, r2, [r1]
 800a288:	617b      	str	r3, [r7, #20]
   return(result);
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1e4      	bne.n	800a25a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a294:	4619      	mov	r1, r3
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f852 	bl	800a340 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a29c:	e03f      	b.n	800a31e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a29e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00e      	beq.n	800a2c8 <HAL_UART_IRQHandler+0x55c>
 800a2aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d008      	beq.n	800a2c8 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a2be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 f849 	bl	800a358 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a2c6:	e02d      	b.n	800a324 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a2c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00e      	beq.n	800a2f2 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d008      	beq.n	800a2f2 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d01c      	beq.n	800a322 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	4798      	blx	r3
    }
    return;
 800a2f0:	e017      	b.n	800a322 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a2f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d012      	beq.n	800a324 <HAL_UART_IRQHandler+0x5b8>
 800a2fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00c      	beq.n	800a324 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 fd73 	bl	800adf6 <UART_EndTransmit_IT>
    return;
 800a310:	e008      	b.n	800a324 <HAL_UART_IRQHandler+0x5b8>
      return;
 800a312:	bf00      	nop
 800a314:	e006      	b.n	800a324 <HAL_UART_IRQHandler+0x5b8>
    return;
 800a316:	bf00      	nop
 800a318:	e004      	b.n	800a324 <HAL_UART_IRQHandler+0x5b8>
      return;
 800a31a:	bf00      	nop
 800a31c:	e002      	b.n	800a324 <HAL_UART_IRQHandler+0x5b8>
      return;
 800a31e:	bf00      	nop
 800a320:	e000      	b.n	800a324 <HAL_UART_IRQHandler+0x5b8>
    return;
 800a322:	bf00      	nop
  }

}
 800a324:	37e8      	adds	r7, #232	; 0xe8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop

0800a32c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a334:	bf00      	nop
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	460b      	mov	r3, r1
 800a34a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a34c:	bf00      	nop
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a374:	2300      	movs	r3, #0
 800a376:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689a      	ldr	r2, [r3, #8]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	691b      	ldr	r3, [r3, #16]
 800a380:	431a      	orrs	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	431a      	orrs	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	69db      	ldr	r3, [r3, #28]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	4ba7      	ldr	r3, [pc, #668]	; (800a634 <UART_SetConfig+0x2c8>)
 800a398:	4013      	ands	r3, r2
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	6812      	ldr	r2, [r2, #0]
 800a39e:	6979      	ldr	r1, [r7, #20]
 800a3a0:	430b      	orrs	r3, r1
 800a3a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68da      	ldr	r2, [r3, #12]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	430a      	orrs	r2, r1
 800a3b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	697a      	ldr	r2, [r7, #20]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a95      	ldr	r2, [pc, #596]	; (800a638 <UART_SetConfig+0x2cc>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d120      	bne.n	800a42a <UART_SetConfig+0xbe>
 800a3e8:	4b94      	ldr	r3, [pc, #592]	; (800a63c <UART_SetConfig+0x2d0>)
 800a3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3ee:	f003 0303 	and.w	r3, r3, #3
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d816      	bhi.n	800a424 <UART_SetConfig+0xb8>
 800a3f6:	a201      	add	r2, pc, #4	; (adr r2, 800a3fc <UART_SetConfig+0x90>)
 800a3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fc:	0800a40d 	.word	0x0800a40d
 800a400:	0800a419 	.word	0x0800a419
 800a404:	0800a413 	.word	0x0800a413
 800a408:	0800a41f 	.word	0x0800a41f
 800a40c:	2301      	movs	r3, #1
 800a40e:	77fb      	strb	r3, [r7, #31]
 800a410:	e14f      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a412:	2302      	movs	r3, #2
 800a414:	77fb      	strb	r3, [r7, #31]
 800a416:	e14c      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a418:	2304      	movs	r3, #4
 800a41a:	77fb      	strb	r3, [r7, #31]
 800a41c:	e149      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a41e:	2308      	movs	r3, #8
 800a420:	77fb      	strb	r3, [r7, #31]
 800a422:	e146      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a424:	2310      	movs	r3, #16
 800a426:	77fb      	strb	r3, [r7, #31]
 800a428:	e143      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a84      	ldr	r2, [pc, #528]	; (800a640 <UART_SetConfig+0x2d4>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d132      	bne.n	800a49a <UART_SetConfig+0x12e>
 800a434:	4b81      	ldr	r3, [pc, #516]	; (800a63c <UART_SetConfig+0x2d0>)
 800a436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a43a:	f003 030c 	and.w	r3, r3, #12
 800a43e:	2b0c      	cmp	r3, #12
 800a440:	d828      	bhi.n	800a494 <UART_SetConfig+0x128>
 800a442:	a201      	add	r2, pc, #4	; (adr r2, 800a448 <UART_SetConfig+0xdc>)
 800a444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a448:	0800a47d 	.word	0x0800a47d
 800a44c:	0800a495 	.word	0x0800a495
 800a450:	0800a495 	.word	0x0800a495
 800a454:	0800a495 	.word	0x0800a495
 800a458:	0800a489 	.word	0x0800a489
 800a45c:	0800a495 	.word	0x0800a495
 800a460:	0800a495 	.word	0x0800a495
 800a464:	0800a495 	.word	0x0800a495
 800a468:	0800a483 	.word	0x0800a483
 800a46c:	0800a495 	.word	0x0800a495
 800a470:	0800a495 	.word	0x0800a495
 800a474:	0800a495 	.word	0x0800a495
 800a478:	0800a48f 	.word	0x0800a48f
 800a47c:	2300      	movs	r3, #0
 800a47e:	77fb      	strb	r3, [r7, #31]
 800a480:	e117      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a482:	2302      	movs	r3, #2
 800a484:	77fb      	strb	r3, [r7, #31]
 800a486:	e114      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a488:	2304      	movs	r3, #4
 800a48a:	77fb      	strb	r3, [r7, #31]
 800a48c:	e111      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a48e:	2308      	movs	r3, #8
 800a490:	77fb      	strb	r3, [r7, #31]
 800a492:	e10e      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a494:	2310      	movs	r3, #16
 800a496:	77fb      	strb	r3, [r7, #31]
 800a498:	e10b      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4a69      	ldr	r2, [pc, #420]	; (800a644 <UART_SetConfig+0x2d8>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d120      	bne.n	800a4e6 <UART_SetConfig+0x17a>
 800a4a4:	4b65      	ldr	r3, [pc, #404]	; (800a63c <UART_SetConfig+0x2d0>)
 800a4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a4ae:	2b30      	cmp	r3, #48	; 0x30
 800a4b0:	d013      	beq.n	800a4da <UART_SetConfig+0x16e>
 800a4b2:	2b30      	cmp	r3, #48	; 0x30
 800a4b4:	d814      	bhi.n	800a4e0 <UART_SetConfig+0x174>
 800a4b6:	2b20      	cmp	r3, #32
 800a4b8:	d009      	beq.n	800a4ce <UART_SetConfig+0x162>
 800a4ba:	2b20      	cmp	r3, #32
 800a4bc:	d810      	bhi.n	800a4e0 <UART_SetConfig+0x174>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d002      	beq.n	800a4c8 <UART_SetConfig+0x15c>
 800a4c2:	2b10      	cmp	r3, #16
 800a4c4:	d006      	beq.n	800a4d4 <UART_SetConfig+0x168>
 800a4c6:	e00b      	b.n	800a4e0 <UART_SetConfig+0x174>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	77fb      	strb	r3, [r7, #31]
 800a4cc:	e0f1      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	77fb      	strb	r3, [r7, #31]
 800a4d2:	e0ee      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a4d4:	2304      	movs	r3, #4
 800a4d6:	77fb      	strb	r3, [r7, #31]
 800a4d8:	e0eb      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a4da:	2308      	movs	r3, #8
 800a4dc:	77fb      	strb	r3, [r7, #31]
 800a4de:	e0e8      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a4e0:	2310      	movs	r3, #16
 800a4e2:	77fb      	strb	r3, [r7, #31]
 800a4e4:	e0e5      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a57      	ldr	r2, [pc, #348]	; (800a648 <UART_SetConfig+0x2dc>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d120      	bne.n	800a532 <UART_SetConfig+0x1c6>
 800a4f0:	4b52      	ldr	r3, [pc, #328]	; (800a63c <UART_SetConfig+0x2d0>)
 800a4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a4fa:	2bc0      	cmp	r3, #192	; 0xc0
 800a4fc:	d013      	beq.n	800a526 <UART_SetConfig+0x1ba>
 800a4fe:	2bc0      	cmp	r3, #192	; 0xc0
 800a500:	d814      	bhi.n	800a52c <UART_SetConfig+0x1c0>
 800a502:	2b80      	cmp	r3, #128	; 0x80
 800a504:	d009      	beq.n	800a51a <UART_SetConfig+0x1ae>
 800a506:	2b80      	cmp	r3, #128	; 0x80
 800a508:	d810      	bhi.n	800a52c <UART_SetConfig+0x1c0>
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d002      	beq.n	800a514 <UART_SetConfig+0x1a8>
 800a50e:	2b40      	cmp	r3, #64	; 0x40
 800a510:	d006      	beq.n	800a520 <UART_SetConfig+0x1b4>
 800a512:	e00b      	b.n	800a52c <UART_SetConfig+0x1c0>
 800a514:	2300      	movs	r3, #0
 800a516:	77fb      	strb	r3, [r7, #31]
 800a518:	e0cb      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a51a:	2302      	movs	r3, #2
 800a51c:	77fb      	strb	r3, [r7, #31]
 800a51e:	e0c8      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a520:	2304      	movs	r3, #4
 800a522:	77fb      	strb	r3, [r7, #31]
 800a524:	e0c5      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a526:	2308      	movs	r3, #8
 800a528:	77fb      	strb	r3, [r7, #31]
 800a52a:	e0c2      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a52c:	2310      	movs	r3, #16
 800a52e:	77fb      	strb	r3, [r7, #31]
 800a530:	e0bf      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a45      	ldr	r2, [pc, #276]	; (800a64c <UART_SetConfig+0x2e0>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d125      	bne.n	800a588 <UART_SetConfig+0x21c>
 800a53c:	4b3f      	ldr	r3, [pc, #252]	; (800a63c <UART_SetConfig+0x2d0>)
 800a53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a54a:	d017      	beq.n	800a57c <UART_SetConfig+0x210>
 800a54c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a550:	d817      	bhi.n	800a582 <UART_SetConfig+0x216>
 800a552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a556:	d00b      	beq.n	800a570 <UART_SetConfig+0x204>
 800a558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a55c:	d811      	bhi.n	800a582 <UART_SetConfig+0x216>
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <UART_SetConfig+0x1fe>
 800a562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a566:	d006      	beq.n	800a576 <UART_SetConfig+0x20a>
 800a568:	e00b      	b.n	800a582 <UART_SetConfig+0x216>
 800a56a:	2300      	movs	r3, #0
 800a56c:	77fb      	strb	r3, [r7, #31]
 800a56e:	e0a0      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a570:	2302      	movs	r3, #2
 800a572:	77fb      	strb	r3, [r7, #31]
 800a574:	e09d      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a576:	2304      	movs	r3, #4
 800a578:	77fb      	strb	r3, [r7, #31]
 800a57a:	e09a      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a57c:	2308      	movs	r3, #8
 800a57e:	77fb      	strb	r3, [r7, #31]
 800a580:	e097      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a582:	2310      	movs	r3, #16
 800a584:	77fb      	strb	r3, [r7, #31]
 800a586:	e094      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a30      	ldr	r2, [pc, #192]	; (800a650 <UART_SetConfig+0x2e4>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d125      	bne.n	800a5de <UART_SetConfig+0x272>
 800a592:	4b2a      	ldr	r3, [pc, #168]	; (800a63c <UART_SetConfig+0x2d0>)
 800a594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a598:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a59c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5a0:	d017      	beq.n	800a5d2 <UART_SetConfig+0x266>
 800a5a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5a6:	d817      	bhi.n	800a5d8 <UART_SetConfig+0x26c>
 800a5a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5ac:	d00b      	beq.n	800a5c6 <UART_SetConfig+0x25a>
 800a5ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5b2:	d811      	bhi.n	800a5d8 <UART_SetConfig+0x26c>
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d003      	beq.n	800a5c0 <UART_SetConfig+0x254>
 800a5b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5bc:	d006      	beq.n	800a5cc <UART_SetConfig+0x260>
 800a5be:	e00b      	b.n	800a5d8 <UART_SetConfig+0x26c>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	77fb      	strb	r3, [r7, #31]
 800a5c4:	e075      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	77fb      	strb	r3, [r7, #31]
 800a5ca:	e072      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a5cc:	2304      	movs	r3, #4
 800a5ce:	77fb      	strb	r3, [r7, #31]
 800a5d0:	e06f      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a5d2:	2308      	movs	r3, #8
 800a5d4:	77fb      	strb	r3, [r7, #31]
 800a5d6:	e06c      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a5d8:	2310      	movs	r3, #16
 800a5da:	77fb      	strb	r3, [r7, #31]
 800a5dc:	e069      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a1c      	ldr	r2, [pc, #112]	; (800a654 <UART_SetConfig+0x2e8>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d137      	bne.n	800a658 <UART_SetConfig+0x2ec>
 800a5e8:	4b14      	ldr	r3, [pc, #80]	; (800a63c <UART_SetConfig+0x2d0>)
 800a5ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a5f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5f6:	d017      	beq.n	800a628 <UART_SetConfig+0x2bc>
 800a5f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a5fc:	d817      	bhi.n	800a62e <UART_SetConfig+0x2c2>
 800a5fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a602:	d00b      	beq.n	800a61c <UART_SetConfig+0x2b0>
 800a604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a608:	d811      	bhi.n	800a62e <UART_SetConfig+0x2c2>
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d003      	beq.n	800a616 <UART_SetConfig+0x2aa>
 800a60e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a612:	d006      	beq.n	800a622 <UART_SetConfig+0x2b6>
 800a614:	e00b      	b.n	800a62e <UART_SetConfig+0x2c2>
 800a616:	2300      	movs	r3, #0
 800a618:	77fb      	strb	r3, [r7, #31]
 800a61a:	e04a      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a61c:	2302      	movs	r3, #2
 800a61e:	77fb      	strb	r3, [r7, #31]
 800a620:	e047      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a622:	2304      	movs	r3, #4
 800a624:	77fb      	strb	r3, [r7, #31]
 800a626:	e044      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a628:	2308      	movs	r3, #8
 800a62a:	77fb      	strb	r3, [r7, #31]
 800a62c:	e041      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a62e:	2310      	movs	r3, #16
 800a630:	77fb      	strb	r3, [r7, #31]
 800a632:	e03e      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a634:	efff69f3 	.word	0xefff69f3
 800a638:	40011000 	.word	0x40011000
 800a63c:	40023800 	.word	0x40023800
 800a640:	40004400 	.word	0x40004400
 800a644:	40004800 	.word	0x40004800
 800a648:	40004c00 	.word	0x40004c00
 800a64c:	40005000 	.word	0x40005000
 800a650:	40011400 	.word	0x40011400
 800a654:	40007800 	.word	0x40007800
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a71      	ldr	r2, [pc, #452]	; (800a824 <UART_SetConfig+0x4b8>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d125      	bne.n	800a6ae <UART_SetConfig+0x342>
 800a662:	4b71      	ldr	r3, [pc, #452]	; (800a828 <UART_SetConfig+0x4bc>)
 800a664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a66c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a670:	d017      	beq.n	800a6a2 <UART_SetConfig+0x336>
 800a672:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a676:	d817      	bhi.n	800a6a8 <UART_SetConfig+0x33c>
 800a678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a67c:	d00b      	beq.n	800a696 <UART_SetConfig+0x32a>
 800a67e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a682:	d811      	bhi.n	800a6a8 <UART_SetConfig+0x33c>
 800a684:	2b00      	cmp	r3, #0
 800a686:	d003      	beq.n	800a690 <UART_SetConfig+0x324>
 800a688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a68c:	d006      	beq.n	800a69c <UART_SetConfig+0x330>
 800a68e:	e00b      	b.n	800a6a8 <UART_SetConfig+0x33c>
 800a690:	2300      	movs	r3, #0
 800a692:	77fb      	strb	r3, [r7, #31]
 800a694:	e00d      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a696:	2302      	movs	r3, #2
 800a698:	77fb      	strb	r3, [r7, #31]
 800a69a:	e00a      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a69c:	2304      	movs	r3, #4
 800a69e:	77fb      	strb	r3, [r7, #31]
 800a6a0:	e007      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a6a2:	2308      	movs	r3, #8
 800a6a4:	77fb      	strb	r3, [r7, #31]
 800a6a6:	e004      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a6a8:	2310      	movs	r3, #16
 800a6aa:	77fb      	strb	r3, [r7, #31]
 800a6ac:	e001      	b.n	800a6b2 <UART_SetConfig+0x346>
 800a6ae:	2310      	movs	r3, #16
 800a6b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6ba:	d15a      	bne.n	800a772 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800a6bc:	7ffb      	ldrb	r3, [r7, #31]
 800a6be:	2b08      	cmp	r3, #8
 800a6c0:	d827      	bhi.n	800a712 <UART_SetConfig+0x3a6>
 800a6c2:	a201      	add	r2, pc, #4	; (adr r2, 800a6c8 <UART_SetConfig+0x35c>)
 800a6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c8:	0800a6ed 	.word	0x0800a6ed
 800a6cc:	0800a6f5 	.word	0x0800a6f5
 800a6d0:	0800a6fd 	.word	0x0800a6fd
 800a6d4:	0800a713 	.word	0x0800a713
 800a6d8:	0800a703 	.word	0x0800a703
 800a6dc:	0800a713 	.word	0x0800a713
 800a6e0:	0800a713 	.word	0x0800a713
 800a6e4:	0800a713 	.word	0x0800a713
 800a6e8:	0800a70b 	.word	0x0800a70b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6ec:	f7fe f9da 	bl	8008aa4 <HAL_RCC_GetPCLK1Freq>
 800a6f0:	61b8      	str	r0, [r7, #24]
        break;
 800a6f2:	e013      	b.n	800a71c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6f4:	f7fe f9ea 	bl	8008acc <HAL_RCC_GetPCLK2Freq>
 800a6f8:	61b8      	str	r0, [r7, #24]
        break;
 800a6fa:	e00f      	b.n	800a71c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6fc:	4b4b      	ldr	r3, [pc, #300]	; (800a82c <UART_SetConfig+0x4c0>)
 800a6fe:	61bb      	str	r3, [r7, #24]
        break;
 800a700:	e00c      	b.n	800a71c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a702:	f7fe f8e1 	bl	80088c8 <HAL_RCC_GetSysClockFreq>
 800a706:	61b8      	str	r0, [r7, #24]
        break;
 800a708:	e008      	b.n	800a71c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a70a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a70e:	61bb      	str	r3, [r7, #24]
        break;
 800a710:	e004      	b.n	800a71c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a712:	2300      	movs	r3, #0
 800a714:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	77bb      	strb	r3, [r7, #30]
        break;
 800a71a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d074      	beq.n	800a80c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	005a      	lsls	r2, r3, #1
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	085b      	lsrs	r3, r3, #1
 800a72c:	441a      	add	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	fbb2 f3f3 	udiv	r3, r2, r3
 800a736:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	2b0f      	cmp	r3, #15
 800a73c:	d916      	bls.n	800a76c <UART_SetConfig+0x400>
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a744:	d212      	bcs.n	800a76c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	b29b      	uxth	r3, r3
 800a74a:	f023 030f 	bic.w	r3, r3, #15
 800a74e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	085b      	lsrs	r3, r3, #1
 800a754:	b29b      	uxth	r3, r3
 800a756:	f003 0307 	and.w	r3, r3, #7
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	89fb      	ldrh	r3, [r7, #14]
 800a75e:	4313      	orrs	r3, r2
 800a760:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	89fa      	ldrh	r2, [r7, #14]
 800a768:	60da      	str	r2, [r3, #12]
 800a76a:	e04f      	b.n	800a80c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	77bb      	strb	r3, [r7, #30]
 800a770:	e04c      	b.n	800a80c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a772:	7ffb      	ldrb	r3, [r7, #31]
 800a774:	2b08      	cmp	r3, #8
 800a776:	d828      	bhi.n	800a7ca <UART_SetConfig+0x45e>
 800a778:	a201      	add	r2, pc, #4	; (adr r2, 800a780 <UART_SetConfig+0x414>)
 800a77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a77e:	bf00      	nop
 800a780:	0800a7a5 	.word	0x0800a7a5
 800a784:	0800a7ad 	.word	0x0800a7ad
 800a788:	0800a7b5 	.word	0x0800a7b5
 800a78c:	0800a7cb 	.word	0x0800a7cb
 800a790:	0800a7bb 	.word	0x0800a7bb
 800a794:	0800a7cb 	.word	0x0800a7cb
 800a798:	0800a7cb 	.word	0x0800a7cb
 800a79c:	0800a7cb 	.word	0x0800a7cb
 800a7a0:	0800a7c3 	.word	0x0800a7c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7a4:	f7fe f97e 	bl	8008aa4 <HAL_RCC_GetPCLK1Freq>
 800a7a8:	61b8      	str	r0, [r7, #24]
        break;
 800a7aa:	e013      	b.n	800a7d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7ac:	f7fe f98e 	bl	8008acc <HAL_RCC_GetPCLK2Freq>
 800a7b0:	61b8      	str	r0, [r7, #24]
        break;
 800a7b2:	e00f      	b.n	800a7d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7b4:	4b1d      	ldr	r3, [pc, #116]	; (800a82c <UART_SetConfig+0x4c0>)
 800a7b6:	61bb      	str	r3, [r7, #24]
        break;
 800a7b8:	e00c      	b.n	800a7d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7ba:	f7fe f885 	bl	80088c8 <HAL_RCC_GetSysClockFreq>
 800a7be:	61b8      	str	r0, [r7, #24]
        break;
 800a7c0:	e008      	b.n	800a7d4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7c6:	61bb      	str	r3, [r7, #24]
        break;
 800a7c8:	e004      	b.n	800a7d4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	77bb      	strb	r3, [r7, #30]
        break;
 800a7d2:	bf00      	nop
    }

    if (pclk != 0U)
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d018      	beq.n	800a80c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	085a      	lsrs	r2, r3, #1
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	441a      	add	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	2b0f      	cmp	r3, #15
 800a7f2:	d909      	bls.n	800a808 <UART_SetConfig+0x49c>
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7fa:	d205      	bcs.n	800a808 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	60da      	str	r2, [r3, #12]
 800a806:	e001      	b.n	800a80c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a818:	7fbb      	ldrb	r3, [r7, #30]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3720      	adds	r7, #32
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	40007c00 	.word	0x40007c00
 800a828:	40023800 	.word	0x40023800
 800a82c:	00f42400 	.word	0x00f42400

0800a830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	f003 0301 	and.w	r3, r3, #1
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00a      	beq.n	800a85a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	430a      	orrs	r2, r1
 800a858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85e:	f003 0302 	and.w	r3, r3, #2
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00a      	beq.n	800a87c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	430a      	orrs	r2, r1
 800a87a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a880:	f003 0304 	and.w	r3, r3, #4
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00a      	beq.n	800a89e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	430a      	orrs	r2, r1
 800a89c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a2:	f003 0308 	and.w	r3, r3, #8
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00a      	beq.n	800a8c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	f003 0310 	and.w	r3, r3, #16
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00a      	beq.n	800a8e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	430a      	orrs	r2, r1
 800a8e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e6:	f003 0320 	and.w	r3, r3, #32
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00a      	beq.n	800a904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	430a      	orrs	r2, r1
 800a902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d01a      	beq.n	800a946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	430a      	orrs	r2, r1
 800a924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a92e:	d10a      	bne.n	800a946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	430a      	orrs	r2, r1
 800a944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00a      	beq.n	800a968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	430a      	orrs	r2, r1
 800a966:	605a      	str	r2, [r3, #4]
  }
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af02      	add	r7, sp, #8
 800a97a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a984:	f7fb f8bc 	bl	8005b00 <HAL_GetTick>
 800a988:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 0308 	and.w	r3, r3, #8
 800a994:	2b08      	cmp	r3, #8
 800a996:	d10e      	bne.n	800a9b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f82d 	bl	800aa06 <UART_WaitOnFlagUntilTimeout>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e023      	b.n	800a9fe <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 0304 	and.w	r3, r3, #4
 800a9c0:	2b04      	cmp	r3, #4
 800a9c2:	d10e      	bne.n	800a9e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f817 	bl	800aa06 <UART_WaitOnFlagUntilTimeout>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9de:	2303      	movs	r3, #3
 800a9e0:	e00d      	b.n	800a9fe <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2220      	movs	r2, #32
 800a9e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b09c      	sub	sp, #112	; 0x70
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	603b      	str	r3, [r7, #0]
 800aa12:	4613      	mov	r3, r2
 800aa14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa16:	e0a5      	b.n	800ab64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1e:	f000 80a1 	beq.w	800ab64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa22:	f7fb f86d 	bl	8005b00 <HAL_GetTick>
 800aa26:	4602      	mov	r2, r0
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d302      	bcc.n	800aa38 <UART_WaitOnFlagUntilTimeout+0x32>
 800aa32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d13e      	bne.n	800aab6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa40:	e853 3f00 	ldrex	r3, [r3]
 800aa44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aa46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa4c:	667b      	str	r3, [r7, #100]	; 0x64
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	461a      	mov	r2, r3
 800aa54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa56:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa58:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa5e:	e841 2300 	strex	r3, r2, [r1]
 800aa62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aa64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1e6      	bne.n	800aa38 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3308      	adds	r3, #8
 800aa70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa74:	e853 3f00 	ldrex	r3, [r3]
 800aa78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7c:	f023 0301 	bic.w	r3, r3, #1
 800aa80:	663b      	str	r3, [r7, #96]	; 0x60
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	3308      	adds	r3, #8
 800aa88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa8a:	64ba      	str	r2, [r7, #72]	; 0x48
 800aa8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa92:	e841 2300 	strex	r3, r2, [r1]
 800aa96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1e5      	bne.n	800aa6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2220      	movs	r2, #32
 800aaa2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2220      	movs	r2, #32
 800aaa8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aab2:	2303      	movs	r3, #3
 800aab4:	e067      	b.n	800ab86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0304 	and.w	r3, r3, #4
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d04f      	beq.n	800ab64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	69db      	ldr	r3, [r3, #28]
 800aaca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aad2:	d147      	bne.n	800ab64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aadc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	e853 3f00 	ldrex	r3, [r3]
 800aaea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aaf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aafc:	637b      	str	r3, [r7, #52]	; 0x34
 800aafe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab04:	e841 2300 	strex	r3, r2, [r1]
 800ab08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1e6      	bne.n	800aade <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3308      	adds	r3, #8
 800ab16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	e853 3f00 	ldrex	r3, [r3]
 800ab1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	f023 0301 	bic.w	r3, r3, #1
 800ab26:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3308      	adds	r3, #8
 800ab2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab30:	623a      	str	r2, [r7, #32]
 800ab32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab34:	69f9      	ldr	r1, [r7, #28]
 800ab36:	6a3a      	ldr	r2, [r7, #32]
 800ab38:	e841 2300 	strex	r3, r2, [r1]
 800ab3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1e5      	bne.n	800ab10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2220      	movs	r2, #32
 800ab48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2220      	movs	r2, #32
 800ab4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2220      	movs	r2, #32
 800ab54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e010      	b.n	800ab86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	69da      	ldr	r2, [r3, #28]
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	bf0c      	ite	eq
 800ab74:	2301      	moveq	r3, #1
 800ab76:	2300      	movne	r3, #0
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	79fb      	ldrb	r3, [r7, #7]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	f43f af4a 	beq.w	800aa18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3770      	adds	r7, #112	; 0x70
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b095      	sub	sp, #84	; 0x54
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab9e:	e853 3f00 	ldrex	r3, [r3]
 800aba2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	461a      	mov	r2, r3
 800abb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abb4:	643b      	str	r3, [r7, #64]	; 0x40
 800abb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abbc:	e841 2300 	strex	r3, r2, [r1]
 800abc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1e6      	bne.n	800ab96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3308      	adds	r3, #8
 800abce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd0:	6a3b      	ldr	r3, [r7, #32]
 800abd2:	e853 3f00 	ldrex	r3, [r3]
 800abd6:	61fb      	str	r3, [r7, #28]
   return(result);
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	f023 0301 	bic.w	r3, r3, #1
 800abde:	64bb      	str	r3, [r7, #72]	; 0x48
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	3308      	adds	r3, #8
 800abe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abf0:	e841 2300 	strex	r3, r2, [r1]
 800abf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1e5      	bne.n	800abc8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d118      	bne.n	800ac36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	e853 3f00 	ldrex	r3, [r3]
 800ac10:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	f023 0310 	bic.w	r3, r3, #16
 800ac18:	647b      	str	r3, [r7, #68]	; 0x44
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac22:	61bb      	str	r3, [r7, #24]
 800ac24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac26:	6979      	ldr	r1, [r7, #20]
 800ac28:	69ba      	ldr	r2, [r7, #24]
 800ac2a:	e841 2300 	strex	r3, r2, [r1]
 800ac2e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1e6      	bne.n	800ac04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2220      	movs	r2, #32
 800ac3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ac48:	bf00      	nop
 800ac4a:	3754      	adds	r7, #84	; 0x54
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f7ff fb5a 	bl	800a32c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac78:	bf00      	nop
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b08f      	sub	sp, #60	; 0x3c
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac8c:	2b21      	cmp	r3, #33	; 0x21
 800ac8e:	d14c      	bne.n	800ad2a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d132      	bne.n	800ad02 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca2:	6a3b      	ldr	r3, [r7, #32]
 800aca4:	e853 3f00 	ldrex	r3, [r3]
 800aca8:	61fb      	str	r3, [r7, #28]
   return(result);
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acb0:	637b      	str	r3, [r7, #52]	; 0x34
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	461a      	mov	r2, r3
 800acb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acbc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800acc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acc2:	e841 2300 	strex	r3, r2, [r1]
 800acc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1e6      	bne.n	800ac9c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	e853 3f00 	ldrex	r3, [r3]
 800acda:	60bb      	str	r3, [r7, #8]
   return(result);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ace2:	633b      	str	r3, [r7, #48]	; 0x30
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	461a      	mov	r2, r3
 800acea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acec:	61bb      	str	r3, [r7, #24]
 800acee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf0:	6979      	ldr	r1, [r7, #20]
 800acf2:	69ba      	ldr	r2, [r7, #24]
 800acf4:	e841 2300 	strex	r3, r2, [r1]
 800acf8:	613b      	str	r3, [r7, #16]
   return(result);
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1e6      	bne.n	800acce <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800ad00:	e013      	b.n	800ad2a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad06:	781a      	ldrb	r2, [r3, #0]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad12:	1c5a      	adds	r2, r3, #1
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	3b01      	subs	r3, #1
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800ad2a:	bf00      	nop
 800ad2c:	373c      	adds	r7, #60	; 0x3c
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ad36:	b480      	push	{r7}
 800ad38:	b091      	sub	sp, #68	; 0x44
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad42:	2b21      	cmp	r3, #33	; 0x21
 800ad44:	d151      	bne.n	800adea <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d132      	bne.n	800adb8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	e853 3f00 	ldrex	r3, [r3]
 800ad5e:	623b      	str	r3, [r7, #32]
   return(result);
 800ad60:	6a3b      	ldr	r3, [r7, #32]
 800ad62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad66:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad70:	633b      	str	r3, [r7, #48]	; 0x30
 800ad72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad78:	e841 2300 	strex	r3, r2, [r1]
 800ad7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1e6      	bne.n	800ad52 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	e853 3f00 	ldrex	r3, [r3]
 800ad90:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad98:	637b      	str	r3, [r7, #52]	; 0x34
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada2:	61fb      	str	r3, [r7, #28]
 800ada4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada6:	69b9      	ldr	r1, [r7, #24]
 800ada8:	69fa      	ldr	r2, [r7, #28]
 800adaa:	e841 2300 	strex	r3, r2, [r1]
 800adae:	617b      	str	r3, [r7, #20]
   return(result);
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1e6      	bne.n	800ad84 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800adb6:	e018      	b.n	800adea <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adbc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800adbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adc0:	881b      	ldrh	r3, [r3, #0]
 800adc2:	461a      	mov	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800adcc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800add2:	1c9a      	adds	r2, r3, #2
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800adde:	b29b      	uxth	r3, r3
 800ade0:	3b01      	subs	r3, #1
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800adea:	bf00      	nop
 800adec:	3744      	adds	r7, #68	; 0x44
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b088      	sub	sp, #32
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	e853 3f00 	ldrex	r3, [r3]
 800ae0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae12:	61fb      	str	r3, [r7, #28]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	61bb      	str	r3, [r7, #24]
 800ae1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae20:	6979      	ldr	r1, [r7, #20]
 800ae22:	69ba      	ldr	r2, [r7, #24]
 800ae24:	e841 2300 	strex	r3, r2, [r1]
 800ae28:	613b      	str	r3, [r7, #16]
   return(result);
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1e6      	bne.n	800adfe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2220      	movs	r2, #32
 800ae34:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7f5 fe81 	bl	8000b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae42:	bf00      	nop
 800ae44:	3720      	adds	r7, #32
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
	...

0800ae4c <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 800ae50:	4b10      	ldr	r3, [pc, #64]	; (800ae94 <MX_PDM2PCM_Init+0x48>)
 800ae52:	2201      	movs	r2, #1
 800ae54:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800ae56:	4b0f      	ldr	r3, [pc, #60]	; (800ae94 <MX_PDM2PCM_Init+0x48>)
 800ae58:	2201      	movs	r2, #1
 800ae5a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800ae5c:	4b0d      	ldr	r3, [pc, #52]	; (800ae94 <MX_PDM2PCM_Init+0x48>)
 800ae5e:	4a0e      	ldr	r2, [pc, #56]	; (800ae98 <MX_PDM2PCM_Init+0x4c>)
 800ae60:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800ae62:	4b0c      	ldr	r3, [pc, #48]	; (800ae94 <MX_PDM2PCM_Init+0x48>)
 800ae64:	2201      	movs	r2, #1
 800ae66:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800ae68:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <MX_PDM2PCM_Init+0x48>)
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800ae6e:	4809      	ldr	r0, [pc, #36]	; (800ae94 <MX_PDM2PCM_Init+0x48>)
 800ae70:	f001 fd26 	bl	800c8c0 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800ae74:	4b09      	ldr	r3, [pc, #36]	; (800ae9c <MX_PDM2PCM_Init+0x50>)
 800ae76:	2202      	movs	r2, #2
 800ae78:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 48;
 800ae7a:	4b08      	ldr	r3, [pc, #32]	; (800ae9c <MX_PDM2PCM_Init+0x50>)
 800ae7c:	2230      	movs	r2, #48	; 0x30
 800ae7e:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 800ae80:	4b06      	ldr	r3, [pc, #24]	; (800ae9c <MX_PDM2PCM_Init+0x50>)
 800ae82:	2200      	movs	r2, #0
 800ae84:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800ae86:	4905      	ldr	r1, [pc, #20]	; (800ae9c <MX_PDM2PCM_Init+0x50>)
 800ae88:	4802      	ldr	r0, [pc, #8]	; (800ae94 <MX_PDM2PCM_Init+0x48>)
 800ae8a:	f001 fd9f 	bl	800c9cc <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800ae8e:	bf00      	nop
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	20002fb8 	.word	0x20002fb8
 800ae98:	7d70a3d6 	.word	0x7d70a3d6
 800ae9c:	20002fb0 	.word	0x20002fb0

0800aea0 <D16_GENERIC>:
 800aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	b087      	sub	sp, #28
 800aea6:	6993      	ldr	r3, [r2, #24]
 800aea8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800aeaa:	9101      	str	r1, [sp, #4]
 800aeac:	68d1      	ldr	r1, [r2, #12]
 800aeae:	9304      	str	r3, [sp, #16]
 800aeb0:	9105      	str	r1, [sp, #20]
 800aeb2:	6914      	ldr	r4, [r2, #16]
 800aeb4:	f8d2 a014 	ldr.w	sl, [r2, #20]
 800aeb8:	69d3      	ldr	r3, [r2, #28]
 800aeba:	f8d2 e008 	ldr.w	lr, [r2, #8]
 800aebe:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
 800aec2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800aec4:	2d00      	cmp	r5, #0
 800aec6:	d05e      	beq.n	800af86 <D16_GENERIC+0xe6>
 800aec8:	f001 0510 	and.w	r5, r1, #16
 800aecc:	f001 0120 	and.w	r1, r1, #32
 800aed0:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 800afac <D16_GENERIC+0x10c>
 800aed4:	46c1      	mov	r9, r8
 800aed6:	9103      	str	r1, [sp, #12]
 800aed8:	2100      	movs	r1, #0
 800aeda:	9502      	str	r5, [sp, #8]
 800aedc:	e048      	b.n	800af70 <D16_GENERIC+0xd0>
 800aede:	5d87      	ldrb	r7, [r0, r6]
 800aee0:	7805      	ldrb	r5, [r0, #0]
 800aee2:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800aee6:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800aeea:	b2fe      	uxtb	r6, r7
 800aeec:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800aef0:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
 800aef4:	f85c 6027 	ldr.w	r6, [ip, r7, lsl #2]
 800aef8:	441d      	add	r5, r3
 800aefa:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800aefe:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800af02:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800af06:	0a9b      	lsrs	r3, r3, #10
 800af08:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800af0c:	4d25      	ldr	r5, [pc, #148]	; (800afa4 <D16_GENERIC+0x104>)
 800af0e:	fb26 e505 	smlad	r5, r6, r5, lr
 800af12:	4f25      	ldr	r7, [pc, #148]	; (800afa8 <D16_GENERIC+0x108>)
 800af14:	fb26 fe07 	smuad	lr, r6, r7
 800af18:	9e02      	ldr	r6, [sp, #8]
 800af1a:	f101 0801 	add.w	r8, r1, #1
 800af1e:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800af22:	b186      	cbz	r6, 800af46 <D16_GENERIC+0xa6>
 800af24:	442c      	add	r4, r5
 800af26:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800af2a:	eba4 040a 	sub.w	r4, r4, sl
 800af2e:	46aa      	mov	sl, r5
 800af30:	17e7      	asrs	r7, r4, #31
 800af32:	fba4 450b 	umull	r4, r5, r4, fp
 800af36:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800af3a:	fb0b 5507 	mla	r5, fp, r7, r5
 800af3e:	f145 0500 	adc.w	r5, r5, #0
 800af42:	006c      	lsls	r4, r5, #1
 800af44:	4625      	mov	r5, r4
 800af46:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800af4a:	042d      	lsls	r5, r5, #16
 800af4c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800af50:	2700      	movs	r7, #0
 800af52:	fb01 fb0b 	mul.w	fp, r1, fp
 800af56:	fa1f f188 	uxth.w	r1, r8
 800af5a:	fbc9 6705 	smlal	r6, r7, r9, r5
 800af5e:	9e01      	ldr	r6, [sp, #4]
 800af60:	10bd      	asrs	r5, r7, #2
 800af62:	f305 050f 	ssat	r5, #16, r5
 800af66:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800af6a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800af6c:	428d      	cmp	r5, r1
 800af6e:	d90a      	bls.n	800af86 <D16_GENERIC+0xe6>
 800af70:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800af72:	2d01      	cmp	r5, #1
 800af74:	b2ee      	uxtb	r6, r5
 800af76:	d1b2      	bne.n	800aede <D16_GENERIC+0x3e>
 800af78:	9d03      	ldr	r5, [sp, #12]
 800af7a:	f850 7b02 	ldr.w	r7, [r0], #2
 800af7e:	2d00      	cmp	r5, #0
 800af80:	d0b3      	beq.n	800aeea <D16_GENERIC+0x4a>
 800af82:	ba7f      	rev16	r7, r7
 800af84:	e7b1      	b.n	800aeea <D16_GENERIC+0x4a>
 800af86:	2000      	movs	r0, #0
 800af88:	9905      	ldr	r1, [sp, #20]
 800af8a:	61d3      	str	r3, [r2, #28]
 800af8c:	9b04      	ldr	r3, [sp, #16]
 800af8e:	f8c2 e008 	str.w	lr, [r2, #8]
 800af92:	60d1      	str	r1, [r2, #12]
 800af94:	6114      	str	r4, [r2, #16]
 800af96:	f8c2 a014 	str.w	sl, [r2, #20]
 800af9a:	6193      	str	r3, [r2, #24]
 800af9c:	b007      	add	sp, #28
 800af9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa2:	bf00      	nop
 800afa4:	00030001 	.word	0x00030001
 800afa8:	00010003 	.word	0x00010003
 800afac:	20000000 	.word	0x20000000

0800afb0 <D24_GENERIC>:
 800afb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	6953      	ldr	r3, [r2, #20]
 800afb6:	b087      	sub	sp, #28
 800afb8:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800afba:	9301      	str	r3, [sp, #4]
 800afbc:	6993      	ldr	r3, [r2, #24]
 800afbe:	9102      	str	r1, [sp, #8]
 800afc0:	9305      	str	r3, [sp, #20]
 800afc2:	6914      	ldr	r4, [r2, #16]
 800afc4:	69d1      	ldr	r1, [r2, #28]
 800afc6:	6893      	ldr	r3, [r2, #8]
 800afc8:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800afcc:	f8d2 a030 	ldr.w	sl, [r2, #48]	; 0x30
 800afd0:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800afd2:	2e00      	cmp	r6, #0
 800afd4:	f000 808c 	beq.w	800b0f0 <D24_GENERIC+0x140>
 800afd8:	f005 0610 	and.w	r6, r5, #16
 800afdc:	f005 0520 	and.w	r5, r5, #32
 800afe0:	f04f 0e00 	mov.w	lr, #0
 800afe4:	f8df c140 	ldr.w	ip, [pc, #320]	; 800b128 <D24_GENERIC+0x178>
 800afe8:	9603      	str	r6, [sp, #12]
 800afea:	9504      	str	r5, [sp, #16]
 800afec:	e061      	b.n	800b0b2 <D24_GENERIC+0x102>
 800afee:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800aff2:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800aff6:	f810 b007 	ldrb.w	fp, [r0, r7]
 800affa:	042d      	lsls	r5, r5, #16
 800affc:	f890 9000 	ldrb.w	r9, [r0]
 800b000:	19f0      	adds	r0, r6, r7
 800b002:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800b006:	44a9      	add	r9, r5
 800b008:	fa5f f689 	uxtb.w	r6, r9
 800b00c:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800b010:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800b014:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800b018:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800b01c:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800b020:	f85c 1029 	ldr.w	r1, [ip, r9, lsl #2]
 800b024:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800b028:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b02c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800b030:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800b034:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b038:	4d39      	ldr	r5, [pc, #228]	; (800b120 <D24_GENERIC+0x170>)
 800b03a:	fb26 8705 	smlad	r7, r6, r5, r8
 800b03e:	4d39      	ldr	r5, [pc, #228]	; (800b124 <D24_GENERIC+0x174>)
 800b040:	fb26 3805 	smlad	r8, r6, r5, r3
 800b044:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800b048:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800b04c:	2301      	movs	r3, #1
 800b04e:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800b052:	fb26 f603 	smuad	r6, r6, r3
 800b056:	eb0e 0903 	add.w	r9, lr, r3
 800b05a:	eb0b 0306 	add.w	r3, fp, r6
 800b05e:	9e03      	ldr	r6, [sp, #12]
 800b060:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800b064:	b186      	cbz	r6, 800b088 <D24_GENERIC+0xd8>
 800b066:	442c      	add	r4, r5
 800b068:	9e01      	ldr	r6, [sp, #4]
 800b06a:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800b06e:	1ba4      	subs	r4, r4, r6
 800b070:	9501      	str	r5, [sp, #4]
 800b072:	17e7      	asrs	r7, r4, #31
 800b074:	fba4 450b 	umull	r4, r5, r4, fp
 800b078:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b07c:	fb0b 5507 	mla	r5, fp, r7, r5
 800b080:	f145 0500 	adc.w	r5, r5, #0
 800b084:	006c      	lsls	r4, r5, #1
 800b086:	4625      	mov	r5, r4
 800b088:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800b08c:	03ad      	lsls	r5, r5, #14
 800b08e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b092:	2700      	movs	r7, #0
 800b094:	fb0e fb0b 	mul.w	fp, lr, fp
 800b098:	fa1f fe89 	uxth.w	lr, r9
 800b09c:	fbca 6705 	smlal	r6, r7, sl, r5
 800b0a0:	9e02      	ldr	r6, [sp, #8]
 800b0a2:	10bd      	asrs	r5, r7, #2
 800b0a4:	f305 050f 	ssat	r5, #16, r5
 800b0a8:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b0ac:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b0ae:	4575      	cmp	r5, lr
 800b0b0:	d91e      	bls.n	800b0f0 <D24_GENERIC+0x140>
 800b0b2:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b0b4:	b2ef      	uxtb	r7, r5
 800b0b6:	2d01      	cmp	r5, #1
 800b0b8:	b23e      	sxth	r6, r7
 800b0ba:	d198      	bne.n	800afee <D24_GENERIC+0x3e>
 800b0bc:	9d04      	ldr	r5, [sp, #16]
 800b0be:	b16d      	cbz	r5, 800b0dc <D24_GENERIC+0x12c>
 800b0c0:	f01e 0f01 	tst.w	lr, #1
 800b0c4:	d121      	bne.n	800b10a <D24_GENERIC+0x15a>
 800b0c6:	7805      	ldrb	r5, [r0, #0]
 800b0c8:	3002      	adds	r0, #2
 800b0ca:	f890 9001 	ldrb.w	r9, [r0, #1]
 800b0ce:	022d      	lsls	r5, r5, #8
 800b0d0:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800b0d4:	eb05 4909 	add.w	r9, r5, r9, lsl #16
 800b0d8:	44b1      	add	r9, r6
 800b0da:	e795      	b.n	800b008 <D24_GENERIC+0x58>
 800b0dc:	7846      	ldrb	r6, [r0, #1]
 800b0de:	f890 9002 	ldrb.w	r9, [r0, #2]
 800b0e2:	0236      	lsls	r6, r6, #8
 800b0e4:	f810 5b03 	ldrb.w	r5, [r0], #3
 800b0e8:	eb06 4909 	add.w	r9, r6, r9, lsl #16
 800b0ec:	44a9      	add	r9, r5
 800b0ee:	e78b      	b.n	800b008 <D24_GENERIC+0x58>
 800b0f0:	6093      	str	r3, [r2, #8]
 800b0f2:	2000      	movs	r0, #0
 800b0f4:	9b01      	ldr	r3, [sp, #4]
 800b0f6:	f8c2 800c 	str.w	r8, [r2, #12]
 800b0fa:	6153      	str	r3, [r2, #20]
 800b0fc:	9b05      	ldr	r3, [sp, #20]
 800b0fe:	61d1      	str	r1, [r2, #28]
 800b100:	6114      	str	r4, [r2, #16]
 800b102:	6193      	str	r3, [r2, #24]
 800b104:	b007      	add	sp, #28
 800b106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10a:	78c5      	ldrb	r5, [r0, #3]
 800b10c:	f890 9002 	ldrb.w	r9, [r0, #2]
 800b110:	022d      	lsls	r5, r5, #8
 800b112:	f810 6b04 	ldrb.w	r6, [r0], #4
 800b116:	eb05 4909 	add.w	r9, r5, r9, lsl #16
 800b11a:	44b1      	add	r9, r6
 800b11c:	e774      	b.n	800b008 <D24_GENERIC+0x58>
 800b11e:	bf00      	nop
 800b120:	00030001 	.word	0x00030001
 800b124:	00060007 	.word	0x00060007
 800b128:	20000000 	.word	0x20000000

0800b12c <D32_GENERIC>:
 800b12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b130:	6953      	ldr	r3, [r2, #20]
 800b132:	b087      	sub	sp, #28
 800b134:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b13a:	6993      	ldr	r3, [r2, #24]
 800b13c:	9102      	str	r1, [sp, #8]
 800b13e:	9305      	str	r3, [sp, #20]
 800b140:	9501      	str	r5, [sp, #4]
 800b142:	6914      	ldr	r4, [r2, #16]
 800b144:	69d1      	ldr	r1, [r2, #28]
 800b146:	6893      	ldr	r3, [r2, #8]
 800b148:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800b14c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b14e:	2e00      	cmp	r6, #0
 800b150:	f000 8098 	beq.w	800b284 <D32_GENERIC+0x158>
 800b154:	f005 0610 	and.w	r6, r5, #16
 800b158:	f005 0520 	and.w	r5, r5, #32
 800b15c:	f04f 0c00 	mov.w	ip, #0
 800b160:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800b2b0 <D32_GENERIC+0x184>
 800b164:	9603      	str	r6, [sp, #12]
 800b166:	9504      	str	r5, [sp, #16]
 800b168:	e078      	b.n	800b25c <D32_GENERIC+0x130>
 800b16a:	eb00 0905 	add.w	r9, r0, r5
 800b16e:	f810 b005 	ldrb.w	fp, [r0, r5]
 800b172:	f810 a006 	ldrb.w	sl, [r0, r6]
 800b176:	f819 5007 	ldrb.w	r5, [r9, r7]
 800b17a:	444f      	add	r7, r9
 800b17c:	f890 9000 	ldrb.w	r9, [r0]
 800b180:	042d      	lsls	r5, r5, #16
 800b182:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800b186:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800b18a:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800b18e:	44a9      	add	r9, r5
 800b190:	fa5f f789 	uxtb.w	r7, r9
 800b194:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800b198:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800b19c:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800b1a0:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800b1a4:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 800b1a8:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800b1ac:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800b1b0:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
 800b1b4:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b1b8:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800b1bc:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800b1c0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b1c4:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800b1c8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b1cc:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800b1d0:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800b1d4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b1d8:	4d31      	ldr	r5, [pc, #196]	; (800b2a0 <D32_GENERIC+0x174>)
 800b1da:	fb29 8805 	smlad	r8, r9, r5, r8
 800b1de:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800b1e2:	fb26 8705 	smlad	r7, r6, r5, r8
 800b1e6:	4d2f      	ldr	r5, [pc, #188]	; (800b2a4 <D32_GENERIC+0x178>)
 800b1e8:	fb29 3305 	smlad	r3, r9, r5, r3
 800b1ec:	4d2e      	ldr	r5, [pc, #184]	; (800b2a8 <D32_GENERIC+0x17c>)
 800b1ee:	fb26 3805 	smlad	r8, r6, r5, r3
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	fb29 f903 	smuad	r9, r9, r3
 800b1f8:	4b2c      	ldr	r3, [pc, #176]	; (800b2ac <D32_GENERIC+0x180>)
 800b1fa:	fb26 9303 	smlad	r3, r6, r3, r9
 800b1fe:	9e03      	ldr	r6, [sp, #12]
 800b200:	f10c 0901 	add.w	r9, ip, #1
 800b204:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800b208:	b186      	cbz	r6, 800b22c <D32_GENERIC+0x100>
 800b20a:	442c      	add	r4, r5
 800b20c:	9e00      	ldr	r6, [sp, #0]
 800b20e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800b212:	1ba4      	subs	r4, r4, r6
 800b214:	9500      	str	r5, [sp, #0]
 800b216:	17e7      	asrs	r7, r4, #31
 800b218:	fba4 450a 	umull	r4, r5, r4, sl
 800b21c:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b220:	fb0a 5507 	mla	r5, sl, r7, r5
 800b224:	f145 0500 	adc.w	r5, r5, #0
 800b228:	006c      	lsls	r4, r5, #1
 800b22a:	4625      	mov	r5, r4
 800b22c:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800b230:	036d      	lsls	r5, r5, #13
 800b232:	9f01      	ldr	r7, [sp, #4]
 800b234:	fb0c fb0a 	mul.w	fp, ip, sl
 800b238:	fa1f fc89 	uxth.w	ip, r9
 800b23c:	f04f 0a00 	mov.w	sl, #0
 800b240:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800b244:	9e02      	ldr	r6, [sp, #8]
 800b246:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800b24a:	4657      	mov	r7, sl
 800b24c:	10bd      	asrs	r5, r7, #2
 800b24e:	f305 050f 	ssat	r5, #16, r5
 800b252:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b256:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b258:	4565      	cmp	r5, ip
 800b25a:	d913      	bls.n	800b284 <D32_GENERIC+0x158>
 800b25c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b25e:	b2ee      	uxtb	r6, r5
 800b260:	2d01      	cmp	r5, #1
 800b262:	f1c6 0700 	rsb	r7, r6, #0
 800b266:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 800b26a:	f47f af7e 	bne.w	800b16a <D32_GENERIC+0x3e>
 800b26e:	1d05      	adds	r5, r0, #4
 800b270:	f8d0 9000 	ldr.w	r9, [r0]
 800b274:	9804      	ldr	r0, [sp, #16]
 800b276:	b118      	cbz	r0, 800b280 <D32_GENERIC+0x154>
 800b278:	fa99 f999 	rev16.w	r9, r9
 800b27c:	4628      	mov	r0, r5
 800b27e:	e787      	b.n	800b190 <D32_GENERIC+0x64>
 800b280:	4628      	mov	r0, r5
 800b282:	e785      	b.n	800b190 <D32_GENERIC+0x64>
 800b284:	6093      	str	r3, [r2, #8]
 800b286:	2000      	movs	r0, #0
 800b288:	9b00      	ldr	r3, [sp, #0]
 800b28a:	f8c2 800c 	str.w	r8, [r2, #12]
 800b28e:	6153      	str	r3, [r2, #20]
 800b290:	9b05      	ldr	r3, [sp, #20]
 800b292:	61d1      	str	r1, [r2, #28]
 800b294:	6114      	str	r4, [r2, #16]
 800b296:	6193      	str	r3, [r2, #24]
 800b298:	b007      	add	sp, #28
 800b29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b29e:	bf00      	nop
 800b2a0:	00060003 	.word	0x00060003
 800b2a4:	000a000c 	.word	0x000a000c
 800b2a8:	000c000a 	.word	0x000c000a
 800b2ac:	00030006 	.word	0x00030006
 800b2b0:	20000000 	.word	0x20000000

0800b2b4 <D48_GENERIC>:
 800b2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b8:	6913      	ldr	r3, [r2, #16]
 800b2ba:	b08b      	sub	sp, #44	; 0x2c
 800b2bc:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b2be:	9106      	str	r1, [sp, #24]
 800b2c0:	9303      	str	r3, [sp, #12]
 800b2c2:	68d1      	ldr	r1, [r2, #12]
 800b2c4:	6953      	ldr	r3, [r2, #20]
 800b2c6:	9101      	str	r1, [sp, #4]
 800b2c8:	9304      	str	r3, [sp, #16]
 800b2ca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b2cc:	6993      	ldr	r3, [r2, #24]
 800b2ce:	9105      	str	r1, [sp, #20]
 800b2d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2d2:	69d6      	ldr	r6, [r2, #28]
 800b2d4:	6893      	ldr	r3, [r2, #8]
 800b2d6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800b2d8:	2c00      	cmp	r4, #0
 800b2da:	f000 80c6 	beq.w	800b46a <D48_GENERIC+0x1b6>
 800b2de:	f001 0410 	and.w	r4, r1, #16
 800b2e2:	f001 0120 	and.w	r1, r1, #32
 800b2e6:	2700      	movs	r7, #0
 800b2e8:	9302      	str	r3, [sp, #8]
 800b2ea:	9108      	str	r1, [sp, #32]
 800b2ec:	9407      	str	r4, [sp, #28]
 800b2ee:	4966      	ldr	r1, [pc, #408]	; (800b488 <D48_GENERIC+0x1d4>)
 800b2f0:	e0a6      	b.n	800b440 <D48_GENERIC+0x18c>
 800b2f2:	eb00 0e08 	add.w	lr, r0, r8
 800b2f6:	f810 a008 	ldrb.w	sl, [r0, r8]
 800b2fa:	f810 9005 	ldrb.w	r9, [r0, r5]
 800b2fe:	f81e 400c 	ldrb.w	r4, [lr, ip]
 800b302:	44e6      	add	lr, ip
 800b304:	f890 b000 	ldrb.w	fp, [r0]
 800b308:	0420      	lsls	r0, r4, #16
 800b30a:	eb0e 0408 	add.w	r4, lr, r8
 800b30e:	f81e e008 	ldrb.w	lr, [lr, r8]
 800b312:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800b316:	f814 800c 	ldrb.w	r8, [r4, ip]
 800b31a:	44a4      	add	ip, r4
 800b31c:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800b320:	eb08 2e0e 	add.w	lr, r8, lr, lsl #8
 800b324:	eb0a 040b 	add.w	r4, sl, fp
 800b328:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800b32c:	fa5f f884 	uxtb.w	r8, r4
 800b330:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800b334:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800b338:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800b33c:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800b340:	fa5f fc8e 	uxtb.w	ip, lr
 800b344:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800b348:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 800b34c:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 800b350:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 800b354:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800b358:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800b35c:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800b360:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 800b364:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b368:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800b36c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b370:	9b01      	ldr	r3, [sp, #4]
 800b372:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800b376:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800b37a:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800b37e:	eb0c 2c94 	add.w	ip, ip, r4, lsr #10
 800b382:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b386:	eb0e 269c 	add.w	r6, lr, ip, lsr #10
 800b38a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b38e:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800b392:	f3c6 0509 	ubfx	r5, r6, #0, #10
 800b396:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800b39a:	4d3c      	ldr	r5, [pc, #240]	; (800b48c <D48_GENERIC+0x1d8>)
 800b39c:	fb28 3a05 	smlad	sl, r8, r5, r3
 800b3a0:	4b3b      	ldr	r3, [pc, #236]	; (800b490 <D48_GENERIC+0x1dc>)
 800b3a2:	fb24 aa03 	smlad	sl, r4, r3, sl
 800b3a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b3aa:	fb2c aa03 	smlad	sl, ip, r3, sl
 800b3ae:	4b39      	ldr	r3, [pc, #228]	; (800b494 <D48_GENERIC+0x1e0>)
 800b3b0:	9d02      	ldr	r5, [sp, #8]
 800b3b2:	fb28 5303 	smlad	r3, r8, r3, r5
 800b3b6:	f04f 151b 	mov.w	r5, #1769499	; 0x1b001b
 800b3ba:	fb24 3305 	smlad	r3, r4, r5, r3
 800b3be:	4d36      	ldr	r5, [pc, #216]	; (800b498 <D48_GENERIC+0x1e4>)
 800b3c0:	fb2c 3305 	smlad	r3, ip, r5, r3
 800b3c4:	2501      	movs	r5, #1
 800b3c6:	9301      	str	r3, [sp, #4]
 800b3c8:	fb28 f805 	smuad	r8, r8, r5
 800b3cc:	4b33      	ldr	r3, [pc, #204]	; (800b49c <D48_GENERIC+0x1e8>)
 800b3ce:	fb24 8403 	smlad	r4, r4, r3, r8
 800b3d2:	4b33      	ldr	r3, [pc, #204]	; (800b4a0 <D48_GENERIC+0x1ec>)
 800b3d4:	fb2c 4303 	smlad	r3, ip, r3, r4
 800b3d8:	9302      	str	r3, [sp, #8]
 800b3da:	eb07 0e05 	add.w	lr, r7, r5
 800b3de:	9b07      	ldr	r3, [sp, #28]
 800b3e0:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800b3e4:	b1ab      	cbz	r3, 800b412 <D48_GENERIC+0x15e>
 800b3e6:	9b03      	ldr	r3, [sp, #12]
 800b3e8:	f8d2 c020 	ldr.w	ip, [r2, #32]
 800b3ec:	4453      	add	r3, sl
 800b3ee:	461c      	mov	r4, r3
 800b3f0:	9b04      	ldr	r3, [sp, #16]
 800b3f2:	f8cd a010 	str.w	sl, [sp, #16]
 800b3f6:	1ae4      	subs	r4, r4, r3
 800b3f8:	ea4f 79e4 	mov.w	r9, r4, asr #31
 800b3fc:	fba4 450c 	umull	r4, r5, r4, ip
 800b400:	fb0c 5509 	mla	r5, ip, r9, r5
 800b404:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b408:	f145 0500 	adc.w	r5, r5, #0
 800b40c:	006b      	lsls	r3, r5, #1
 800b40e:	469a      	mov	sl, r3
 800b410:	9303      	str	r3, [sp, #12]
 800b412:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800b416:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800b41a:	9b05      	ldr	r3, [sp, #20]
 800b41c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b420:	2500      	movs	r5, #0
 800b422:	fb07 fc0c 	mul.w	ip, r7, ip
 800b426:	fa1f f78e 	uxth.w	r7, lr
 800b42a:	fbc3 450a 	smlal	r4, r5, r3, sl
 800b42e:	9b06      	ldr	r3, [sp, #24]
 800b430:	10ac      	asrs	r4, r5, #2
 800b432:	f304 040f 	ssat	r4, #16, r4
 800b436:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800b43a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b43c:	42bc      	cmp	r4, r7
 800b43e:	d913      	bls.n	800b468 <D48_GENERIC+0x1b4>
 800b440:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800b442:	b2e5      	uxtb	r5, r4
 800b444:	2c01      	cmp	r4, #1
 800b446:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800b44a:	f1c5 0c00 	rsb	ip, r5, #0
 800b44e:	f47f af50 	bne.w	800b2f2 <D48_GENERIC+0x3e>
 800b452:	9b08      	ldr	r3, [sp, #32]
 800b454:	e890 4010 	ldmia.w	r0, {r4, lr}
 800b458:	3006      	adds	r0, #6
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f43f af66 	beq.w	800b32c <D48_GENERIC+0x78>
 800b460:	ba64      	rev16	r4, r4
 800b462:	fa9e fe9e 	rev16.w	lr, lr
 800b466:	e761      	b.n	800b32c <D48_GENERIC+0x78>
 800b468:	9b02      	ldr	r3, [sp, #8]
 800b46a:	6093      	str	r3, [r2, #8]
 800b46c:	2000      	movs	r0, #0
 800b46e:	9b01      	ldr	r3, [sp, #4]
 800b470:	61d6      	str	r6, [r2, #28]
 800b472:	60d3      	str	r3, [r2, #12]
 800b474:	9b03      	ldr	r3, [sp, #12]
 800b476:	6113      	str	r3, [r2, #16]
 800b478:	9b04      	ldr	r3, [sp, #16]
 800b47a:	6153      	str	r3, [r2, #20]
 800b47c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b47e:	6193      	str	r3, [r2, #24]
 800b480:	b00b      	add	sp, #44	; 0x2c
 800b482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b486:	bf00      	nop
 800b488:	20000000 	.word	0x20000000
 800b48c:	000f000a 	.word	0x000f000a
 800b490:	00060003 	.word	0x00060003
 800b494:	00150019 	.word	0x00150019
 800b498:	00190015 	.word	0x00190015
 800b49c:	00030006 	.word	0x00030006
 800b4a0:	000a000f 	.word	0x000a000f

0800b4a4 <D64_GENERIC>:
 800b4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a8:	6913      	ldr	r3, [r2, #16]
 800b4aa:	b089      	sub	sp, #36	; 0x24
 800b4ac:	68d5      	ldr	r5, [r2, #12]
 800b4ae:	9302      	str	r3, [sp, #8]
 800b4b0:	6953      	ldr	r3, [r2, #20]
 800b4b2:	462e      	mov	r6, r5
 800b4b4:	9105      	str	r1, [sp, #20]
 800b4b6:	9303      	str	r3, [sp, #12]
 800b4b8:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b4ba:	6993      	ldr	r3, [r2, #24]
 800b4bc:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800b4be:	9307      	str	r3, [sp, #28]
 800b4c0:	69d4      	ldr	r4, [r2, #28]
 800b4c2:	6893      	ldr	r3, [r2, #8]
 800b4c4:	9504      	str	r5, [sp, #16]
 800b4c6:	2900      	cmp	r1, #0
 800b4c8:	f000 80e5 	beq.w	800b696 <D64_GENERIC+0x1f2>
 800b4cc:	6a11      	ldr	r1, [r2, #32]
 800b4ce:	2500      	movs	r5, #0
 800b4d0:	46b3      	mov	fp, r6
 800b4d2:	9301      	str	r3, [sp, #4]
 800b4d4:	9106      	str	r1, [sp, #24]
 800b4d6:	4976      	ldr	r1, [pc, #472]	; (800b6b0 <D64_GENERIC+0x20c>)
 800b4d8:	e0c7      	b.n	800b66a <D64_GENERIC+0x1c6>
 800b4da:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800b4de:	f1cc 0e00 	rsb	lr, ip, #0
 800b4e2:	f890 9000 	ldrb.w	r9, [r0]
 800b4e6:	eb00 0708 	add.w	r7, r0, r8
 800b4ea:	f810 6008 	ldrb.w	r6, [r0, r8]
 800b4ee:	eb07 0a4e 	add.w	sl, r7, lr, lsl #1
 800b4f2:	f817 000e 	ldrb.w	r0, [r7, lr]
 800b4f6:	f817 301e 	ldrb.w	r3, [r7, lr, lsl #1]
 800b4fa:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800b4fe:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800b502:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800b506:	f817 000e 	ldrb.w	r0, [r7, lr]
 800b50a:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800b50e:	f817 801e 	ldrb.w	r8, [r7, lr, lsl #1]
 800b512:	0400      	lsls	r0, r0, #16
 800b514:	4477      	add	r7, lr
 800b516:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800b51a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800b51e:	f817 a01e 	ldrb.w	sl, [r7, lr, lsl #1]
 800b522:	eb07 074e 	add.w	r7, r7, lr, lsl #1
 800b526:	444e      	add	r6, r9
 800b528:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800b52c:	eb07 008c 	add.w	r0, r7, ip, lsl #2
 800b530:	44c2      	add	sl, r8
 800b532:	b2f7      	uxtb	r7, r6
 800b534:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800b538:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800b53c:	0e36      	lsrs	r6, r6, #24
 800b53e:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800b542:	fa5f fe8a 	uxtb.w	lr, sl
 800b546:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800b54a:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800b54e:	443c      	add	r4, r7
 800b550:	f851 702c 	ldr.w	r7, [r1, ip, lsl #2]
 800b554:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b558:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800b55c:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 800b560:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b564:	4b53      	ldr	r3, [pc, #332]	; (800b6b4 <D64_GENERIC+0x210>)
 800b566:	eb07 2c98 	add.w	ip, r7, r8, lsr #10
 800b56a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b56e:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800b572:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800b576:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b57a:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800b57e:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800b582:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800b586:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b58a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b58e:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800b592:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800b596:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b59a:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800b59e:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 800b5a2:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800b5a6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b5aa:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800b5ae:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b5b2:	ea47 4e0e 	orr.w	lr, r7, lr, lsl #16
 800b5b6:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800b5ba:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800b5be:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800b5c2:	fb28 b903 	smlad	r9, r8, r3, fp
 800b5c6:	4b3c      	ldr	r3, [pc, #240]	; (800b6b8 <D64_GENERIC+0x214>)
 800b5c8:	fb26 9903 	smlad	r9, r6, r3, r9
 800b5cc:	4b3b      	ldr	r3, [pc, #236]	; (800b6bc <D64_GENERIC+0x218>)
 800b5ce:	fb2e 9703 	smlad	r7, lr, r3, r9
 800b5d2:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800b5d6:	fb2a 7909 	smlad	r9, sl, r9, r7
 800b5da:	4b39      	ldr	r3, [pc, #228]	; (800b6c0 <D64_GENERIC+0x21c>)
 800b5dc:	9f01      	ldr	r7, [sp, #4]
 800b5de:	fb28 7303 	smlad	r3, r8, r3, r7
 800b5e2:	4f37      	ldr	r7, [pc, #220]	; (800b6c0 <D64_GENERIC+0x21c>)
 800b5e4:	fb2a 3317 	smladx	r3, sl, r7, r3
 800b5e8:	4f36      	ldr	r7, [pc, #216]	; (800b6c4 <D64_GENERIC+0x220>)
 800b5ea:	fb26 3307 	smlad	r3, r6, r7, r3
 800b5ee:	fb2e 3b17 	smladx	fp, lr, r7, r3
 800b5f2:	f04f 0c01 	mov.w	ip, #1
 800b5f6:	fb28 f80c 	smuad	r8, r8, ip
 800b5fa:	4b33      	ldr	r3, [pc, #204]	; (800b6c8 <D64_GENERIC+0x224>)
 800b5fc:	fb26 8603 	smlad	r6, r6, r3, r8
 800b600:	4b32      	ldr	r3, [pc, #200]	; (800b6cc <D64_GENERIC+0x228>)
 800b602:	fb2e 6e03 	smlad	lr, lr, r3, r6
 800b606:	4b32      	ldr	r3, [pc, #200]	; (800b6d0 <D64_GENERIC+0x22c>)
 800b608:	fb2a e303 	smlad	r3, sl, r3, lr
 800b60c:	9301      	str	r3, [sp, #4]
 800b60e:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800b612:	9b06      	ldr	r3, [sp, #24]
 800b614:	b19b      	cbz	r3, 800b63e <D64_GENERIC+0x19a>
 800b616:	9e02      	ldr	r6, [sp, #8]
 800b618:	9f03      	ldr	r7, [sp, #12]
 800b61a:	444e      	add	r6, r9
 800b61c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b620:	1bf6      	subs	r6, r6, r7
 800b622:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800b626:	fba6 6703 	umull	r6, r7, r6, r3
 800b62a:	fb03 7709 	mla	r7, r3, r9, r7
 800b62e:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800b632:	f147 0700 	adc.w	r7, r7, #0
 800b636:	fa07 f30c 	lsl.w	r3, r7, ip
 800b63a:	4699      	mov	r9, r3
 800b63c:	9302      	str	r3, [sp, #8]
 800b63e:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800b642:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800b646:	9b04      	ldr	r3, [sp, #16]
 800b648:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b64c:	2700      	movs	r7, #0
 800b64e:	fb05 fe0e 	mul.w	lr, r5, lr
 800b652:	3501      	adds	r5, #1
 800b654:	fbc3 6709 	smlal	r6, r7, r3, r9
 800b658:	9b05      	ldr	r3, [sp, #20]
 800b65a:	10be      	asrs	r6, r7, #2
 800b65c:	f306 060f 	ssat	r6, #16, r6
 800b660:	f823 601e 	strh.w	r6, [r3, lr, lsl #1]
 800b664:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b666:	42ae      	cmp	r6, r5
 800b668:	dd13      	ble.n	800b692 <D64_GENERIC+0x1ee>
 800b66a:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
 800b66e:	f1bc 0f01 	cmp.w	ip, #1
 800b672:	f47f af32 	bne.w	800b4da <D64_GENERIC+0x36>
 800b676:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800b678:	f100 0e08 	add.w	lr, r0, #8
 800b67c:	06bb      	lsls	r3, r7, #26
 800b67e:	e890 0440 	ldmia.w	r0, {r6, sl}
 800b682:	d504      	bpl.n	800b68e <D64_GENERIC+0x1ea>
 800b684:	ba76      	rev16	r6, r6
 800b686:	fa9a fa9a 	rev16.w	sl, sl
 800b68a:	4670      	mov	r0, lr
 800b68c:	e751      	b.n	800b532 <D64_GENERIC+0x8e>
 800b68e:	4670      	mov	r0, lr
 800b690:	e74f      	b.n	800b532 <D64_GENERIC+0x8e>
 800b692:	465e      	mov	r6, fp
 800b694:	9b01      	ldr	r3, [sp, #4]
 800b696:	6093      	str	r3, [r2, #8]
 800b698:	2000      	movs	r0, #0
 800b69a:	9b02      	ldr	r3, [sp, #8]
 800b69c:	60d6      	str	r6, [r2, #12]
 800b69e:	6113      	str	r3, [r2, #16]
 800b6a0:	9b03      	ldr	r3, [sp, #12]
 800b6a2:	61d4      	str	r4, [r2, #28]
 800b6a4:	6153      	str	r3, [r2, #20]
 800b6a6:	9b07      	ldr	r3, [sp, #28]
 800b6a8:	6193      	str	r3, [r2, #24]
 800b6aa:	b009      	add	sp, #36	; 0x24
 800b6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b0:	20000000 	.word	0x20000000
 800b6b4:	001c0015 	.word	0x001c0015
 800b6b8:	000f000a 	.word	0x000f000a
 800b6bc:	00060003 	.word	0x00060003
 800b6c0:	0024002a 	.word	0x0024002a
 800b6c4:	002e0030 	.word	0x002e0030
 800b6c8:	00030006 	.word	0x00030006
 800b6cc:	000a000f 	.word	0x000a000f
 800b6d0:	0015001c 	.word	0x0015001c

0800b6d4 <D80_GENERIC>:
 800b6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d8:	b08b      	sub	sp, #44	; 0x2c
 800b6da:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b6dc:	9107      	str	r1, [sp, #28]
 800b6de:	6911      	ldr	r1, [r2, #16]
 800b6e0:	9104      	str	r1, [sp, #16]
 800b6e2:	6951      	ldr	r1, [r2, #20]
 800b6e4:	9105      	str	r1, [sp, #20]
 800b6e6:	6991      	ldr	r1, [r2, #24]
 800b6e8:	9109      	str	r1, [sp, #36]	; 0x24
 800b6ea:	69d1      	ldr	r1, [r2, #28]
 800b6ec:	9101      	str	r1, [sp, #4]
 800b6ee:	6891      	ldr	r1, [r2, #8]
 800b6f0:	9103      	str	r1, [sp, #12]
 800b6f2:	68d1      	ldr	r1, [r2, #12]
 800b6f4:	9102      	str	r1, [sp, #8]
 800b6f6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b6f8:	9106      	str	r1, [sp, #24]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f000 810d 	beq.w	800b91a <D80_GENERIC+0x246>
 800b700:	6a13      	ldr	r3, [r2, #32]
 800b702:	f04f 0800 	mov.w	r8, #0
 800b706:	f8df e264 	ldr.w	lr, [pc, #612]	; 800b96c <D80_GENERIC+0x298>
 800b70a:	9308      	str	r3, [sp, #32]
 800b70c:	9200      	str	r2, [sp, #0]
 800b70e:	e0ee      	b.n	800b8ee <D80_GENERIC+0x21a>
 800b710:	b2db      	uxtb	r3, r3
 800b712:	f890 c000 	ldrb.w	ip, [r0]
 800b716:	b219      	sxth	r1, r3
 800b718:	425c      	negs	r4, r3
 800b71a:	f810 9003 	ldrb.w	r9, [r0, r3]
 800b71e:	004e      	lsls	r6, r1, #1
 800b720:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800b724:	4431      	add	r1, r6
 800b726:	1843      	adds	r3, r0, r1
 800b728:	f810 b001 	ldrb.w	fp, [r0, r1]
 800b72c:	1919      	adds	r1, r3, r4
 800b72e:	5d1b      	ldrb	r3, [r3, r4]
 800b730:	1948      	adds	r0, r1, r5
 800b732:	f811 a005 	ldrb.w	sl, [r1, r5]
 800b736:	041b      	lsls	r3, r3, #16
 800b738:	1907      	adds	r7, r0, r4
 800b73a:	5d01      	ldrb	r1, [r0, r4]
 800b73c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800b740:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800b744:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800b748:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800b74c:	0409      	lsls	r1, r1, #16
 800b74e:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800b752:	eb0b 0905 	add.w	r9, fp, r5
 800b756:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800b75a:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800b75e:	eb09 0b04 	add.w	fp, r9, r4
 800b762:	f819 4004 	ldrb.w	r4, [r9, r4]
 800b766:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800b76a:	4463      	add	r3, ip
 800b76c:	eb0b 0006 	add.w	r0, fp, r6
 800b770:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800b774:	4439      	add	r1, r7
 800b776:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800b77a:	b2df      	uxtb	r7, r3
 800b77c:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800b780:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 800b784:	f85e 3027 	ldr.w	r3, [lr, r7, lsl #2]
 800b788:	fa5f fa81 	uxtb.w	sl, r1
 800b78c:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800b790:	9c01      	ldr	r4, [sp, #4]
 800b792:	f85e 9026 	ldr.w	r9, [lr, r6, lsl #2]
 800b796:	441c      	add	r4, r3
 800b798:	f85e 602c 	ldr.w	r6, [lr, ip, lsl #2]
 800b79c:	f85e c02a 	ldr.w	ip, [lr, sl, lsl #2]
 800b7a0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800b7a4:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b7a8:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800b7ac:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800b7b0:	b2ed      	uxtb	r5, r5
 800b7b2:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800b7b6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b7ba:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 800b7be:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800b7c2:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 800b7c6:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800b7ca:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800b7ce:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800b7d2:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 800b7d6:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800b7da:	0e09      	lsrs	r1, r1, #24
 800b7dc:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800b7e0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800b7e4:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800b7e8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b7ec:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800b7f0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b7f4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b7f8:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800b7fc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b800:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800b804:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b808:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800b80c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800b810:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800b814:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b818:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800b81c:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800b820:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800b824:	9201      	str	r2, [sp, #4]
 800b826:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800b82a:	4a44      	ldr	r2, [pc, #272]	; (800b93c <D80_GENERIC+0x268>)
 800b82c:	9f02      	ldr	r7, [sp, #8]
 800b82e:	fb23 7a02 	smlad	sl, r3, r2, r7
 800b832:	4a43      	ldr	r2, [pc, #268]	; (800b940 <D80_GENERIC+0x26c>)
 800b834:	fb26 aa02 	smlad	sl, r6, r2, sl
 800b838:	4a42      	ldr	r2, [pc, #264]	; (800b944 <D80_GENERIC+0x270>)
 800b83a:	fb24 aa02 	smlad	sl, r4, r2, sl
 800b83e:	4a42      	ldr	r2, [pc, #264]	; (800b948 <D80_GENERIC+0x274>)
 800b840:	fb21 a702 	smlad	r7, r1, r2, sl
 800b844:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800b848:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800b84c:	4a3f      	ldr	r2, [pc, #252]	; (800b94c <D80_GENERIC+0x278>)
 800b84e:	9f03      	ldr	r7, [sp, #12]
 800b850:	fb23 7c02 	smlad	ip, r3, r2, r7
 800b854:	4a3e      	ldr	r2, [pc, #248]	; (800b950 <D80_GENERIC+0x27c>)
 800b856:	fb26 cc02 	smlad	ip, r6, r2, ip
 800b85a:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800b85e:	fb24 c707 	smlad	r7, r4, r7, ip
 800b862:	4a3c      	ldr	r2, [pc, #240]	; (800b954 <D80_GENERIC+0x280>)
 800b864:	fb21 7702 	smlad	r7, r1, r2, r7
 800b868:	4a3b      	ldr	r2, [pc, #236]	; (800b958 <D80_GENERIC+0x284>)
 800b86a:	fb25 7202 	smlad	r2, r5, r2, r7
 800b86e:	f04f 0901 	mov.w	r9, #1
 800b872:	9202      	str	r2, [sp, #8]
 800b874:	fb23 f909 	smuad	r9, r3, r9
 800b878:	4b38      	ldr	r3, [pc, #224]	; (800b95c <D80_GENERIC+0x288>)
 800b87a:	fb26 9603 	smlad	r6, r6, r3, r9
 800b87e:	4f38      	ldr	r7, [pc, #224]	; (800b960 <D80_GENERIC+0x28c>)
 800b880:	fb24 6407 	smlad	r4, r4, r7, r6
 800b884:	4f37      	ldr	r7, [pc, #220]	; (800b964 <D80_GENERIC+0x290>)
 800b886:	fb21 4707 	smlad	r7, r1, r7, r4
 800b88a:	4937      	ldr	r1, [pc, #220]	; (800b968 <D80_GENERIC+0x294>)
 800b88c:	fb25 7301 	smlad	r3, r5, r1, r7
 800b890:	9303      	str	r3, [sp, #12]
 800b892:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800b896:	9b08      	ldr	r3, [sp, #32]
 800b898:	b193      	cbz	r3, 800b8c0 <D80_GENERIC+0x1ec>
 800b89a:	9a04      	ldr	r2, [sp, #16]
 800b89c:	4452      	add	r2, sl
 800b89e:	4614      	mov	r4, r2
 800b8a0:	9a05      	ldr	r2, [sp, #20]
 800b8a2:	f8cd a014 	str.w	sl, [sp, #20]
 800b8a6:	1aa4      	subs	r4, r4, r2
 800b8a8:	17e7      	asrs	r7, r4, #31
 800b8aa:	fba4 4503 	umull	r4, r5, r4, r3
 800b8ae:	fb03 5507 	mla	r5, r3, r7, r5
 800b8b2:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b8b6:	f145 0500 	adc.w	r5, r5, #0
 800b8ba:	006b      	lsls	r3, r5, #1
 800b8bc:	469a      	mov	sl, r3
 800b8be:	9304      	str	r3, [sp, #16]
 800b8c0:	9e00      	ldr	r6, [sp, #0]
 800b8c2:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800b8c6:	9a06      	ldr	r2, [sp, #24]
 800b8c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b8cc:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800b8ce:	2500      	movs	r5, #0
 800b8d0:	fb08 f303 	mul.w	r3, r8, r3
 800b8d4:	fbc2 450a 	smlal	r4, r5, r2, sl
 800b8d8:	9a07      	ldr	r2, [sp, #28]
 800b8da:	f108 0801 	add.w	r8, r8, #1
 800b8de:	10a9      	asrs	r1, r5, #2
 800b8e0:	f301 010f 	ssat	r1, #16, r1
 800b8e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800b8e8:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800b8ea:	4543      	cmp	r3, r8
 800b8ec:	dd14      	ble.n	800b918 <D80_GENERIC+0x244>
 800b8ee:	9b00      	ldr	r3, [sp, #0]
 800b8f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	f47f af0c 	bne.w	800b710 <D80_GENERIC+0x3c>
 800b8f8:	9b00      	ldr	r3, [sp, #0]
 800b8fa:	300a      	adds	r0, #10
 800b8fc:	f850 1c06 	ldr.w	r1, [r0, #-6]
 800b900:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800b902:	f850 5c02 	ldr.w	r5, [r0, #-2]
 800b906:	06b2      	lsls	r2, r6, #26
 800b908:	f850 3c0a 	ldr.w	r3, [r0, #-10]
 800b90c:	f57f af33 	bpl.w	800b776 <D80_GENERIC+0xa2>
 800b910:	ba5b      	rev16	r3, r3
 800b912:	ba49      	rev16	r1, r1
 800b914:	ba6d      	rev16	r5, r5
 800b916:	e72e      	b.n	800b776 <D80_GENERIC+0xa2>
 800b918:	4632      	mov	r2, r6
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	2000      	movs	r0, #0
 800b91e:	6093      	str	r3, [r2, #8]
 800b920:	9b02      	ldr	r3, [sp, #8]
 800b922:	60d3      	str	r3, [r2, #12]
 800b924:	9b01      	ldr	r3, [sp, #4]
 800b926:	61d3      	str	r3, [r2, #28]
 800b928:	9b04      	ldr	r3, [sp, #16]
 800b92a:	6113      	str	r3, [r2, #16]
 800b92c:	9b05      	ldr	r3, [sp, #20]
 800b92e:	6153      	str	r3, [r2, #20]
 800b930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b932:	6193      	str	r3, [r2, #24]
 800b934:	b00b      	add	sp, #44	; 0x2c
 800b936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93a:	bf00      	nop
 800b93c:	002d0024 	.word	0x002d0024
 800b940:	001c0015 	.word	0x001c0015
 800b944:	000f000a 	.word	0x000f000a
 800b948:	00060003 	.word	0x00060003
 800b94c:	0037003f 	.word	0x0037003f
 800b950:	00450049 	.word	0x00450049
 800b954:	00490045 	.word	0x00490045
 800b958:	003f0037 	.word	0x003f0037
 800b95c:	00030006 	.word	0x00030006
 800b960:	000a000f 	.word	0x000a000f
 800b964:	0015001c 	.word	0x0015001c
 800b968:	0024002d 	.word	0x0024002d
 800b96c:	20000000 	.word	0x20000000

0800b970 <D128_GENERIC>:
 800b970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b974:	b08d      	sub	sp, #52	; 0x34
 800b976:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b978:	9201      	str	r2, [sp, #4]
 800b97a:	9109      	str	r1, [sp, #36]	; 0x24
 800b97c:	4611      	mov	r1, r2
 800b97e:	6912      	ldr	r2, [r2, #16]
 800b980:	9206      	str	r2, [sp, #24]
 800b982:	460a      	mov	r2, r1
 800b984:	6949      	ldr	r1, [r1, #20]
 800b986:	4614      	mov	r4, r2
 800b988:	9107      	str	r1, [sp, #28]
 800b98a:	4611      	mov	r1, r2
 800b98c:	6992      	ldr	r2, [r2, #24]
 800b98e:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 800b992:	920b      	str	r2, [sp, #44]	; 0x2c
 800b994:	68e2      	ldr	r2, [r4, #12]
 800b996:	6889      	ldr	r1, [r1, #8]
 800b998:	9202      	str	r2, [sp, #8]
 800b99a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b99c:	9103      	str	r1, [sp, #12]
 800b99e:	9208      	str	r2, [sp, #32]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f000 8180 	beq.w	800bca6 <D128_GENERIC+0x336>
 800b9a6:	6a23      	ldr	r3, [r4, #32]
 800b9a8:	4681      	mov	r9, r0
 800b9aa:	49c8      	ldr	r1, [pc, #800]	; (800bccc <D128_GENERIC+0x35c>)
 800b9ac:	930a      	str	r3, [sp, #40]	; 0x28
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	f8cd a010 	str.w	sl, [sp, #16]
 800b9b4:	9305      	str	r3, [sp, #20]
 800b9b6:	e15d      	b.n	800bc74 <D128_GENERIC+0x304>
 800b9b8:	b2d2      	uxtb	r2, r2
 800b9ba:	f899 b000 	ldrb.w	fp, [r9]
 800b9be:	b213      	sxth	r3, r2
 800b9c0:	4255      	negs	r5, r2
 800b9c2:	f819 0002 	ldrb.w	r0, [r9, r2]
 800b9c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800b9ca:	009f      	lsls	r7, r3, #2
 800b9cc:	eb09 0402 	add.w	r4, r9, r2
 800b9d0:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800b9d4:	f819 8002 	ldrb.w	r8, [r9, r2]
 800b9d8:	443b      	add	r3, r7
 800b9da:	1962      	adds	r2, r4, r5
 800b9dc:	5d64      	ldrb	r4, [r4, r5]
 800b9de:	eb02 0e03 	add.w	lr, r2, r3
 800b9e2:	0424      	lsls	r4, r4, #16
 800b9e4:	5cd3      	ldrb	r3, [r2, r3]
 800b9e6:	eb0e 0c05 	add.w	ip, lr, r5
 800b9ea:	f81e 9015 	ldrb.w	r9, [lr, r5, lsl #1]
 800b9ee:	f81e 2005 	ldrb.w	r2, [lr, r5]
 800b9f2:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800b9f6:	eb0c 0e45 	add.w	lr, ip, r5, lsl #1
 800b9fa:	f81c 8015 	ldrb.w	r8, [ip, r5, lsl #1]
 800b9fe:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800ba02:	eb0e 0c06 	add.w	ip, lr, r6
 800ba06:	f81e a006 	ldrb.w	sl, [lr, r6]
 800ba0a:	0412      	lsls	r2, r2, #16
 800ba0c:	445c      	add	r4, fp
 800ba0e:	eb0c 0e05 	add.w	lr, ip, r5
 800ba12:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800ba16:	f81c 3005 	ldrb.w	r3, [ip, r5]
 800ba1a:	eb0e 0045 	add.w	r0, lr, r5, lsl #1
 800ba1e:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800ba22:	041b      	lsls	r3, r3, #16
 800ba24:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800ba28:	eb00 0b06 	add.w	fp, r0, r6
 800ba2c:	5d80      	ldrb	r0, [r0, r6]
 800ba2e:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800ba32:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800ba36:	eb0b 0a05 	add.w	sl, fp, r5
 800ba3a:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800ba3e:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800ba42:	0436      	lsls	r6, r6, #16
 800ba44:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800ba48:	f81a 5015 	ldrb.w	r5, [sl, r5, lsl #1]
 800ba4c:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800ba50:	4442      	add	r2, r8
 800ba52:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 800ba56:	44b9      	add	r9, r7
 800ba58:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800ba5c:	4473      	add	r3, lr
 800ba5e:	442e      	add	r6, r5
 800ba60:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800ba64:	b2e7      	uxtb	r7, r4
 800ba66:	f3c4 4507 	ubfx	r5, r4, #16, #8
 800ba6a:	0e24      	lsrs	r4, r4, #24
 800ba6c:	f851 b020 	ldr.w	fp, [r1, r0, lsl #2]
 800ba70:	fa5f fe82 	uxtb.w	lr, r2
 800ba74:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800ba78:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 800ba7c:	9804      	ldr	r0, [sp, #16]
 800ba7e:	f851 c025 	ldr.w	ip, [r1, r5, lsl #2]
 800ba82:	4438      	add	r0, r7
 800ba84:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800ba88:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 800ba8c:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800ba90:	4680      	mov	r8, r0
 800ba92:	eb0b 2090 	add.w	r0, fp, r0, lsr #10
 800ba96:	f851 402a 	ldr.w	r4, [r1, sl, lsl #2]
 800ba9a:	0e12      	lsrs	r2, r2, #24
 800ba9c:	eb0c 2c90 	add.w	ip, ip, r0, lsr #10
 800baa0:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800baa4:	fa5f fa83 	uxtb.w	sl, r3
 800baa8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800baac:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800bab0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800bab4:	f851 b02a 	ldr.w	fp, [r1, sl, lsl #2]
 800bab8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800babc:	eb0e 2e95 	add.w	lr, lr, r5, lsr #10
 800bac0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bac4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bac8:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800bacc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bad0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800bad4:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800bad8:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800badc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800bae0:	f3c4 0809 	ubfx	r8, r4, #0, #10
 800bae4:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800bae8:	f851 402c 	ldr.w	r4, [r1, ip, lsl #2]
 800baec:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 800baf0:	0e1b      	lsrs	r3, r3, #24
 800baf2:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800baf6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800bafa:	f851 a02c 	ldr.w	sl, [r1, ip, lsl #2]
 800bafe:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bb02:	eb04 2c9b 	add.w	ip, r4, fp, lsr #10
 800bb06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bb0a:	ea48 4e0e 	orr.w	lr, r8, lr, lsl #16
 800bb0e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800bb12:	eb0a 2a9c 	add.w	sl, sl, ip, lsr #10
 800bb16:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800bb1a:	fa5f f886 	uxtb.w	r8, r6
 800bb1e:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800bb22:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bb26:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800bb2a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800bb2e:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800bb32:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 800bb36:	eb08 2893 	add.w	r8, r8, r3, lsr #10
 800bb3a:	f3c6 4407 	ubfx	r4, r6, #16, #8
 800bb3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bb42:	0e36      	lsrs	r6, r6, #24
 800bb44:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800bb48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb4c:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800bb50:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800bb54:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800bb58:	ea43 4a0a 	orr.w	sl, r3, sl, lsl #16
 800bb5c:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800bb60:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bb64:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800bb68:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bb6c:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 800bb70:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800bb74:	0ab2      	lsrs	r2, r6, #10
 800bb76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bb7a:	9204      	str	r2, [sp, #16]
 800bb7c:	9c02      	ldr	r4, [sp, #8]
 800bb7e:	4a54      	ldr	r2, [pc, #336]	; (800bcd0 <D128_GENERIC+0x360>)
 800bb80:	fb20 4602 	smlad	r6, r0, r2, r4
 800bb84:	4a53      	ldr	r2, [pc, #332]	; (800bcd4 <D128_GENERIC+0x364>)
 800bb86:	fb25 6602 	smlad	r6, r5, r2, r6
 800bb8a:	4a53      	ldr	r2, [pc, #332]	; (800bcd8 <D128_GENERIC+0x368>)
 800bb8c:	fb2e 6602 	smlad	r6, lr, r2, r6
 800bb90:	4a52      	ldr	r2, [pc, #328]	; (800bcdc <D128_GENERIC+0x36c>)
 800bb92:	fb27 6602 	smlad	r6, r7, r2, r6
 800bb96:	4a52      	ldr	r2, [pc, #328]	; (800bce0 <D128_GENERIC+0x370>)
 800bb98:	fb2b 6602 	smlad	r6, fp, r2, r6
 800bb9c:	4a51      	ldr	r2, [pc, #324]	; (800bce4 <D128_GENERIC+0x374>)
 800bb9e:	fb2a 6602 	smlad	r6, sl, r2, r6
 800bba2:	4a51      	ldr	r2, [pc, #324]	; (800bce8 <D128_GENERIC+0x378>)
 800bba4:	fb28 6202 	smlad	r2, r8, r2, r6
 800bba8:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800bbac:	fb23 2606 	smlad	r6, r3, r6, r2
 800bbb0:	4a4e      	ldr	r2, [pc, #312]	; (800bcec <D128_GENERIC+0x37c>)
 800bbb2:	9c03      	ldr	r4, [sp, #12]
 800bbb4:	fb20 4202 	smlad	r2, r0, r2, r4
 800bbb8:	4c4d      	ldr	r4, [pc, #308]	; (800bcf0 <D128_GENERIC+0x380>)
 800bbba:	fb25 2404 	smlad	r4, r5, r4, r2
 800bbbe:	4a4d      	ldr	r2, [pc, #308]	; (800bcf4 <D128_GENERIC+0x384>)
 800bbc0:	fb2e 4202 	smlad	r2, lr, r2, r4
 800bbc4:	4c4c      	ldr	r4, [pc, #304]	; (800bcf8 <D128_GENERIC+0x388>)
 800bbc6:	fb27 2204 	smlad	r2, r7, r4, r2
 800bbca:	4c4c      	ldr	r4, [pc, #304]	; (800bcfc <D128_GENERIC+0x38c>)
 800bbcc:	fb2b 2404 	smlad	r4, fp, r4, r2
 800bbd0:	4a4b      	ldr	r2, [pc, #300]	; (800bd00 <D128_GENERIC+0x390>)
 800bbd2:	fb2a 4402 	smlad	r4, sl, r2, r4
 800bbd6:	4a4b      	ldr	r2, [pc, #300]	; (800bd04 <D128_GENERIC+0x394>)
 800bbd8:	fb28 4202 	smlad	r2, r8, r2, r4
 800bbdc:	4c4a      	ldr	r4, [pc, #296]	; (800bd08 <D128_GENERIC+0x398>)
 800bbde:	fb23 2204 	smlad	r2, r3, r4, r2
 800bbe2:	f04f 0c01 	mov.w	ip, #1
 800bbe6:	9202      	str	r2, [sp, #8]
 800bbe8:	fb20 f00c 	smuad	r0, r0, ip
 800bbec:	4a47      	ldr	r2, [pc, #284]	; (800bd0c <D128_GENERIC+0x39c>)
 800bbee:	fb25 0502 	smlad	r5, r5, r2, r0
 800bbf2:	4a47      	ldr	r2, [pc, #284]	; (800bd10 <D128_GENERIC+0x3a0>)
 800bbf4:	fb2e 5e02 	smlad	lr, lr, r2, r5
 800bbf8:	4a46      	ldr	r2, [pc, #280]	; (800bd14 <D128_GENERIC+0x3a4>)
 800bbfa:	fb27 e202 	smlad	r2, r7, r2, lr
 800bbfe:	4c46      	ldr	r4, [pc, #280]	; (800bd18 <D128_GENERIC+0x3a8>)
 800bc00:	fb2b 2204 	smlad	r2, fp, r4, r2
 800bc04:	4c45      	ldr	r4, [pc, #276]	; (800bd1c <D128_GENERIC+0x3ac>)
 800bc06:	fb2a 2204 	smlad	r2, sl, r4, r2
 800bc0a:	4c45      	ldr	r4, [pc, #276]	; (800bd20 <D128_GENERIC+0x3b0>)
 800bc0c:	fb28 2204 	smlad	r2, r8, r4, r2
 800bc10:	4c44      	ldr	r4, [pc, #272]	; (800bd24 <D128_GENERIC+0x3b4>)
 800bc12:	fb23 2304 	smlad	r3, r3, r4, r2
 800bc16:	9303      	str	r3, [sp, #12]
 800bc18:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800bc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc1e:	b193      	cbz	r3, 800bc46 <D128_GENERIC+0x2d6>
 800bc20:	9a06      	ldr	r2, [sp, #24]
 800bc22:	9807      	ldr	r0, [sp, #28]
 800bc24:	4432      	add	r2, r6
 800bc26:	9607      	str	r6, [sp, #28]
 800bc28:	461e      	mov	r6, r3
 800bc2a:	1a12      	subs	r2, r2, r0
 800bc2c:	17d5      	asrs	r5, r2, #31
 800bc2e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc32:	fb06 3305 	mla	r3, r6, r5, r3
 800bc36:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800bc3a:	f143 0300 	adc.w	r3, r3, #0
 800bc3e:	fa03 f30c 	lsl.w	r3, r3, ip
 800bc42:	461e      	mov	r6, r3
 800bc44:	9306      	str	r3, [sp, #24]
 800bc46:	9c01      	ldr	r4, [sp, #4]
 800bc48:	01f6      	lsls	r6, r6, #7
 800bc4a:	9d05      	ldr	r5, [sp, #20]
 800bc4c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc50:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800bc52:	2300      	movs	r3, #0
 800bc54:	9f08      	ldr	r7, [sp, #32]
 800bc56:	fb05 f000 	mul.w	r0, r5, r0
 800bc5a:	3501      	adds	r5, #1
 800bc5c:	fbc7 2306 	smlal	r2, r3, r7, r6
 800bc60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc62:	109b      	asrs	r3, r3, #2
 800bc64:	9505      	str	r5, [sp, #20]
 800bc66:	f303 030f 	ssat	r3, #16, r3
 800bc6a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800bc6e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800bc70:	42ab      	cmp	r3, r5
 800bc72:	dd16      	ble.n	800bca2 <D128_GENERIC+0x332>
 800bc74:	9b01      	ldr	r3, [sp, #4]
 800bc76:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bc78:	2a01      	cmp	r2, #1
 800bc7a:	f47f ae9d 	bne.w	800b9b8 <D128_GENERIC+0x48>
 800bc7e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bc80:	f109 0204 	add.w	r2, r9, #4
 800bc84:	f109 0510 	add.w	r5, r9, #16
 800bc88:	f8d9 4000 	ldr.w	r4, [r9]
 800bc8c:	0680      	lsls	r0, r0, #26
 800bc8e:	ca4c      	ldmia	r2, {r2, r3, r6}
 800bc90:	d505      	bpl.n	800bc9e <D128_GENERIC+0x32e>
 800bc92:	ba64      	rev16	r4, r4
 800bc94:	ba52      	rev16	r2, r2
 800bc96:	ba5b      	rev16	r3, r3
 800bc98:	ba76      	rev16	r6, r6
 800bc9a:	46a9      	mov	r9, r5
 800bc9c:	e6e0      	b.n	800ba60 <D128_GENERIC+0xf0>
 800bc9e:	46a9      	mov	r9, r5
 800bca0:	e6de      	b.n	800ba60 <D128_GENERIC+0xf0>
 800bca2:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bca6:	9a01      	ldr	r2, [sp, #4]
 800bca8:	2000      	movs	r0, #0
 800bcaa:	9903      	ldr	r1, [sp, #12]
 800bcac:	4613      	mov	r3, r2
 800bcae:	f8c2 a01c 	str.w	sl, [r2, #28]
 800bcb2:	6091      	str	r1, [r2, #8]
 800bcb4:	9902      	ldr	r1, [sp, #8]
 800bcb6:	60d1      	str	r1, [r2, #12]
 800bcb8:	9907      	ldr	r1, [sp, #28]
 800bcba:	9a06      	ldr	r2, [sp, #24]
 800bcbc:	6159      	str	r1, [r3, #20]
 800bcbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bcc0:	611a      	str	r2, [r3, #16]
 800bcc2:	6199      	str	r1, [r3, #24]
 800bcc4:	b00d      	add	sp, #52	; 0x34
 800bcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcca:	bf00      	nop
 800bccc:	20000000 	.word	0x20000000
 800bcd0:	00780069 	.word	0x00780069
 800bcd4:	005b004e 	.word	0x005b004e
 800bcd8:	00420037 	.word	0x00420037
 800bcdc:	002d0024 	.word	0x002d0024
 800bce0:	001c0015 	.word	0x001c0015
 800bce4:	000f000a 	.word	0x000f000a
 800bce8:	00060003 	.word	0x00060003
 800bcec:	00880096 	.word	0x00880096
 800bcf0:	00a200ac 	.word	0x00a200ac
 800bcf4:	00b400ba 	.word	0x00b400ba
 800bcf8:	00be00c0 	.word	0x00be00c0
 800bcfc:	00c000be 	.word	0x00c000be
 800bd00:	00ba00b4 	.word	0x00ba00b4
 800bd04:	00ac00a2 	.word	0x00ac00a2
 800bd08:	00960088 	.word	0x00960088
 800bd0c:	00030006 	.word	0x00030006
 800bd10:	000a000f 	.word	0x000a000f
 800bd14:	0015001c 	.word	0x0015001c
 800bd18:	0024002d 	.word	0x0024002d
 800bd1c:	00370042 	.word	0x00370042
 800bd20:	004e005b 	.word	0x004e005b
 800bd24:	00690078 	.word	0x00690078

0800bd28 <D16_1CH_HTONS_VOL_HP>:
 800bd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2c:	4692      	mov	sl, r2
 800bd2e:	b087      	sub	sp, #28
 800bd30:	4681      	mov	r9, r0
 800bd32:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800bd34:	f8da 3018 	ldr.w	r3, [sl, #24]
 800bd38:	f8da 000c 	ldr.w	r0, [sl, #12]
 800bd3c:	9303      	str	r3, [sp, #12]
 800bd3e:	f8da 6010 	ldr.w	r6, [sl, #16]
 800bd42:	f8da 5014 	ldr.w	r5, [sl, #20]
 800bd46:	f8da 301c 	ldr.w	r3, [sl, #28]
 800bd4a:	f8da 4008 	ldr.w	r4, [sl, #8]
 800bd4e:	9004      	str	r0, [sp, #16]
 800bd50:	f8da b030 	ldr.w	fp, [sl, #48]	; 0x30
 800bd54:	f8da e020 	ldr.w	lr, [sl, #32]
 800bd58:	2a00      	cmp	r2, #0
 800bd5a:	d05a      	beq.n	800be12 <D16_1CH_HTONS_VOL_HP+0xea>
 800bd5c:	f1a1 0802 	sub.w	r8, r1, #2
 800bd60:	eb09 0242 	add.w	r2, r9, r2, lsl #1
 800bd64:	f8cd b008 	str.w	fp, [sp, #8]
 800bd68:	46cb      	mov	fp, r9
 800bd6a:	f8cd a014 	str.w	sl, [sp, #20]
 800bd6e:	46c2      	mov	sl, r8
 800bd70:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 800be20 <D16_1CH_HTONS_VOL_HP+0xf8>
 800bd74:	9201      	str	r2, [sp, #4]
 800bd76:	f85b 2b02 	ldr.w	r2, [fp], #2
 800bd7a:	ba52      	rev16	r2, r2
 800bd7c:	b2d0      	uxtb	r0, r2
 800bd7e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800bd82:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 800bd86:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	eb00 2093 	add.w	r0, r0, r3, lsr #10
 800bd90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bd94:	f3c0 0109 	ubfx	r1, r0, #0, #10
 800bd98:	0a83      	lsrs	r3, r0, #10
 800bd9a:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800bd9e:	491e      	ldr	r1, [pc, #120]	; (800be18 <D16_1CH_HTONS_VOL_HP+0xf0>)
 800bda0:	fb22 4101 	smlad	r1, r2, r1, r4
 800bda4:	481d      	ldr	r0, [pc, #116]	; (800be1c <D16_1CH_HTONS_VOL_HP+0xf4>)
 800bda6:	fb22 f400 	smuad	r4, r2, r0
 800bdaa:	f5a1 6200 	sub.w	r2, r1, #2048	; 0x800
 800bdae:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800bdb2:	f04f 0900 	mov.w	r9, #0
 800bdb6:	1990      	adds	r0, r2, r6
 800bdb8:	1b40      	subs	r0, r0, r5
 800bdba:	4615      	mov	r5, r2
 800bdbc:	17c7      	asrs	r7, r0, #31
 800bdbe:	fba0 010e 	umull	r0, r1, r0, lr
 800bdc2:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800bdc6:	fb0e 1107 	mla	r1, lr, r7, r1
 800bdca:	f141 0100 	adc.w	r1, r1, #0
 800bdce:	0448      	lsls	r0, r1, #17
 800bdd0:	004e      	lsls	r6, r1, #1
 800bdd2:	9902      	ldr	r1, [sp, #8]
 800bdd4:	fbc0 8901 	smlal	r8, r9, r0, r1
 800bdd8:	ea4f 01a9 	mov.w	r1, r9, asr #2
 800bddc:	f301 010f 	ssat	r1, #16, r1
 800bde0:	f82a 1f02 	strh.w	r1, [sl, #2]!
 800bde4:	9901      	ldr	r1, [sp, #4]
 800bde6:	458b      	cmp	fp, r1
 800bde8:	d1c5      	bne.n	800bd76 <D16_1CH_HTONS_VOL_HP+0x4e>
 800bdea:	f8dd a014 	ldr.w	sl, [sp, #20]
 800bdee:	9904      	ldr	r1, [sp, #16]
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	f8ca 301c 	str.w	r3, [sl, #28]
 800bdf6:	9b03      	ldr	r3, [sp, #12]
 800bdf8:	f8ca 4008 	str.w	r4, [sl, #8]
 800bdfc:	f8ca 100c 	str.w	r1, [sl, #12]
 800be00:	f8ca 6010 	str.w	r6, [sl, #16]
 800be04:	f8ca 2014 	str.w	r2, [sl, #20]
 800be08:	f8ca 3018 	str.w	r3, [sl, #24]
 800be0c:	b007      	add	sp, #28
 800be0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be12:	462a      	mov	r2, r5
 800be14:	4601      	mov	r1, r0
 800be16:	e7eb      	b.n	800bdf0 <D16_1CH_HTONS_VOL_HP+0xc8>
 800be18:	00030001 	.word	0x00030001
 800be1c:	00010003 	.word	0x00010003
 800be20:	20000000 	.word	0x20000000

0800be24 <D24_1CH_HTONS_VOL_HP>:
 800be24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be28:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800be2a:	b087      	sub	sp, #28
 800be2c:	4616      	mov	r6, r2
 800be2e:	6914      	ldr	r4, [r2, #16]
 800be30:	9302      	str	r3, [sp, #8]
 800be32:	9205      	str	r2, [sp, #20]
 800be34:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800be38:	6b37      	ldr	r7, [r6, #48]	; 0x30
 800be3a:	6992      	ldr	r2, [r2, #24]
 800be3c:	9d02      	ldr	r5, [sp, #8]
 800be3e:	9204      	str	r2, [sp, #16]
 800be40:	68b3      	ldr	r3, [r6, #8]
 800be42:	69f2      	ldr	r2, [r6, #28]
 800be44:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800be48:	9703      	str	r7, [sp, #12]
 800be4a:	f8d6 a020 	ldr.w	sl, [r6, #32]
 800be4e:	2d00      	cmp	r5, #0
 800be50:	d076      	beq.n	800bf40 <D24_1CH_HTONS_VOL_HP+0x11c>
 800be52:	f04f 0e00 	mov.w	lr, #0
 800be56:	f1a1 0b02 	sub.w	fp, r1, #2
 800be5a:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 800bf50 <D24_1CH_HTONS_VOL_HP+0x12c>
 800be5e:	f8cd 8004 	str.w	r8, [sp, #4]
 800be62:	e052      	b.n	800bf0a <D24_1CH_HTONS_VOL_HP+0xe6>
 800be64:	7801      	ldrb	r1, [r0, #0]
 800be66:	3002      	adds	r0, #2
 800be68:	7847      	ldrb	r7, [r0, #1]
 800be6a:	0209      	lsls	r1, r1, #8
 800be6c:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800be70:	eb01 4707 	add.w	r7, r1, r7, lsl #16
 800be74:	442f      	add	r7, r5
 800be76:	b2fd      	uxtb	r5, r7
 800be78:	f3c7 2107 	ubfx	r1, r7, #8, #8
 800be7c:	0c3f      	lsrs	r7, r7, #16
 800be7e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800be82:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
 800be86:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800be8a:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 800be8e:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800be92:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800be96:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800be9a:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800be9e:	9e01      	ldr	r6, [sp, #4]
 800bea0:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800bea4:	4928      	ldr	r1, [pc, #160]	; (800bf48 <D24_1CH_HTONS_VOL_HP+0x124>)
 800bea6:	fb25 6701 	smlad	r7, r5, r1, r6
 800beaa:	4928      	ldr	r1, [pc, #160]	; (800bf4c <D24_1CH_HTONS_VOL_HP+0x128>)
 800beac:	fb25 3801 	smlad	r8, r5, r1, r3
 800beb0:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800beb4:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800beb8:	eb08 0346 	add.w	r3, r8, r6, lsl #1
 800bebc:	9301      	str	r3, [sp, #4]
 800bebe:	2301      	movs	r3, #1
 800bec0:	fb25 f503 	smuad	r5, r5, r3
 800bec4:	f5a7 51d8 	sub.w	r1, r7, #6912	; 0x1b00
 800bec8:	449e      	add	lr, r3
 800beca:	1973      	adds	r3, r6, r5
 800becc:	f04f 0800 	mov.w	r8, #0
 800bed0:	440c      	add	r4, r1
 800bed2:	eba4 0409 	sub.w	r4, r4, r9
 800bed6:	4689      	mov	r9, r1
 800bed8:	17e7      	asrs	r7, r4, #31
 800beda:	fba4 450a 	umull	r4, r5, r4, sl
 800bede:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800bee2:	fb0a 5507 	mla	r5, sl, r7, r5
 800bee6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800beea:	f145 0500 	adc.w	r5, r5, #0
 800beee:	03ee      	lsls	r6, r5, #15
 800bef0:	006c      	lsls	r4, r5, #1
 800bef2:	9d03      	ldr	r5, [sp, #12]
 800bef4:	fbc5 7806 	smlal	r7, r8, r5, r6
 800bef8:	4647      	mov	r7, r8
 800befa:	10bd      	asrs	r5, r7, #2
 800befc:	f305 050f 	ssat	r5, #16, r5
 800bf00:	f82b 5f02 	strh.w	r5, [fp, #2]!
 800bf04:	9d02      	ldr	r5, [sp, #8]
 800bf06:	45ae      	cmp	lr, r5
 800bf08:	d00b      	beq.n	800bf22 <D24_1CH_HTONS_VOL_HP+0xfe>
 800bf0a:	f01e 0f01 	tst.w	lr, #1
 800bf0e:	d0a9      	beq.n	800be64 <D24_1CH_HTONS_VOL_HP+0x40>
 800bf10:	78c1      	ldrb	r1, [r0, #3]
 800bf12:	7887      	ldrb	r7, [r0, #2]
 800bf14:	0209      	lsls	r1, r1, #8
 800bf16:	f810 5b04 	ldrb.w	r5, [r0], #4
 800bf1a:	eb01 4707 	add.w	r7, r1, r7, lsl #16
 800bf1e:	442f      	add	r7, r5
 800bf20:	e7a9      	b.n	800be76 <D24_1CH_HTONS_VOL_HP+0x52>
 800bf22:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bf26:	9d05      	ldr	r5, [sp, #20]
 800bf28:	2000      	movs	r0, #0
 800bf2a:	6169      	str	r1, [r5, #20]
 800bf2c:	9904      	ldr	r1, [sp, #16]
 800bf2e:	60ab      	str	r3, [r5, #8]
 800bf30:	f8c5 800c 	str.w	r8, [r5, #12]
 800bf34:	61ea      	str	r2, [r5, #28]
 800bf36:	612c      	str	r4, [r5, #16]
 800bf38:	61a9      	str	r1, [r5, #24]
 800bf3a:	b007      	add	sp, #28
 800bf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf40:	4649      	mov	r1, r9
 800bf42:	4635      	mov	r5, r6
 800bf44:	e7f0      	b.n	800bf28 <D24_1CH_HTONS_VOL_HP+0x104>
 800bf46:	bf00      	nop
 800bf48:	00030001 	.word	0x00030001
 800bf4c:	00060007 	.word	0x00060007
 800bf50:	20000000 	.word	0x20000000

0800bf54 <D32_1CH_HTONS_VOL_HP>:
 800bf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf58:	4693      	mov	fp, r2
 800bf5a:	b087      	sub	sp, #28
 800bf5c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800bf5e:	f8db 3018 	ldr.w	r3, [fp, #24]
 800bf62:	f8db 5030 	ldr.w	r5, [fp, #48]	; 0x30
 800bf66:	9304      	str	r3, [sp, #16]
 800bf68:	f8db 4010 	ldr.w	r4, [fp, #16]
 800bf6c:	f8db c014 	ldr.w	ip, [fp, #20]
 800bf70:	f8db 601c 	ldr.w	r6, [fp, #28]
 800bf74:	f8db 3008 	ldr.w	r3, [fp, #8]
 800bf78:	f8db e00c 	ldr.w	lr, [fp, #12]
 800bf7c:	9502      	str	r5, [sp, #8]
 800bf7e:	f8db a020 	ldr.w	sl, [fp, #32]
 800bf82:	2a00      	cmp	r2, #0
 800bf84:	d07d      	beq.n	800c082 <D32_1CH_HTONS_VOL_HP+0x12e>
 800bf86:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800bf8a:	9101      	str	r1, [sp, #4]
 800bf8c:	f8cd b014 	str.w	fp, [sp, #20]
 800bf90:	4621      	mov	r1, r4
 800bf92:	4f3d      	ldr	r7, [pc, #244]	; (800c088 <D32_1CH_HTONS_VOL_HP+0x134>)
 800bf94:	4693      	mov	fp, r2
 800bf96:	f8cd a00c 	str.w	sl, [sp, #12]
 800bf9a:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf9e:	fa92 f992 	rev16.w	r9, r2
 800bfa2:	fa5f f889 	uxtb.w	r8, r9
 800bfa6:	f3c9 2207 	ubfx	r2, r9, #8, #8
 800bfaa:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800bfae:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800bfb2:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 800bfb6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800bfba:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 800bfbe:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800bfc2:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800bfc6:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800bfca:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800bfce:	4c2f      	ldr	r4, [pc, #188]	; (800c08c <D32_1CH_HTONS_VOL_HP+0x138>)
 800bfd0:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800bfd4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bfd8:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800bfdc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bfe0:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 800bfe4:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800bfe8:	ea48 4505 	orr.w	r5, r8, r5, lsl #16
 800bfec:	fb22 ee04 	smlad	lr, r2, r4, lr
 800bff0:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800bff4:	fb25 e904 	smlad	r9, r5, r4, lr
 800bff8:	4c25      	ldr	r4, [pc, #148]	; (800c090 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800bffa:	fb22 3e04 	smlad	lr, r2, r4, r3
 800bffe:	4b25      	ldr	r3, [pc, #148]	; (800c094 <D32_1CH_HTONS_VOL_HP+0x140>)
 800c000:	fb25 ee03 	smlad	lr, r5, r3, lr
 800c004:	2301      	movs	r3, #1
 800c006:	fb22 f203 	smuad	r2, r2, r3
 800c00a:	4b23      	ldr	r3, [pc, #140]	; (800c098 <D32_1CH_HTONS_VOL_HP+0x144>)
 800c00c:	fb25 2303 	smlad	r3, r5, r3, r2
 800c010:	f5a9 4280 	sub.w	r2, r9, #16384	; 0x4000
 800c014:	f04f 0a00 	mov.w	sl, #0
 800c018:	4411      	add	r1, r2
 800c01a:	eba1 040c 	sub.w	r4, r1, ip
 800c01e:	9903      	ldr	r1, [sp, #12]
 800c020:	4694      	mov	ip, r2
 800c022:	ea4f 79e4 	mov.w	r9, r4, asr #31
 800c026:	fba4 4501 	umull	r4, r5, r4, r1
 800c02a:	fb01 5509 	mla	r5, r1, r9, r5
 800c02e:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800c032:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800c036:	9c02      	ldr	r4, [sp, #8]
 800c038:	f145 0500 	adc.w	r5, r5, #0
 800c03c:	ea4f 3885 	mov.w	r8, r5, lsl #14
 800c040:	0069      	lsls	r1, r5, #1
 800c042:	fbc8 9a04 	smlal	r9, sl, r8, r4
 800c046:	9c01      	ldr	r4, [sp, #4]
 800c048:	ea4f 05aa 	mov.w	r5, sl, asr #2
 800c04c:	f305 050f 	ssat	r5, #16, r5
 800c050:	f824 5b02 	strh.w	r5, [r4], #2
 800c054:	455c      	cmp	r4, fp
 800c056:	9401      	str	r4, [sp, #4]
 800c058:	d19f      	bne.n	800bf9a <D32_1CH_HTONS_VOL_HP+0x46>
 800c05a:	460c      	mov	r4, r1
 800c05c:	f8dd b014 	ldr.w	fp, [sp, #20]
 800c060:	f8cb 3008 	str.w	r3, [fp, #8]
 800c064:	2000      	movs	r0, #0
 800c066:	9b04      	ldr	r3, [sp, #16]
 800c068:	f8cb e00c 	str.w	lr, [fp, #12]
 800c06c:	f8cb 601c 	str.w	r6, [fp, #28]
 800c070:	f8cb 4010 	str.w	r4, [fp, #16]
 800c074:	f8cb 2014 	str.w	r2, [fp, #20]
 800c078:	f8cb 3018 	str.w	r3, [fp, #24]
 800c07c:	b007      	add	sp, #28
 800c07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c082:	4662      	mov	r2, ip
 800c084:	e7ec      	b.n	800c060 <D32_1CH_HTONS_VOL_HP+0x10c>
 800c086:	bf00      	nop
 800c088:	20000000 	.word	0x20000000
 800c08c:	00060003 	.word	0x00060003
 800c090:	000a000c 	.word	0x000a000c
 800c094:	000c000a 	.word	0x000c000a
 800c098:	00030006 	.word	0x00030006

0800c09c <D48_1CH_HTONS_VOL_HP>:
 800c09c:	4613      	mov	r3, r2
 800c09e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a2:	461c      	mov	r4, r3
 800c0a4:	b087      	sub	sp, #28
 800c0a6:	4680      	mov	r8, r0
 800c0a8:	691e      	ldr	r6, [r3, #16]
 800c0aa:	4610      	mov	r0, r2
 800c0ac:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800c0b0:	699b      	ldr	r3, [r3, #24]
 800c0b2:	9205      	str	r2, [sp, #20]
 800c0b4:	9304      	str	r3, [sp, #16]
 800c0b6:	69c5      	ldr	r5, [r0, #28]
 800c0b8:	6883      	ldr	r3, [r0, #8]
 800c0ba:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800c0be:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800c0c0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800c0c2:	f8d4 b020 	ldr.w	fp, [r4, #32]
 800c0c6:	9002      	str	r0, [sp, #8]
 800c0c8:	2a00      	cmp	r2, #0
 800c0ca:	f000 8097 	beq.w	800c1fc <D48_1CH_HTONS_VOL_HP+0x160>
 800c0ce:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c0d2:	468c      	mov	ip, r1
 800c0d4:	4c4a      	ldr	r4, [pc, #296]	; (800c200 <D48_1CH_HTONS_VOL_HP+0x164>)
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	4640      	mov	r0, r8
 800c0da:	9203      	str	r2, [sp, #12]
 800c0dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800c0e0:	6803      	ldr	r3, [r0, #0]
 800c0e2:	3006      	adds	r0, #6
 800c0e4:	f850 2c02 	ldr.w	r2, [r0, #-2]
 800c0e8:	ba5b      	rev16	r3, r3
 800c0ea:	fa92 fa92 	rev16.w	sl, r2
 800c0ee:	fa5f f883 	uxtb.w	r8, r3
 800c0f2:	f3c3 2707 	ubfx	r7, r3, #8, #8
 800c0f6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c0fa:	0e1b      	lsrs	r3, r3, #24
 800c0fc:	f854 9028 	ldr.w	r9, [r4, r8, lsl #2]
 800c100:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800c104:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800c108:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 800c10c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800c110:	fa5f f28a 	uxtb.w	r2, sl
 800c114:	eb07 2799 	add.w	r7, r7, r9, lsr #10
 800c118:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 800c11c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c120:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800c124:	eb05 2897 	add.w	r8, r5, r7, lsr #10
 800c128:	f854 502a 	ldr.w	r5, [r4, sl, lsl #2]
 800c12c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c130:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 800c134:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c138:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 800c13c:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800c140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c144:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800c148:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c14c:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 800c150:	f3c5 0309 	ubfx	r3, r5, #0, #10
 800c154:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800c158:	4b2a      	ldr	r3, [pc, #168]	; (800c204 <D48_1CH_HTONS_VOL_HP+0x168>)
 800c15a:	fb27 ea03 	smlad	sl, r7, r3, lr
 800c15e:	4b2a      	ldr	r3, [pc, #168]	; (800c208 <D48_1CH_HTONS_VOL_HP+0x16c>)
 800c160:	fb28 aa03 	smlad	sl, r8, r3, sl
 800c164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c168:	fb22 aa03 	smlad	sl, r2, r3, sl
 800c16c:	4b27      	ldr	r3, [pc, #156]	; (800c20c <D48_1CH_HTONS_VOL_HP+0x170>)
 800c16e:	fb27 1e03 	smlad	lr, r7, r3, r1
 800c172:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800c176:	fb28 ee03 	smlad	lr, r8, r3, lr
 800c17a:	4b25      	ldr	r3, [pc, #148]	; (800c210 <D48_1CH_HTONS_VOL_HP+0x174>)
 800c17c:	fb22 ee03 	smlad	lr, r2, r3, lr
 800c180:	f04f 0901 	mov.w	r9, #1
 800c184:	fb27 f709 	smuad	r7, r7, r9
 800c188:	4b22      	ldr	r3, [pc, #136]	; (800c214 <D48_1CH_HTONS_VOL_HP+0x178>)
 800c18a:	fb28 7803 	smlad	r8, r8, r3, r7
 800c18e:	4b22      	ldr	r3, [pc, #136]	; (800c218 <D48_1CH_HTONS_VOL_HP+0x17c>)
 800c190:	fb22 8103 	smlad	r1, r2, r3, r8
 800c194:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800c198:	9b01      	ldr	r3, [sp, #4]
 800c19a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c19e:	eb0a 0206 	add.w	r2, sl, r6
 800c1a2:	f8cd a004 	str.w	sl, [sp, #4]
 800c1a6:	1ad2      	subs	r2, r2, r3
 800c1a8:	17d7      	asrs	r7, r2, #31
 800c1aa:	fba2 230b 	umull	r2, r3, r2, fp
 800c1ae:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c1b2:	fb0b 3307 	mla	r3, fp, r7, r3
 800c1b6:	f143 0300 	adc.w	r3, r3, #0
 800c1ba:	031a      	lsls	r2, r3, #12
 800c1bc:	fa03 f609 	lsl.w	r6, r3, r9
 800c1c0:	9b02      	ldr	r3, [sp, #8]
 800c1c2:	f04f 0900 	mov.w	r9, #0
 800c1c6:	fbc2 8903 	smlal	r8, r9, r2, r3
 800c1ca:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800c1ce:	f303 030f 	ssat	r3, #16, r3
 800c1d2:	f82c 3b02 	strh.w	r3, [ip], #2
 800c1d6:	9b03      	ldr	r3, [sp, #12]
 800c1d8:	459c      	cmp	ip, r3
 800c1da:	d181      	bne.n	800c0e0 <D48_1CH_HTONS_VOL_HP+0x44>
 800c1dc:	460b      	mov	r3, r1
 800c1de:	9905      	ldr	r1, [sp, #20]
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	460a      	mov	r2, r1
 800c1e4:	608b      	str	r3, [r1, #8]
 800c1e6:	f8c1 e00c 	str.w	lr, [r1, #12]
 800c1ea:	61cd      	str	r5, [r1, #28]
 800c1ec:	610e      	str	r6, [r1, #16]
 800c1ee:	f8c1 a014 	str.w	sl, [r1, #20]
 800c1f2:	9904      	ldr	r1, [sp, #16]
 800c1f4:	6191      	str	r1, [r2, #24]
 800c1f6:	b007      	add	sp, #28
 800c1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1fc:	46ca      	mov	sl, r9
 800c1fe:	e7ee      	b.n	800c1de <D48_1CH_HTONS_VOL_HP+0x142>
 800c200:	20000000 	.word	0x20000000
 800c204:	000f000a 	.word	0x000f000a
 800c208:	00060003 	.word	0x00060003
 800c20c:	00150019 	.word	0x00150019
 800c210:	00190015 	.word	0x00190015
 800c214:	00030006 	.word	0x00030006
 800c218:	000a000f 	.word	0x000a000f

0800c21c <D64_1CH_HTONS_VOL_HP>:
 800c21c:	4613      	mov	r3, r2
 800c21e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c222:	f8d3 c014 	ldr.w	ip, [r3, #20]
 800c226:	461d      	mov	r5, r3
 800c228:	b087      	sub	sp, #28
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	462e      	mov	r6, r5
 800c22e:	69ef      	ldr	r7, [r5, #28]
 800c230:	9304      	str	r3, [sp, #16]
 800c232:	4614      	mov	r4, r2
 800c234:	68ab      	ldr	r3, [r5, #8]
 800c236:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800c23a:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800c23c:	9205      	str	r2, [sp, #20]
 800c23e:	9501      	str	r5, [sp, #4]
 800c240:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800c242:	6a35      	ldr	r5, [r6, #32]
 800c244:	6924      	ldr	r4, [r4, #16]
 800c246:	9502      	str	r5, [sp, #8]
 800c248:	2a00      	cmp	r2, #0
 800c24a:	f000 80ae 	beq.w	800c3aa <D64_1CH_HTONS_VOL_HP+0x18e>
 800c24e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c252:	4e57      	ldr	r6, [pc, #348]	; (800c3b0 <D64_1CH_HTONS_VOL_HP+0x194>)
 800c254:	461d      	mov	r5, r3
 800c256:	9203      	str	r2, [sp, #12]
 800c258:	f850 2b08 	ldr.w	r2, [r0], #8
 800c25c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c260:	fa92 f892 	rev16.w	r8, r2
 800c264:	fa93 fb93 	rev16.w	fp, r3
 800c268:	fa5f f288 	uxtb.w	r2, r8
 800c26c:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800c270:	f3c8 4307 	ubfx	r3, r8, #16, #8
 800c274:	ea4f 6818 	mov.w	r8, r8, lsr #24
 800c278:	f856 a022 	ldr.w	sl, [r6, r2, lsl #2]
 800c27c:	fa5f f28b 	uxtb.w	r2, fp
 800c280:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 800c284:	4457      	add	r7, sl
 800c286:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c28a:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 800c28e:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800c292:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800c296:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c29a:	eb03 2a99 	add.w	sl, r3, r9, lsr #10
 800c29e:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800c2a2:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800c2a6:	eb08 289a 	add.w	r8, r8, sl, lsr #10
 800c2aa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c2ae:	ea49 4907 	orr.w	r9, r9, r7, lsl #16
 800c2b2:	f3cb 4707 	ubfx	r7, fp, #16, #8
 800c2b6:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800c2ba:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c2be:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800c2c2:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800c2c6:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800c2ca:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c2ce:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800c2d2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c2d6:	eb07 2793 	add.w	r7, r7, r3, lsr #10
 800c2da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2de:	ea48 480a 	orr.w	r8, r8, sl, lsl #16
 800c2e2:	eb0b 2b97 	add.w	fp, fp, r7, lsr #10
 800c2e6:	f3c7 0a09 	ubfx	sl, r7, #0, #10
 800c2ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2ee:	f3cb 0209 	ubfx	r2, fp, #0, #10
 800c2f2:	ea4f 279b 	mov.w	r7, fp, lsr #10
 800c2f6:	ea42 4b0a 	orr.w	fp, r2, sl, lsl #16
 800c2fa:	4a2e      	ldr	r2, [pc, #184]	; (800c3b4 <D64_1CH_HTONS_VOL_HP+0x198>)
 800c2fc:	fb29 ee02 	smlad	lr, r9, r2, lr
 800c300:	4a2d      	ldr	r2, [pc, #180]	; (800c3b8 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800c302:	fb28 ee02 	smlad	lr, r8, r2, lr
 800c306:	4a2d      	ldr	r2, [pc, #180]	; (800c3bc <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800c308:	fb23 ee02 	smlad	lr, r3, r2, lr
 800c30c:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800c310:	fb2b ea0a 	smlad	sl, fp, sl, lr
 800c314:	4a2a      	ldr	r2, [pc, #168]	; (800c3c0 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800c316:	fb29 5e02 	smlad	lr, r9, r2, r5
 800c31a:	fb2b ee12 	smladx	lr, fp, r2, lr
 800c31e:	4a29      	ldr	r2, [pc, #164]	; (800c3c4 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800c320:	fb28 ee02 	smlad	lr, r8, r2, lr
 800c324:	fb23 ee12 	smladx	lr, r3, r2, lr
 800c328:	2501      	movs	r5, #1
 800c32a:	fb29 f905 	smuad	r9, r9, r5
 800c32e:	4a26      	ldr	r2, [pc, #152]	; (800c3c8 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800c330:	fb28 9802 	smlad	r8, r8, r2, r9
 800c334:	4a25      	ldr	r2, [pc, #148]	; (800c3cc <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800c336:	fb23 8302 	smlad	r3, r3, r2, r8
 800c33a:	4a25      	ldr	r2, [pc, #148]	; (800c3d0 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800c33c:	fb2b 3502 	smlad	r5, fp, r2, r3
 800c340:	f5aa 3a00 	sub.w	sl, sl, #131072	; 0x20000
 800c344:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c348:	eb0a 0204 	add.w	r2, sl, r4
 800c34c:	9c02      	ldr	r4, [sp, #8]
 800c34e:	eba2 020c 	sub.w	r2, r2, ip
 800c352:	46d4      	mov	ip, sl
 800c354:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c358:	fba2 2304 	umull	r2, r3, r2, r4
 800c35c:	fb04 3309 	mla	r3, r4, r9, r3
 800c360:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c364:	f04f 0900 	mov.w	r9, #0
 800c368:	f143 0300 	adc.w	r3, r3, #0
 800c36c:	02da      	lsls	r2, r3, #11
 800c36e:	005c      	lsls	r4, r3, #1
 800c370:	9b01      	ldr	r3, [sp, #4]
 800c372:	fbc3 8902 	smlal	r8, r9, r3, r2
 800c376:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800c37a:	f303 030f 	ssat	r3, #16, r3
 800c37e:	f821 3b02 	strh.w	r3, [r1], #2
 800c382:	9b03      	ldr	r3, [sp, #12]
 800c384:	4299      	cmp	r1, r3
 800c386:	f47f af67 	bne.w	800c258 <D64_1CH_HTONS_VOL_HP+0x3c>
 800c38a:	462b      	mov	r3, r5
 800c38c:	9905      	ldr	r1, [sp, #20]
 800c38e:	2000      	movs	r0, #0
 800c390:	460a      	mov	r2, r1
 800c392:	608b      	str	r3, [r1, #8]
 800c394:	f8c1 e00c 	str.w	lr, [r1, #12]
 800c398:	61cf      	str	r7, [r1, #28]
 800c39a:	610c      	str	r4, [r1, #16]
 800c39c:	f8c1 a014 	str.w	sl, [r1, #20]
 800c3a0:	9904      	ldr	r1, [sp, #16]
 800c3a2:	6191      	str	r1, [r2, #24]
 800c3a4:	b007      	add	sp, #28
 800c3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3aa:	46e2      	mov	sl, ip
 800c3ac:	e7ee      	b.n	800c38c <D64_1CH_HTONS_VOL_HP+0x170>
 800c3ae:	bf00      	nop
 800c3b0:	20000000 	.word	0x20000000
 800c3b4:	001c0015 	.word	0x001c0015
 800c3b8:	000f000a 	.word	0x000f000a
 800c3bc:	00060003 	.word	0x00060003
 800c3c0:	0024002a 	.word	0x0024002a
 800c3c4:	002e0030 	.word	0x002e0030
 800c3c8:	00030006 	.word	0x00030006
 800c3cc:	000a000f 	.word	0x000a000f
 800c3d0:	0015001c 	.word	0x0015001c

0800c3d4 <D80_1CH_HTONS_VOL_HP>:
 800c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d8:	4614      	mov	r4, r2
 800c3da:	b089      	sub	sp, #36	; 0x24
 800c3dc:	4613      	mov	r3, r2
 800c3de:	6924      	ldr	r4, [r4, #16]
 800c3e0:	461d      	mov	r5, r3
 800c3e2:	9207      	str	r2, [sp, #28]
 800c3e4:	9401      	str	r4, [sp, #4]
 800c3e6:	461c      	mov	r4, r3
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	68a7      	ldr	r7, [r4, #8]
 800c3ec:	9302      	str	r3, [sp, #8]
 800c3ee:	69a3      	ldr	r3, [r4, #24]
 800c3f0:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800c3f4:	9306      	str	r3, [sp, #24]
 800c3f6:	69e3      	ldr	r3, [r4, #28]
 800c3f8:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800c3fa:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800c3fc:	9403      	str	r4, [sp, #12]
 800c3fe:	6a2c      	ldr	r4, [r5, #32]
 800c400:	9404      	str	r4, [sp, #16]
 800c402:	2a00      	cmp	r2, #0
 800c404:	f000 80ca 	beq.w	800c59c <D80_1CH_HTONS_VOL_HP+0x1c8>
 800c408:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c40c:	4e64      	ldr	r6, [pc, #400]	; (800c5a0 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800c40e:	468c      	mov	ip, r1
 800c410:	4682      	mov	sl, r0
 800c412:	9205      	str	r2, [sp, #20]
 800c414:	f8da 2008 	ldr.w	r2, [sl, #8]
 800c418:	e89a 0011 	ldmia.w	sl, {r0, r4}
 800c41c:	f10a 0a0a 	add.w	sl, sl, #10
 800c420:	ba40      	rev16	r0, r0
 800c422:	ba64      	rev16	r4, r4
 800c424:	fa92 f992 	rev16.w	r9, r2
 800c428:	b2c5      	uxtb	r5, r0
 800c42a:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800c42e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800c432:	0e00      	lsrs	r0, r0, #24
 800c434:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800c438:	b2e5      	uxtb	r5, r4
 800c43a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c43e:	f3c4 4b07 	ubfx	fp, r4, #16, #8
 800c442:	4443      	add	r3, r8
 800c444:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800c448:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800c44c:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800c450:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800c454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c458:	eb02 2891 	add.w	r8, r2, r1, lsr #10
 800c45c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 800c460:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c464:	eb00 2098 	add.w	r0, r0, r8, lsr #10
 800c468:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800c46c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c470:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c474:	eb05 2590 	add.w	r5, r5, r0, lsr #10
 800c478:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c47c:	0e23      	lsrs	r3, r4, #24
 800c47e:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800c482:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800c486:	f3c9 2b07 	ubfx	fp, r9, #8, #8
 800c48a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c48e:	fa5f f989 	uxtb.w	r9, r9
 800c492:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800c496:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800c49a:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 800c49e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c4a2:	eb03 2394 	add.w	r3, r3, r4, lsr #10
 800c4a6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c4aa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c4ae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800c4b2:	eb09 2993 	add.w	r9, r9, r3, lsr #10
 800c4b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4ba:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800c4be:	eb0b 2b99 	add.w	fp, fp, r9, lsr #10
 800c4c2:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800c4c6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800c4ca:	f3cb 0209 	ubfx	r2, fp, #0, #10
 800c4ce:	ea4f 239b 	mov.w	r3, fp, lsr #10
 800c4d2:	ea42 4909 	orr.w	r9, r2, r9, lsl #16
 800c4d6:	4a33      	ldr	r2, [pc, #204]	; (800c5a4 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800c4d8:	fb21 ee02 	smlad	lr, r1, r2, lr
 800c4dc:	4a32      	ldr	r2, [pc, #200]	; (800c5a8 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800c4de:	fb20 ee02 	smlad	lr, r0, r2, lr
 800c4e2:	4a32      	ldr	r2, [pc, #200]	; (800c5ac <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800c4e4:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c4e8:	4a31      	ldr	r2, [pc, #196]	; (800c5b0 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800c4ea:	fb24 ee02 	smlad	lr, r4, r2, lr
 800c4ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c4f2:	fb29 eb02 	smlad	fp, r9, r2, lr
 800c4f6:	4a2f      	ldr	r2, [pc, #188]	; (800c5b4 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800c4f8:	fb21 7702 	smlad	r7, r1, r2, r7
 800c4fc:	4a2e      	ldr	r2, [pc, #184]	; (800c5b8 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800c4fe:	fb20 7702 	smlad	r7, r0, r2, r7
 800c502:	f04f 1e4b 	mov.w	lr, #4915275	; 0x4b004b
 800c506:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800c50a:	4a2c      	ldr	r2, [pc, #176]	; (800c5bc <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800c50c:	fb24 ee02 	smlad	lr, r4, r2, lr
 800c510:	4a2b      	ldr	r2, [pc, #172]	; (800c5c0 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800c512:	fb29 ee02 	smlad	lr, r9, r2, lr
 800c516:	f04f 0801 	mov.w	r8, #1
 800c51a:	fb21 f808 	smuad	r8, r1, r8
 800c51e:	4a29      	ldr	r2, [pc, #164]	; (800c5c4 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800c520:	fb20 8002 	smlad	r0, r0, r2, r8
 800c524:	4a28      	ldr	r2, [pc, #160]	; (800c5c8 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800c526:	fb25 0002 	smlad	r0, r5, r2, r0
 800c52a:	4a28      	ldr	r2, [pc, #160]	; (800c5cc <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800c52c:	fb24 0402 	smlad	r4, r4, r2, r0
 800c530:	4f27      	ldr	r7, [pc, #156]	; (800c5d0 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800c532:	fb29 4707 	smlad	r7, r9, r7, r4
 800c536:	f5ab 327a 	sub.w	r2, fp, #256000	; 0x3e800
 800c53a:	9901      	ldr	r1, [sp, #4]
 800c53c:	9c04      	ldr	r4, [sp, #16]
 800c53e:	2500      	movs	r5, #0
 800c540:	4411      	add	r1, r2
 800c542:	4608      	mov	r0, r1
 800c544:	9902      	ldr	r1, [sp, #8]
 800c546:	9202      	str	r2, [sp, #8]
 800c548:	1a40      	subs	r0, r0, r1
 800c54a:	ea4f 79e0 	mov.w	r9, r0, asr #31
 800c54e:	fba0 0104 	umull	r0, r1, r0, r4
 800c552:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800c556:	fb04 1109 	mla	r1, r4, r9, r1
 800c55a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c55e:	f141 0100 	adc.w	r1, r1, #0
 800c562:	0288      	lsls	r0, r1, #10
 800c564:	0049      	lsls	r1, r1, #1
 800c566:	9101      	str	r1, [sp, #4]
 800c568:	9903      	ldr	r1, [sp, #12]
 800c56a:	fbc1 4500 	smlal	r4, r5, r1, r0
 800c56e:	10a9      	asrs	r1, r5, #2
 800c570:	f301 010f 	ssat	r1, #16, r1
 800c574:	f82c 1b02 	strh.w	r1, [ip], #2
 800c578:	9905      	ldr	r1, [sp, #20]
 800c57a:	458c      	cmp	ip, r1
 800c57c:	f47f af4a 	bne.w	800c414 <D80_1CH_HTONS_VOL_HP+0x40>
 800c580:	9c07      	ldr	r4, [sp, #28]
 800c582:	2000      	movs	r0, #0
 800c584:	9901      	ldr	r1, [sp, #4]
 800c586:	6162      	str	r2, [r4, #20]
 800c588:	9a06      	ldr	r2, [sp, #24]
 800c58a:	60a7      	str	r7, [r4, #8]
 800c58c:	f8c4 e00c 	str.w	lr, [r4, #12]
 800c590:	61e3      	str	r3, [r4, #28]
 800c592:	6121      	str	r1, [r4, #16]
 800c594:	61a2      	str	r2, [r4, #24]
 800c596:	b009      	add	sp, #36	; 0x24
 800c598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c59c:	9a02      	ldr	r2, [sp, #8]
 800c59e:	e7ef      	b.n	800c580 <D80_1CH_HTONS_VOL_HP+0x1ac>
 800c5a0:	20000000 	.word	0x20000000
 800c5a4:	002d0024 	.word	0x002d0024
 800c5a8:	001c0015 	.word	0x001c0015
 800c5ac:	000f000a 	.word	0x000f000a
 800c5b0:	00060003 	.word	0x00060003
 800c5b4:	0037003f 	.word	0x0037003f
 800c5b8:	00450049 	.word	0x00450049
 800c5bc:	00490045 	.word	0x00490045
 800c5c0:	003f0037 	.word	0x003f0037
 800c5c4:	00030006 	.word	0x00030006
 800c5c8:	000a000f 	.word	0x000a000f
 800c5cc:	0015001c 	.word	0x0015001c
 800c5d0:	0024002d 	.word	0x0024002d

0800c5d4 <D128_1CH_HTONS_VOL_HP>:
 800c5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d8:	b08d      	sub	sp, #52	; 0x34
 800c5da:	4614      	mov	r4, r2
 800c5dc:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c5de:	920b      	str	r2, [sp, #44]	; 0x2c
 800c5e0:	6912      	ldr	r2, [r2, #16]
 800c5e2:	9202      	str	r2, [sp, #8]
 800c5e4:	4622      	mov	r2, r4
 800c5e6:	6964      	ldr	r4, [r4, #20]
 800c5e8:	4615      	mov	r5, r2
 800c5ea:	9405      	str	r4, [sp, #20]
 800c5ec:	4614      	mov	r4, r2
 800c5ee:	6992      	ldr	r2, [r2, #24]
 800c5f0:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800c5f4:	920a      	str	r2, [sp, #40]	; 0x28
 800c5f6:	68ea      	ldr	r2, [r5, #12]
 800c5f8:	68a4      	ldr	r4, [r4, #8]
 800c5fa:	9203      	str	r2, [sp, #12]
 800c5fc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800c5fe:	9404      	str	r4, [sp, #16]
 800c600:	9207      	str	r2, [sp, #28]
 800c602:	6a2a      	ldr	r2, [r5, #32]
 800c604:	9208      	str	r2, [sp, #32]
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 8129 	beq.w	800c85e <D128_1CH_HTONS_VOL_HP+0x28a>
 800c60c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c610:	f100 0b10 	add.w	fp, r0, #16
 800c614:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 800c8b8 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800c618:	9106      	str	r1, [sp, #24]
 800c61a:	9309      	str	r3, [sp, #36]	; 0x24
 800c61c:	f1ab 0010 	sub.w	r0, fp, #16
 800c620:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 800c624:	c80d      	ldmia	r0, {r0, r2, r3}
 800c626:	ba40      	rev16	r0, r0
 800c628:	ba52      	rev16	r2, r2
 800c62a:	ba5b      	rev16	r3, r3
 800c62c:	fa91 fc91 	rev16.w	ip, r1
 800c630:	b2c5      	uxtb	r5, r0
 800c632:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800c636:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800c63a:	0e00      	lsrs	r0, r0, #24
 800c63c:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800c640:	b2d5      	uxtb	r5, r2
 800c642:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
 800c646:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800c64a:	44b6      	add	lr, r6
 800c64c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c650:	f859 6020 	ldr.w	r6, [r9, r0, lsl #2]
 800c654:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800c658:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800c65c:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800c660:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800c664:	0e12      	lsrs	r2, r2, #24
 800c666:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800c66a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800c66e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c672:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c676:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800c67a:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800c67e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c682:	b2da      	uxtb	r2, r3
 800c684:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800c688:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c68c:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800c690:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800c694:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800c698:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c69c:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 800c6a0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c6a4:	eb00 2e95 	add.w	lr, r0, r5, lsr #10
 800c6a8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c6ac:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800c6b0:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800c6b4:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800c6b8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c6bc:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800c6c0:	0e1b      	lsrs	r3, r3, #24
 800c6c2:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800c6c6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c6ca:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800c6ce:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800c6d2:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800c6d6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c6da:	fa5f f38c 	uxtb.w	r3, ip
 800c6de:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800c6e2:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800c6e6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c6ea:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800c6ee:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800c6f2:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 800c6f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800c6fa:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c6fe:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800c702:	f859 202e 	ldr.w	r2, [r9, lr, lsl #2]
 800c706:	f3cc 4307 	ubfx	r3, ip, #16, #8
 800c70a:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 800c70e:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800c712:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c716:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c71a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c71e:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800c722:	eb03 2c92 	add.w	ip, r3, r2, lsr #10
 800c726:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800c72a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c72e:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800c732:	9b03      	ldr	r3, [sp, #12]
 800c734:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800c738:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c73c:	9201      	str	r2, [sp, #4]
 800c73e:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800c742:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800c746:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 800c74a:	4a46      	ldr	r2, [pc, #280]	; (800c864 <D128_1CH_HTONS_VOL_HP+0x290>)
 800c74c:	fb27 3802 	smlad	r8, r7, r2, r3
 800c750:	4b45      	ldr	r3, [pc, #276]	; (800c868 <D128_1CH_HTONS_VOL_HP+0x294>)
 800c752:	fb26 8803 	smlad	r8, r6, r3, r8
 800c756:	4b45      	ldr	r3, [pc, #276]	; (800c86c <D128_1CH_HTONS_VOL_HP+0x298>)
 800c758:	fb25 8803 	smlad	r8, r5, r3, r8
 800c75c:	4b44      	ldr	r3, [pc, #272]	; (800c870 <D128_1CH_HTONS_VOL_HP+0x29c>)
 800c75e:	fb24 8803 	smlad	r8, r4, r3, r8
 800c762:	4b44      	ldr	r3, [pc, #272]	; (800c874 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800c764:	fb20 8803 	smlad	r8, r0, r3, r8
 800c768:	4b43      	ldr	r3, [pc, #268]	; (800c878 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800c76a:	fb21 8803 	smlad	r8, r1, r3, r8
 800c76e:	4b43      	ldr	r3, [pc, #268]	; (800c87c <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800c770:	9a01      	ldr	r2, [sp, #4]
 800c772:	fb22 8203 	smlad	r2, r2, r3, r8
 800c776:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800c77a:	fb2c 2808 	smlad	r8, ip, r8, r2
 800c77e:	4b40      	ldr	r3, [pc, #256]	; (800c880 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800c780:	9a04      	ldr	r2, [sp, #16]
 800c782:	fb27 2a03 	smlad	sl, r7, r3, r2
 800c786:	4b3f      	ldr	r3, [pc, #252]	; (800c884 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800c788:	fb26 aa03 	smlad	sl, r6, r3, sl
 800c78c:	4a3e      	ldr	r2, [pc, #248]	; (800c888 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800c78e:	fb25 aa02 	smlad	sl, r5, r2, sl
 800c792:	4a3e      	ldr	r2, [pc, #248]	; (800c88c <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800c794:	fb24 aa02 	smlad	sl, r4, r2, sl
 800c798:	4a3d      	ldr	r2, [pc, #244]	; (800c890 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800c79a:	fb20 aa02 	smlad	sl, r0, r2, sl
 800c79e:	4a3d      	ldr	r2, [pc, #244]	; (800c894 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800c7a0:	fb21 aa02 	smlad	sl, r1, r2, sl
 800c7a4:	4a3c      	ldr	r2, [pc, #240]	; (800c898 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800c7a6:	9b01      	ldr	r3, [sp, #4]
 800c7a8:	fb23 a202 	smlad	r2, r3, r2, sl
 800c7ac:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800c8bc <D128_1CH_HTONS_VOL_HP+0x2e8>
 800c7b0:	fb2c 230a 	smlad	r3, ip, sl, r2
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	9303      	str	r3, [sp, #12]
 800c7b8:	fb27 f702 	smuad	r7, r7, r2
 800c7bc:	4a37      	ldr	r2, [pc, #220]	; (800c89c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800c7be:	fb26 7702 	smlad	r7, r6, r2, r7
 800c7c2:	4a37      	ldr	r2, [pc, #220]	; (800c8a0 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800c7c4:	fb25 7702 	smlad	r7, r5, r2, r7
 800c7c8:	4a36      	ldr	r2, [pc, #216]	; (800c8a4 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800c7ca:	fb24 7702 	smlad	r7, r4, r2, r7
 800c7ce:	4a36      	ldr	r2, [pc, #216]	; (800c8a8 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800c7d0:	fb20 7702 	smlad	r7, r0, r2, r7
 800c7d4:	4a35      	ldr	r2, [pc, #212]	; (800c8ac <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800c7d6:	fb21 7702 	smlad	r7, r1, r2, r7
 800c7da:	4a35      	ldr	r2, [pc, #212]	; (800c8b0 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800c7dc:	9b01      	ldr	r3, [sp, #4]
 800c7de:	fb23 7202 	smlad	r2, r3, r2, r7
 800c7e2:	4b34      	ldr	r3, [pc, #208]	; (800c8b4 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800c7e4:	fb2c 2303 	smlad	r3, ip, r3, r2
 800c7e8:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
 800c7ec:	9304      	str	r3, [sp, #16]
 800c7ee:	9b02      	ldr	r3, [sp, #8]
 800c7f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c7f4:	9e08      	ldr	r6, [sp, #32]
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	4443      	add	r3, r8
 800c7fa:	f10b 0b10 	add.w	fp, fp, #16
 800c7fe:	461a      	mov	r2, r3
 800c800:	9b05      	ldr	r3, [sp, #20]
 800c802:	f8cd 8014 	str.w	r8, [sp, #20]
 800c806:	1ad2      	subs	r2, r2, r3
 800c808:	17d5      	asrs	r5, r2, #31
 800c80a:	fba2 2306 	umull	r2, r3, r2, r6
 800c80e:	1812      	adds	r2, r2, r0
 800c810:	fb06 3305 	mla	r3, r6, r5, r3
 800c814:	414b      	adcs	r3, r1
 800c816:	021a      	lsls	r2, r3, #8
 800c818:	005b      	lsls	r3, r3, #1
 800c81a:	9302      	str	r3, [sp, #8]
 800c81c:	9b07      	ldr	r3, [sp, #28]
 800c81e:	fbc3 0102 	smlal	r0, r1, r3, r2
 800c822:	9a06      	ldr	r2, [sp, #24]
 800c824:	108b      	asrs	r3, r1, #2
 800c826:	f303 030f 	ssat	r3, #16, r3
 800c82a:	f822 3b02 	strh.w	r3, [r2], #2
 800c82e:	4613      	mov	r3, r2
 800c830:	9206      	str	r2, [sp, #24]
 800c832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c834:	4293      	cmp	r3, r2
 800c836:	f47f aef1 	bne.w	800c61c <D128_1CH_HTONS_VOL_HP+0x48>
 800c83a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c83c:	2000      	movs	r0, #0
 800c83e:	9904      	ldr	r1, [sp, #16]
 800c840:	4613      	mov	r3, r2
 800c842:	f8c2 e01c 	str.w	lr, [r2, #28]
 800c846:	6091      	str	r1, [r2, #8]
 800c848:	9903      	ldr	r1, [sp, #12]
 800c84a:	60d1      	str	r1, [r2, #12]
 800c84c:	9a02      	ldr	r2, [sp, #8]
 800c84e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c850:	611a      	str	r2, [r3, #16]
 800c852:	f8c3 8014 	str.w	r8, [r3, #20]
 800c856:	6199      	str	r1, [r3, #24]
 800c858:	b00d      	add	sp, #52	; 0x34
 800c85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c862:	e7ea      	b.n	800c83a <D128_1CH_HTONS_VOL_HP+0x266>
 800c864:	00780069 	.word	0x00780069
 800c868:	005b004e 	.word	0x005b004e
 800c86c:	00420037 	.word	0x00420037
 800c870:	002d0024 	.word	0x002d0024
 800c874:	001c0015 	.word	0x001c0015
 800c878:	000f000a 	.word	0x000f000a
 800c87c:	00060003 	.word	0x00060003
 800c880:	00880096 	.word	0x00880096
 800c884:	00a200ac 	.word	0x00a200ac
 800c888:	00b400ba 	.word	0x00b400ba
 800c88c:	00be00c0 	.word	0x00be00c0
 800c890:	00c000be 	.word	0x00c000be
 800c894:	00ba00b4 	.word	0x00ba00b4
 800c898:	00ac00a2 	.word	0x00ac00a2
 800c89c:	00030006 	.word	0x00030006
 800c8a0:	000a000f 	.word	0x000a000f
 800c8a4:	0015001c 	.word	0x0015001c
 800c8a8:	0024002d 	.word	0x0024002d
 800c8ac:	00370042 	.word	0x00370042
 800c8b0:	004e005b 	.word	0x004e005b
 800c8b4:	00690078 	.word	0x00690078
 800c8b8:	20000000 	.word	0x20000000
 800c8bc:	00960088 	.word	0x00960088

0800c8c0 <PDM_Filter_Init>:
 800c8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c2:	2240      	movs	r2, #64	; 0x40
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	300c      	adds	r0, #12
 800c8ca:	f000 f9e5 	bl	800cc98 <memset>
 800c8ce:	4939      	ldr	r1, [pc, #228]	; (800c9b4 <PDM_Filter_Init+0xf4>)
 800c8d0:	4839      	ldr	r0, [pc, #228]	; (800c9b8 <PDM_Filter_Init+0xf8>)
 800c8d2:	f000 f977 	bl	800cbc4 <CRC_Lock>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	2801      	cmp	r0, #1
 800c8da:	8820      	ldrh	r0, [r4, #0]
 800c8dc:	4a35      	ldr	r2, [pc, #212]	; (800c9b4 <PDM_Filter_Init+0xf4>)
 800c8de:	8965      	ldrh	r5, [r4, #10]
 800c8e0:	bf18      	it	ne
 800c8e2:	461a      	movne	r2, r3
 800c8e4:	8921      	ldrh	r1, [r4, #8]
 800c8e6:	2801      	cmp	r0, #1
 800c8e8:	86a5      	strh	r5, [r4, #52]	; 0x34
 800c8ea:	6462      	str	r2, [r4, #68]	; 0x44
 800c8ec:	86e1      	strh	r1, [r4, #54]	; 0x36
 800c8ee:	61a3      	str	r3, [r4, #24]
 800c8f0:	6123      	str	r3, [r4, #16]
 800c8f2:	6163      	str	r3, [r4, #20]
 800c8f4:	60e3      	str	r3, [r4, #12]
 800c8f6:	6263      	str	r3, [r4, #36]	; 0x24
 800c8f8:	61e3      	str	r3, [r4, #28]
 800c8fa:	6223      	str	r3, [r4, #32]
 800c8fc:	6423      	str	r3, [r4, #64]	; 0x40
 800c8fe:	d91c      	bls.n	800c93a <PDM_Filter_Init+0x7a>
 800c900:	2003      	movs	r0, #3
 800c902:	2302      	movs	r3, #2
 800c904:	8862      	ldrh	r2, [r4, #2]
 800c906:	2a01      	cmp	r2, #1
 800c908:	d914      	bls.n	800c934 <PDM_Filter_Init+0x74>
 800c90a:	2140      	movs	r1, #64	; 0x40
 800c90c:	2300      	movs	r3, #0
 800c90e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c910:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800c914:	d00b      	beq.n	800c92e <PDM_Filter_Init+0x6e>
 800c916:	6862      	ldr	r2, [r4, #4]
 800c918:	b11a      	cbz	r2, 800c922 <PDM_Filter_Init+0x62>
 800c91a:	f043 0310 	orr.w	r3, r3, #16
 800c91e:	62e2      	str	r2, [r4, #44]	; 0x2c
 800c920:	6423      	str	r3, [r4, #64]	; 0x40
 800c922:	2200      	movs	r2, #0
 800c924:	8722      	strh	r2, [r4, #56]	; 0x38
 800c926:	b908      	cbnz	r0, 800c92c <PDM_Filter_Init+0x6c>
 800c928:	3380      	adds	r3, #128	; 0x80
 800c92a:	6423      	str	r3, [r4, #64]	; 0x40
 800c92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c92e:	460b      	mov	r3, r1
 800c930:	6421      	str	r1, [r4, #64]	; 0x40
 800c932:	e7f0      	b.n	800c916 <PDM_Filter_Init+0x56>
 800c934:	d008      	beq.n	800c948 <PDM_Filter_Init+0x88>
 800c936:	4618      	mov	r0, r3
 800c938:	e7e7      	b.n	800c90a <PDM_Filter_Init+0x4a>
 800c93a:	4d20      	ldr	r5, [pc, #128]	; (800c9bc <PDM_Filter_Init+0xfc>)
 800c93c:	782a      	ldrb	r2, [r5, #0]
 800c93e:	d009      	beq.n	800c954 <PDM_Filter_Init+0x94>
 800c940:	2a01      	cmp	r2, #1
 800c942:	d020      	beq.n	800c986 <PDM_Filter_Init+0xc6>
 800c944:	2001      	movs	r0, #1
 800c946:	e7dd      	b.n	800c904 <PDM_Filter_Init+0x44>
 800c948:	2220      	movs	r2, #32
 800c94a:	4618      	mov	r0, r3
 800c94c:	2160      	movs	r1, #96	; 0x60
 800c94e:	6422      	str	r2, [r4, #64]	; 0x40
 800c950:	4613      	mov	r3, r2
 800c952:	e7dc      	b.n	800c90e <PDM_Filter_Init+0x4e>
 800c954:	2a00      	cmp	r2, #0
 800c956:	d1d5      	bne.n	800c904 <PDM_Filter_Init+0x44>
 800c958:	4919      	ldr	r1, [pc, #100]	; (800c9c0 <PDM_Filter_Init+0x100>)
 800c95a:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800c9c8 <PDM_Filter_Init+0x108>
 800c95e:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800c962:	4e18      	ldr	r6, [pc, #96]	; (800c9c4 <PDM_Filter_Init+0x104>)
 800c964:	684a      	ldr	r2, [r1, #4]
 800c966:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800c96a:	ea02 0006 	and.w	r0, r2, r6
 800c96e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c972:	4303      	orrs	r3, r0
 800c974:	4413      	add	r3, r2
 800c976:	f841 3f04 	str.w	r3, [r1, #4]!
 800c97a:	428f      	cmp	r7, r1
 800c97c:	d1f2      	bne.n	800c964 <PDM_Filter_Init+0xa4>
 800c97e:	2001      	movs	r0, #1
 800c980:	2300      	movs	r3, #0
 800c982:	7028      	strb	r0, [r5, #0]
 800c984:	e7be      	b.n	800c904 <PDM_Filter_Init+0x44>
 800c986:	490e      	ldr	r1, [pc, #56]	; (800c9c0 <PDM_Filter_Init+0x100>)
 800c988:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800c9c8 <PDM_Filter_Init+0x108>
 800c98c:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800c990:	4e0c      	ldr	r6, [pc, #48]	; (800c9c4 <PDM_Filter_Init+0x104>)
 800c992:	684a      	ldr	r2, [r1, #4]
 800c994:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800c998:	ea02 0006 	and.w	r0, r2, r6
 800c99c:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800c9a0:	4303      	orrs	r3, r0
 800c9a2:	4413      	add	r3, r2
 800c9a4:	f841 3f04 	str.w	r3, [r1, #4]!
 800c9a8:	428f      	cmp	r7, r1
 800c9aa:	d1f2      	bne.n	800c992 <PDM_Filter_Init+0xd2>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	2001      	movs	r0, #1
 800c9b0:	702b      	strb	r3, [r5, #0]
 800c9b2:	e7a7      	b.n	800c904 <PDM_Filter_Init+0x44>
 800c9b4:	b5e8b5cd 	.word	0xb5e8b5cd
 800c9b8:	f407a5c2 	.word	0xf407a5c2
 800c9bc:	2000056c 	.word	0x2000056c
 800c9c0:	1ffffffc 	.word	0x1ffffffc
 800c9c4:	000ffc00 	.word	0x000ffc00
 800c9c8:	3ff00000 	.word	0x3ff00000

0800c9cc <PDM_Filter_setConfig>:
 800c9cc:	b570      	push	{r4, r5, r6, lr}
 800c9ce:	460e      	mov	r6, r1
 800c9d0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	8832      	ldrh	r2, [r6, #0]
 800c9d6:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800c9da:	1e53      	subs	r3, r2, #1
 800c9dc:	2b06      	cmp	r3, #6
 800c9de:	ed2d 8b04 	vpush	{d8-d9}
 800c9e2:	6420      	str	r0, [r4, #64]	; 0x40
 800c9e4:	d91b      	bls.n	800ca1e <PDM_Filter_setConfig+0x52>
 800c9e6:	2508      	movs	r5, #8
 800c9e8:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800c9ec:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800c9f0:	4299      	cmp	r1, r3
 800c9f2:	d07b      	beq.n	800caec <PDM_Filter_setConfig+0x120>
 800c9f4:	f113 0f0c 	cmn.w	r3, #12
 800c9f8:	db29      	blt.n	800ca4e <PDM_Filter_setConfig+0x82>
 800c9fa:	2b33      	cmp	r3, #51	; 0x33
 800c9fc:	dd2c      	ble.n	800ca58 <PDM_Filter_setConfig+0x8c>
 800c9fe:	2333      	movs	r3, #51	; 0x33
 800ca00:	3540      	adds	r5, #64	; 0x40
 800ca02:	80b3      	strh	r3, [r6, #4]
 800ca04:	8622      	strh	r2, [r4, #48]	; 0x30
 800ca06:	8873      	ldrh	r3, [r6, #2]
 800ca08:	8663      	strh	r3, [r4, #50]	; 0x32
 800ca0a:	b925      	cbnz	r5, 800ca16 <PDM_Filter_setConfig+0x4a>
 800ca0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca0e:	2500      	movs	r5, #0
 800ca10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca14:	6423      	str	r3, [r4, #64]	; 0x40
 800ca16:	4628      	mov	r0, r5
 800ca18:	ecbd 8b04 	vpop	{d8-d9}
 800ca1c:	bd70      	pop	{r4, r5, r6, pc}
 800ca1e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d04a      	beq.n	800caba <PDM_Filter_setConfig+0xee>
 800ca24:	4b4e      	ldr	r3, [pc, #312]	; (800cb60 <PDM_Filter_setConfig+0x194>)
 800ca26:	400b      	ands	r3, r1
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800ca2e:	6423      	str	r3, [r4, #64]	; 0x40
 800ca30:	f003 030f 	and.w	r3, r3, #15
 800ca34:	2970      	cmp	r1, #112	; 0x70
 800ca36:	f103 33ff 	add.w	r3, r3, #4294967295
 800ca3a:	d04a      	beq.n	800cad2 <PDM_Filter_setConfig+0x106>
 800ca3c:	2b06      	cmp	r3, #6
 800ca3e:	f200 808d 	bhi.w	800cb5c <PDM_Filter_setConfig+0x190>
 800ca42:	e8df f003 	tbb	[pc, r3]
 800ca46:	6467      	.short	0x6467
 800ca48:	6a6d7073 	.word	0x6a6d7073
 800ca4c:	5a          	.byte	0x5a
 800ca4d:	00          	.byte	0x00
 800ca4e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800ca52:	3540      	adds	r5, #64	; 0x40
 800ca54:	80b3      	strh	r3, [r6, #4]
 800ca56:	e7d5      	b.n	800ca04 <PDM_Filter_setConfig+0x38>
 800ca58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ca5a:	f002 020f 	and.w	r2, r2, #15
 800ca5e:	3a01      	subs	r2, #1
 800ca60:	2a06      	cmp	r2, #6
 800ca62:	d83e      	bhi.n	800cae2 <PDM_Filter_setConfig+0x116>
 800ca64:	493f      	ldr	r1, [pc, #252]	; (800cb64 <PDM_Filter_setConfig+0x198>)
 800ca66:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ca6a:	ed92 9a00 	vldr	s18, [r2]
 800ca6e:	ed92 8a07 	vldr	s16, [r2, #28]
 800ca72:	ee07 3a90 	vmov	s15, r3
 800ca76:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800ca7a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800ca7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca82:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800ca86:	f000 fd57 	bl	800d538 <powf>
 800ca8a:	eddf 0a37 	vldr	s1, [pc, #220]	; 800cb68 <PDM_Filter_setConfig+0x19c>
 800ca8e:	eef0 8a40 	vmov.f32	s17, s0
 800ca92:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800ca96:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ca9a:	f000 fd4d 	bl	800d538 <powf>
 800ca9e:	ee28 8a28 	vmul.f32	s16, s16, s17
 800caa2:	88b3      	ldrh	r3, [r6, #4]
 800caa4:	8832      	ldrh	r2, [r6, #0]
 800caa6:	ee28 8a00 	vmul.f32	s16, s16, s0
 800caaa:	8723      	strh	r3, [r4, #56]	; 0x38
 800caac:	feb8 8a48 	vrinta.f32	s16, s16
 800cab0:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800cab4:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800cab8:	e7a4      	b.n	800ca04 <PDM_Filter_setConfig+0x38>
 800caba:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800cabe:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800cac2:	4299      	cmp	r1, r3
 800cac4:	d016      	beq.n	800caf4 <PDM_Filter_setConfig+0x128>
 800cac6:	f113 0f0c 	cmn.w	r3, #12
 800caca:	f04f 0500 	mov.w	r5, #0
 800cace:	da94      	bge.n	800c9fa <PDM_Filter_setConfig+0x2e>
 800cad0:	e7bd      	b.n	800ca4e <PDM_Filter_setConfig+0x82>
 800cad2:	2b06      	cmp	r3, #6
 800cad4:	d842      	bhi.n	800cb5c <PDM_Filter_setConfig+0x190>
 800cad6:	e8df f003 	tbb	[pc, r3]
 800cada:	3b3e      	.short	0x3b3e
 800cadc:	2f323538 	.word	0x2f323538
 800cae0:	2c          	.byte	0x2c
 800cae1:	00          	.byte	0x00
 800cae2:	ed9f 8a22 	vldr	s16, [pc, #136]	; 800cb6c <PDM_Filter_setConfig+0x1a0>
 800cae6:	eeb0 9a48 	vmov.f32	s18, s16
 800caea:	e7c2      	b.n	800ca72 <PDM_Filter_setConfig+0xa6>
 800caec:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800caee:	4291      	cmp	r1, r2
 800caf0:	d180      	bne.n	800c9f4 <PDM_Filter_setConfig+0x28>
 800caf2:	e788      	b.n	800ca06 <PDM_Filter_setConfig+0x3a>
 800caf4:	8873      	ldrh	r3, [r6, #2]
 800caf6:	8663      	strh	r3, [r4, #50]	; 0x32
 800caf8:	e788      	b.n	800ca0c <PDM_Filter_setConfig+0x40>
 800cafa:	4b1d      	ldr	r3, [pc, #116]	; (800cb70 <PDM_Filter_setConfig+0x1a4>)
 800cafc:	64a3      	str	r3, [r4, #72]	; 0x48
 800cafe:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800cb02:	2500      	movs	r5, #0
 800cb04:	f113 0f0c 	cmn.w	r3, #12
 800cb08:	f6bf af77 	bge.w	800c9fa <PDM_Filter_setConfig+0x2e>
 800cb0c:	e79f      	b.n	800ca4e <PDM_Filter_setConfig+0x82>
 800cb0e:	4b19      	ldr	r3, [pc, #100]	; (800cb74 <PDM_Filter_setConfig+0x1a8>)
 800cb10:	64a3      	str	r3, [r4, #72]	; 0x48
 800cb12:	e7f4      	b.n	800cafe <PDM_Filter_setConfig+0x132>
 800cb14:	4b18      	ldr	r3, [pc, #96]	; (800cb78 <PDM_Filter_setConfig+0x1ac>)
 800cb16:	64a3      	str	r3, [r4, #72]	; 0x48
 800cb18:	e7f1      	b.n	800cafe <PDM_Filter_setConfig+0x132>
 800cb1a:	4b18      	ldr	r3, [pc, #96]	; (800cb7c <PDM_Filter_setConfig+0x1b0>)
 800cb1c:	64a3      	str	r3, [r4, #72]	; 0x48
 800cb1e:	e7ee      	b.n	800cafe <PDM_Filter_setConfig+0x132>
 800cb20:	4b17      	ldr	r3, [pc, #92]	; (800cb80 <PDM_Filter_setConfig+0x1b4>)
 800cb22:	64a3      	str	r3, [r4, #72]	; 0x48
 800cb24:	e7eb      	b.n	800cafe <PDM_Filter_setConfig+0x132>
 800cb26:	4b17      	ldr	r3, [pc, #92]	; (800cb84 <PDM_Filter_setConfig+0x1b8>)
 800cb28:	64a3      	str	r3, [r4, #72]	; 0x48
 800cb2a:	e7e8      	b.n	800cafe <PDM_Filter_setConfig+0x132>
 800cb2c:	4b16      	ldr	r3, [pc, #88]	; (800cb88 <PDM_Filter_setConfig+0x1bc>)
 800cb2e:	64a3      	str	r3, [r4, #72]	; 0x48
 800cb30:	e7e5      	b.n	800cafe <PDM_Filter_setConfig+0x132>
 800cb32:	4b16      	ldr	r3, [pc, #88]	; (800cb8c <PDM_Filter_setConfig+0x1c0>)
 800cb34:	64a3      	str	r3, [r4, #72]	; 0x48
 800cb36:	e7e2      	b.n	800cafe <PDM_Filter_setConfig+0x132>
 800cb38:	4b15      	ldr	r3, [pc, #84]	; (800cb90 <PDM_Filter_setConfig+0x1c4>)
 800cb3a:	64a3      	str	r3, [r4, #72]	; 0x48
 800cb3c:	e7df      	b.n	800cafe <PDM_Filter_setConfig+0x132>
 800cb3e:	4b15      	ldr	r3, [pc, #84]	; (800cb94 <PDM_Filter_setConfig+0x1c8>)
 800cb40:	64a3      	str	r3, [r4, #72]	; 0x48
 800cb42:	e7dc      	b.n	800cafe <PDM_Filter_setConfig+0x132>
 800cb44:	4b14      	ldr	r3, [pc, #80]	; (800cb98 <PDM_Filter_setConfig+0x1cc>)
 800cb46:	64a3      	str	r3, [r4, #72]	; 0x48
 800cb48:	e7d9      	b.n	800cafe <PDM_Filter_setConfig+0x132>
 800cb4a:	4b14      	ldr	r3, [pc, #80]	; (800cb9c <PDM_Filter_setConfig+0x1d0>)
 800cb4c:	64a3      	str	r3, [r4, #72]	; 0x48
 800cb4e:	e7d6      	b.n	800cafe <PDM_Filter_setConfig+0x132>
 800cb50:	4b13      	ldr	r3, [pc, #76]	; (800cba0 <PDM_Filter_setConfig+0x1d4>)
 800cb52:	64a3      	str	r3, [r4, #72]	; 0x48
 800cb54:	e7d3      	b.n	800cafe <PDM_Filter_setConfig+0x132>
 800cb56:	4b13      	ldr	r3, [pc, #76]	; (800cba4 <PDM_Filter_setConfig+0x1d8>)
 800cb58:	64a3      	str	r3, [r4, #72]	; 0x48
 800cb5a:	e7d0      	b.n	800cafe <PDM_Filter_setConfig+0x132>
 800cb5c:	2500      	movs	r5, #0
 800cb5e:	e743      	b.n	800c9e8 <PDM_Filter_setConfig+0x1c>
 800cb60:	fffffef0 	.word	0xfffffef0
 800cb64:	0800d8b8 	.word	0x0800d8b8
 800cb68:	42000000 	.word	0x42000000
 800cb6c:	00000000 	.word	0x00000000
 800cb70:	0800b12d 	.word	0x0800b12d
 800cb74:	0800b4a5 	.word	0x0800b4a5
 800cb78:	0800b2b5 	.word	0x0800b2b5
 800cb7c:	0800afb1 	.word	0x0800afb1
 800cb80:	0800aea1 	.word	0x0800aea1
 800cb84:	0800b971 	.word	0x0800b971
 800cb88:	0800b6d5 	.word	0x0800b6d5
 800cb8c:	0800bf55 	.word	0x0800bf55
 800cb90:	0800be25 	.word	0x0800be25
 800cb94:	0800bd29 	.word	0x0800bd29
 800cb98:	0800c5d5 	.word	0x0800c5d5
 800cb9c:	0800c3d5 	.word	0x0800c3d5
 800cba0:	0800c21d 	.word	0x0800c21d
 800cba4:	0800c09d 	.word	0x0800c09d

0800cba8 <PDM_Filter>:
 800cba8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800cbaa:	f413 7f80 	tst.w	r3, #256	; 0x100
 800cbae:	d105      	bne.n	800cbbc <PDM_Filter+0x14>
 800cbb0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cbb4:	bf14      	ite	ne
 800cbb6:	2020      	movne	r0, #32
 800cbb8:	2030      	moveq	r0, #48	; 0x30
 800cbba:	4770      	bx	lr
 800cbbc:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800cbbe:	320c      	adds	r2, #12
 800cbc0:	4718      	bx	r3
 800cbc2:	bf00      	nop

0800cbc4 <CRC_Lock>:
 800cbc4:	4a18      	ldr	r2, [pc, #96]	; (800cc28 <CRC_Lock+0x64>)
 800cbc6:	6813      	ldr	r3, [r2, #0]
 800cbc8:	b410      	push	{r4}
 800cbca:	f023 0301 	bic.w	r3, r3, #1
 800cbce:	4c17      	ldr	r4, [pc, #92]	; (800cc2c <CRC_Lock+0x68>)
 800cbd0:	6013      	str	r3, [r2, #0]
 800cbd2:	6823      	ldr	r3, [r4, #0]
 800cbd4:	b933      	cbnz	r3, 800cbe4 <CRC_Lock+0x20>
 800cbd6:	4b16      	ldr	r3, [pc, #88]	; (800cc30 <CRC_Lock+0x6c>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbde:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cbe2:	d010      	beq.n	800cc06 <CRC_Lock+0x42>
 800cbe4:	4b13      	ldr	r3, [pc, #76]	; (800cc34 <CRC_Lock+0x70>)
 800cbe6:	2401      	movs	r4, #1
 800cbe8:	461a      	mov	r2, r3
 800cbea:	601c      	str	r4, [r3, #0]
 800cbec:	6813      	ldr	r3, [r2, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1fc      	bne.n	800cbec <CRC_Lock+0x28>
 800cbf2:	4b11      	ldr	r3, [pc, #68]	; (800cc38 <CRC_Lock+0x74>)
 800cbf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbf8:	6018      	str	r0, [r3, #0]
 800cbfa:	6818      	ldr	r0, [r3, #0]
 800cbfc:	1a08      	subs	r0, r1, r0
 800cbfe:	fab0 f080 	clz	r0, r0
 800cc02:	0940      	lsrs	r0, r0, #5
 800cc04:	4770      	bx	lr
 800cc06:	4b0d      	ldr	r3, [pc, #52]	; (800cc3c <CRC_Lock+0x78>)
 800cc08:	2401      	movs	r4, #1
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	601c      	str	r4, [r3, #0]
 800cc0e:	6813      	ldr	r3, [r2, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1fc      	bne.n	800cc0e <CRC_Lock+0x4a>
 800cc14:	4b0a      	ldr	r3, [pc, #40]	; (800cc40 <CRC_Lock+0x7c>)
 800cc16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc1a:	6018      	str	r0, [r3, #0]
 800cc1c:	6818      	ldr	r0, [r3, #0]
 800cc1e:	1a40      	subs	r0, r0, r1
 800cc20:	fab0 f080 	clz	r0, r0
 800cc24:	0940      	lsrs	r0, r0, #5
 800cc26:	4770      	bx	lr
 800cc28:	e0002000 	.word	0xe0002000
 800cc2c:	e0042000 	.word	0xe0042000
 800cc30:	5c001000 	.word	0x5c001000
 800cc34:	40023008 	.word	0x40023008
 800cc38:	40023000 	.word	0x40023000
 800cc3c:	58024c08 	.word	0x58024c08
 800cc40:	58024c00 	.word	0x58024c00

0800cc44 <__errno>:
 800cc44:	4b01      	ldr	r3, [pc, #4]	; (800cc4c <__errno+0x8>)
 800cc46:	6818      	ldr	r0, [r3, #0]
 800cc48:	4770      	bx	lr
 800cc4a:	bf00      	nop
 800cc4c:	200004ec 	.word	0x200004ec

0800cc50 <__libc_init_array>:
 800cc50:	b570      	push	{r4, r5, r6, lr}
 800cc52:	4d0d      	ldr	r5, [pc, #52]	; (800cc88 <__libc_init_array+0x38>)
 800cc54:	4c0d      	ldr	r4, [pc, #52]	; (800cc8c <__libc_init_array+0x3c>)
 800cc56:	1b64      	subs	r4, r4, r5
 800cc58:	10a4      	asrs	r4, r4, #2
 800cc5a:	2600      	movs	r6, #0
 800cc5c:	42a6      	cmp	r6, r4
 800cc5e:	d109      	bne.n	800cc74 <__libc_init_array+0x24>
 800cc60:	4d0b      	ldr	r5, [pc, #44]	; (800cc90 <__libc_init_array+0x40>)
 800cc62:	4c0c      	ldr	r4, [pc, #48]	; (800cc94 <__libc_init_array+0x44>)
 800cc64:	f000 fe14 	bl	800d890 <_init>
 800cc68:	1b64      	subs	r4, r4, r5
 800cc6a:	10a4      	asrs	r4, r4, #2
 800cc6c:	2600      	movs	r6, #0
 800cc6e:	42a6      	cmp	r6, r4
 800cc70:	d105      	bne.n	800cc7e <__libc_init_array+0x2e>
 800cc72:	bd70      	pop	{r4, r5, r6, pc}
 800cc74:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc78:	4798      	blx	r3
 800cc7a:	3601      	adds	r6, #1
 800cc7c:	e7ee      	b.n	800cc5c <__libc_init_array+0xc>
 800cc7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc82:	4798      	blx	r3
 800cc84:	3601      	adds	r6, #1
 800cc86:	e7f2      	b.n	800cc6e <__libc_init_array+0x1e>
 800cc88:	0800dbd0 	.word	0x0800dbd0
 800cc8c:	0800dbd0 	.word	0x0800dbd0
 800cc90:	0800dbd0 	.word	0x0800dbd0
 800cc94:	0800dbd4 	.word	0x0800dbd4

0800cc98 <memset>:
 800cc98:	4402      	add	r2, r0
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d100      	bne.n	800cca2 <memset+0xa>
 800cca0:	4770      	bx	lr
 800cca2:	f803 1b01 	strb.w	r1, [r3], #1
 800cca6:	e7f9      	b.n	800cc9c <memset+0x4>

0800cca8 <siprintf>:
 800cca8:	b40e      	push	{r1, r2, r3}
 800ccaa:	b500      	push	{lr}
 800ccac:	b09c      	sub	sp, #112	; 0x70
 800ccae:	ab1d      	add	r3, sp, #116	; 0x74
 800ccb0:	9002      	str	r0, [sp, #8]
 800ccb2:	9006      	str	r0, [sp, #24]
 800ccb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ccb8:	4809      	ldr	r0, [pc, #36]	; (800cce0 <siprintf+0x38>)
 800ccba:	9107      	str	r1, [sp, #28]
 800ccbc:	9104      	str	r1, [sp, #16]
 800ccbe:	4909      	ldr	r1, [pc, #36]	; (800cce4 <siprintf+0x3c>)
 800ccc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccc4:	9105      	str	r1, [sp, #20]
 800ccc6:	6800      	ldr	r0, [r0, #0]
 800ccc8:	9301      	str	r3, [sp, #4]
 800ccca:	a902      	add	r1, sp, #8
 800cccc:	f000 f868 	bl	800cda0 <_svfiprintf_r>
 800ccd0:	9b02      	ldr	r3, [sp, #8]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	701a      	strb	r2, [r3, #0]
 800ccd6:	b01c      	add	sp, #112	; 0x70
 800ccd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccdc:	b003      	add	sp, #12
 800ccde:	4770      	bx	lr
 800cce0:	200004ec 	.word	0x200004ec
 800cce4:	ffff0208 	.word	0xffff0208

0800cce8 <__ssputs_r>:
 800cce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccec:	688e      	ldr	r6, [r1, #8]
 800ccee:	429e      	cmp	r6, r3
 800ccf0:	4682      	mov	sl, r0
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	4690      	mov	r8, r2
 800ccf6:	461f      	mov	r7, r3
 800ccf8:	d838      	bhi.n	800cd6c <__ssputs_r+0x84>
 800ccfa:	898a      	ldrh	r2, [r1, #12]
 800ccfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd00:	d032      	beq.n	800cd68 <__ssputs_r+0x80>
 800cd02:	6825      	ldr	r5, [r4, #0]
 800cd04:	6909      	ldr	r1, [r1, #16]
 800cd06:	eba5 0901 	sub.w	r9, r5, r1
 800cd0a:	6965      	ldr	r5, [r4, #20]
 800cd0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd14:	3301      	adds	r3, #1
 800cd16:	444b      	add	r3, r9
 800cd18:	106d      	asrs	r5, r5, #1
 800cd1a:	429d      	cmp	r5, r3
 800cd1c:	bf38      	it	cc
 800cd1e:	461d      	movcc	r5, r3
 800cd20:	0553      	lsls	r3, r2, #21
 800cd22:	d531      	bpl.n	800cd88 <__ssputs_r+0xa0>
 800cd24:	4629      	mov	r1, r5
 800cd26:	f000 fb47 	bl	800d3b8 <_malloc_r>
 800cd2a:	4606      	mov	r6, r0
 800cd2c:	b950      	cbnz	r0, 800cd44 <__ssputs_r+0x5c>
 800cd2e:	230c      	movs	r3, #12
 800cd30:	f8ca 3000 	str.w	r3, [sl]
 800cd34:	89a3      	ldrh	r3, [r4, #12]
 800cd36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd3a:	81a3      	strh	r3, [r4, #12]
 800cd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd44:	6921      	ldr	r1, [r4, #16]
 800cd46:	464a      	mov	r2, r9
 800cd48:	f000 fabe 	bl	800d2c8 <memcpy>
 800cd4c:	89a3      	ldrh	r3, [r4, #12]
 800cd4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd56:	81a3      	strh	r3, [r4, #12]
 800cd58:	6126      	str	r6, [r4, #16]
 800cd5a:	6165      	str	r5, [r4, #20]
 800cd5c:	444e      	add	r6, r9
 800cd5e:	eba5 0509 	sub.w	r5, r5, r9
 800cd62:	6026      	str	r6, [r4, #0]
 800cd64:	60a5      	str	r5, [r4, #8]
 800cd66:	463e      	mov	r6, r7
 800cd68:	42be      	cmp	r6, r7
 800cd6a:	d900      	bls.n	800cd6e <__ssputs_r+0x86>
 800cd6c:	463e      	mov	r6, r7
 800cd6e:	4632      	mov	r2, r6
 800cd70:	6820      	ldr	r0, [r4, #0]
 800cd72:	4641      	mov	r1, r8
 800cd74:	f000 fab6 	bl	800d2e4 <memmove>
 800cd78:	68a3      	ldr	r3, [r4, #8]
 800cd7a:	6822      	ldr	r2, [r4, #0]
 800cd7c:	1b9b      	subs	r3, r3, r6
 800cd7e:	4432      	add	r2, r6
 800cd80:	60a3      	str	r3, [r4, #8]
 800cd82:	6022      	str	r2, [r4, #0]
 800cd84:	2000      	movs	r0, #0
 800cd86:	e7db      	b.n	800cd40 <__ssputs_r+0x58>
 800cd88:	462a      	mov	r2, r5
 800cd8a:	f000 fb6f 	bl	800d46c <_realloc_r>
 800cd8e:	4606      	mov	r6, r0
 800cd90:	2800      	cmp	r0, #0
 800cd92:	d1e1      	bne.n	800cd58 <__ssputs_r+0x70>
 800cd94:	6921      	ldr	r1, [r4, #16]
 800cd96:	4650      	mov	r0, sl
 800cd98:	f000 fabe 	bl	800d318 <_free_r>
 800cd9c:	e7c7      	b.n	800cd2e <__ssputs_r+0x46>
	...

0800cda0 <_svfiprintf_r>:
 800cda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda4:	4698      	mov	r8, r3
 800cda6:	898b      	ldrh	r3, [r1, #12]
 800cda8:	061b      	lsls	r3, r3, #24
 800cdaa:	b09d      	sub	sp, #116	; 0x74
 800cdac:	4607      	mov	r7, r0
 800cdae:	460d      	mov	r5, r1
 800cdb0:	4614      	mov	r4, r2
 800cdb2:	d50e      	bpl.n	800cdd2 <_svfiprintf_r+0x32>
 800cdb4:	690b      	ldr	r3, [r1, #16]
 800cdb6:	b963      	cbnz	r3, 800cdd2 <_svfiprintf_r+0x32>
 800cdb8:	2140      	movs	r1, #64	; 0x40
 800cdba:	f000 fafd 	bl	800d3b8 <_malloc_r>
 800cdbe:	6028      	str	r0, [r5, #0]
 800cdc0:	6128      	str	r0, [r5, #16]
 800cdc2:	b920      	cbnz	r0, 800cdce <_svfiprintf_r+0x2e>
 800cdc4:	230c      	movs	r3, #12
 800cdc6:	603b      	str	r3, [r7, #0]
 800cdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdcc:	e0d1      	b.n	800cf72 <_svfiprintf_r+0x1d2>
 800cdce:	2340      	movs	r3, #64	; 0x40
 800cdd0:	616b      	str	r3, [r5, #20]
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	9309      	str	r3, [sp, #36]	; 0x24
 800cdd6:	2320      	movs	r3, #32
 800cdd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cddc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cde0:	2330      	movs	r3, #48	; 0x30
 800cde2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cf8c <_svfiprintf_r+0x1ec>
 800cde6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdea:	f04f 0901 	mov.w	r9, #1
 800cdee:	4623      	mov	r3, r4
 800cdf0:	469a      	mov	sl, r3
 800cdf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdf6:	b10a      	cbz	r2, 800cdfc <_svfiprintf_r+0x5c>
 800cdf8:	2a25      	cmp	r2, #37	; 0x25
 800cdfa:	d1f9      	bne.n	800cdf0 <_svfiprintf_r+0x50>
 800cdfc:	ebba 0b04 	subs.w	fp, sl, r4
 800ce00:	d00b      	beq.n	800ce1a <_svfiprintf_r+0x7a>
 800ce02:	465b      	mov	r3, fp
 800ce04:	4622      	mov	r2, r4
 800ce06:	4629      	mov	r1, r5
 800ce08:	4638      	mov	r0, r7
 800ce0a:	f7ff ff6d 	bl	800cce8 <__ssputs_r>
 800ce0e:	3001      	adds	r0, #1
 800ce10:	f000 80aa 	beq.w	800cf68 <_svfiprintf_r+0x1c8>
 800ce14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce16:	445a      	add	r2, fp
 800ce18:	9209      	str	r2, [sp, #36]	; 0x24
 800ce1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	f000 80a2 	beq.w	800cf68 <_svfiprintf_r+0x1c8>
 800ce24:	2300      	movs	r3, #0
 800ce26:	f04f 32ff 	mov.w	r2, #4294967295
 800ce2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce2e:	f10a 0a01 	add.w	sl, sl, #1
 800ce32:	9304      	str	r3, [sp, #16]
 800ce34:	9307      	str	r3, [sp, #28]
 800ce36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce3a:	931a      	str	r3, [sp, #104]	; 0x68
 800ce3c:	4654      	mov	r4, sl
 800ce3e:	2205      	movs	r2, #5
 800ce40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce44:	4851      	ldr	r0, [pc, #324]	; (800cf8c <_svfiprintf_r+0x1ec>)
 800ce46:	f7f3 f9fb 	bl	8000240 <memchr>
 800ce4a:	9a04      	ldr	r2, [sp, #16]
 800ce4c:	b9d8      	cbnz	r0, 800ce86 <_svfiprintf_r+0xe6>
 800ce4e:	06d0      	lsls	r0, r2, #27
 800ce50:	bf44      	itt	mi
 800ce52:	2320      	movmi	r3, #32
 800ce54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce58:	0711      	lsls	r1, r2, #28
 800ce5a:	bf44      	itt	mi
 800ce5c:	232b      	movmi	r3, #43	; 0x2b
 800ce5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce62:	f89a 3000 	ldrb.w	r3, [sl]
 800ce66:	2b2a      	cmp	r3, #42	; 0x2a
 800ce68:	d015      	beq.n	800ce96 <_svfiprintf_r+0xf6>
 800ce6a:	9a07      	ldr	r2, [sp, #28]
 800ce6c:	4654      	mov	r4, sl
 800ce6e:	2000      	movs	r0, #0
 800ce70:	f04f 0c0a 	mov.w	ip, #10
 800ce74:	4621      	mov	r1, r4
 800ce76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce7a:	3b30      	subs	r3, #48	; 0x30
 800ce7c:	2b09      	cmp	r3, #9
 800ce7e:	d94e      	bls.n	800cf1e <_svfiprintf_r+0x17e>
 800ce80:	b1b0      	cbz	r0, 800ceb0 <_svfiprintf_r+0x110>
 800ce82:	9207      	str	r2, [sp, #28]
 800ce84:	e014      	b.n	800ceb0 <_svfiprintf_r+0x110>
 800ce86:	eba0 0308 	sub.w	r3, r0, r8
 800ce8a:	fa09 f303 	lsl.w	r3, r9, r3
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	9304      	str	r3, [sp, #16]
 800ce92:	46a2      	mov	sl, r4
 800ce94:	e7d2      	b.n	800ce3c <_svfiprintf_r+0x9c>
 800ce96:	9b03      	ldr	r3, [sp, #12]
 800ce98:	1d19      	adds	r1, r3, #4
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	9103      	str	r1, [sp, #12]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	bfbb      	ittet	lt
 800cea2:	425b      	neglt	r3, r3
 800cea4:	f042 0202 	orrlt.w	r2, r2, #2
 800cea8:	9307      	strge	r3, [sp, #28]
 800ceaa:	9307      	strlt	r3, [sp, #28]
 800ceac:	bfb8      	it	lt
 800ceae:	9204      	strlt	r2, [sp, #16]
 800ceb0:	7823      	ldrb	r3, [r4, #0]
 800ceb2:	2b2e      	cmp	r3, #46	; 0x2e
 800ceb4:	d10c      	bne.n	800ced0 <_svfiprintf_r+0x130>
 800ceb6:	7863      	ldrb	r3, [r4, #1]
 800ceb8:	2b2a      	cmp	r3, #42	; 0x2a
 800ceba:	d135      	bne.n	800cf28 <_svfiprintf_r+0x188>
 800cebc:	9b03      	ldr	r3, [sp, #12]
 800cebe:	1d1a      	adds	r2, r3, #4
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	9203      	str	r2, [sp, #12]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	bfb8      	it	lt
 800cec8:	f04f 33ff 	movlt.w	r3, #4294967295
 800cecc:	3402      	adds	r4, #2
 800cece:	9305      	str	r3, [sp, #20]
 800ced0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cf9c <_svfiprintf_r+0x1fc>
 800ced4:	7821      	ldrb	r1, [r4, #0]
 800ced6:	2203      	movs	r2, #3
 800ced8:	4650      	mov	r0, sl
 800ceda:	f7f3 f9b1 	bl	8000240 <memchr>
 800cede:	b140      	cbz	r0, 800cef2 <_svfiprintf_r+0x152>
 800cee0:	2340      	movs	r3, #64	; 0x40
 800cee2:	eba0 000a 	sub.w	r0, r0, sl
 800cee6:	fa03 f000 	lsl.w	r0, r3, r0
 800ceea:	9b04      	ldr	r3, [sp, #16]
 800ceec:	4303      	orrs	r3, r0
 800ceee:	3401      	adds	r4, #1
 800cef0:	9304      	str	r3, [sp, #16]
 800cef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cef6:	4826      	ldr	r0, [pc, #152]	; (800cf90 <_svfiprintf_r+0x1f0>)
 800cef8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cefc:	2206      	movs	r2, #6
 800cefe:	f7f3 f99f 	bl	8000240 <memchr>
 800cf02:	2800      	cmp	r0, #0
 800cf04:	d038      	beq.n	800cf78 <_svfiprintf_r+0x1d8>
 800cf06:	4b23      	ldr	r3, [pc, #140]	; (800cf94 <_svfiprintf_r+0x1f4>)
 800cf08:	bb1b      	cbnz	r3, 800cf52 <_svfiprintf_r+0x1b2>
 800cf0a:	9b03      	ldr	r3, [sp, #12]
 800cf0c:	3307      	adds	r3, #7
 800cf0e:	f023 0307 	bic.w	r3, r3, #7
 800cf12:	3308      	adds	r3, #8
 800cf14:	9303      	str	r3, [sp, #12]
 800cf16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf18:	4433      	add	r3, r6
 800cf1a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf1c:	e767      	b.n	800cdee <_svfiprintf_r+0x4e>
 800cf1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf22:	460c      	mov	r4, r1
 800cf24:	2001      	movs	r0, #1
 800cf26:	e7a5      	b.n	800ce74 <_svfiprintf_r+0xd4>
 800cf28:	2300      	movs	r3, #0
 800cf2a:	3401      	adds	r4, #1
 800cf2c:	9305      	str	r3, [sp, #20]
 800cf2e:	4619      	mov	r1, r3
 800cf30:	f04f 0c0a 	mov.w	ip, #10
 800cf34:	4620      	mov	r0, r4
 800cf36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf3a:	3a30      	subs	r2, #48	; 0x30
 800cf3c:	2a09      	cmp	r2, #9
 800cf3e:	d903      	bls.n	800cf48 <_svfiprintf_r+0x1a8>
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d0c5      	beq.n	800ced0 <_svfiprintf_r+0x130>
 800cf44:	9105      	str	r1, [sp, #20]
 800cf46:	e7c3      	b.n	800ced0 <_svfiprintf_r+0x130>
 800cf48:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf4c:	4604      	mov	r4, r0
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e7f0      	b.n	800cf34 <_svfiprintf_r+0x194>
 800cf52:	ab03      	add	r3, sp, #12
 800cf54:	9300      	str	r3, [sp, #0]
 800cf56:	462a      	mov	r2, r5
 800cf58:	4b0f      	ldr	r3, [pc, #60]	; (800cf98 <_svfiprintf_r+0x1f8>)
 800cf5a:	a904      	add	r1, sp, #16
 800cf5c:	4638      	mov	r0, r7
 800cf5e:	f3af 8000 	nop.w
 800cf62:	1c42      	adds	r2, r0, #1
 800cf64:	4606      	mov	r6, r0
 800cf66:	d1d6      	bne.n	800cf16 <_svfiprintf_r+0x176>
 800cf68:	89ab      	ldrh	r3, [r5, #12]
 800cf6a:	065b      	lsls	r3, r3, #25
 800cf6c:	f53f af2c 	bmi.w	800cdc8 <_svfiprintf_r+0x28>
 800cf70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf72:	b01d      	add	sp, #116	; 0x74
 800cf74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf78:	ab03      	add	r3, sp, #12
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	462a      	mov	r2, r5
 800cf7e:	4b06      	ldr	r3, [pc, #24]	; (800cf98 <_svfiprintf_r+0x1f8>)
 800cf80:	a904      	add	r1, sp, #16
 800cf82:	4638      	mov	r0, r7
 800cf84:	f000 f87a 	bl	800d07c <_printf_i>
 800cf88:	e7eb      	b.n	800cf62 <_svfiprintf_r+0x1c2>
 800cf8a:	bf00      	nop
 800cf8c:	0800d924 	.word	0x0800d924
 800cf90:	0800d92e 	.word	0x0800d92e
 800cf94:	00000000 	.word	0x00000000
 800cf98:	0800cce9 	.word	0x0800cce9
 800cf9c:	0800d92a 	.word	0x0800d92a

0800cfa0 <_printf_common>:
 800cfa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfa4:	4616      	mov	r6, r2
 800cfa6:	4699      	mov	r9, r3
 800cfa8:	688a      	ldr	r2, [r1, #8]
 800cfaa:	690b      	ldr	r3, [r1, #16]
 800cfac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	bfb8      	it	lt
 800cfb4:	4613      	movlt	r3, r2
 800cfb6:	6033      	str	r3, [r6, #0]
 800cfb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cfbc:	4607      	mov	r7, r0
 800cfbe:	460c      	mov	r4, r1
 800cfc0:	b10a      	cbz	r2, 800cfc6 <_printf_common+0x26>
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	6033      	str	r3, [r6, #0]
 800cfc6:	6823      	ldr	r3, [r4, #0]
 800cfc8:	0699      	lsls	r1, r3, #26
 800cfca:	bf42      	ittt	mi
 800cfcc:	6833      	ldrmi	r3, [r6, #0]
 800cfce:	3302      	addmi	r3, #2
 800cfd0:	6033      	strmi	r3, [r6, #0]
 800cfd2:	6825      	ldr	r5, [r4, #0]
 800cfd4:	f015 0506 	ands.w	r5, r5, #6
 800cfd8:	d106      	bne.n	800cfe8 <_printf_common+0x48>
 800cfda:	f104 0a19 	add.w	sl, r4, #25
 800cfde:	68e3      	ldr	r3, [r4, #12]
 800cfe0:	6832      	ldr	r2, [r6, #0]
 800cfe2:	1a9b      	subs	r3, r3, r2
 800cfe4:	42ab      	cmp	r3, r5
 800cfe6:	dc26      	bgt.n	800d036 <_printf_common+0x96>
 800cfe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cfec:	1e13      	subs	r3, r2, #0
 800cfee:	6822      	ldr	r2, [r4, #0]
 800cff0:	bf18      	it	ne
 800cff2:	2301      	movne	r3, #1
 800cff4:	0692      	lsls	r2, r2, #26
 800cff6:	d42b      	bmi.n	800d050 <_printf_common+0xb0>
 800cff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cffc:	4649      	mov	r1, r9
 800cffe:	4638      	mov	r0, r7
 800d000:	47c0      	blx	r8
 800d002:	3001      	adds	r0, #1
 800d004:	d01e      	beq.n	800d044 <_printf_common+0xa4>
 800d006:	6823      	ldr	r3, [r4, #0]
 800d008:	68e5      	ldr	r5, [r4, #12]
 800d00a:	6832      	ldr	r2, [r6, #0]
 800d00c:	f003 0306 	and.w	r3, r3, #6
 800d010:	2b04      	cmp	r3, #4
 800d012:	bf08      	it	eq
 800d014:	1aad      	subeq	r5, r5, r2
 800d016:	68a3      	ldr	r3, [r4, #8]
 800d018:	6922      	ldr	r2, [r4, #16]
 800d01a:	bf0c      	ite	eq
 800d01c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d020:	2500      	movne	r5, #0
 800d022:	4293      	cmp	r3, r2
 800d024:	bfc4      	itt	gt
 800d026:	1a9b      	subgt	r3, r3, r2
 800d028:	18ed      	addgt	r5, r5, r3
 800d02a:	2600      	movs	r6, #0
 800d02c:	341a      	adds	r4, #26
 800d02e:	42b5      	cmp	r5, r6
 800d030:	d11a      	bne.n	800d068 <_printf_common+0xc8>
 800d032:	2000      	movs	r0, #0
 800d034:	e008      	b.n	800d048 <_printf_common+0xa8>
 800d036:	2301      	movs	r3, #1
 800d038:	4652      	mov	r2, sl
 800d03a:	4649      	mov	r1, r9
 800d03c:	4638      	mov	r0, r7
 800d03e:	47c0      	blx	r8
 800d040:	3001      	adds	r0, #1
 800d042:	d103      	bne.n	800d04c <_printf_common+0xac>
 800d044:	f04f 30ff 	mov.w	r0, #4294967295
 800d048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d04c:	3501      	adds	r5, #1
 800d04e:	e7c6      	b.n	800cfde <_printf_common+0x3e>
 800d050:	18e1      	adds	r1, r4, r3
 800d052:	1c5a      	adds	r2, r3, #1
 800d054:	2030      	movs	r0, #48	; 0x30
 800d056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d05a:	4422      	add	r2, r4
 800d05c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d060:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d064:	3302      	adds	r3, #2
 800d066:	e7c7      	b.n	800cff8 <_printf_common+0x58>
 800d068:	2301      	movs	r3, #1
 800d06a:	4622      	mov	r2, r4
 800d06c:	4649      	mov	r1, r9
 800d06e:	4638      	mov	r0, r7
 800d070:	47c0      	blx	r8
 800d072:	3001      	adds	r0, #1
 800d074:	d0e6      	beq.n	800d044 <_printf_common+0xa4>
 800d076:	3601      	adds	r6, #1
 800d078:	e7d9      	b.n	800d02e <_printf_common+0x8e>
	...

0800d07c <_printf_i>:
 800d07c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d080:	460c      	mov	r4, r1
 800d082:	4691      	mov	r9, r2
 800d084:	7e27      	ldrb	r7, [r4, #24]
 800d086:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d088:	2f78      	cmp	r7, #120	; 0x78
 800d08a:	4680      	mov	r8, r0
 800d08c:	469a      	mov	sl, r3
 800d08e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d092:	d807      	bhi.n	800d0a4 <_printf_i+0x28>
 800d094:	2f62      	cmp	r7, #98	; 0x62
 800d096:	d80a      	bhi.n	800d0ae <_printf_i+0x32>
 800d098:	2f00      	cmp	r7, #0
 800d09a:	f000 80d8 	beq.w	800d24e <_printf_i+0x1d2>
 800d09e:	2f58      	cmp	r7, #88	; 0x58
 800d0a0:	f000 80a3 	beq.w	800d1ea <_printf_i+0x16e>
 800d0a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d0a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0ac:	e03a      	b.n	800d124 <_printf_i+0xa8>
 800d0ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d0b2:	2b15      	cmp	r3, #21
 800d0b4:	d8f6      	bhi.n	800d0a4 <_printf_i+0x28>
 800d0b6:	a001      	add	r0, pc, #4	; (adr r0, 800d0bc <_printf_i+0x40>)
 800d0b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d0bc:	0800d115 	.word	0x0800d115
 800d0c0:	0800d129 	.word	0x0800d129
 800d0c4:	0800d0a5 	.word	0x0800d0a5
 800d0c8:	0800d0a5 	.word	0x0800d0a5
 800d0cc:	0800d0a5 	.word	0x0800d0a5
 800d0d0:	0800d0a5 	.word	0x0800d0a5
 800d0d4:	0800d129 	.word	0x0800d129
 800d0d8:	0800d0a5 	.word	0x0800d0a5
 800d0dc:	0800d0a5 	.word	0x0800d0a5
 800d0e0:	0800d0a5 	.word	0x0800d0a5
 800d0e4:	0800d0a5 	.word	0x0800d0a5
 800d0e8:	0800d235 	.word	0x0800d235
 800d0ec:	0800d159 	.word	0x0800d159
 800d0f0:	0800d217 	.word	0x0800d217
 800d0f4:	0800d0a5 	.word	0x0800d0a5
 800d0f8:	0800d0a5 	.word	0x0800d0a5
 800d0fc:	0800d257 	.word	0x0800d257
 800d100:	0800d0a5 	.word	0x0800d0a5
 800d104:	0800d159 	.word	0x0800d159
 800d108:	0800d0a5 	.word	0x0800d0a5
 800d10c:	0800d0a5 	.word	0x0800d0a5
 800d110:	0800d21f 	.word	0x0800d21f
 800d114:	680b      	ldr	r3, [r1, #0]
 800d116:	1d1a      	adds	r2, r3, #4
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	600a      	str	r2, [r1, #0]
 800d11c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d124:	2301      	movs	r3, #1
 800d126:	e0a3      	b.n	800d270 <_printf_i+0x1f4>
 800d128:	6825      	ldr	r5, [r4, #0]
 800d12a:	6808      	ldr	r0, [r1, #0]
 800d12c:	062e      	lsls	r6, r5, #24
 800d12e:	f100 0304 	add.w	r3, r0, #4
 800d132:	d50a      	bpl.n	800d14a <_printf_i+0xce>
 800d134:	6805      	ldr	r5, [r0, #0]
 800d136:	600b      	str	r3, [r1, #0]
 800d138:	2d00      	cmp	r5, #0
 800d13a:	da03      	bge.n	800d144 <_printf_i+0xc8>
 800d13c:	232d      	movs	r3, #45	; 0x2d
 800d13e:	426d      	negs	r5, r5
 800d140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d144:	485e      	ldr	r0, [pc, #376]	; (800d2c0 <_printf_i+0x244>)
 800d146:	230a      	movs	r3, #10
 800d148:	e019      	b.n	800d17e <_printf_i+0x102>
 800d14a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d14e:	6805      	ldr	r5, [r0, #0]
 800d150:	600b      	str	r3, [r1, #0]
 800d152:	bf18      	it	ne
 800d154:	b22d      	sxthne	r5, r5
 800d156:	e7ef      	b.n	800d138 <_printf_i+0xbc>
 800d158:	680b      	ldr	r3, [r1, #0]
 800d15a:	6825      	ldr	r5, [r4, #0]
 800d15c:	1d18      	adds	r0, r3, #4
 800d15e:	6008      	str	r0, [r1, #0]
 800d160:	0628      	lsls	r0, r5, #24
 800d162:	d501      	bpl.n	800d168 <_printf_i+0xec>
 800d164:	681d      	ldr	r5, [r3, #0]
 800d166:	e002      	b.n	800d16e <_printf_i+0xf2>
 800d168:	0669      	lsls	r1, r5, #25
 800d16a:	d5fb      	bpl.n	800d164 <_printf_i+0xe8>
 800d16c:	881d      	ldrh	r5, [r3, #0]
 800d16e:	4854      	ldr	r0, [pc, #336]	; (800d2c0 <_printf_i+0x244>)
 800d170:	2f6f      	cmp	r7, #111	; 0x6f
 800d172:	bf0c      	ite	eq
 800d174:	2308      	moveq	r3, #8
 800d176:	230a      	movne	r3, #10
 800d178:	2100      	movs	r1, #0
 800d17a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d17e:	6866      	ldr	r6, [r4, #4]
 800d180:	60a6      	str	r6, [r4, #8]
 800d182:	2e00      	cmp	r6, #0
 800d184:	bfa2      	ittt	ge
 800d186:	6821      	ldrge	r1, [r4, #0]
 800d188:	f021 0104 	bicge.w	r1, r1, #4
 800d18c:	6021      	strge	r1, [r4, #0]
 800d18e:	b90d      	cbnz	r5, 800d194 <_printf_i+0x118>
 800d190:	2e00      	cmp	r6, #0
 800d192:	d04d      	beq.n	800d230 <_printf_i+0x1b4>
 800d194:	4616      	mov	r6, r2
 800d196:	fbb5 f1f3 	udiv	r1, r5, r3
 800d19a:	fb03 5711 	mls	r7, r3, r1, r5
 800d19e:	5dc7      	ldrb	r7, [r0, r7]
 800d1a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d1a4:	462f      	mov	r7, r5
 800d1a6:	42bb      	cmp	r3, r7
 800d1a8:	460d      	mov	r5, r1
 800d1aa:	d9f4      	bls.n	800d196 <_printf_i+0x11a>
 800d1ac:	2b08      	cmp	r3, #8
 800d1ae:	d10b      	bne.n	800d1c8 <_printf_i+0x14c>
 800d1b0:	6823      	ldr	r3, [r4, #0]
 800d1b2:	07df      	lsls	r7, r3, #31
 800d1b4:	d508      	bpl.n	800d1c8 <_printf_i+0x14c>
 800d1b6:	6923      	ldr	r3, [r4, #16]
 800d1b8:	6861      	ldr	r1, [r4, #4]
 800d1ba:	4299      	cmp	r1, r3
 800d1bc:	bfde      	ittt	le
 800d1be:	2330      	movle	r3, #48	; 0x30
 800d1c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d1c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d1c8:	1b92      	subs	r2, r2, r6
 800d1ca:	6122      	str	r2, [r4, #16]
 800d1cc:	f8cd a000 	str.w	sl, [sp]
 800d1d0:	464b      	mov	r3, r9
 800d1d2:	aa03      	add	r2, sp, #12
 800d1d4:	4621      	mov	r1, r4
 800d1d6:	4640      	mov	r0, r8
 800d1d8:	f7ff fee2 	bl	800cfa0 <_printf_common>
 800d1dc:	3001      	adds	r0, #1
 800d1de:	d14c      	bne.n	800d27a <_printf_i+0x1fe>
 800d1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e4:	b004      	add	sp, #16
 800d1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ea:	4835      	ldr	r0, [pc, #212]	; (800d2c0 <_printf_i+0x244>)
 800d1ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d1f0:	6823      	ldr	r3, [r4, #0]
 800d1f2:	680e      	ldr	r6, [r1, #0]
 800d1f4:	061f      	lsls	r7, r3, #24
 800d1f6:	f856 5b04 	ldr.w	r5, [r6], #4
 800d1fa:	600e      	str	r6, [r1, #0]
 800d1fc:	d514      	bpl.n	800d228 <_printf_i+0x1ac>
 800d1fe:	07d9      	lsls	r1, r3, #31
 800d200:	bf44      	itt	mi
 800d202:	f043 0320 	orrmi.w	r3, r3, #32
 800d206:	6023      	strmi	r3, [r4, #0]
 800d208:	b91d      	cbnz	r5, 800d212 <_printf_i+0x196>
 800d20a:	6823      	ldr	r3, [r4, #0]
 800d20c:	f023 0320 	bic.w	r3, r3, #32
 800d210:	6023      	str	r3, [r4, #0]
 800d212:	2310      	movs	r3, #16
 800d214:	e7b0      	b.n	800d178 <_printf_i+0xfc>
 800d216:	6823      	ldr	r3, [r4, #0]
 800d218:	f043 0320 	orr.w	r3, r3, #32
 800d21c:	6023      	str	r3, [r4, #0]
 800d21e:	2378      	movs	r3, #120	; 0x78
 800d220:	4828      	ldr	r0, [pc, #160]	; (800d2c4 <_printf_i+0x248>)
 800d222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d226:	e7e3      	b.n	800d1f0 <_printf_i+0x174>
 800d228:	065e      	lsls	r6, r3, #25
 800d22a:	bf48      	it	mi
 800d22c:	b2ad      	uxthmi	r5, r5
 800d22e:	e7e6      	b.n	800d1fe <_printf_i+0x182>
 800d230:	4616      	mov	r6, r2
 800d232:	e7bb      	b.n	800d1ac <_printf_i+0x130>
 800d234:	680b      	ldr	r3, [r1, #0]
 800d236:	6826      	ldr	r6, [r4, #0]
 800d238:	6960      	ldr	r0, [r4, #20]
 800d23a:	1d1d      	adds	r5, r3, #4
 800d23c:	600d      	str	r5, [r1, #0]
 800d23e:	0635      	lsls	r5, r6, #24
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	d501      	bpl.n	800d248 <_printf_i+0x1cc>
 800d244:	6018      	str	r0, [r3, #0]
 800d246:	e002      	b.n	800d24e <_printf_i+0x1d2>
 800d248:	0671      	lsls	r1, r6, #25
 800d24a:	d5fb      	bpl.n	800d244 <_printf_i+0x1c8>
 800d24c:	8018      	strh	r0, [r3, #0]
 800d24e:	2300      	movs	r3, #0
 800d250:	6123      	str	r3, [r4, #16]
 800d252:	4616      	mov	r6, r2
 800d254:	e7ba      	b.n	800d1cc <_printf_i+0x150>
 800d256:	680b      	ldr	r3, [r1, #0]
 800d258:	1d1a      	adds	r2, r3, #4
 800d25a:	600a      	str	r2, [r1, #0]
 800d25c:	681e      	ldr	r6, [r3, #0]
 800d25e:	6862      	ldr	r2, [r4, #4]
 800d260:	2100      	movs	r1, #0
 800d262:	4630      	mov	r0, r6
 800d264:	f7f2 ffec 	bl	8000240 <memchr>
 800d268:	b108      	cbz	r0, 800d26e <_printf_i+0x1f2>
 800d26a:	1b80      	subs	r0, r0, r6
 800d26c:	6060      	str	r0, [r4, #4]
 800d26e:	6863      	ldr	r3, [r4, #4]
 800d270:	6123      	str	r3, [r4, #16]
 800d272:	2300      	movs	r3, #0
 800d274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d278:	e7a8      	b.n	800d1cc <_printf_i+0x150>
 800d27a:	6923      	ldr	r3, [r4, #16]
 800d27c:	4632      	mov	r2, r6
 800d27e:	4649      	mov	r1, r9
 800d280:	4640      	mov	r0, r8
 800d282:	47d0      	blx	sl
 800d284:	3001      	adds	r0, #1
 800d286:	d0ab      	beq.n	800d1e0 <_printf_i+0x164>
 800d288:	6823      	ldr	r3, [r4, #0]
 800d28a:	079b      	lsls	r3, r3, #30
 800d28c:	d413      	bmi.n	800d2b6 <_printf_i+0x23a>
 800d28e:	68e0      	ldr	r0, [r4, #12]
 800d290:	9b03      	ldr	r3, [sp, #12]
 800d292:	4298      	cmp	r0, r3
 800d294:	bfb8      	it	lt
 800d296:	4618      	movlt	r0, r3
 800d298:	e7a4      	b.n	800d1e4 <_printf_i+0x168>
 800d29a:	2301      	movs	r3, #1
 800d29c:	4632      	mov	r2, r6
 800d29e:	4649      	mov	r1, r9
 800d2a0:	4640      	mov	r0, r8
 800d2a2:	47d0      	blx	sl
 800d2a4:	3001      	adds	r0, #1
 800d2a6:	d09b      	beq.n	800d1e0 <_printf_i+0x164>
 800d2a8:	3501      	adds	r5, #1
 800d2aa:	68e3      	ldr	r3, [r4, #12]
 800d2ac:	9903      	ldr	r1, [sp, #12]
 800d2ae:	1a5b      	subs	r3, r3, r1
 800d2b0:	42ab      	cmp	r3, r5
 800d2b2:	dcf2      	bgt.n	800d29a <_printf_i+0x21e>
 800d2b4:	e7eb      	b.n	800d28e <_printf_i+0x212>
 800d2b6:	2500      	movs	r5, #0
 800d2b8:	f104 0619 	add.w	r6, r4, #25
 800d2bc:	e7f5      	b.n	800d2aa <_printf_i+0x22e>
 800d2be:	bf00      	nop
 800d2c0:	0800d935 	.word	0x0800d935
 800d2c4:	0800d946 	.word	0x0800d946

0800d2c8 <memcpy>:
 800d2c8:	440a      	add	r2, r1
 800d2ca:	4291      	cmp	r1, r2
 800d2cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2d0:	d100      	bne.n	800d2d4 <memcpy+0xc>
 800d2d2:	4770      	bx	lr
 800d2d4:	b510      	push	{r4, lr}
 800d2d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2de:	4291      	cmp	r1, r2
 800d2e0:	d1f9      	bne.n	800d2d6 <memcpy+0xe>
 800d2e2:	bd10      	pop	{r4, pc}

0800d2e4 <memmove>:
 800d2e4:	4288      	cmp	r0, r1
 800d2e6:	b510      	push	{r4, lr}
 800d2e8:	eb01 0402 	add.w	r4, r1, r2
 800d2ec:	d902      	bls.n	800d2f4 <memmove+0x10>
 800d2ee:	4284      	cmp	r4, r0
 800d2f0:	4623      	mov	r3, r4
 800d2f2:	d807      	bhi.n	800d304 <memmove+0x20>
 800d2f4:	1e43      	subs	r3, r0, #1
 800d2f6:	42a1      	cmp	r1, r4
 800d2f8:	d008      	beq.n	800d30c <memmove+0x28>
 800d2fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d302:	e7f8      	b.n	800d2f6 <memmove+0x12>
 800d304:	4402      	add	r2, r0
 800d306:	4601      	mov	r1, r0
 800d308:	428a      	cmp	r2, r1
 800d30a:	d100      	bne.n	800d30e <memmove+0x2a>
 800d30c:	bd10      	pop	{r4, pc}
 800d30e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d316:	e7f7      	b.n	800d308 <memmove+0x24>

0800d318 <_free_r>:
 800d318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d31a:	2900      	cmp	r1, #0
 800d31c:	d048      	beq.n	800d3b0 <_free_r+0x98>
 800d31e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d322:	9001      	str	r0, [sp, #4]
 800d324:	2b00      	cmp	r3, #0
 800d326:	f1a1 0404 	sub.w	r4, r1, #4
 800d32a:	bfb8      	it	lt
 800d32c:	18e4      	addlt	r4, r4, r3
 800d32e:	f000 f8d3 	bl	800d4d8 <__malloc_lock>
 800d332:	4a20      	ldr	r2, [pc, #128]	; (800d3b4 <_free_r+0x9c>)
 800d334:	9801      	ldr	r0, [sp, #4]
 800d336:	6813      	ldr	r3, [r2, #0]
 800d338:	4615      	mov	r5, r2
 800d33a:	b933      	cbnz	r3, 800d34a <_free_r+0x32>
 800d33c:	6063      	str	r3, [r4, #4]
 800d33e:	6014      	str	r4, [r2, #0]
 800d340:	b003      	add	sp, #12
 800d342:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d346:	f000 b8cd 	b.w	800d4e4 <__malloc_unlock>
 800d34a:	42a3      	cmp	r3, r4
 800d34c:	d90b      	bls.n	800d366 <_free_r+0x4e>
 800d34e:	6821      	ldr	r1, [r4, #0]
 800d350:	1862      	adds	r2, r4, r1
 800d352:	4293      	cmp	r3, r2
 800d354:	bf04      	itt	eq
 800d356:	681a      	ldreq	r2, [r3, #0]
 800d358:	685b      	ldreq	r3, [r3, #4]
 800d35a:	6063      	str	r3, [r4, #4]
 800d35c:	bf04      	itt	eq
 800d35e:	1852      	addeq	r2, r2, r1
 800d360:	6022      	streq	r2, [r4, #0]
 800d362:	602c      	str	r4, [r5, #0]
 800d364:	e7ec      	b.n	800d340 <_free_r+0x28>
 800d366:	461a      	mov	r2, r3
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	b10b      	cbz	r3, 800d370 <_free_r+0x58>
 800d36c:	42a3      	cmp	r3, r4
 800d36e:	d9fa      	bls.n	800d366 <_free_r+0x4e>
 800d370:	6811      	ldr	r1, [r2, #0]
 800d372:	1855      	adds	r5, r2, r1
 800d374:	42a5      	cmp	r5, r4
 800d376:	d10b      	bne.n	800d390 <_free_r+0x78>
 800d378:	6824      	ldr	r4, [r4, #0]
 800d37a:	4421      	add	r1, r4
 800d37c:	1854      	adds	r4, r2, r1
 800d37e:	42a3      	cmp	r3, r4
 800d380:	6011      	str	r1, [r2, #0]
 800d382:	d1dd      	bne.n	800d340 <_free_r+0x28>
 800d384:	681c      	ldr	r4, [r3, #0]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	6053      	str	r3, [r2, #4]
 800d38a:	4421      	add	r1, r4
 800d38c:	6011      	str	r1, [r2, #0]
 800d38e:	e7d7      	b.n	800d340 <_free_r+0x28>
 800d390:	d902      	bls.n	800d398 <_free_r+0x80>
 800d392:	230c      	movs	r3, #12
 800d394:	6003      	str	r3, [r0, #0]
 800d396:	e7d3      	b.n	800d340 <_free_r+0x28>
 800d398:	6825      	ldr	r5, [r4, #0]
 800d39a:	1961      	adds	r1, r4, r5
 800d39c:	428b      	cmp	r3, r1
 800d39e:	bf04      	itt	eq
 800d3a0:	6819      	ldreq	r1, [r3, #0]
 800d3a2:	685b      	ldreq	r3, [r3, #4]
 800d3a4:	6063      	str	r3, [r4, #4]
 800d3a6:	bf04      	itt	eq
 800d3a8:	1949      	addeq	r1, r1, r5
 800d3aa:	6021      	streq	r1, [r4, #0]
 800d3ac:	6054      	str	r4, [r2, #4]
 800d3ae:	e7c7      	b.n	800d340 <_free_r+0x28>
 800d3b0:	b003      	add	sp, #12
 800d3b2:	bd30      	pop	{r4, r5, pc}
 800d3b4:	20000650 	.word	0x20000650

0800d3b8 <_malloc_r>:
 800d3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ba:	1ccd      	adds	r5, r1, #3
 800d3bc:	f025 0503 	bic.w	r5, r5, #3
 800d3c0:	3508      	adds	r5, #8
 800d3c2:	2d0c      	cmp	r5, #12
 800d3c4:	bf38      	it	cc
 800d3c6:	250c      	movcc	r5, #12
 800d3c8:	2d00      	cmp	r5, #0
 800d3ca:	4606      	mov	r6, r0
 800d3cc:	db01      	blt.n	800d3d2 <_malloc_r+0x1a>
 800d3ce:	42a9      	cmp	r1, r5
 800d3d0:	d903      	bls.n	800d3da <_malloc_r+0x22>
 800d3d2:	230c      	movs	r3, #12
 800d3d4:	6033      	str	r3, [r6, #0]
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3da:	f000 f87d 	bl	800d4d8 <__malloc_lock>
 800d3de:	4921      	ldr	r1, [pc, #132]	; (800d464 <_malloc_r+0xac>)
 800d3e0:	680a      	ldr	r2, [r1, #0]
 800d3e2:	4614      	mov	r4, r2
 800d3e4:	b99c      	cbnz	r4, 800d40e <_malloc_r+0x56>
 800d3e6:	4f20      	ldr	r7, [pc, #128]	; (800d468 <_malloc_r+0xb0>)
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	b923      	cbnz	r3, 800d3f6 <_malloc_r+0x3e>
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	f000 f862 	bl	800d4b8 <_sbrk_r>
 800d3f4:	6038      	str	r0, [r7, #0]
 800d3f6:	4629      	mov	r1, r5
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	f000 f85d 	bl	800d4b8 <_sbrk_r>
 800d3fe:	1c43      	adds	r3, r0, #1
 800d400:	d123      	bne.n	800d44a <_malloc_r+0x92>
 800d402:	230c      	movs	r3, #12
 800d404:	6033      	str	r3, [r6, #0]
 800d406:	4630      	mov	r0, r6
 800d408:	f000 f86c 	bl	800d4e4 <__malloc_unlock>
 800d40c:	e7e3      	b.n	800d3d6 <_malloc_r+0x1e>
 800d40e:	6823      	ldr	r3, [r4, #0]
 800d410:	1b5b      	subs	r3, r3, r5
 800d412:	d417      	bmi.n	800d444 <_malloc_r+0x8c>
 800d414:	2b0b      	cmp	r3, #11
 800d416:	d903      	bls.n	800d420 <_malloc_r+0x68>
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	441c      	add	r4, r3
 800d41c:	6025      	str	r5, [r4, #0]
 800d41e:	e004      	b.n	800d42a <_malloc_r+0x72>
 800d420:	6863      	ldr	r3, [r4, #4]
 800d422:	42a2      	cmp	r2, r4
 800d424:	bf0c      	ite	eq
 800d426:	600b      	streq	r3, [r1, #0]
 800d428:	6053      	strne	r3, [r2, #4]
 800d42a:	4630      	mov	r0, r6
 800d42c:	f000 f85a 	bl	800d4e4 <__malloc_unlock>
 800d430:	f104 000b 	add.w	r0, r4, #11
 800d434:	1d23      	adds	r3, r4, #4
 800d436:	f020 0007 	bic.w	r0, r0, #7
 800d43a:	1ac2      	subs	r2, r0, r3
 800d43c:	d0cc      	beq.n	800d3d8 <_malloc_r+0x20>
 800d43e:	1a1b      	subs	r3, r3, r0
 800d440:	50a3      	str	r3, [r4, r2]
 800d442:	e7c9      	b.n	800d3d8 <_malloc_r+0x20>
 800d444:	4622      	mov	r2, r4
 800d446:	6864      	ldr	r4, [r4, #4]
 800d448:	e7cc      	b.n	800d3e4 <_malloc_r+0x2c>
 800d44a:	1cc4      	adds	r4, r0, #3
 800d44c:	f024 0403 	bic.w	r4, r4, #3
 800d450:	42a0      	cmp	r0, r4
 800d452:	d0e3      	beq.n	800d41c <_malloc_r+0x64>
 800d454:	1a21      	subs	r1, r4, r0
 800d456:	4630      	mov	r0, r6
 800d458:	f000 f82e 	bl	800d4b8 <_sbrk_r>
 800d45c:	3001      	adds	r0, #1
 800d45e:	d1dd      	bne.n	800d41c <_malloc_r+0x64>
 800d460:	e7cf      	b.n	800d402 <_malloc_r+0x4a>
 800d462:	bf00      	nop
 800d464:	20000650 	.word	0x20000650
 800d468:	20000654 	.word	0x20000654

0800d46c <_realloc_r>:
 800d46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46e:	4607      	mov	r7, r0
 800d470:	4614      	mov	r4, r2
 800d472:	460e      	mov	r6, r1
 800d474:	b921      	cbnz	r1, 800d480 <_realloc_r+0x14>
 800d476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d47a:	4611      	mov	r1, r2
 800d47c:	f7ff bf9c 	b.w	800d3b8 <_malloc_r>
 800d480:	b922      	cbnz	r2, 800d48c <_realloc_r+0x20>
 800d482:	f7ff ff49 	bl	800d318 <_free_r>
 800d486:	4625      	mov	r5, r4
 800d488:	4628      	mov	r0, r5
 800d48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d48c:	f000 f830 	bl	800d4f0 <_malloc_usable_size_r>
 800d490:	42a0      	cmp	r0, r4
 800d492:	d20f      	bcs.n	800d4b4 <_realloc_r+0x48>
 800d494:	4621      	mov	r1, r4
 800d496:	4638      	mov	r0, r7
 800d498:	f7ff ff8e 	bl	800d3b8 <_malloc_r>
 800d49c:	4605      	mov	r5, r0
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d0f2      	beq.n	800d488 <_realloc_r+0x1c>
 800d4a2:	4631      	mov	r1, r6
 800d4a4:	4622      	mov	r2, r4
 800d4a6:	f7ff ff0f 	bl	800d2c8 <memcpy>
 800d4aa:	4631      	mov	r1, r6
 800d4ac:	4638      	mov	r0, r7
 800d4ae:	f7ff ff33 	bl	800d318 <_free_r>
 800d4b2:	e7e9      	b.n	800d488 <_realloc_r+0x1c>
 800d4b4:	4635      	mov	r5, r6
 800d4b6:	e7e7      	b.n	800d488 <_realloc_r+0x1c>

0800d4b8 <_sbrk_r>:
 800d4b8:	b538      	push	{r3, r4, r5, lr}
 800d4ba:	4d06      	ldr	r5, [pc, #24]	; (800d4d4 <_sbrk_r+0x1c>)
 800d4bc:	2300      	movs	r3, #0
 800d4be:	4604      	mov	r4, r0
 800d4c0:	4608      	mov	r0, r1
 800d4c2:	602b      	str	r3, [r5, #0]
 800d4c4:	f7f3 ff6a 	bl	800139c <_sbrk>
 800d4c8:	1c43      	adds	r3, r0, #1
 800d4ca:	d102      	bne.n	800d4d2 <_sbrk_r+0x1a>
 800d4cc:	682b      	ldr	r3, [r5, #0]
 800d4ce:	b103      	cbz	r3, 800d4d2 <_sbrk_r+0x1a>
 800d4d0:	6023      	str	r3, [r4, #0]
 800d4d2:	bd38      	pop	{r3, r4, r5, pc}
 800d4d4:	20003004 	.word	0x20003004

0800d4d8 <__malloc_lock>:
 800d4d8:	4801      	ldr	r0, [pc, #4]	; (800d4e0 <__malloc_lock+0x8>)
 800d4da:	f000 b811 	b.w	800d500 <__retarget_lock_acquire_recursive>
 800d4de:	bf00      	nop
 800d4e0:	2000300c 	.word	0x2000300c

0800d4e4 <__malloc_unlock>:
 800d4e4:	4801      	ldr	r0, [pc, #4]	; (800d4ec <__malloc_unlock+0x8>)
 800d4e6:	f000 b80c 	b.w	800d502 <__retarget_lock_release_recursive>
 800d4ea:	bf00      	nop
 800d4ec:	2000300c 	.word	0x2000300c

0800d4f0 <_malloc_usable_size_r>:
 800d4f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4f4:	1f18      	subs	r0, r3, #4
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	bfbc      	itt	lt
 800d4fa:	580b      	ldrlt	r3, [r1, r0]
 800d4fc:	18c0      	addlt	r0, r0, r3
 800d4fe:	4770      	bx	lr

0800d500 <__retarget_lock_acquire_recursive>:
 800d500:	4770      	bx	lr

0800d502 <__retarget_lock_release_recursive>:
 800d502:	4770      	bx	lr

0800d504 <checkint>:
 800d504:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d508:	2b7e      	cmp	r3, #126	; 0x7e
 800d50a:	dd10      	ble.n	800d52e <checkint+0x2a>
 800d50c:	2b96      	cmp	r3, #150	; 0x96
 800d50e:	dc0c      	bgt.n	800d52a <checkint+0x26>
 800d510:	2201      	movs	r2, #1
 800d512:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800d516:	fa02 f303 	lsl.w	r3, r2, r3
 800d51a:	1e5a      	subs	r2, r3, #1
 800d51c:	4202      	tst	r2, r0
 800d51e:	d106      	bne.n	800d52e <checkint+0x2a>
 800d520:	4203      	tst	r3, r0
 800d522:	bf0c      	ite	eq
 800d524:	2002      	moveq	r0, #2
 800d526:	2001      	movne	r0, #1
 800d528:	4770      	bx	lr
 800d52a:	2002      	movs	r0, #2
 800d52c:	4770      	bx	lr
 800d52e:	2000      	movs	r0, #0
 800d530:	4770      	bx	lr
 800d532:	0000      	movs	r0, r0
 800d534:	0000      	movs	r0, r0
	...

0800d538 <powf>:
 800d538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d53a:	ee10 1a10 	vmov	r1, s0
 800d53e:	ee10 6a90 	vmov	r6, s1
 800d542:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800d546:	0072      	lsls	r2, r6, #1
 800d548:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d54c:	b085      	sub	sp, #20
 800d54e:	f102 30ff 	add.w	r0, r2, #4294967295
 800d552:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800d556:	d256      	bcs.n	800d606 <powf+0xce>
 800d558:	4298      	cmp	r0, r3
 800d55a:	d256      	bcs.n	800d60a <powf+0xd2>
 800d55c:	2000      	movs	r0, #0
 800d55e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800d562:	4ea3      	ldr	r6, [pc, #652]	; (800d7f0 <powf+0x2b8>)
 800d564:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800d568:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800d56c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800d570:	0dd2      	lsrs	r2, r2, #23
 800d572:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800d576:	05d2      	lsls	r2, r2, #23
 800d578:	1a8b      	subs	r3, r1, r2
 800d57a:	ed97 5b00 	vldr	d5, [r7]
 800d57e:	ee07 3a90 	vmov	s15, r3
 800d582:	15d2      	asrs	r2, r2, #23
 800d584:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d588:	eea5 6b07 	vfma.f64	d6, d5, d7
 800d58c:	ed97 5b02 	vldr	d5, [r7, #8]
 800d590:	ee26 2b06 	vmul.f64	d2, d6, d6
 800d594:	ee22 1b02 	vmul.f64	d1, d2, d2
 800d598:	ee07 2a90 	vmov	s15, r2
 800d59c:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800d5a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d5a4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d5a8:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800d5ac:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800d5b0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800d5b4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800d5b8:	eea6 4b03 	vfma.f64	d4, d6, d3
 800d5bc:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800d5c0:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800d5c4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800d5c8:	eea2 7b04 	vfma.f64	d7, d2, d4
 800d5cc:	eea5 7b01 	vfma.f64	d7, d5, d1
 800d5d0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d5d4:	ee10 1a90 	vmov	r1, s1
 800d5d8:	2300      	movs	r3, #0
 800d5da:	2700      	movs	r7, #0
 800d5dc:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800d5e0:	f248 06be 	movw	r6, #32958	; 0x80be
 800d5e4:	429f      	cmp	r7, r3
 800d5e6:	bf08      	it	eq
 800d5e8:	4296      	cmpeq	r6, r2
 800d5ea:	f080 80b1 	bcs.w	800d750 <powf+0x218>
 800d5ee:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800d7d0 <powf+0x298>
 800d5f2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5fa:	dd79      	ble.n	800d6f0 <powf+0x1b8>
 800d5fc:	b005      	add	sp, #20
 800d5fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d602:	f000 b91f 	b.w	800d844 <__math_oflowf>
 800d606:	4298      	cmp	r0, r3
 800d608:	d32d      	bcc.n	800d666 <powf+0x12e>
 800d60a:	b952      	cbnz	r2, 800d622 <powf+0xea>
 800d60c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800d610:	005b      	lsls	r3, r3, #1
 800d612:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800d616:	f240 80cd 	bls.w	800d7b4 <powf+0x27c>
 800d61a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800d61e:	b005      	add	sp, #20
 800d620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d622:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800d626:	d105      	bne.n	800d634 <powf+0xfc>
 800d628:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800d62c:	0076      	lsls	r6, r6, #1
 800d62e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800d632:	e7f0      	b.n	800d616 <powf+0xde>
 800d634:	004b      	lsls	r3, r1, #1
 800d636:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800d63a:	d8ee      	bhi.n	800d61a <powf+0xe2>
 800d63c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800d640:	d1eb      	bne.n	800d61a <powf+0xe2>
 800d642:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d646:	f000 80b5 	beq.w	800d7b4 <powf+0x27c>
 800d64a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d64e:	ea6f 0606 	mvn.w	r6, r6
 800d652:	bf34      	ite	cc
 800d654:	2300      	movcc	r3, #0
 800d656:	2301      	movcs	r3, #1
 800d658:	0ff6      	lsrs	r6, r6, #31
 800d65a:	42b3      	cmp	r3, r6
 800d65c:	f040 80ad 	bne.w	800d7ba <powf+0x282>
 800d660:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800d664:	e7db      	b.n	800d61e <powf+0xe6>
 800d666:	004f      	lsls	r7, r1, #1
 800d668:	1e7a      	subs	r2, r7, #1
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d31c      	bcc.n	800d6a8 <powf+0x170>
 800d66e:	2900      	cmp	r1, #0
 800d670:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d674:	da0f      	bge.n	800d696 <powf+0x15e>
 800d676:	ee10 0a90 	vmov	r0, s1
 800d67a:	f7ff ff43 	bl	800d504 <checkint>
 800d67e:	2801      	cmp	r0, #1
 800d680:	d109      	bne.n	800d696 <powf+0x15e>
 800d682:	eeb1 0a40 	vneg.f32	s0, s0
 800d686:	b947      	cbnz	r7, 800d69a <powf+0x162>
 800d688:	2e00      	cmp	r6, #0
 800d68a:	dac8      	bge.n	800d61e <powf+0xe6>
 800d68c:	b005      	add	sp, #20
 800d68e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d692:	f000 b8dd 	b.w	800d850 <__math_divzerof>
 800d696:	2000      	movs	r0, #0
 800d698:	e7f5      	b.n	800d686 <powf+0x14e>
 800d69a:	2e00      	cmp	r6, #0
 800d69c:	dabf      	bge.n	800d61e <powf+0xe6>
 800d69e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d6a2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d6a6:	e7ba      	b.n	800d61e <powf+0xe6>
 800d6a8:	2900      	cmp	r1, #0
 800d6aa:	da1f      	bge.n	800d6ec <powf+0x1b4>
 800d6ac:	ee10 0a90 	vmov	r0, s1
 800d6b0:	f7ff ff28 	bl	800d504 <checkint>
 800d6b4:	b920      	cbnz	r0, 800d6c0 <powf+0x188>
 800d6b6:	b005      	add	sp, #20
 800d6b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d6bc:	f000 b8d8 	b.w	800d870 <__math_invalidf>
 800d6c0:	2801      	cmp	r0, #1
 800d6c2:	bf14      	ite	ne
 800d6c4:	2000      	movne	r0, #0
 800d6c6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800d6ca:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d6ce:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800d6d2:	f4bf af44 	bcs.w	800d55e <powf+0x26>
 800d6d6:	eddf 7a47 	vldr	s15, [pc, #284]	; 800d7f4 <powf+0x2bc>
 800d6da:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d6de:	ee10 3a10 	vmov	r3, s0
 800d6e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6e6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800d6ea:	e738      	b.n	800d55e <powf+0x26>
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	e7ee      	b.n	800d6ce <powf+0x196>
 800d6f0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800d7d8 <powf+0x2a0>
 800d6f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6fc:	dd10      	ble.n	800d720 <powf+0x1e8>
 800d6fe:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800d702:	2800      	cmp	r0, #0
 800d704:	d15c      	bne.n	800d7c0 <powf+0x288>
 800d706:	9302      	str	r3, [sp, #8]
 800d708:	eddd 7a02 	vldr	s15, [sp, #8]
 800d70c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d710:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d714:	eef4 7a47 	vcmp.f32	s15, s14
 800d718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d71c:	f47f af6e 	bne.w	800d5fc <powf+0xc4>
 800d720:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800d7e0 <powf+0x2a8>
 800d724:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d72c:	d804      	bhi.n	800d738 <powf+0x200>
 800d72e:	b005      	add	sp, #20
 800d730:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d734:	f000 b87a 	b.w	800d82c <__math_uflowf>
 800d738:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800d7e8 <powf+0x2b0>
 800d73c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d744:	d504      	bpl.n	800d750 <powf+0x218>
 800d746:	b005      	add	sp, #20
 800d748:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d74c:	f000 b874 	b.w	800d838 <__math_may_uflowf>
 800d750:	4b29      	ldr	r3, [pc, #164]	; (800d7f8 <powf+0x2c0>)
 800d752:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800d756:	ee30 6b07 	vadd.f64	d6, d0, d7
 800d75a:	ed8d 6b00 	vstr	d6, [sp]
 800d75e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d762:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d766:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d76a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d76e:	f006 011f 	and.w	r1, r6, #31
 800d772:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d776:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800d77a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800d77e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800d782:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800d786:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d78a:	ee27 5b07 	vmul.f64	d5, d7, d7
 800d78e:	1836      	adds	r6, r6, r0
 800d790:	2300      	movs	r3, #0
 800d792:	eb13 040c 	adds.w	r4, r3, ip
 800d796:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800d79a:	eb41 050e 	adc.w	r5, r1, lr
 800d79e:	eea7 0b04 	vfma.f64	d0, d7, d4
 800d7a2:	ec45 4b17 	vmov	d7, r4, r5
 800d7a6:	eea6 0b05 	vfma.f64	d0, d6, d5
 800d7aa:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d7ae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d7b2:	e734      	b.n	800d61e <powf+0xe6>
 800d7b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d7b8:	e731      	b.n	800d61e <powf+0xe6>
 800d7ba:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d7fc <powf+0x2c4>
 800d7be:	e72e      	b.n	800d61e <powf+0xe6>
 800d7c0:	9303      	str	r3, [sp, #12]
 800d7c2:	eddd 7a03 	vldr	s15, [sp, #12]
 800d7c6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d7ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7ce:	e7a1      	b.n	800d714 <powf+0x1dc>
 800d7d0:	ffd1d571 	.word	0xffd1d571
 800d7d4:	405fffff 	.word	0x405fffff
 800d7d8:	ffa3aae2 	.word	0xffa3aae2
 800d7dc:	405fffff 	.word	0x405fffff
 800d7e0:	00000000 	.word	0x00000000
 800d7e4:	c062c000 	.word	0xc062c000
 800d7e8:	00000000 	.word	0x00000000
 800d7ec:	c062a000 	.word	0xc062a000
 800d7f0:	0800d958 	.word	0x0800d958
 800d7f4:	4b000000 	.word	0x4b000000
 800d7f8:	0800da80 	.word	0x0800da80
 800d7fc:	00000000 	.word	0x00000000

0800d800 <with_errnof>:
 800d800:	b513      	push	{r0, r1, r4, lr}
 800d802:	4604      	mov	r4, r0
 800d804:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d808:	f7ff fa1c 	bl	800cc44 <__errno>
 800d80c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d810:	6004      	str	r4, [r0, #0]
 800d812:	b002      	add	sp, #8
 800d814:	bd10      	pop	{r4, pc}

0800d816 <xflowf>:
 800d816:	b130      	cbz	r0, 800d826 <xflowf+0x10>
 800d818:	eef1 7a40 	vneg.f32	s15, s0
 800d81c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d820:	2022      	movs	r0, #34	; 0x22
 800d822:	f7ff bfed 	b.w	800d800 <with_errnof>
 800d826:	eef0 7a40 	vmov.f32	s15, s0
 800d82a:	e7f7      	b.n	800d81c <xflowf+0x6>

0800d82c <__math_uflowf>:
 800d82c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d834 <__math_uflowf+0x8>
 800d830:	f7ff bff1 	b.w	800d816 <xflowf>
 800d834:	10000000 	.word	0x10000000

0800d838 <__math_may_uflowf>:
 800d838:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d840 <__math_may_uflowf+0x8>
 800d83c:	f7ff bfeb 	b.w	800d816 <xflowf>
 800d840:	1a200000 	.word	0x1a200000

0800d844 <__math_oflowf>:
 800d844:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d84c <__math_oflowf+0x8>
 800d848:	f7ff bfe5 	b.w	800d816 <xflowf>
 800d84c:	70000000 	.word	0x70000000

0800d850 <__math_divzerof>:
 800d850:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d854:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d858:	2800      	cmp	r0, #0
 800d85a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800d85e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d86c <__math_divzerof+0x1c>
 800d862:	2022      	movs	r0, #34	; 0x22
 800d864:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d868:	f7ff bfca 	b.w	800d800 <with_errnof>
 800d86c:	00000000 	.word	0x00000000

0800d870 <__math_invalidf>:
 800d870:	eef0 7a40 	vmov.f32	s15, s0
 800d874:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d878:	eef4 7a67 	vcmp.f32	s15, s15
 800d87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d880:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800d884:	d602      	bvs.n	800d88c <__math_invalidf+0x1c>
 800d886:	2021      	movs	r0, #33	; 0x21
 800d888:	f7ff bfba 	b.w	800d800 <with_errnof>
 800d88c:	4770      	bx	lr
	...

0800d890 <_init>:
 800d890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d892:	bf00      	nop
 800d894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d896:	bc08      	pop	{r3}
 800d898:	469e      	mov	lr, r3
 800d89a:	4770      	bx	lr

0800d89c <_fini>:
 800d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89e:	bf00      	nop
 800d8a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8a2:	bc08      	pop	{r3}
 800d8a4:	469e      	mov	lr, r3
 800d8a6:	4770      	bx	lr
