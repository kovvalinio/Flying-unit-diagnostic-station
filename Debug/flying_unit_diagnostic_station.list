
flying_unit_diagnostic_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0d0  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800d2c8  0800d2c8  0001d2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5a8  0800d5a8  00020550  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5a8  0800d5a8  0001d5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5b0  0800d5b0  00020550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5b0  0800d5b0  0001d5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5b4  0800d5b4  0001d5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000550  20000000  0800d5b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0005e114  20000550  0800db08  00020550  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2005e664  0800db08  0002e664  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020550  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040a36  00000000  00000000  0002057e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057ab  00000000  00000000  00060fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a58  00000000  00000000  00066760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002800  00000000  00000000  000691b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca8c  00000000  00000000  0006b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000294b6  00000000  00000000  00098444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010dbe0  00000000  00000000  000c18fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  001cf4da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b458  00000000  00000000  001cf5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000550 	.word	0x20000550
 8000214:	00000000 	.word	0x00000000
 8000218:	0800d2b0 	.word	0x0800d2b0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000554 	.word	0x20000554
 8000234:	0800d2b0 	.word	0x0800d2b0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <MX_CRC_Init+0x3c>)
 8000536:	4a0e      	ldr	r2, [pc, #56]	; (8000570 <MX_CRC_Init+0x40>)
 8000538:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_CRC_Init+0x3c>)
 800053c:	2200      	movs	r2, #0
 800053e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <MX_CRC_Init+0x3c>)
 8000542:	2200      	movs	r2, #0
 8000544:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_CRC_Init+0x3c>)
 8000548:	2200      	movs	r2, #0
 800054a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <MX_CRC_Init+0x3c>)
 800054e:	2200      	movs	r2, #0
 8000550:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_CRC_Init+0x3c>)
 8000554:	2201      	movs	r2, #1
 8000556:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <MX_CRC_Init+0x3c>)
 800055a:	f005 fccd 	bl	8005ef8 <HAL_CRC_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000564:	f000 fd1a 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000064c 	.word	0x2000064c
 8000570:	40023000 	.word	0x40023000

08000574 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <HAL_CRC_MspInit+0x38>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d10b      	bne.n	800059e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <HAL_CRC_MspInit+0x3c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a09      	ldr	r2, [pc, #36]	; (80005b0 <HAL_CRC_MspInit+0x3c>)
 800058c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <HAL_CRC_MspInit+0x3c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	40023000 	.word	0x40023000
 80005b0:	40023800 	.word	0x40023800

080005b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <MX_DMA_Init+0x60>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <MX_DMA_Init+0x60>)
 80005c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <MX_DMA_Init+0x60>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <MX_DMA_Init+0x60>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <MX_DMA_Init+0x60>)
 80005d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_DMA_Init+0x60>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	200f      	movs	r0, #15
 80005f0:	f005 fc3d 	bl	8005e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80005f4:	200f      	movs	r0, #15
 80005f6:	f005 fc56 	bl	8005ea6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	2038      	movs	r0, #56	; 0x38
 8000600:	f005 fc35 	bl	8005e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000604:	2038      	movs	r0, #56	; 0x38
 8000606:	f005 fc4e 	bl	8005ea6 <HAL_NVIC_EnableIRQ>

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	; 0x30
 800061c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	4b81      	ldr	r3, [pc, #516]	; (8000834 <MX_GPIO_Init+0x21c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a80      	ldr	r2, [pc, #512]	; (8000834 <MX_GPIO_Init+0x21c>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b7e      	ldr	r3, [pc, #504]	; (8000834 <MX_GPIO_Init+0x21c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	61bb      	str	r3, [r7, #24]
 8000644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000646:	4b7b      	ldr	r3, [pc, #492]	; (8000834 <MX_GPIO_Init+0x21c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a7a      	ldr	r2, [pc, #488]	; (8000834 <MX_GPIO_Init+0x21c>)
 800064c:	f043 0320 	orr.w	r3, r3, #32
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b78      	ldr	r3, [pc, #480]	; (8000834 <MX_GPIO_Init+0x21c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0320 	and.w	r3, r3, #32
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065e:	4b75      	ldr	r3, [pc, #468]	; (8000834 <MX_GPIO_Init+0x21c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a74      	ldr	r2, [pc, #464]	; (8000834 <MX_GPIO_Init+0x21c>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b72      	ldr	r3, [pc, #456]	; (8000834 <MX_GPIO_Init+0x21c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b6f      	ldr	r3, [pc, #444]	; (8000834 <MX_GPIO_Init+0x21c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a6e      	ldr	r2, [pc, #440]	; (8000834 <MX_GPIO_Init+0x21c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b6c      	ldr	r3, [pc, #432]	; (8000834 <MX_GPIO_Init+0x21c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	4b69      	ldr	r3, [pc, #420]	; (8000834 <MX_GPIO_Init+0x21c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a68      	ldr	r2, [pc, #416]	; (8000834 <MX_GPIO_Init+0x21c>)
 8000694:	f043 0302 	orr.w	r3, r3, #2
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b66      	ldr	r3, [pc, #408]	; (8000834 <MX_GPIO_Init+0x21c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a6:	4b63      	ldr	r3, [pc, #396]	; (8000834 <MX_GPIO_Init+0x21c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a62      	ldr	r2, [pc, #392]	; (8000834 <MX_GPIO_Init+0x21c>)
 80006ac:	f043 0308 	orr.w	r3, r3, #8
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b60      	ldr	r3, [pc, #384]	; (8000834 <MX_GPIO_Init+0x21c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0308 	and.w	r3, r3, #8
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006be:	4b5d      	ldr	r3, [pc, #372]	; (8000834 <MX_GPIO_Init+0x21c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a5c      	ldr	r2, [pc, #368]	; (8000834 <MX_GPIO_Init+0x21c>)
 80006c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b5a      	ldr	r3, [pc, #360]	; (8000834 <MX_GPIO_Init+0x21c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80006dc:	4856      	ldr	r0, [pc, #344]	; (8000838 <MX_GPIO_Init+0x220>)
 80006de:	f006 fc5b 	bl	8006f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2140      	movs	r1, #64	; 0x40
 80006e6:	4855      	ldr	r0, [pc, #340]	; (800083c <MX_GPIO_Init+0x224>)
 80006e8:	f006 fc56 	bl	8006f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	484f      	ldr	r0, [pc, #316]	; (8000840 <MX_GPIO_Init+0x228>)
 8000704:	f006 f978 	bl	80069f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin;
 8000708:	2322      	movs	r3, #34	; 0x22
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000718:	230b      	movs	r3, #11
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4847      	ldr	r0, [pc, #284]	; (8000840 <MX_GPIO_Init+0x228>)
 8000724:	f006 f968 	bl	80069f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000728:	2386      	movs	r3, #134	; 0x86
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000738:	230b      	movs	r3, #11
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4840      	ldr	r0, [pc, #256]	; (8000844 <MX_GPIO_Init+0x22c>)
 8000744:	f006 f958 	bl	80069f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000748:	f244 0381 	movw	r3, #16513	; 0x4081
 800074c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2300      	movs	r3, #0
 8000758:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	4835      	ldr	r0, [pc, #212]	; (8000838 <MX_GPIO_Init+0x220>)
 8000762:	f006 f949 	bl	80069f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000774:	2303      	movs	r3, #3
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000778:	230b      	movs	r3, #11
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	482d      	ldr	r0, [pc, #180]	; (8000838 <MX_GPIO_Init+0x220>)
 8000784:	f006 f938 	bl	80069f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000788:	2340      	movs	r3, #64	; 0x40
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4619      	mov	r1, r3
 800079e:	4827      	ldr	r0, [pc, #156]	; (800083c <MX_GPIO_Init+0x224>)
 80007a0:	f006 f92a 	bl	80069f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	4821      	ldr	r0, [pc, #132]	; (800083c <MX_GPIO_Init+0x224>)
 80007b8:	f006 f91e 	bl	80069f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80007bc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007ce:	230a      	movs	r3, #10
 80007d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	481a      	ldr	r0, [pc, #104]	; (8000844 <MX_GPIO_Init+0x22c>)
 80007da:	f006 f90d 	bl	80069f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	4814      	ldr	r0, [pc, #80]	; (8000844 <MX_GPIO_Init+0x22c>)
 80007f4:	f006 f900 	bl	80069f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800080a:	230b      	movs	r3, #11
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <MX_GPIO_Init+0x224>)
 8000816:	f006 f8ef 	bl	80069f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2028      	movs	r0, #40	; 0x28
 8000820:	f005 fb25 	bl	8005e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000824:	2028      	movs	r0, #40	; 0x28
 8000826:	f005 fb3e 	bl	8005ea6 <HAL_NVIC_EnableIRQ>

}
 800082a:	bf00      	nop
 800082c:	3730      	adds	r7, #48	; 0x30
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40020400 	.word	0x40020400
 800083c:	40021800 	.word	0x40021800
 8000840:	40020800 	.word	0x40020800
 8000844:	40020000 	.word	0x40020000

08000848 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_I2C2_Init+0x78>)
 800084e:	4a1d      	ldr	r2, [pc, #116]	; (80008c4 <MX_I2C2_Init+0x7c>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0020081F;
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_I2C2_Init+0x78>)
 8000854:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_I2C2_Init+0x80>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000858:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_I2C2_Init+0x78>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_I2C2_Init+0x78>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_I2C2_Init+0x78>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_I2C2_Init+0x78>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_I2C2_Init+0x78>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2C2_Init+0x78>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_I2C2_Init+0x78>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000882:	480f      	ldr	r0, [pc, #60]	; (80008c0 <MX_I2C2_Init+0x78>)
 8000884:	f006 fbc6 	bl	8007014 <HAL_I2C_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800088e:	f000 fb85 	bl	8000f9c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	480a      	ldr	r0, [pc, #40]	; (80008c0 <MX_I2C2_Init+0x78>)
 8000896:	f007 f985 	bl	8007ba4 <HAL_I2CEx_ConfigAnalogFilter>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f000 fb7c 	bl	8000f9c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_I2C2_Init+0x78>)
 80008a8:	f007 f9c7 	bl	8007c3a <HAL_I2CEx_ConfigDigitalFilter>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 fb73 	bl	8000f9c <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 80008b6:	2002      	movs	r0, #2
 80008b8:	f007 fa0c 	bl	8007cd4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000670 	.word	0x20000670
 80008c4:	40005800 	.word	0x40005800
 80008c8:	0020081f 	.word	0x0020081f

080008cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b0ae      	sub	sp, #184	; 0xb8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2290      	movs	r2, #144	; 0x90
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f00c fb11 	bl	800cf14 <memset>
  if(i2cHandle->Instance==I2C2)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a43      	ldr	r2, [pc, #268]	; (8000a04 <HAL_I2C_MspInit+0x138>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d17e      	bne.n	80009fa <HAL_I2C_MspInit+0x12e>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000900:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000902:	2300      	movs	r3, #0
 8000904:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4618      	mov	r0, r3
 800090c:	f008 fa30 	bl	8008d70 <HAL_RCCEx_PeriphCLKConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000916:	f000 fb41 	bl	8000f9c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800091a:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <HAL_I2C_MspInit+0x13c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a3a      	ldr	r2, [pc, #232]	; (8000a08 <HAL_I2C_MspInit+0x13c>)
 8000920:	f043 0320 	orr.w	r3, r3, #32
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <HAL_I2C_MspInit+0x13c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0320 	and.w	r3, r3, #32
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000932:	2303      	movs	r3, #3
 8000934:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000938:	2312      	movs	r3, #18
 800093a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800094a:	2304      	movs	r3, #4
 800094c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000950:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000954:	4619      	mov	r1, r3
 8000956:	482d      	ldr	r0, [pc, #180]	; (8000a0c <HAL_I2C_MspInit+0x140>)
 8000958:	f006 f84e 	bl	80069f8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800095c:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <HAL_I2C_MspInit+0x13c>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <HAL_I2C_MspInit+0x13c>)
 8000962:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
 8000968:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <HAL_I2C_MspInit+0x13c>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream4;
 8000974:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 8000976:	4a27      	ldr	r2, [pc, #156]	; (8000a14 <HAL_I2C_MspInit+0x148>)
 8000978:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_8;
 800097a:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 800097c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000980:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000982:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 8000984:	2240      	movs	r2, #64	; 0x40
 8000986:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000988:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 8000990:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000994:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 8000998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800099c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 80009a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009a4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_CIRCULAR;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 80009a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ac:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 80009b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009b4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 80009b8:	2204      	movs	r2, #4
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 80009be:	2203      	movs	r2, #3
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80009ce:	4810      	ldr	r0, [pc, #64]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 80009d0:	f005 fb7c 	bl	80060cc <HAL_DMA_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_I2C_MspInit+0x112>
    {
      Error_Handler();
 80009da:	f000 fadf 	bl	8000f9c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 80009e2:	639a      	str	r2, [r3, #56]	; 0x38
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_I2C_MspInit+0x144>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2021      	movs	r0, #33	; 0x21
 80009f0:	f005 fa3d 	bl	8005e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80009f4:	2021      	movs	r0, #33	; 0x21
 80009f6:	f005 fa56 	bl	8005ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80009fa:	bf00      	nop
 80009fc:	37b8      	adds	r7, #184	; 0xb8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40005800 	.word	0x40005800
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40021400 	.word	0x40021400
 8000a10:	200006bc 	.word	0x200006bc
 8000a14:	40026070 	.word	0x40026070

08000a18 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_I2C_MspDeInit+0x48>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d115      	bne.n	8000a56 <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_I2C_MspDeInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <HAL_I2C_MspDeInit+0x4c>)
 8000a30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_0);
 8000a36:	2101      	movs	r1, #1
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <HAL_I2C_MspDeInit+0x50>)
 8000a3a:	f006 f989 	bl	8006d50 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1);
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <HAL_I2C_MspDeInit+0x50>)
 8000a42:	f006 f985 	bl	8006d50 <HAL_GPIO_DeInit>

    /* I2C2 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f005 fbec 	bl	8006228 <HAL_DMA_DeInit>

    /* I2C2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8000a50:	2021      	movs	r0, #33	; 0x21
 8000a52:	f005 fa36 	bl	8005ec2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40005800 	.word	0x40005800
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40021400 	.word	0x40021400

08000a6c <MX_I2S1_Init>:
I2S_HandleTypeDef hi2s1;
DMA_HandleTypeDef hdma_spi1_rx;

/* I2S1 init function */
void MX_I2S1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_I2S1_Init+0x4c>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MX_I2S1_Init+0x50>)
 8000a74:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_RX;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_I2S1_Init+0x4c>)
 8000a78:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a7c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_MSB;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_I2S1_Init+0x4c>)
 8000a80:	2210      	movs	r2, #16
 8000a82:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_I2S1_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_I2S1_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_I2S1_Init+0x4c>)
 8000a92:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000a96:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_I2S1_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_I2S1_Init+0x4c>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	61da      	str	r2, [r3, #28]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_I2S1_Init+0x4c>)
 8000aa6:	f007 f935 	bl	8007d14 <HAL_I2S_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_I2S1_Init+0x48>
  {
    Error_Handler();
 8000ab0:	f000 fa74 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000071c 	.word	0x2000071c
 8000abc:	40013000 	.word	0x40013000

08000ac0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0ae      	sub	sp, #184	; 0xb8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2290      	movs	r2, #144	; 0x90
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f00c fa17 	bl	800cf14 <memset>
  if(i2sHandle->Instance==SPI1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a54      	ldr	r2, [pc, #336]	; (8000c3c <HAL_I2S_MspInit+0x17c>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	f040 80a0 	bne.w	8000c32 <HAL_I2S_MspInit+0x172>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000af2:	2301      	movs	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000af6:	23c0      	movs	r3, #192	; 0xc0
 8000af8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8000afe:	2305      	movs	r3, #5
 8000b00:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000b02:	2302      	movs	r3, #2
 8000b04:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.I2sClockSelection = RCC_I2SCLKSOURCE_PLLI2S;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4618      	mov	r0, r3
 8000b14:	f008 f92c 	bl	8008d70 <HAL_RCCEx_PeriphCLKConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <HAL_I2S_MspInit+0x62>
    {
      Error_Handler();
 8000b1e:	f000 fa3d 	bl	8000f9c <Error_Handler>
    }

    /* I2S1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b22:	4b47      	ldr	r3, [pc, #284]	; (8000c40 <HAL_I2S_MspInit+0x180>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a46      	ldr	r2, [pc, #280]	; (8000c40 <HAL_I2S_MspInit+0x180>)
 8000b28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b44      	ldr	r3, [pc, #272]	; (8000c40 <HAL_I2S_MspInit+0x180>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b41      	ldr	r3, [pc, #260]	; (8000c40 <HAL_I2S_MspInit+0x180>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a40      	ldr	r2, [pc, #256]	; (8000c40 <HAL_I2S_MspInit+0x180>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b3e      	ldr	r3, [pc, #248]	; (8000c40 <HAL_I2S_MspInit+0x180>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b52:	4b3b      	ldr	r3, [pc, #236]	; (8000c40 <HAL_I2S_MspInit+0x180>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a3a      	ldr	r2, [pc, #232]	; (8000c40 <HAL_I2S_MspInit+0x180>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <HAL_I2S_MspInit+0x180>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PD7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b6a:	2330      	movs	r3, #48	; 0x30
 8000b6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b82:	2305      	movs	r3, #5
 8000b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	482d      	ldr	r0, [pc, #180]	; (8000c44 <HAL_I2S_MspInit+0x184>)
 8000b90:	f005 ff32 	bl	80069f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bac:	2305      	movs	r3, #5
 8000bae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4823      	ldr	r0, [pc, #140]	; (8000c48 <HAL_I2S_MspInit+0x188>)
 8000bba:	f005 ff1d 	bl	80069f8 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <HAL_I2S_MspInit+0x18c>)
 8000bc0:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <HAL_I2S_MspInit+0x190>)
 8000bc2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <HAL_I2S_MspInit+0x18c>)
 8000bc6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000bca:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <HAL_I2S_MspInit+0x18c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <HAL_I2S_MspInit+0x18c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <HAL_I2S_MspInit+0x18c>)
 8000bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bde:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <HAL_I2S_MspInit+0x18c>)
 8000be2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000be6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <HAL_I2S_MspInit+0x18c>)
 8000bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bee:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_I2S_MspInit+0x18c>)
 8000bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <HAL_I2S_MspInit+0x18c>)
 8000bfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bfe:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_I2S_MspInit+0x18c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000c06:	4811      	ldr	r0, [pc, #68]	; (8000c4c <HAL_I2S_MspInit+0x18c>)
 8000c08:	f005 fa60 	bl	80060cc <HAL_DMA_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_I2S_MspInit+0x156>
    {
      Error_Handler();
 8000c12:	f000 f9c3 	bl	8000f9c <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi1_rx);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <HAL_I2S_MspInit+0x18c>)
 8000c1a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <HAL_I2S_MspInit+0x18c>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2023      	movs	r0, #35	; 0x23
 8000c28:	f005 f921 	bl	8005e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c2c:	2023      	movs	r0, #35	; 0x23
 8000c2e:	f005 f93a 	bl	8005ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c32:	bf00      	nop
 8000c34:	37b8      	adds	r7, #184	; 0xb8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40013000 	.word	0x40013000
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020c00 	.word	0x40020c00
 8000c4c:	2000075c 	.word	0x2000075c
 8000c50:	40026410 	.word	0x40026410

08000c54 <FifoWrite_B>:


//Function storing  sound data in a big buffer
//Whenever the big buffer is full espTxFlag is set
//to start transmiting
void FifoWrite_B(uint16_t data) {
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	80fb      	strh	r3, [r7, #6]


	if(fifo_w_ptr_B !=PCM_BIG_BUF){
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <FifoWrite_B+0x48>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <FifoWrite_B+0x4c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d00a      	beq.n	8000c7e <FifoWrite_B+0x2a>
		pcm_big_buf_B[fifo_w_ptr_B] = data;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <FifoWrite_B+0x48>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	490d      	ldr	r1, [pc, #52]	; (8000ca4 <FifoWrite_B+0x50>)
 8000c6e:	88fa      	ldrh	r2, [r7, #6]
 8000c70:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		fifo_w_ptr_B++;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <FifoWrite_B+0x48>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <FifoWrite_B+0x48>)
 8000c7c:	6013      	str	r3, [r2, #0]
	}
	if(fifo_w_ptr_B == PCM_BIG_BUF){
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <FifoWrite_B+0x48>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <FifoWrite_B+0x4c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d102      	bne.n	8000c8e <FifoWrite_B+0x3a>
		espTxFlag = 1;
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <FifoWrite_B+0x54>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
	}
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000570 	.word	0x20000570
 8000ca0:	00017700 	.word	0x00017700
 8000ca4:	2002f6e4 	.word	0x2002f6e4
 8000ca8:	20000574 	.word	0x20000574

08000cac <HAL_I2S_RxHalfCpltCallback>:

//Callbacks allowing pipelining in the i2s interface.
//Its used to ensure constant data flow.
void HAL_I2S_RxHalfCpltCallback (I2S_HandleTypeDef *hi1s) {
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	  if(hi1s->Instance ==SPI1){
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <HAL_I2S_RxHalfCpltCallback+0x24>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d102      	bne.n	8000cc4 <HAL_I2S_RxHalfCpltCallback+0x18>
	  RxFlag_B = 1;
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_I2S_RxHalfCpltCallback+0x28>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
	  }
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40013000 	.word	0x40013000
 8000cd4:	2000056d 	.word	0x2000056d

08000cd8 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback (I2S_HandleTypeDef *hi1s) {
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	  if(hi1s->Instance ==SPI1){
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <HAL_I2S_RxCpltCallback+0x24>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d102      	bne.n	8000cf0 <HAL_I2S_RxCpltCallback+0x18>
	  RxFlag_B = 2;
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_I2S_RxCpltCallback+0x28>)
 8000cec:	2202      	movs	r2, #2
 8000cee:	701a      	strb	r2, [r3, #0]
	  }
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	40013000 	.word	0x40013000
 8000d00:	2000056d 	.word	0x2000056d

08000d04 <HAL_UART_TxCpltCallback>:


//Uart complete callback.
//This callback informs us that all data has been sent
//and sets the fifo pointer to 0 which allows us to start reading values again.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <HAL_UART_TxCpltCallback+0x24>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d102      	bne.n	8000d1c <HAL_UART_TxCpltCallback+0x18>

		fifo_w_ptr_B =0;
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <HAL_UART_TxCpltCallback+0x28>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
	}
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	40004800 	.word	0x40004800
 8000d2c:	20000570 	.word	0x20000570

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0d2      	sub	sp, #328	; 0x148
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d36:	f004 ff19 	bl	8005b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3a:	f000 f8bd 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3e:	f7ff fc6b 	bl	8000618 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000d42:	f000 fc3f 	bl	80015c4 <MX_TIM3_Init>
  MX_DMA_Init();
 8000d46:	f7ff fc35 	bl	80005b4 <MX_DMA_Init>
  MX_I2S1_Init();
 8000d4a:	f7ff fe8f 	bl	8000a6c <MX_I2S1_Init>
  MX_USART3_UART_Init();
 8000d4e:	f000 fcad 	bl	80016ac <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000d52:	f7ff fbed 	bl	8000530 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8000d56:	f00a f9b7 	bl	800b0c8 <MX_PDM2PCM_Init>
  MX_I2C2_Init();
 8000d5a:	f7ff fd75 	bl	8000848 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2S_Receive_DMA(&hi2s1, (uint8_t*)PDM_Rxbuf_B, PDM_BUF);
 8000d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d62:	4947      	ldr	r1, [pc, #284]	; (8000e80 <main+0x150>)
 8000d64:	4847      	ldr	r0, [pc, #284]	; (8000e84 <main+0x154>)
 8000d66:	f007 f8bb 	bl	8007ee0 <HAL_I2S_Receive_DMA>

  MX_MEMS_Init();
 8000d6a:	f000 f91c 	bl	8000fa6 <MX_MEMS_Init>
  {



	  //Read values mode
	  if(espTxFlag == 0){
 8000d6e:	4b46      	ldr	r3, [pc, #280]	; (8000e88 <main+0x158>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d147      	bne.n	8000e06 <main+0xd6>
		  if (RxFlag_B == 1) {
 8000d76:	4b45      	ldr	r3, [pc, #276]	; (8000e8c <main+0x15c>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d11f      	bne.n	8000dbe <main+0x8e>

			  pdm2pcm_status_half = PDM_Filter(&PDM_Rxbuf_B[0], &pcmMidBuf_B[0], &PDM1_filter_handler);
 8000d7e:	4a44      	ldr	r2, [pc, #272]	; (8000e90 <main+0x160>)
 8000d80:	4944      	ldr	r1, [pc, #272]	; (8000e94 <main+0x164>)
 8000d82:	483f      	ldr	r0, [pc, #252]	; (8000e80 <main+0x150>)
 8000d84:	f00c f84e 	bl	800ce24 <PDM_Filter>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	4a43      	ldr	r2, [pc, #268]	; (8000e98 <main+0x168>)
 8000d8c:	6013      	str	r3, [r2, #0]
					 for (int i = 0; i < PCM_MID_BUF; i++) {
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8000d94:	e00c      	b.n	8000db0 <main+0x80>
						 FifoWrite_B(pcmMidBuf_B[i]);
 8000d96:	4a3f      	ldr	r2, [pc, #252]	; (8000e94 <main+0x164>)
 8000d98:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff57 	bl	8000c54 <FifoWrite_B>
					 for (int i = 0; i < PCM_MID_BUF; i++) {
 8000da6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000daa:	3301      	adds	r3, #1
 8000dac:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8000db0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	ddee      	ble.n	8000d96 <main+0x66>
					 }

			  RxFlag_B= 0;
 8000db8:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <main+0x15c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
				//HAL_GPIO_WritePin(TX_OUTPUT_GPIO_Port, TX_OUTPUT_Pin, GPIO_PIN_RESET);
			}
		  if (RxFlag_B == 2) {
 8000dbe:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <main+0x15c>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d11f      	bne.n	8000e06 <main+0xd6>
			//HAL_GPIO_WritePin(TX_OUTPUT_GPIO_Port, TX_OUTPUT_Pin, GPIO_PIN_SET);
			  pdm2pcm_status_cplt = PDM_Filter(&PDM_Rxbuf_B[192], &pcmMidBuf_B[0], &PDM1_filter_handler);
 8000dc6:	4a32      	ldr	r2, [pc, #200]	; (8000e90 <main+0x160>)
 8000dc8:	4932      	ldr	r1, [pc, #200]	; (8000e94 <main+0x164>)
 8000dca:	4834      	ldr	r0, [pc, #208]	; (8000e9c <main+0x16c>)
 8000dcc:	f00c f82a 	bl	800ce24 <PDM_Filter>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a33      	ldr	r2, [pc, #204]	; (8000ea0 <main+0x170>)
 8000dd4:	6013      	str	r3, [r2, #0]
				 for (int i = 0; i < PCM_MID_BUF; i++) {
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000ddc:	e00c      	b.n	8000df8 <main+0xc8>
					 FifoWrite_B(pcmMidBuf_B[i]);
 8000dde:	4a2d      	ldr	r2, [pc, #180]	; (8000e94 <main+0x164>)
 8000de0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff33 	bl	8000c54 <FifoWrite_B>
				 for (int i = 0; i < PCM_MID_BUF; i++) {
 8000dee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000df2:	3301      	adds	r3, #1
 8000df4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000df8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000dfc:	2b0f      	cmp	r3, #15
 8000dfe:	ddee      	ble.n	8000dde <main+0xae>
				 }
			  RxFlag_B = 0;
 8000e00:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <main+0x15c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
		}
	  }


	  //Transmit mode
	  if(espTxFlag == 1){
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <main+0x158>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d1af      	bne.n	8000d6e <main+0x3e>
		  for(int i = 0 ; i < PCM_BIG_BUF ; i++){
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000e14:	e010      	b.n	8000e38 <main+0x108>

//		  	  	  	  databufforlentgh = sprintf(dataOut, "%d;%d;%d;%d\r",
//		  	  	               	   	   	   	   	acceleration.x, acceleration.y, acceleration.z, pcm_big_buf_B[i]);

		  	  	  	  //Function compressing data
		  	  	  	  update_val(tab,  pcm_big_buf_B[i], 2*i);
 8000e16:	4a23      	ldr	r2, [pc, #140]	; (8000ea4 <main+0x174>)
 8000e18:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000e1c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000e20:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	461a      	mov	r2, r3
 8000e28:	481f      	ldr	r0, [pc, #124]	; (8000ea8 <main+0x178>)
 8000e2a:	f000 fbaf 	bl	800158c <update_val>
		  for(int i = 0 ; i < PCM_BIG_BUF ; i++){
 8000e2e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000e32:	3301      	adds	r3, #1
 8000e34:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8000e38:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <main+0x17c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	dde9      	ble.n	8000e16 <main+0xe6>
//		  	  	  		  HAL_UART_Transmit_IT(&huart3, tab, 9);
//
//		  			  HAL_Delay(100);

		  }
		  for(int i = 0 ; i < 2*PCM_BIG_BUF ;i=i+8){
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000e48:	e010      	b.n	8000e6c <main+0x13c>
			  HAL_UART_Transmit_IT(&huart3, &tab[i], 8);
 8000e4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000e4e:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <main+0x178>)
 8000e50:	4413      	add	r3, r2
 8000e52:	2208      	movs	r2, #8
 8000e54:	4619      	mov	r1, r3
 8000e56:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <main+0x180>)
 8000e58:	f009 f858 	bl	8009f0c <HAL_UART_Transmit_IT>
			  HAL_Delay(1);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f004 fee3 	bl	8005c28 <HAL_Delay>
		  for(int i = 0 ; i < 2*PCM_BIG_BUF ;i=i+8){
 8000e62:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000e66:	3308      	adds	r3, #8
 8000e68:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000e6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000e70:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <main+0x184>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	dde9      	ble.n	8000e4a <main+0x11a>
		  }


			espTxFlag = 0;
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <main+0x158>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
	  if(espTxFlag == 0){
 8000e7c:	e777      	b.n	8000d6e <main+0x3e>
 8000e7e:	bf00      	nop
 8000e80:	2002f5c0 	.word	0x2002f5c0
 8000e84:	2000071c 	.word	0x2000071c
 8000e88:	20000574 	.word	0x20000574
 8000e8c:	2000056d 	.word	0x2000056d
 8000e90:	2005e618 	.word	0x2005e618
 8000e94:	2002f6c0 	.word	0x2002f6c0
 8000e98:	2002f6e0 	.word	0x2002f6e0
 8000e9c:	2002f680 	.word	0x2002f680
 8000ea0:	200007bc 	.word	0x200007bc
 8000ea4:	2002f6e4 	.word	0x2002f6e4
 8000ea8:	200007c0 	.word	0x200007c0
 8000eac:	000176ff 	.word	0x000176ff
 8000eb0:	2005e57c 	.word	0x2005e57c
 8000eb4:	0002edff 	.word	0x0002edff

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b094      	sub	sp, #80	; 0x50
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	2234      	movs	r2, #52	; 0x34
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f00c f824 	bl	800cf14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	f107 0308 	add.w	r3, r7, #8
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000edc:	f007 fa38 	bl	8008350 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <SystemClock_Config+0xdc>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <SystemClock_Config+0xdc>)
 8000ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eea:	6413      	str	r3, [r2, #64]	; 0x40
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <SystemClock_Config+0xdc>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <SystemClock_Config+0xe0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f00:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <SystemClock_Config+0xe0>)
 8000f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <SystemClock_Config+0xe0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000f28:	2305      	movs	r3, #5
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000f2c:	237d      	movs	r3, #125	; 0x7d
 8000f2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f34:	2304      	movs	r3, #4
 8000f36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4618      	mov	r0, r3
 8000f42:	f007 fa65 	bl	8008410 <HAL_RCC_OscConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f4c:	f000 f826 	bl	8000f9c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f50:	f007 fa0e 	bl	8008370 <HAL_PWREx_EnableOverDrive>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f5a:	f000 f81f 	bl	8000f9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	230f      	movs	r3, #15
 8000f60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f62:	2302      	movs	r3, #2
 8000f64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	2103      	movs	r1, #3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f007 fcf6 	bl	800896c <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f86:	f000 f809 	bl	8000f9c <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3750      	adds	r7, #80	; 0x50
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <Error_Handler+0x8>

08000fa6 <MX_MEMS_Init>:
//void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
//
//}

void MX_MEMS_Init(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS02A1_DataLogTerminal_Init();
 8000faa:	f000 f803 	bl	8000fb4 <MX_IKS02A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <MX_IKS02A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS02A1_DataLogTerminal_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
  displayFloatToInt_t out_value_odr;
  int i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f8c4 	bl	8001148 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f000 f8da 	bl	800117c <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 f92b 	bl	8001224 <BSP_PB_GetState>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bf0c      	ite	eq
 8000fd4:	2301      	moveq	r3, #1
 8000fd6:	2300      	movne	r3, #0
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_IKS02A1_DataLogTerminal_Init+0x4c>)
 8000fde:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */


  IKS02A1_MOTION_SENSOR_Init(IKS02A1_ISM330DHCX_0, MOTION_ACCELERO | MOTION_GYRO);
 8000fe0:	2103      	movs	r1, #3
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f004 faba 	bl	800555c <IKS02A1_MOTION_SENSOR_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2DLPC_0, MOTION_ACCELERO);
 8000fe8:	2102      	movs	r1, #2
 8000fea:	2001      	movs	r0, #1
 8000fec:	f004 fab6 	bl	800555c <IKS02A1_MOTION_SENSOR_Init>

  IKS02A1_MOTION_SENSOR_Init(IKS02A1_IIS2MDC_0, MOTION_MAGNETO);
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f004 fab2 	bl	800555c <IKS02A1_MOTION_SENSOR_Init>


}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000578 	.word	0x20000578

08001004 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <BSP_PB_Callback+0x1c>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	20000575 	.word	0x20000575

08001024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_MspInit+0x44>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_MspInit+0x44>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	6413      	str	r3, [r2, #64]	; 0x40
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_MspInit+0x44>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_MspInit+0x44>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a08      	ldr	r2, [pc, #32]	; (8001068 <HAL_MspInit+0x44>)
 8001048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_MspInit+0x44>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b8:	f004 fd96 	bl	8005be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <DMA1_Stream4_IRQHandler+0x10>)
 80010c6:	f005 f9ff 	bl	80064c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200006bc 	.word	0x200006bc

080010d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <TIM3_IRQHandler+0x10>)
 80010da:	f008 fac8 	bl	800966e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2005e530 	.word	0x2005e530

080010e8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <I2C2_EV_IRQHandler+0x10>)
 80010ee:	f006 fa7f 	bl	80075f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000670 	.word	0x20000670

080010fc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <SPI1_IRQHandler+0x10>)
 8001102:	f006 ffa9 	bl	8008058 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000071c 	.word	0x2000071c

08001110 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <USART3_IRQHandler+0x10>)
 8001116:	f008 ff67 	bl	8009fe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2005e57c 	.word	0x2005e57c

08001124 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001128:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800112c:	f005 ff4e 	bl	8006fcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <DMA2_Stream0_IRQHandler+0x10>)
 800113a:	f005 f9c5 	bl	80064c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000075c 	.word	0x2000075c

08001148 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <BSP_LED_Init+0x20>)
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	0800d300 	.word	0x0800d300

0800116c <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	460a      	mov	r2, r1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <BSP_PB_Init+0x94>)
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d132      	bne.n	8001206 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <BSP_PB_Init+0x98>)
 80011a6:	441a      	add	r2, r3
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	491b      	ldr	r1, [pc, #108]	; (8001218 <BSP_PB_Init+0x9c>)
 80011ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011b0:	4619      	mov	r1, r3
 80011b2:	4610      	mov	r0, r2
 80011b4:	f005 fc0c 	bl	80069d0 <HAL_EXTI_GetHandle>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80011be:	f06f 0303 	mvn.w	r3, #3
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e01f      	b.n	8001206 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <BSP_PB_Init+0x98>)
 80011cc:	1898      	adds	r0, r3, r2
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <BSP_PB_Init+0xa0>)
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	461a      	mov	r2, r3
 80011d8:	2100      	movs	r1, #0
 80011da:	f005 fbdf 	bl	800699c <HAL_EXTI_RegisterCallback>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80011e4:	f06f 0303 	mvn.w	r3, #3
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	e00c      	b.n	8001206 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80011ec:	2028      	movs	r0, #40	; 0x28
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <BSP_PB_Init+0xa4>)
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	2200      	movs	r2, #0
 80011f8:	4619      	mov	r1, r3
 80011fa:	f004 fe38 	bl	8005e6e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80011fe:	2328      	movs	r3, #40	; 0x28
 8001200:	4618      	mov	r0, r3
 8001202:	f004 fe50 	bl	8005ea6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	0800d304 	.word	0x0800d304
 8001214:	20000404 	.word	0x20000404
 8001218:	0800d308 	.word	0x0800d308
 800121c:	0800d30c 	.word	0x0800d30c
 8001220:	0800d310 	.word	0x0800d310

08001224 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	4a09      	ldr	r2, [pc, #36]	; (8001258 <BSP_PB_GetState+0x34>)
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f005 fe93 	bl	8006f68 <HAL_GPIO_ReadPin>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf0c      	ite	eq
 8001248:	2301      	moveq	r3, #1
 800124a:	2300      	movne	r3, #0
 800124c:	b2db      	uxtb	r3, r3
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000400 	.word	0x20000400

0800125c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff fecf 	bl	8001004 <BSP_PB_Callback>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}

0800126a <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <BSP_I2C1_Init+0x70>)
 8001284:	4a19      	ldr	r2, [pc, #100]	; (80012ec <BSP_I2C1_Init+0x74>)
 8001286:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <BSP_I2C1_Init+0x78>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	4918      	ldr	r1, [pc, #96]	; (80012f0 <BSP_I2C1_Init+0x78>)
 8001290:	600a      	str	r2, [r1, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d122      	bne.n	80012dc <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001296:	4814      	ldr	r0, [pc, #80]	; (80012e8 <BSP_I2C1_Init+0x70>)
 8001298:	f006 f9c4 	bl	8007624 <HAL_I2C_GetState>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d11c      	bne.n	80012dc <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80012a2:	4811      	ldr	r0, [pc, #68]	; (80012e8 <BSP_I2C1_Init+0x70>)
 80012a4:	f000 f8fe 	bl	80014a4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d116      	bne.n	80012dc <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80012ae:	480e      	ldr	r0, [pc, #56]	; (80012e8 <BSP_I2C1_Init+0x70>)
 80012b0:	f000 f8b4 	bl	800141c <MX_I2C1_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80012ba:	f06f 0307 	mvn.w	r3, #7
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	e00c      	b.n	80012dc <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c2:	2100      	movs	r1, #0
 80012c4:	4808      	ldr	r0, [pc, #32]	; (80012e8 <BSP_I2C1_Init+0x70>)
 80012c6:	f006 fc6d 	bl	8007ba4 <HAL_I2CEx_ConfigAnalogFilter>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80012d0:	f06f 0307 	mvn.w	r3, #7
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	e001      	b.n	80012dc <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80012dc:	687b      	ldr	r3, [r7, #4]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2005e4e4 	.word	0x2005e4e4
 80012ec:	40005400 	.word	0x40005400
 80012f0:	2000057c 	.word	0x2000057c

080012f4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <BSP_I2C1_DeInit+0x48>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d014      	beq.n	8001330 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <BSP_I2C1_DeInit+0x48>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3b01      	subs	r3, #1
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <BSP_I2C1_DeInit+0x48>)
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <BSP_I2C1_DeInit+0x48>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10b      	bne.n	8001330 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001318:	4809      	ldr	r0, [pc, #36]	; (8001340 <BSP_I2C1_DeInit+0x4c>)
 800131a:	f000 f909 	bl	8001530 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800131e:	4808      	ldr	r0, [pc, #32]	; (8001340 <BSP_I2C1_DeInit+0x4c>)
 8001320:	f005 ff08 	bl	8007134 <HAL_I2C_DeInit>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800132a:	f06f 0307 	mvn.w	r3, #7
 800132e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001330:	687b      	ldr	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000057c 	.word	0x2000057c
 8001340:	2005e4e4 	.word	0x2005e4e4

08001344 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af04      	add	r7, sp, #16
 800134a:	60ba      	str	r2, [r7, #8]
 800134c:	461a      	mov	r2, r3
 800134e:	4603      	mov	r3, r0
 8001350:	81fb      	strh	r3, [r7, #14]
 8001352:	460b      	mov	r3, r1
 8001354:	81bb      	strh	r3, [r7, #12]
 8001356:	4613      	mov	r3, r2
 8001358:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800135e:	89ba      	ldrh	r2, [r7, #12]
 8001360:	89f9      	ldrh	r1, [r7, #14]
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	480c      	ldr	r0, [pc, #48]	; (80013a4 <BSP_I2C1_WriteReg+0x60>)
 8001374:	f005 ff0e 	bl	8007194 <HAL_I2C_Mem_Write>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00c      	beq.n	8001398 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800137e:	4809      	ldr	r0, [pc, #36]	; (80013a4 <BSP_I2C1_WriteReg+0x60>)
 8001380:	f006 f95e 	bl	8007640 <HAL_I2C_GetError>
 8001384:	4603      	mov	r3, r0
 8001386:	2b04      	cmp	r3, #4
 8001388:	d103      	bne.n	8001392 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800138a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e002      	b.n	8001398 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001392:	f06f 0303 	mvn.w	r3, #3
 8001396:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001398:	697b      	ldr	r3, [r7, #20]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2005e4e4 	.word	0x2005e4e4

080013a8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af04      	add	r7, sp, #16
 80013ae:	60ba      	str	r2, [r7, #8]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4603      	mov	r3, r0
 80013b4:	81fb      	strh	r3, [r7, #14]
 80013b6:	460b      	mov	r3, r1
 80013b8:	81bb      	strh	r3, [r7, #12]
 80013ba:	4613      	mov	r3, r2
 80013bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80013c2:	89ba      	ldrh	r2, [r7, #12]
 80013c4:	89f9      	ldrh	r1, [r7, #14]
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	480c      	ldr	r0, [pc, #48]	; (8001408 <BSP_I2C1_ReadReg+0x60>)
 80013d8:	f005 fff0 	bl	80073bc <HAL_I2C_Mem_Read>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00c      	beq.n	80013fc <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80013e2:	4809      	ldr	r0, [pc, #36]	; (8001408 <BSP_I2C1_ReadReg+0x60>)
 80013e4:	f006 f92c 	bl	8007640 <HAL_I2C_GetError>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d103      	bne.n	80013f6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80013ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e002      	b.n	80013fc <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80013f6:	f06f 0303 	mvn.w	r3, #3
 80013fa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80013fc:	697b      	ldr	r3, [r7, #20]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2005e4e4 	.word	0x2005e4e4

0800140c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001410:	f004 fbfe 	bl	8005c10 <HAL_GetTick>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a1c      	ldr	r2, [pc, #112]	; (800149c <MX_I2C1_Init+0x80>)
 800142c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00401959;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a1b      	ldr	r2, [pc, #108]	; (80014a0 <MX_I2C1_Init+0x84>)
 8001432:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f005 fdd8 	bl	8007014 <HAL_I2C_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800146e:	2100      	movs	r1, #0
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f006 fb97 	bl	8007ba4 <HAL_I2CEx_ConfigAnalogFilter>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001480:	2100      	movs	r1, #0
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f006 fbd9 	bl	8007c3a <HAL_I2CEx_ConfigDigitalFilter>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001492:	7bfb      	ldrb	r3, [r7, #15]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40005400 	.word	0x40005400
 80014a0:	00401959 	.word	0x00401959

080014a4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <I2C1_MspInit+0x84>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <I2C1_MspInit+0x84>)
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	6313      	str	r3, [r2, #48]	; 0x30
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <I2C1_MspInit+0x84>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80014c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ca:	2312      	movs	r3, #18
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80014d6:	2304      	movs	r3, #4
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4812      	ldr	r0, [pc, #72]	; (800152c <I2C1_MspInit+0x88>)
 80014e2:	f005 fa89 	bl	80069f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80014e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ec:	2312      	movs	r3, #18
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80014f8:	2304      	movs	r3, #4
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	480a      	ldr	r0, [pc, #40]	; (800152c <I2C1_MspInit+0x88>)
 8001504:	f005 fa78 	bl	80069f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <I2C1_MspInit+0x84>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <I2C1_MspInit+0x84>)
 800150e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001512:	6413      	str	r3, [r2, #64]	; 0x40
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <I2C1_MspInit+0x84>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800
 800152c:	40020400 	.word	0x40020400

08001530 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <I2C1_MspDeInit+0x30>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	4a08      	ldr	r2, [pc, #32]	; (8001560 <I2C1_MspDeInit+0x30>)
 800153e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001542:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001548:	4806      	ldr	r0, [pc, #24]	; (8001564 <I2C1_MspDeInit+0x34>)
 800154a:	f005 fc01 	bl	8006d50 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800154e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001552:	4804      	ldr	r0, [pc, #16]	; (8001564 <I2C1_MspDeInit+0x34>)
 8001554:	f005 fbfc 	bl	8006d50 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800
 8001564:	40020400 	.word	0x40020400

08001568 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <SystemInit+0x20>)
 800156e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <SystemInit+0x20>)
 8001574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <update_val>:
 *      Author: Adam Polus
 */

#include "test_lib.h"

void update_val(char *tab,  uint16_t sound_probe, int i){
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	460b      	mov	r3, r1
 8001596:	607a      	str	r2, [r7, #4]
 8001598:	817b      	strh	r3, [r7, #10]
//		  tab[i] = sound_probe & 0xFF;
		  tab[i+1] = sound_probe & 0xFF;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3301      	adds	r3, #1
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4413      	add	r3, r2
 80015a2:	897a      	ldrh	r2, [r7, #10]
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	701a      	strb	r2, [r3, #0]
	  tab[i] = sound_probe >> 8;
 80015a8:	897b      	ldrh	r3, [r7, #10]
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	b299      	uxth	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	b2ca      	uxtb	r2, r1
 80015b6:	701a      	strb	r2, [r3, #0]
//	  tab[i+1] = sound_probe >> 8;
//	  tab[i] = 'a';
//	  tab[i+1] = 'a';
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_TIM3_Init+0x94>)
 80015e4:	4a1d      	ldr	r2, [pc, #116]	; (800165c <MX_TIM3_Init+0x98>)
 80015e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <MX_TIM3_Init+0x94>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_TIM3_Init+0x94>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_TIM3_Init+0x94>)
 80015f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_TIM3_Init+0x94>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_TIM3_Init+0x94>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001608:	4813      	ldr	r0, [pc, #76]	; (8001658 <MX_TIM3_Init+0x94>)
 800160a:	f007 ffd9 	bl	80095c0 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001614:	f7ff fcc2 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800161e:	f107 0310 	add.w	r3, r7, #16
 8001622:	4619      	mov	r1, r3
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <MX_TIM3_Init+0x94>)
 8001626:	f008 f941 	bl	80098ac <HAL_TIM_ConfigClockSource>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001630:	f7ff fcb4 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_TIM3_Init+0x94>)
 8001642:	f008 fb69 	bl	8009d18 <HAL_TIMEx_MasterConfigSynchronization>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800164c:	f7ff fca6 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	2005e530 	.word	0x2005e530
 800165c:	40000400 	.word	0x40000400

08001660 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <HAL_TIM_Base_MspInit+0x44>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d113      	bne.n	800169a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_TIM_Base_MspInit+0x48>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a0c      	ldr	r2, [pc, #48]	; (80016a8 <HAL_TIM_Base_MspInit+0x48>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_TIM_Base_MspInit+0x48>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	201d      	movs	r0, #29
 8001690:	f004 fbed 	bl	8005e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001694:	201d      	movs	r0, #29
 8001696:	f004 fc06 	bl	8005ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40000400 	.word	0x40000400
 80016a8:	40023800 	.word	0x40023800

080016ac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_USART3_UART_Init+0x58>)
 80016b2:	4a15      	ldr	r2, [pc, #84]	; (8001708 <MX_USART3_UART_Init+0x5c>)
 80016b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <MX_USART3_UART_Init+0x58>)
 80016b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_USART3_UART_Init+0x58>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_USART3_UART_Init+0x58>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_USART3_UART_Init+0x58>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_USART3_UART_Init+0x58>)
 80016d2:	220c      	movs	r2, #12
 80016d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_USART3_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_USART3_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_USART3_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_USART3_UART_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_USART3_UART_Init+0x58>)
 80016f0:	f008 fbbe 	bl	8009e70 <HAL_UART_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016fa:	f7ff fc4f 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	2005e57c 	.word	0x2005e57c
 8001708:	40004800 	.word	0x40004800

0800170c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0ae      	sub	sp, #184	; 0xb8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2290      	movs	r2, #144	; 0x90
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f00b fbf1 	bl	800cf14 <memset>
  if(uartHandle->Instance==USART3)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <HAL_UART_MspInit+0xc4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d144      	bne.n	80017c6 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800173c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001740:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001742:	2300      	movs	r3, #0
 8001744:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4618      	mov	r0, r3
 800174c:	f007 fb10 	bl	8008d70 <HAL_RCCEx_PeriphCLKConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001756:	f7ff fc21 	bl	8000f9c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800175a:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <HAL_UART_MspInit+0xc8>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <HAL_UART_MspInit+0xc8>)
 8001760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_UART_MspInit+0xc8>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_UART_MspInit+0xc8>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <HAL_UART_MspInit+0xc8>)
 8001778:	f043 0308 	orr.w	r3, r3, #8
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_UART_MspInit+0xc8>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800178a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800178e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017a4:	2307      	movs	r3, #7
 80017a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4809      	ldr	r0, [pc, #36]	; (80017d8 <HAL_UART_MspInit+0xcc>)
 80017b2:	f005 f921 	bl	80069f8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2027      	movs	r0, #39	; 0x27
 80017bc:	f004 fb57 	bl	8005e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017c0:	2027      	movs	r0, #39	; 0x27
 80017c2:	f004 fb70 	bl	8005ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017c6:	bf00      	nop
 80017c8:	37b8      	adds	r7, #184	; 0xb8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40004800 	.word	0x40004800
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020c00 	.word	0x40020c00

080017dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001814 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017e2:	490e      	ldr	r1, [pc, #56]	; (800181c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017e4:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e8:	e002      	b.n	80017f0 <LoopCopyDataInit>

080017ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ee:	3304      	adds	r3, #4

080017f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f4:	d3f9      	bcc.n	80017ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f6:	4a0b      	ldr	r2, [pc, #44]	; (8001824 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017f8:	4c0b      	ldr	r4, [pc, #44]	; (8001828 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017fc:	e001      	b.n	8001802 <LoopFillZerobss>

080017fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001800:	3204      	adds	r2, #4

08001802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001804:	d3fb      	bcc.n	80017fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001806:	f7ff feaf 	bl	8001568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180a:	f00b fb5f 	bl	800cecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180e:	f7ff fa8f 	bl	8000d30 <main>
  bx  lr    
 8001812:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001814:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800181c:	20000550 	.word	0x20000550
  ldr r2, =_sidata
 8001820:	0800d5b8 	.word	0x0800d5b8
  ldr r2, =_sbss
 8001824:	20000550 	.word	0x20000550
  ldr r4, =_ebss
 8001828:	2005e664 	.word	0x2005e664

0800182c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC_IRQHandler>
	...

08001830 <IIS2DLPC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_RegisterBusIO(IIS2DLPC_Object_t *pObj, IIS2DLPC_IO_t *pIO)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d103      	bne.n	800184c <IIS2DLPC_RegisterBusIO+0x1c>
  {
    ret = IIS2DLPC_ERROR;
 8001844:	f04f 33ff 	mov.w	r3, #4294967295
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e04d      	b.n	80018e8 <IIS2DLPC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	7b1a      	ldrb	r2, [r3, #12]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	691a      	ldr	r2, [r3, #16]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	699a      	ldr	r2, [r3, #24]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <IIS2DLPC_RegisterBusIO+0xc4>)
 8001888:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a1a      	ldr	r2, [pc, #104]	; (80018f8 <IIS2DLPC_RegisterBusIO+0xc8>)
 800188e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d103      	bne.n	80018a6 <IIS2DLPC_RegisterBusIO+0x76>
    {
      ret = IIS2DLPC_ERROR;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	e020      	b.n	80018e8 <IIS2DLPC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != IIS2DLPC_OK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4798      	blx	r3
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <IIS2DLPC_RegisterBusIO+0x8a>
    {
      ret = IIS2DLPC_ERROR;
 80018b2:	f04f 33ff 	mov.w	r3, #4294967295
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e016      	b.n	80018e8 <IIS2DLPC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == IIS2DLPC_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d112      	bne.n	80018e8 <IIS2DLPC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10d      	bne.n	80018e8 <IIS2DLPC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 80018cc:	2305      	movs	r3, #5
 80018ce:	72fb      	strb	r3, [r7, #11]

          if (IIS2DLPC_Write_Reg(pObj, IIS2DLPC_CTRL2, data) != IIS2DLPC_OK)
 80018d0:	7afb      	ldrb	r3, [r7, #11]
 80018d2:	461a      	mov	r2, r3
 80018d4:	2121      	movs	r1, #33	; 0x21
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 fd67 	bl	80023aa <IIS2DLPC_Write_Reg>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <IIS2DLPC_RegisterBusIO+0xb8>
          {
            ret = IIS2DLPC_ERROR;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80018e8:	68fb      	ldr	r3, [r7, #12]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	0800273d 	.word	0x0800273d
 80018f8:	08002773 	.word	0x08002773

080018fc <IIS2DLPC_Init>:
 * @brief  Initialize the IIS2DLPC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_Init(IIS2DLPC_Object_t *pObj)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (iis2dlpc_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	331c      	adds	r3, #28
 8001908:	2101      	movs	r1, #1
 800190a:	4618      	mov	r0, r3
 800190c:	f001 fa52 	bl	8002db4 <iis2dlpc_auto_increment_set>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <IIS2DLPC_Init+0x20>
  {
    return IIS2DLPC_ERROR;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	e04b      	b.n	80019b4 <IIS2DLPC_Init+0xb8>
  }

  /* Enable BDU */
  if (iis2dlpc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2DLPC_OK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	331c      	adds	r3, #28
 8001920:	2101      	movs	r1, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f001 f966 	bl	8002bf4 <iis2dlpc_block_data_update_set>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <IIS2DLPC_Init+0x38>
  {
    return IIS2DLPC_ERROR;
 800192e:	f04f 33ff 	mov.w	r3, #4294967295
 8001932:	e03f      	b.n	80019b4 <IIS2DLPC_Init+0xb8>
  }

  /* FIFO mode selection */
  if (iis2dlpc_fifo_mode_set(&(pObj->Ctx), IIS2DLPC_BYPASS_MODE) != IIS2DLPC_OK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	331c      	adds	r3, #28
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f001 fa60 	bl	8002e00 <iis2dlpc_fifo_mode_set>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <IIS2DLPC_Init+0x50>
  {
    return IIS2DLPC_ERROR;
 8001946:	f04f 33ff 	mov.w	r3, #4294967295
 800194a:	e033      	b.n	80019b4 <IIS2DLPC_Init+0xb8>
  }

  /* Power mode selection */
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), IIS2DLPC_HIGH_PERFORMANCE) != IIS2DLPC_OK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	331c      	adds	r3, #28
 8001950:	2104      	movs	r1, #4
 8001952:	4618      	mov	r0, r3
 8001954:	f000 ff58 	bl	8002808 <iis2dlpc_power_mode_set>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <IIS2DLPC_Init+0x68>
  {
    return IIS2DLPC_ERROR;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	e027      	b.n	80019b4 <IIS2DLPC_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a15      	ldr	r2, [pc, #84]	; (80019bc <IIS2DLPC_Init+0xc0>)
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Output data rate selection - power down. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	331c      	adds	r3, #28
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f001 f849 	bl	8002a18 <iis2dlpc_data_rate_set>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <IIS2DLPC_Init+0x96>
  {
    return IIS2DLPC_ERROR;
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
 8001990:	e010      	b.n	80019b4 <IIS2DLPC_Init+0xb8>
  }

  /* Full scale selection. */
  if (iis2dlpc_full_scale_set(&(pObj->Ctx), IIS2DLPC_2g) != IIS2DLPC_OK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	331c      	adds	r3, #28
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f001 f951 	bl	8002c40 <iis2dlpc_full_scale_set>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <IIS2DLPC_Init+0xae>
  {
    return IIS2DLPC_ERROR;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
 80019a8:	e004      	b.n	80019b4 <IIS2DLPC_Init+0xb8>
  }

  pObj->is_initialized = 1;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2DLPC_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	42c80000 	.word	0x42c80000

080019c0 <IIS2DLPC_DeInit>:
 * @brief  Deinitialize the IIS2DLPC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_DeInit(IIS2DLPC_Object_t *pObj)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2DLPC_ACC_Disable(pObj) != IIS2DLPC_OK)
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f888 	bl	8001ade <IIS2DLPC_ACC_Disable>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <IIS2DLPC_DeInit+0x1a>
  {
    return IIS2DLPC_ERROR;
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	e010      	b.n	80019fc <IIS2DLPC_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = IIS2DLPC_HIGH_PERFORMANCE_MODE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = IIS2DLPC_LOW_NOISE_DISABLE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->is_initialized = 0;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2DLPC_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <IIS2DLPC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ReadID(IIS2DLPC_Object_t *pObj, uint8_t *Id)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  if (iis2dlpc_device_id_get(&(pObj->Ctx), Id) != IIS2DLPC_OK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	331c      	adds	r3, #28
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f001 f9bc 	bl	8002d92 <iis2dlpc_device_id_get>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <IIS2DLPC_ReadID+0x22>
  {
    return IIS2DLPC_ERROR;
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
 8001a24:	e000      	b.n	8001a28 <IIS2DLPC_ReadID+0x24>
  }

  return IIS2DLPC_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <IIS2DLPC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2DLPC sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_GetCapabilities(IIS2DLPC_Object_t *pObj, IIS2DLPC_Capabilities_t *Capabilities)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2200      	movs	r2, #0
 8001a44:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <IIS2DLPC_GetCapabilities+0x58>)
 8001a70:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	619a      	str	r2, [r3, #24]
  return IIS2DLPC_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	44c80000 	.word	0x44c80000

08001a8c <IIS2DLPC_ACC_Enable>:
 * @brief  Enable the IIS2DLPC accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_Enable(IIS2DLPC_Object_t *pObj)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <IIS2DLPC_ACC_Enable+0x16>
  {
    return IIS2DLPC_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e019      	b.n	8001ad6 <IIS2DLPC_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode, pObj->acc_low_noise) != IIS2DLPC_OK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fc90 	bl	80023e0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <IIS2DLPC_ACC_Enable+0x40>
  {
    return IIS2DLPC_ERROR;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	e004      	b.n	8001ad6 <IIS2DLPC_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2DLPC_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <IIS2DLPC_ACC_Disable>:
 * @brief  Disable the IIS2DLPC accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_Disable(IIS2DLPC_Object_t *pObj)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <IIS2DLPC_ACC_Disable+0x16>
  {
    return IIS2DLPC_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	e010      	b.n	8001b16 <IIS2DLPC_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), IIS2DLPC_XL_ODR_OFF) != IIS2DLPC_OK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	331c      	adds	r3, #28
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 ff8c 	bl	8002a18 <iis2dlpc_data_rate_set>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <IIS2DLPC_ACC_Disable+0x2e>
  {
    return IIS2DLPC_ERROR;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	e004      	b.n	8001b16 <IIS2DLPC_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2DLPC_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <IIS2DLPC_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetSensitivity(IIS2DLPC_Object_t *pObj, float *Sensitivity)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
  iis2dlpc_fs_t full_scale;
  iis2dlpc_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &full_scale) != IIS2DLPC_OK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	331c      	adds	r3, #28
 8001b32:	f107 020b 	add.w	r2, r7, #11
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f001 f8a7 	bl	8002c8c <iis2dlpc_full_scale_get>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <IIS2DLPC_ACC_GetSensitivity+0x2a>
  {
    return IIS2DLPC_ERROR;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295
 8001b48:	e0a0      	b.n	8001c8c <IIS2DLPC_ACC_GetSensitivity+0x16c>
  }

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	331c      	adds	r3, #28
 8001b4e:	f107 020a 	add.w	r2, r7, #10
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 fea5 	bl	80028a4 <iis2dlpc_power_mode_get>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <IIS2DLPC_ACC_GetSensitivity+0x46>
  {
    return IIS2DLPC_ERROR;
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	e092      	b.n	8001c8c <IIS2DLPC_ACC_GetSensitivity+0x16c>
  }

  switch(mode)
 8001b66:	7abb      	ldrb	r3, [r7, #10]
 8001b68:	2b1b      	cmp	r3, #27
 8001b6a:	f200 8087 	bhi.w	8001c7c <IIS2DLPC_ACC_GetSensitivity+0x15c>
 8001b6e:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <IIS2DLPC_ACC_GetSensitivity+0x54>)
 8001b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b74:	08001be5 	.word	0x08001be5
 8001b78:	08001c31 	.word	0x08001c31
 8001b7c:	08001c31 	.word	0x08001c31
 8001b80:	08001c31 	.word	0x08001c31
 8001b84:	08001c31 	.word	0x08001c31
 8001b88:	08001c7d 	.word	0x08001c7d
 8001b8c:	08001c7d 	.word	0x08001c7d
 8001b90:	08001c7d 	.word	0x08001c7d
 8001b94:	08001be5 	.word	0x08001be5
 8001b98:	08001c31 	.word	0x08001c31
 8001b9c:	08001c31 	.word	0x08001c31
 8001ba0:	08001c31 	.word	0x08001c31
 8001ba4:	08001c7d 	.word	0x08001c7d
 8001ba8:	08001c7d 	.word	0x08001c7d
 8001bac:	08001c7d 	.word	0x08001c7d
 8001bb0:	08001c7d 	.word	0x08001c7d
 8001bb4:	08001be5 	.word	0x08001be5
 8001bb8:	08001c31 	.word	0x08001c31
 8001bbc:	08001c31 	.word	0x08001c31
 8001bc0:	08001c31 	.word	0x08001c31
 8001bc4:	08001c31 	.word	0x08001c31
 8001bc8:	08001c7d 	.word	0x08001c7d
 8001bcc:	08001c7d 	.word	0x08001c7d
 8001bd0:	08001c7d 	.word	0x08001c7d
 8001bd4:	08001be5 	.word	0x08001be5
 8001bd8:	08001c31 	.word	0x08001c31
 8001bdc:	08001c31 	.word	0x08001c31
 8001be0:	08001c31 	.word	0x08001c31
  {
    case IIS2DLPC_CONT_LOW_PWR_12bit:
    case IIS2DLPC_SINGLE_LOW_PWR_12bit:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
    case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8001be4:	7afb      	ldrb	r3, [r7, #11]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d81a      	bhi.n	8001c20 <IIS2DLPC_ACC_GetSensitivity+0x100>
 8001bea:	a201      	add	r2, pc, #4	; (adr r2, 8001bf0 <IIS2DLPC_ACC_GetSensitivity+0xd0>)
 8001bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf0:	08001c01 	.word	0x08001c01
 8001bf4:	08001c09 	.word	0x08001c09
 8001bf8:	08001c11 	.word	0x08001c11
 8001bfc:	08001c19 	.word	0x08001c19
      {
        case IIS2DLPC_2g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4a24      	ldr	r2, [pc, #144]	; (8001c94 <IIS2DLPC_ACC_GetSensitivity+0x174>)
 8001c04:	601a      	str	r2, [r3, #0]
           break;
 8001c06:	e012      	b.n	8001c2e <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_4g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4a23      	ldr	r2, [pc, #140]	; (8001c98 <IIS2DLPC_ACC_GetSensitivity+0x178>)
 8001c0c:	601a      	str	r2, [r3, #0]
          break;
 8001c0e:	e00e      	b.n	8001c2e <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_8g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <IIS2DLPC_ACC_GetSensitivity+0x17c>)
 8001c14:	601a      	str	r2, [r3, #0]
           break;
 8001c16:	e00a      	b.n	8001c2e <IIS2DLPC_ACC_GetSensitivity+0x10e>

        case IIS2DLPC_16g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4a21      	ldr	r2, [pc, #132]	; (8001ca0 <IIS2DLPC_ACC_GetSensitivity+0x180>)
 8001c1c:	601a      	str	r2, [r3, #0]
          break;
 8001c1e:	e006      	b.n	8001c2e <IIS2DLPC_ACC_GetSensitivity+0x10e>

        default:
          *Sensitivity = -1.0f;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4a20      	ldr	r2, [pc, #128]	; (8001ca4 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 8001c24:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	60fb      	str	r3, [r7, #12]
          break;
 8001c2c:	bf00      	nop
      }
      break;
 8001c2e:	e02c      	b.n	8001c8a <IIS2DLPC_ACC_GetSensitivity+0x16a>
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d81a      	bhi.n	8001c6c <IIS2DLPC_ACC_GetSensitivity+0x14c>
 8001c36:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <IIS2DLPC_ACC_GetSensitivity+0x11c>)
 8001c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3c:	08001c4d 	.word	0x08001c4d
 8001c40:	08001c55 	.word	0x08001c55
 8001c44:	08001c5d 	.word	0x08001c5d
 8001c48:	08001c65 	.word	0x08001c65
      {
        case IIS2DLPC_2g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4a16      	ldr	r2, [pc, #88]	; (8001ca8 <IIS2DLPC_ACC_GetSensitivity+0x188>)
 8001c50:	601a      	str	r2, [r3, #0]
           break;
 8001c52:	e012      	b.n	8001c7a <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_4g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4a15      	ldr	r2, [pc, #84]	; (8001cac <IIS2DLPC_ACC_GetSensitivity+0x18c>)
 8001c58:	601a      	str	r2, [r3, #0]
          break;
 8001c5a:	e00e      	b.n	8001c7a <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_8g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4a0d      	ldr	r2, [pc, #52]	; (8001c94 <IIS2DLPC_ACC_GetSensitivity+0x174>)
 8001c60:	601a      	str	r2, [r3, #0]
           break;
 8001c62:	e00a      	b.n	8001c7a <IIS2DLPC_ACC_GetSensitivity+0x15a>

        case IIS2DLPC_16g:
          *Sensitivity = IIS2DLPC_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <IIS2DLPC_ACC_GetSensitivity+0x178>)
 8001c68:	601a      	str	r2, [r3, #0]
          break;
 8001c6a:	e006      	b.n	8001c7a <IIS2DLPC_ACC_GetSensitivity+0x15a>

        default:
          *Sensitivity = -1.0f;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 8001c70:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	60fb      	str	r3, [r7, #12]
          break;
 8001c78:	bf00      	nop
      }
      break;
 8001c7a:	e006      	b.n	8001c8a <IIS2DLPC_ACC_GetSensitivity+0x16a>

    default:
      *Sensitivity = -1.0f;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <IIS2DLPC_ACC_GetSensitivity+0x184>)
 8001c80:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	60fb      	str	r3, [r7, #12]
      break;
 8001c88:	bf00      	nop
  }

  return ret;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	3f79db23 	.word	0x3f79db23
 8001c98:	3ff9db23 	.word	0x3ff9db23
 8001c9c:	4079db23 	.word	0x4079db23
 8001ca0:	40f9db23 	.word	0x40f9db23
 8001ca4:	bf800000 	.word	0xbf800000
 8001ca8:	3e79db23 	.word	0x3e79db23
 8001cac:	3ef9db23 	.word	0x3ef9db23

08001cb0 <IIS2DLPC_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetOutputDataRate(IIS2DLPC_Object_t *pObj, float *Odr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  iis2dlpc_odr_t odr_low_level;
  iis2dlpc_mode_t mode;

  /* Get current output data rate. */
  if (iis2dlpc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2DLPC_OK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	331c      	adds	r3, #28
 8001cc2:	f107 020b 	add.w	r2, r7, #11
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 feeb 	bl	8002aa4 <iis2dlpc_data_rate_get>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <IIS2DLPC_ACC_GetOutputDataRate+0x2a>
  {
    return IIS2DLPC_ERROR;
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd8:	e1b4      	b.n	8002044 <IIS2DLPC_ACC_GetOutputDataRate+0x394>
  }

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	331c      	adds	r3, #28
 8001cde:	f107 020a 	add.w	r2, r7, #10
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 fddd 	bl	80028a4 <iis2dlpc_power_mode_get>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <IIS2DLPC_ACC_GetOutputDataRate+0x46>
  {
    return IIS2DLPC_ERROR;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf4:	e1a6      	b.n	8002044 <IIS2DLPC_ACC_GetOutputDataRate+0x394>
  }

  switch (odr_low_level)
 8001cf6:	7afb      	ldrb	r3, [r7, #11]
 8001cf8:	2b22      	cmp	r3, #34	; 0x22
 8001cfa:	f200 819b 	bhi.w	8002034 <IIS2DLPC_ACC_GetOutputDataRate+0x384>
 8001cfe:	a201      	add	r2, pc, #4	; (adr r2, 8001d04 <IIS2DLPC_ACC_GetOutputDataRate+0x54>)
 8001d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d04:	08001d91 	.word	0x08001d91
 8001d08:	08001d9b 	.word	0x08001d9b
 8001d0c:	08001e39 	.word	0x08001e39
 8001d10:	08001e41 	.word	0x08001e41
 8001d14:	08001e49 	.word	0x08001e49
 8001d18:	08001e51 	.word	0x08001e51
 8001d1c:	08001e59 	.word	0x08001e59
 8001d20:	08001e61 	.word	0x08001e61
 8001d24:	08001efd 	.word	0x08001efd
 8001d28:	08001f99 	.word	0x08001f99
 8001d2c:	08002035 	.word	0x08002035
 8001d30:	08002035 	.word	0x08002035
 8001d34:	08002035 	.word	0x08002035
 8001d38:	08002035 	.word	0x08002035
 8001d3c:	08002035 	.word	0x08002035
 8001d40:	08002035 	.word	0x08002035
 8001d44:	08002035 	.word	0x08002035
 8001d48:	08002035 	.word	0x08002035
 8001d4c:	08001d91 	.word	0x08001d91
 8001d50:	08002035 	.word	0x08002035
 8001d54:	08002035 	.word	0x08002035
 8001d58:	08002035 	.word	0x08002035
 8001d5c:	08002035 	.word	0x08002035
 8001d60:	08002035 	.word	0x08002035
 8001d64:	08002035 	.word	0x08002035
 8001d68:	08002035 	.word	0x08002035
 8001d6c:	08002035 	.word	0x08002035
 8001d70:	08002035 	.word	0x08002035
 8001d74:	08002035 	.word	0x08002035
 8001d78:	08002035 	.word	0x08002035
 8001d7c:	08002035 	.word	0x08002035
 8001d80:	08002035 	.word	0x08002035
 8001d84:	08002035 	.word	0x08002035
 8001d88:	08002035 	.word	0x08002035
 8001d8c:	08001d91 	.word	0x08001d91
  {
    case IIS2DLPC_XL_ODR_OFF:
    case IIS2DLPC_XL_SET_SW_TRIG:
    case IIS2DLPC_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
      break;
 8001d98:	e153      	b.n	8002042 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8001d9a:	7abb      	ldrb	r3, [r7, #10]
 8001d9c:	2b1b      	cmp	r3, #27
 8001d9e:	d843      	bhi.n	8001e28 <IIS2DLPC_ACC_GetOutputDataRate+0x178>
 8001da0:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <IIS2DLPC_ACC_GetOutputDataRate+0xf8>)
 8001da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da6:	bf00      	nop
 8001da8:	08001e21 	.word	0x08001e21
 8001dac:	08001e21 	.word	0x08001e21
 8001db0:	08001e21 	.word	0x08001e21
 8001db4:	08001e21 	.word	0x08001e21
 8001db8:	08001e19 	.word	0x08001e19
 8001dbc:	08001e29 	.word	0x08001e29
 8001dc0:	08001e29 	.word	0x08001e29
 8001dc4:	08001e29 	.word	0x08001e29
 8001dc8:	08001e21 	.word	0x08001e21
 8001dcc:	08001e21 	.word	0x08001e21
 8001dd0:	08001e21 	.word	0x08001e21
 8001dd4:	08001e21 	.word	0x08001e21
 8001dd8:	08001e29 	.word	0x08001e29
 8001ddc:	08001e29 	.word	0x08001e29
 8001de0:	08001e29 	.word	0x08001e29
 8001de4:	08001e29 	.word	0x08001e29
 8001de8:	08001e21 	.word	0x08001e21
 8001dec:	08001e21 	.word	0x08001e21
 8001df0:	08001e21 	.word	0x08001e21
 8001df4:	08001e21 	.word	0x08001e21
 8001df8:	08001e19 	.word	0x08001e19
 8001dfc:	08001e29 	.word	0x08001e29
 8001e00:	08001e29 	.word	0x08001e29
 8001e04:	08001e29 	.word	0x08001e29
 8001e08:	08001e21 	.word	0x08001e21
 8001e0c:	08001e21 	.word	0x08001e21
 8001e10:	08001e21 	.word	0x08001e21
 8001e14:	08001e21 	.word	0x08001e21
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4a8c      	ldr	r2, [pc, #560]	; (800204c <IIS2DLPC_ACC_GetOutputDataRate+0x39c>)
 8001e1c:	601a      	str	r2, [r3, #0]
           break;
 8001e1e:	e00a      	b.n	8001e36 <IIS2DLPC_ACC_GetOutputDataRate+0x186>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4a8b      	ldr	r2, [pc, #556]	; (8002050 <IIS2DLPC_ACC_GetOutputDataRate+0x3a0>)
 8001e24:	601a      	str	r2, [r3, #0]
          break;
 8001e26:	e006      	b.n	8001e36 <IIS2DLPC_ACC_GetOutputDataRate+0x186>

        default:
          *Odr = -1.0f;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4a8a      	ldr	r2, [pc, #552]	; (8002054 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8001e2c:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	60fb      	str	r3, [r7, #12]
          break;
 8001e34:	bf00      	nop
      }
      break;
 8001e36:	e104      	b.n	8002042 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4a84      	ldr	r2, [pc, #528]	; (800204c <IIS2DLPC_ACC_GetOutputDataRate+0x39c>)
 8001e3c:	601a      	str	r2, [r3, #0]
      break;
 8001e3e:	e100      	b.n	8002042 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_25Hz:
      *Odr = 25.0f;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4a85      	ldr	r2, [pc, #532]	; (8002058 <IIS2DLPC_ACC_GetOutputDataRate+0x3a8>)
 8001e44:	601a      	str	r2, [r3, #0]
      break;
 8001e46:	e0fc      	b.n	8002042 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_50Hz:
      *Odr = 50.0f;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4a84      	ldr	r2, [pc, #528]	; (800205c <IIS2DLPC_ACC_GetOutputDataRate+0x3ac>)
 8001e4c:	601a      	str	r2, [r3, #0]
      break;
 8001e4e:	e0f8      	b.n	8002042 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_100Hz:
      *Odr = 100.0f;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4a83      	ldr	r2, [pc, #524]	; (8002060 <IIS2DLPC_ACC_GetOutputDataRate+0x3b0>)
 8001e54:	601a      	str	r2, [r3, #0]
      break;
 8001e56:	e0f4      	b.n	8002042 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_200Hz:
      *Odr = 200.0f;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4a82      	ldr	r2, [pc, #520]	; (8002064 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8001e5c:	601a      	str	r2, [r3, #0]
      break;
 8001e5e:	e0f0      	b.n	8002042 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_400Hz:
      switch (mode)
 8001e60:	7abb      	ldrb	r3, [r7, #10]
 8001e62:	2b1b      	cmp	r3, #27
 8001e64:	d842      	bhi.n	8001eec <IIS2DLPC_ACC_GetOutputDataRate+0x23c>
 8001e66:	a201      	add	r2, pc, #4	; (adr r2, 8001e6c <IIS2DLPC_ACC_GetOutputDataRate+0x1bc>)
 8001e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6c:	08001ee5 	.word	0x08001ee5
 8001e70:	08001ee5 	.word	0x08001ee5
 8001e74:	08001ee5 	.word	0x08001ee5
 8001e78:	08001ee5 	.word	0x08001ee5
 8001e7c:	08001edd 	.word	0x08001edd
 8001e80:	08001eed 	.word	0x08001eed
 8001e84:	08001eed 	.word	0x08001eed
 8001e88:	08001eed 	.word	0x08001eed
 8001e8c:	08001ee5 	.word	0x08001ee5
 8001e90:	08001ee5 	.word	0x08001ee5
 8001e94:	08001ee5 	.word	0x08001ee5
 8001e98:	08001ee5 	.word	0x08001ee5
 8001e9c:	08001eed 	.word	0x08001eed
 8001ea0:	08001eed 	.word	0x08001eed
 8001ea4:	08001eed 	.word	0x08001eed
 8001ea8:	08001eed 	.word	0x08001eed
 8001eac:	08001ee5 	.word	0x08001ee5
 8001eb0:	08001ee5 	.word	0x08001ee5
 8001eb4:	08001ee5 	.word	0x08001ee5
 8001eb8:	08001ee5 	.word	0x08001ee5
 8001ebc:	08001edd 	.word	0x08001edd
 8001ec0:	08001eed 	.word	0x08001eed
 8001ec4:	08001eed 	.word	0x08001eed
 8001ec8:	08001eed 	.word	0x08001eed
 8001ecc:	08001ee5 	.word	0x08001ee5
 8001ed0:	08001ee5 	.word	0x08001ee5
 8001ed4:	08001ee5 	.word	0x08001ee5
 8001ed8:	08001ee5 	.word	0x08001ee5
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	4a62      	ldr	r2, [pc, #392]	; (8002068 <IIS2DLPC_ACC_GetOutputDataRate+0x3b8>)
 8001ee0:	601a      	str	r2, [r3, #0]
           break;
 8001ee2:	e00a      	b.n	8001efa <IIS2DLPC_ACC_GetOutputDataRate+0x24a>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	4a5f      	ldr	r2, [pc, #380]	; (8002064 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8001ee8:	601a      	str	r2, [r3, #0]
          break;
 8001eea:	e006      	b.n	8001efa <IIS2DLPC_ACC_GetOutputDataRate+0x24a>

        default:
          *Odr = -1.0f;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4a59      	ldr	r2, [pc, #356]	; (8002054 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8001ef0:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef6:	60fb      	str	r3, [r7, #12]
          break;
 8001ef8:	bf00      	nop
      }
      break;
 8001efa:	e0a2      	b.n	8002042 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_800Hz:
      switch (mode)
 8001efc:	7abb      	ldrb	r3, [r7, #10]
 8001efe:	2b1b      	cmp	r3, #27
 8001f00:	d842      	bhi.n	8001f88 <IIS2DLPC_ACC_GetOutputDataRate+0x2d8>
 8001f02:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <IIS2DLPC_ACC_GetOutputDataRate+0x258>)
 8001f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f08:	08001f81 	.word	0x08001f81
 8001f0c:	08001f81 	.word	0x08001f81
 8001f10:	08001f81 	.word	0x08001f81
 8001f14:	08001f81 	.word	0x08001f81
 8001f18:	08001f79 	.word	0x08001f79
 8001f1c:	08001f89 	.word	0x08001f89
 8001f20:	08001f89 	.word	0x08001f89
 8001f24:	08001f89 	.word	0x08001f89
 8001f28:	08001f81 	.word	0x08001f81
 8001f2c:	08001f81 	.word	0x08001f81
 8001f30:	08001f81 	.word	0x08001f81
 8001f34:	08001f81 	.word	0x08001f81
 8001f38:	08001f89 	.word	0x08001f89
 8001f3c:	08001f89 	.word	0x08001f89
 8001f40:	08001f89 	.word	0x08001f89
 8001f44:	08001f89 	.word	0x08001f89
 8001f48:	08001f81 	.word	0x08001f81
 8001f4c:	08001f81 	.word	0x08001f81
 8001f50:	08001f81 	.word	0x08001f81
 8001f54:	08001f81 	.word	0x08001f81
 8001f58:	08001f79 	.word	0x08001f79
 8001f5c:	08001f89 	.word	0x08001f89
 8001f60:	08001f89 	.word	0x08001f89
 8001f64:	08001f89 	.word	0x08001f89
 8001f68:	08001f81 	.word	0x08001f81
 8001f6c:	08001f81 	.word	0x08001f81
 8001f70:	08001f81 	.word	0x08001f81
 8001f74:	08001f81 	.word	0x08001f81
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	4a3c      	ldr	r2, [pc, #240]	; (800206c <IIS2DLPC_ACC_GetOutputDataRate+0x3bc>)
 8001f7c:	601a      	str	r2, [r3, #0]
           break;
 8001f7e:	e00a      	b.n	8001f96 <IIS2DLPC_ACC_GetOutputDataRate+0x2e6>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	4a38      	ldr	r2, [pc, #224]	; (8002064 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8001f84:	601a      	str	r2, [r3, #0]
          break;
 8001f86:	e006      	b.n	8001f96 <IIS2DLPC_ACC_GetOutputDataRate+0x2e6>

        default:
          *Odr = -1.0f;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4a32      	ldr	r2, [pc, #200]	; (8002054 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8001f8c:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f92:	60fb      	str	r3, [r7, #12]
          break;
 8001f94:	bf00      	nop
      }
      break;
 8001f96:	e054      	b.n	8002042 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    case IIS2DLPC_XL_ODR_1k6Hz:
      switch (mode)
 8001f98:	7abb      	ldrb	r3, [r7, #10]
 8001f9a:	2b1b      	cmp	r3, #27
 8001f9c:	d842      	bhi.n	8002024 <IIS2DLPC_ACC_GetOutputDataRate+0x374>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <IIS2DLPC_ACC_GetOutputDataRate+0x2f4>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	0800201d 	.word	0x0800201d
 8001fa8:	0800201d 	.word	0x0800201d
 8001fac:	0800201d 	.word	0x0800201d
 8001fb0:	0800201d 	.word	0x0800201d
 8001fb4:	08002015 	.word	0x08002015
 8001fb8:	08002025 	.word	0x08002025
 8001fbc:	08002025 	.word	0x08002025
 8001fc0:	08002025 	.word	0x08002025
 8001fc4:	0800201d 	.word	0x0800201d
 8001fc8:	0800201d 	.word	0x0800201d
 8001fcc:	0800201d 	.word	0x0800201d
 8001fd0:	0800201d 	.word	0x0800201d
 8001fd4:	08002025 	.word	0x08002025
 8001fd8:	08002025 	.word	0x08002025
 8001fdc:	08002025 	.word	0x08002025
 8001fe0:	08002025 	.word	0x08002025
 8001fe4:	0800201d 	.word	0x0800201d
 8001fe8:	0800201d 	.word	0x0800201d
 8001fec:	0800201d 	.word	0x0800201d
 8001ff0:	0800201d 	.word	0x0800201d
 8001ff4:	08002015 	.word	0x08002015
 8001ff8:	08002025 	.word	0x08002025
 8001ffc:	08002025 	.word	0x08002025
 8002000:	08002025 	.word	0x08002025
 8002004:	0800201d 	.word	0x0800201d
 8002008:	0800201d 	.word	0x0800201d
 800200c:	0800201d 	.word	0x0800201d
 8002010:	0800201d 	.word	0x0800201d
      {
        case IIS2DLPC_HIGH_PERFORMANCE:
        case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4a16      	ldr	r2, [pc, #88]	; (8002070 <IIS2DLPC_ACC_GetOutputDataRate+0x3c0>)
 8002018:	601a      	str	r2, [r3, #0]
           break;
 800201a:	e00a      	b.n	8002032 <IIS2DLPC_ACC_GetOutputDataRate+0x382>
        case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4a11      	ldr	r2, [pc, #68]	; (8002064 <IIS2DLPC_ACC_GetOutputDataRate+0x3b4>)
 8002020:	601a      	str	r2, [r3, #0]
          break;
 8002022:	e006      	b.n	8002032 <IIS2DLPC_ACC_GetOutputDataRate+0x382>

        default:
          *Odr = -1.0f;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8002028:	601a      	str	r2, [r3, #0]
          ret = IIS2DLPC_ERROR;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	60fb      	str	r3, [r7, #12]
          break;
 8002030:	bf00      	nop
      }
      break;
 8002032:	e006      	b.n	8002042 <IIS2DLPC_ACC_GetOutputDataRate+0x392>

    default:
      *Odr = -1.0f;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	4a07      	ldr	r2, [pc, #28]	; (8002054 <IIS2DLPC_ACC_GetOutputDataRate+0x3a4>)
 8002038:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
 800203e:	60fb      	str	r3, [r7, #12]
      break;
 8002040:	bf00      	nop
  }

  return ret;
 8002042:	68fb      	ldr	r3, [r7, #12]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	41480000 	.word	0x41480000
 8002050:	3fcccccd 	.word	0x3fcccccd
 8002054:	bf800000 	.word	0xbf800000
 8002058:	41c80000 	.word	0x41c80000
 800205c:	42480000 	.word	0x42480000
 8002060:	42c80000 	.word	0x42c80000
 8002064:	43480000 	.word	0x43480000
 8002068:	43c80000 	.word	0x43c80000
 800206c:	44480000 	.word	0x44480000
 8002070:	44c80000 	.word	0x44c80000

08002074 <IIS2DLPC_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_SetOutputDataRate(IIS2DLPC_Object_t *pObj, float Odr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return IIS2DLPC_ACC_SetOutputDataRate_With_Mode(pObj, Odr, IIS2DLPC_HIGH_PERFORMANCE_MODE, IIS2DLPC_LOW_NOISE_DISABLE);
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	ed97 0a00 	vldr	s0, [r7]
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f805 	bl	8002098 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>
 800208e:	4603      	mov	r3, r0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <IIS2DLPC_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_SetOutputDataRate_With_Mode(IIS2DLPC_Object_t *pObj, float Odr, IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80020a4:	460b      	mov	r3, r1
 80020a6:	71fb      	strb	r3, [r7, #7]
 80020a8:	4613      	mov	r3, r2
 80020aa:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d109      	bne.n	80020ca <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80020b6:	79ba      	ldrb	r2, [r7, #6]
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	4619      	mov	r1, r3
 80020bc:	ed97 0a02 	vldr	s0, [r7, #8]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f98d 	bl	80023e0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>
 80020c6:	4603      	mov	r3, r0
 80020c8:	e008      	b.n	80020dc <IIS2DLPC_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80020ca:	79ba      	ldrb	r2, [r7, #6]
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	4619      	mov	r1, r3
 80020d0:	ed97 0a02 	vldr	s0, [r7, #8]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 fa9f 	bl	8002618 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>
 80020da:	4603      	mov	r3, r0
  }
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <IIS2DLPC_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetFullScale(IIS2DLPC_Object_t *pObj, int32_t *FullScale)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2DLPC_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
  iis2dlpc_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (iis2dlpc_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS2DLPC_OK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	331c      	adds	r3, #28
 80020f6:	f107 020b 	add.w	r2, r7, #11
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fdc5 	bl	8002c8c <iis2dlpc_full_scale_get>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <IIS2DLPC_ACC_GetFullScale+0x2a>
  {
    return IIS2DLPC_ERROR;
 8002108:	f04f 33ff 	mov.w	r3, #4294967295
 800210c:	e027      	b.n	800215e <IIS2DLPC_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800210e:	7afb      	ldrb	r3, [r7, #11]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d81b      	bhi.n	800214c <IIS2DLPC_ACC_GetFullScale+0x68>
 8002114:	a201      	add	r2, pc, #4	; (adr r2, 800211c <IIS2DLPC_ACC_GetFullScale+0x38>)
 8002116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211a:	bf00      	nop
 800211c:	0800212d 	.word	0x0800212d
 8002120:	08002135 	.word	0x08002135
 8002124:	0800213d 	.word	0x0800213d
 8002128:	08002145 	.word	0x08002145
  {
    case IIS2DLPC_2g:
      *FullScale =  2;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2202      	movs	r2, #2
 8002130:	601a      	str	r2, [r3, #0]
      break;
 8002132:	e013      	b.n	800215c <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_4g:
      *FullScale =  4;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2204      	movs	r2, #4
 8002138:	601a      	str	r2, [r3, #0]
      break;
 800213a:	e00f      	b.n	800215c <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_8g:
      *FullScale =  8;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2208      	movs	r2, #8
 8002140:	601a      	str	r2, [r3, #0]
      break;
 8002142:	e00b      	b.n	800215c <IIS2DLPC_ACC_GetFullScale+0x78>

    case IIS2DLPC_16g:
      *FullScale = 16;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2210      	movs	r2, #16
 8002148:	601a      	str	r2, [r3, #0]
      break;
 800214a:	e007      	b.n	800215c <IIS2DLPC_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f04f 32ff 	mov.w	r2, #4294967295
 8002152:	601a      	str	r2, [r3, #0]
      ret = IIS2DLPC_ERROR;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
 8002158:	60fb      	str	r3, [r7, #12]
      break;
 800215a:	bf00      	nop
  }

  return ret;
 800215c:	68fb      	ldr	r3, [r7, #12]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop

08002168 <IIS2DLPC_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_SetFullScale(IIS2DLPC_Object_t *pObj, int32_t FullScale)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  iis2dlpc_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? IIS2DLPC_2g
         : (FullScale <= 4) ? IIS2DLPC_4g
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b02      	cmp	r3, #2
 8002176:	dd0b      	ble.n	8002190 <IIS2DLPC_ACC_SetFullScale+0x28>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2b04      	cmp	r3, #4
 800217c:	dd06      	ble.n	800218c <IIS2DLPC_ACC_SetFullScale+0x24>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b08      	cmp	r3, #8
 8002182:	dc01      	bgt.n	8002188 <IIS2DLPC_ACC_SetFullScale+0x20>
 8002184:	2302      	movs	r3, #2
 8002186:	e004      	b.n	8002192 <IIS2DLPC_ACC_SetFullScale+0x2a>
 8002188:	2303      	movs	r3, #3
 800218a:	e002      	b.n	8002192 <IIS2DLPC_ACC_SetFullScale+0x2a>
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <IIS2DLPC_ACC_SetFullScale+0x2a>
 8002190:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? IIS2DLPC_2g
 8002192:	73fb      	strb	r3, [r7, #15]
         : (FullScale <= 8) ? IIS2DLPC_8g
         :                    IIS2DLPC_16g;

  if (iis2dlpc_full_scale_set(&(pObj->Ctx), new_fs) != IIS2DLPC_OK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	331c      	adds	r3, #28
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fd4f 	bl	8002c40 <iis2dlpc_full_scale_set>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <IIS2DLPC_ACC_SetFullScale+0x46>
  {
    return IIS2DLPC_ERROR;
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ac:	e000      	b.n	80021b0 <IIS2DLPC_ACC_SetFullScale+0x48>
  }

  return IIS2DLPC_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <IIS2DLPC_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetAxesRaw(IIS2DLPC_Object_t *pObj, IIS2DLPC_AxesRaw_t *Value)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  iis2dlpc_axis3bit16_t data_raw;
  iis2dlpc_mode_t mode;
  int32_t ret = IIS2DLPC_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (iis2dlpc_power_mode_get(&(pObj->Ctx), &mode) != IIS2DLPC_OK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	331c      	adds	r3, #28
 80021ca:	f107 020b 	add.w	r2, r7, #11
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fb67 	bl	80028a4 <iis2dlpc_power_mode_get>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <IIS2DLPC_ACC_GetAxesRaw+0x2a>
  {
    return IIS2DLPC_ERROR;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
 80021e0:	e089      	b.n	80022f6 <IIS2DLPC_ACC_GetAxesRaw+0x13e>
  }

  /* Read raw data values. */
  if (iis2dlpc_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2DLPC_OK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	331c      	adds	r3, #28
 80021e6:	f107 020c 	add.w	r2, r7, #12
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fd85 	bl	8002cfc <iis2dlpc_acceleration_raw_get>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <IIS2DLPC_ACC_GetAxesRaw+0x46>
  {
    return IIS2DLPC_ERROR;
 80021f8:	f04f 33ff 	mov.w	r3, #4294967295
 80021fc:	e07b      	b.n	80022f6 <IIS2DLPC_ACC_GetAxesRaw+0x13e>
  }

  switch(mode)
 80021fe:	7afb      	ldrb	r3, [r7, #11]
 8002200:	2b1b      	cmp	r3, #27
 8002202:	d873      	bhi.n	80022ec <IIS2DLPC_ACC_GetAxesRaw+0x134>
 8002204:	a201      	add	r2, pc, #4	; (adr r2, 800220c <IIS2DLPC_ACC_GetAxesRaw+0x54>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	0800227d 	.word	0x0800227d
 8002210:	080022b5 	.word	0x080022b5
 8002214:	080022b5 	.word	0x080022b5
 8002218:	080022b5 	.word	0x080022b5
 800221c:	080022b5 	.word	0x080022b5
 8002220:	080022ed 	.word	0x080022ed
 8002224:	080022ed 	.word	0x080022ed
 8002228:	080022ed 	.word	0x080022ed
 800222c:	0800227d 	.word	0x0800227d
 8002230:	080022b5 	.word	0x080022b5
 8002234:	080022b5 	.word	0x080022b5
 8002238:	080022b5 	.word	0x080022b5
 800223c:	080022ed 	.word	0x080022ed
 8002240:	080022ed 	.word	0x080022ed
 8002244:	080022ed 	.word	0x080022ed
 8002248:	080022ed 	.word	0x080022ed
 800224c:	0800227d 	.word	0x0800227d
 8002250:	080022b5 	.word	0x080022b5
 8002254:	080022b5 	.word	0x080022b5
 8002258:	080022b5 	.word	0x080022b5
 800225c:	080022b5 	.word	0x080022b5
 8002260:	080022ed 	.word	0x080022ed
 8002264:	080022ed 	.word	0x080022ed
 8002268:	080022ed 	.word	0x080022ed
 800226c:	0800227d 	.word	0x0800227d
 8002270:	080022b5 	.word	0x080022b5
 8002274:	080022b5 	.word	0x080022b5
 8002278:	080022b5 	.word	0x080022b5
    case IIS2DLPC_CONT_LOW_PWR_12bit:
    case IIS2DLPC_SINGLE_LOW_PWR_12bit:
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
    case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 800227c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	da00      	bge.n	8002286 <IIS2DLPC_ACC_GetAxesRaw+0xce>
 8002284:	330f      	adds	r3, #15
 8002286:	111b      	asrs	r3, r3, #4
 8002288:	b21a      	sxth	r2, r3
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800228e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002292:	2b00      	cmp	r3, #0
 8002294:	da00      	bge.n	8002298 <IIS2DLPC_ACC_GetAxesRaw+0xe0>
 8002296:	330f      	adds	r3, #15
 8002298:	111b      	asrs	r3, r3, #4
 800229a:	b21a      	sxth	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80022a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	da00      	bge.n	80022aa <IIS2DLPC_ACC_GetAxesRaw+0xf2>
 80022a8:	330f      	adds	r3, #15
 80022aa:	111b      	asrs	r3, r3, #4
 80022ac:	b21a      	sxth	r2, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	809a      	strh	r2, [r3, #4]
      break;
 80022b2:	e01f      	b.n	80022f4 <IIS2DLPC_ACC_GetAxesRaw+0x13c>
    case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
    case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80022b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	da00      	bge.n	80022be <IIS2DLPC_ACC_GetAxesRaw+0x106>
 80022bc:	3303      	adds	r3, #3
 80022be:	109b      	asrs	r3, r3, #2
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80022c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	da00      	bge.n	80022d0 <IIS2DLPC_ACC_GetAxesRaw+0x118>
 80022ce:	3303      	adds	r3, #3
 80022d0:	109b      	asrs	r3, r3, #2
 80022d2:	b21a      	sxth	r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80022d8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	da00      	bge.n	80022e2 <IIS2DLPC_ACC_GetAxesRaw+0x12a>
 80022e0:	3303      	adds	r3, #3
 80022e2:	109b      	asrs	r3, r3, #2
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	809a      	strh	r2, [r3, #4]
      break;
 80022ea:	e003      	b.n	80022f4 <IIS2DLPC_ACC_GetAxesRaw+0x13c>

    default:
      ret = IIS2DLPC_ERROR;
 80022ec:	f04f 33ff 	mov.w	r3, #4294967295
 80022f0:	617b      	str	r3, [r7, #20]
      break;
 80022f2:	bf00      	nop
  }

  return ret;
 80022f4:	697b      	ldr	r3, [r7, #20]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop

08002300 <IIS2DLPC_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_ACC_GetAxes(IIS2DLPC_Object_t *pObj, IIS2DLPC_Axes_t *Acceleration)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  IIS2DLPC_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (IIS2DLPC_ACC_GetAxesRaw(pObj, &data_raw) != IIS2DLPC_OK)
 8002310:	f107 0310 	add.w	r3, r7, #16
 8002314:	4619      	mov	r1, r3
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ff4e 	bl	80021b8 <IIS2DLPC_ACC_GetAxesRaw>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <IIS2DLPC_ACC_GetAxes+0x28>
  {
    return IIS2DLPC_ERROR;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	e03c      	b.n	80023a2 <IIS2DLPC_ACC_GetAxes+0xa2>
  }

  /* Get IIS2DLPC actual sensitivity. */
  if (IIS2DLPC_ACC_GetSensitivity(pObj, &sensitivity) != IIS2DLPC_OK)
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	4619      	mov	r1, r3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fbf6 	bl	8001b20 <IIS2DLPC_ACC_GetSensitivity>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <IIS2DLPC_ACC_GetAxes+0x40>
  {
    return IIS2DLPC_ERROR;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
 800233e:	e030      	b.n	80023a2 <IIS2DLPC_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002340:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002344:	ee07 3a90 	vmov	s15, r3
 8002348:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800234c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002358:	ee17 2a90 	vmov	r2, s15
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002360:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800236c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002378:	ee17 2a90 	vmov	r2, s15
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002380:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002384:	ee07 3a90 	vmov	s15, r3
 8002388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800238c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002398:	ee17 2a90 	vmov	r2, s15
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	609a      	str	r2, [r3, #8]

  return IIS2DLPC_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <IIS2DLPC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2DLPC_Write_Reg(IIS2DLPC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	70fb      	strb	r3, [r7, #3]
 80023b6:	4613      	mov	r3, r2
 80023b8:	70bb      	strb	r3, [r7, #2]
  if (iis2dlpc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2DLPC_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f103 001c 	add.w	r0, r3, #28
 80023c0:	1cba      	adds	r2, r7, #2
 80023c2:	78f9      	ldrb	r1, [r7, #3]
 80023c4:	2301      	movs	r3, #1
 80023c6:	f000 fa07 	bl	80027d8 <iis2dlpc_write_reg>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <IIS2DLPC_Write_Reg+0x2c>
  {
    return IIS2DLPC_ERROR;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
 80023d4:	e000      	b.n	80023d8 <IIS2DLPC_Write_Reg+0x2e>
  }

  return IIS2DLPC_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Enabled(IIS2DLPC_Object_t *pObj, float Odr, IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80023ec:	460b      	mov	r3, r1
 80023ee:	71fb      	strb	r3, [r7, #7]
 80023f0:	4613      	mov	r3, r2
 80023f2:	71bb      	strb	r3, [r7, #6]
  iis2dlpc_odr_t new_odr;
  iis2dlpc_mode_t new_power_mode;

  switch (Mode)
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	d80b      	bhi.n	8002414 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x34>
 80023fc:	a201      	add	r2, pc, #4	; (adr r2, 8002404 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80023fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002402:	bf00      	nop
 8002404:	08002441 	.word	0x08002441
 8002408:	0800246d 	.word	0x0800246d
 800240c:	08002499 	.word	0x08002499
 8002410:	080024c5 	.word	0x080024c5
  {
    case IIS2DLPC_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8002414:	79bb      	ldrb	r3, [r7, #6]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d002      	beq.n	8002420 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE;
 800241a:	2304      	movs	r3, #4
 800241c:	75fb      	strb	r3, [r7, #23]
          break;
 800241e:	e002      	b.n	8002426 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x46>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 8002420:	2314      	movs	r3, #20
 8002422:	75fb      	strb	r3, [r7, #23]
          break;
 8002424:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if(Odr < 12.5f)
 8002426:	edd7 7a02 	vldr	s15, [r7, #8]
 800242a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800242e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002436:	d400      	bmi.n	800243a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8002438:	e05a      	b.n	80024f0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 800243a:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x218>)
 800243c:	60bb      	str	r3, [r7, #8]
      break;
 800243e:	e057      	b.n	80024f0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE4:
      switch (Noise)
 8002440:	79bb      	ldrb	r3, [r7, #6]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d002      	beq.n	800244c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_4;
 8002446:	2303      	movs	r3, #3
 8002448:	75fb      	strb	r3, [r7, #23]
          break;
 800244a:	e002      	b.n	8002452 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x72>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 800244c:	2313      	movs	r3, #19
 800244e:	75fb      	strb	r3, [r7, #23]
          break;
 8002450:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 8002452:	edd7 7a02 	vldr	s15, [r7, #8]
 8002456:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80025fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800245a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	dc00      	bgt.n	8002466 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8002464:	e044      	b.n	80024f0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002466:	4b66      	ldr	r3, [pc, #408]	; (8002600 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002468:	60bb      	str	r3, [r7, #8]
      break;
 800246a:	e041      	b.n	80024f0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE3:
      switch (Noise)
 800246c:	79bb      	ldrb	r3, [r7, #6]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d002      	beq.n	8002478 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_3;
 8002472:	2302      	movs	r3, #2
 8002474:	75fb      	strb	r3, [r7, #23]
          break;
 8002476:	e002      	b.n	800247e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 8002478:	2312      	movs	r3, #18
 800247a:	75fb      	strb	r3, [r7, #23]
          break;
 800247c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 800247e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002482:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80025fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	dc00      	bgt.n	8002492 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8002490:	e02e      	b.n	80024f0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8002492:	4b5b      	ldr	r3, [pc, #364]	; (8002600 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8002494:	60bb      	str	r3, [r7, #8]
      break;
 8002496:	e02b      	b.n	80024f0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE2:
      switch (Noise)
 8002498:	79bb      	ldrb	r3, [r7, #6]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d002      	beq.n	80024a4 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_2;
 800249e:	2301      	movs	r3, #1
 80024a0:	75fb      	strb	r3, [r7, #23]
          break;
 80024a2:	e002      	b.n	80024aa <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xca>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 80024a4:	2311      	movs	r3, #17
 80024a6:	75fb      	strb	r3, [r7, #23]
          break;
 80024a8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 80024aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80024ae:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80025fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80024b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	dc00      	bgt.n	80024be <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 80024bc:	e018      	b.n	80024f0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80024be:	4b50      	ldr	r3, [pc, #320]	; (8002600 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80024c0:	60bb      	str	r3, [r7, #8]
      break;
 80024c2:	e015      	b.n	80024f0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x110>
    case IIS2DLPC_LOW_POWER_MODE1:
      switch (Noise)
 80024c4:	79bb      	ldrb	r3, [r7, #6]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d002      	beq.n	80024d0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case IIS2DLPC_LOW_NOISE_DISABLE:
        default:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_12bit;
 80024ca:	2300      	movs	r3, #0
 80024cc:	75fb      	strb	r3, [r7, #23]
          break;
 80024ce:	e002      	b.n	80024d6 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case IIS2DLPC_LOW_NOISE_ENABLE:
          new_power_mode = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 80024d0:	2310      	movs	r3, #16
 80024d2:	75fb      	strb	r3, [r7, #23]
          break;
 80024d4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if(Odr > 200.0f)
 80024d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80024da:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80025fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80024de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e6:	dc00      	bgt.n	80024ea <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 80024e8:	e001      	b.n	80024ee <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 80024ea:	4b45      	ldr	r3, [pc, #276]	; (8002600 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80024ec:	60bb      	str	r3, [r7, #8]
      break;
 80024ee:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? IIS2DLPC_XL_ODR_1Hz6_LP_ONLY
          : (Odr <=   12.5f) ? IIS2DLPC_XL_ODR_12Hz5
 80024f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80024f4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002604 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x224>
 80024f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002500:	d801      	bhi.n	8002506 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x126>
 8002502:	2301      	movs	r3, #1
 8002504:	e04d      	b.n	80025a2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002506:	edd7 7a02 	vldr	s15, [r7, #8]
 800250a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800250e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002516:	d801      	bhi.n	800251c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8002518:	2302      	movs	r3, #2
 800251a:	e042      	b.n	80025a2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800251c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002520:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252c:	d801      	bhi.n	8002532 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x152>
 800252e:	2303      	movs	r3, #3
 8002530:	e037      	b.n	80025a2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002532:	edd7 7a02 	vldr	s15, [r7, #8]
 8002536:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002608 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x228>
 800253a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	d801      	bhi.n	8002548 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x168>
 8002544:	2304      	movs	r3, #4
 8002546:	e02c      	b.n	80025a2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002548:	edd7 7a02 	vldr	s15, [r7, #8]
 800254c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800260c <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8002550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	d801      	bhi.n	800255e <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x17e>
 800255a:	2305      	movs	r3, #5
 800255c:	e021      	b.n	80025a2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800255e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002562:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80025fc <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8002566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256e:	d801      	bhi.n	8002574 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002570:	2306      	movs	r3, #6
 8002572:	e016      	b.n	80025a2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8002574:	edd7 7a02 	vldr	s15, [r7, #8]
 8002578:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002610 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x230>
 800257c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002584:	d801      	bhi.n	800258a <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8002586:	2307      	movs	r3, #7
 8002588:	e00b      	b.n	80025a2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800258a:	edd7 7a02 	vldr	s15, [r7, #8]
 800258e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002614 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x234>
 8002592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	d801      	bhi.n	80025a0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 800259c:	2308      	movs	r3, #8
 800259e:	e000      	b.n	80025a2 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80025a0:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? IIS2DLPC_XL_ODR_1Hz6_LP_ONLY
 80025a2:	75bb      	strb	r3, [r7, #22]
          : (Odr <=  400.0f) ? IIS2DLPC_XL_ODR_400Hz
          : (Odr <=  800.0f) ? IIS2DLPC_XL_ODR_800Hz
          :                    IIS2DLPC_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (iis2dlpc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2DLPC_OK)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	331c      	adds	r3, #28
 80025a8:	7dba      	ldrb	r2, [r7, #22]
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 fa33 	bl	8002a18 <iis2dlpc_data_rate_set>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return IIS2DLPC_ERROR;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	e018      	b.n	80025f0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (iis2dlpc_power_mode_set(&(pObj->Ctx), new_power_mode) != IIS2DLPC_OK)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	331c      	adds	r3, #28
 80025c2:	7dfa      	ldrb	r2, [r7, #23]
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f91e 	bl	8002808 <iis2dlpc_power_mode_set>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return IIS2DLPC_ERROR;
 80025d2:	f04f 33ff 	mov.w	r3, #4294967295
 80025d6:	e00b      	b.n	80025f0 <IIS2DLPC_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	79fa      	ldrb	r2, [r7, #7]
 80025e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	79ba      	ldrb	r2, [r7, #6]
 80025ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return IIS2DLPC_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	41480000 	.word	0x41480000
 80025fc:	43480000 	.word	0x43480000
 8002600:	43480000 	.word	0x43480000
 8002604:	3fcccccd 	.word	0x3fcccccd
 8002608:	42480000 	.word	0x42480000
 800260c:	42c80000 	.word	0x42c80000
 8002610:	43c80000 	.word	0x43c80000
 8002614:	44480000 	.word	0x44480000

08002618 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled>:
 * @param  Mode the operating mode to be used
 * @param  Noise the low noise option
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t IIS2DLPC_ACC_SetOutputDataRate_When_Disabled(IIS2DLPC_Object_t *pObj, float Odr, IIS2DLPC_Operating_Mode_t Mode, IIS2DLPC_Low_Noise_t Noise)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	ed87 0a02 	vstr	s0, [r7, #8]
 8002624:	460b      	mov	r3, r1
 8002626:	71fb      	strb	r3, [r7, #7]
 8002628:	4613      	mov	r3, r2
 800262a:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	79fa      	ldrb	r2, [r7, #7]
 8002630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pObj->acc_low_noise = Noise;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	79ba      	ldrb	r2, [r7, #6]
 8002638:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                : (Odr <=   12.5f) ?   12.5f
 800263c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002640:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002700 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264c:	d801      	bhi.n	8002652 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x3a>
 800264e:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8002650:	e04d      	b.n	80026ee <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   25.0f) ?   25.0f
 8002652:	edd7 7a02 	vldr	s15, [r7, #8]
 8002656:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800265a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800265e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002662:	d801      	bhi.n	8002668 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x50>
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8002666:	e042      	b.n	80026ee <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=   50.0f) ?   50.0f
 8002668:	edd7 7a02 	vldr	s15, [r7, #8]
 800266c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002678:	d801      	bhi.n	800267e <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x66>
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 800267c:	e037      	b.n	80026ee <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  100.0f) ?  100.0f
 800267e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002682:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002710 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	d801      	bhi.n	8002694 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8002690:	4b20      	ldr	r3, [pc, #128]	; (8002714 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8002692:	e02c      	b.n	80026ee <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  200.0f) ?  200.0f
 8002694:	edd7 7a02 	vldr	s15, [r7, #8]
 8002698:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002718 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x100>
 800269c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a4:	d801      	bhi.n	80026aa <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x92>
 80026a6:	4b1d      	ldr	r3, [pc, #116]	; (800271c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x104>)
 80026a8:	e021      	b.n	80026ee <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  400.0f) ?  400.0f
 80026aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ae:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002720 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x108>
 80026b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	d801      	bhi.n	80026c0 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 80026be:	e016      	b.n	80026ee <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                : (Odr <=  800.0f) ?  800.0f
 80026c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80026c4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002728 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x110>
 80026c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	d801      	bhi.n	80026d6 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xbe>
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x114>)
 80026d4:	e00b      	b.n	80026ee <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
                :                    1600.0f;
 80026d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026da:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002730 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x118>
 80026de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e6:	d801      	bhi.n	80026ec <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80026ea:	e000      	b.n	80026ee <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <IIS2DLPC_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	62d3      	str	r3, [r2, #44]	; 0x2c

  return IIS2DLPC_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	3fcccccd 	.word	0x3fcccccd
 8002704:	3fcccccd 	.word	0x3fcccccd
 8002708:	41480000 	.word	0x41480000
 800270c:	41c80000 	.word	0x41c80000
 8002710:	42480000 	.word	0x42480000
 8002714:	42480000 	.word	0x42480000
 8002718:	42c80000 	.word	0x42c80000
 800271c:	42c80000 	.word	0x42c80000
 8002720:	43480000 	.word	0x43480000
 8002724:	43480000 	.word	0x43480000
 8002728:	43c80000 	.word	0x43c80000
 800272c:	43c80000 	.word	0x43c80000
 8002730:	44480000 	.word	0x44480000
 8002734:	44480000 	.word	0x44480000
 8002738:	44c80000 	.word	0x44c80000

0800273c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	461a      	mov	r2, r3
 8002748:	460b      	mov	r3, r1
 800274a:	72fb      	strb	r3, [r7, #11]
 800274c:	4613      	mov	r3, r2
 800274e:	813b      	strh	r3, [r7, #8]
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	695c      	ldr	r4, [r3, #20]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	7b1b      	ldrb	r3, [r3, #12]
 800275c:	b298      	uxth	r0, r3
 800275e:	7afb      	ldrb	r3, [r7, #11]
 8002760:	b299      	uxth	r1, r3
 8002762:	893b      	ldrh	r3, [r7, #8]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	47a0      	blx	r4
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd90      	pop	{r4, r7, pc}

08002772 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002772:	b590      	push	{r4, r7, lr}
 8002774:	b087      	sub	sp, #28
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	461a      	mov	r2, r3
 800277e:	460b      	mov	r3, r1
 8002780:	72fb      	strb	r3, [r7, #11]
 8002782:	4613      	mov	r3, r2
 8002784:	813b      	strh	r3, [r7, #8]
  IIS2DLPC_Object_t *pObj = (IIS2DLPC_Object_t *)Handle;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	691c      	ldr	r4, [r3, #16]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	7b1b      	ldrb	r3, [r3, #12]
 8002792:	b298      	uxth	r0, r3
 8002794:	7afb      	ldrb	r3, [r7, #11]
 8002796:	b299      	uxth	r1, r3
 8002798:	893b      	ldrh	r3, [r7, #8]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	47a0      	blx	r4
 800279e:	4603      	mov	r3, r0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}

080027a8 <iis2dlpc_read_reg>:
  *
  */
int32_t iis2dlpc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	461a      	mov	r2, r3
 80027b4:	460b      	mov	r3, r1
 80027b6:	72fb      	strb	r3, [r7, #11]
 80027b8:	4613      	mov	r3, r2
 80027ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685c      	ldr	r4, [r3, #4]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6898      	ldr	r0, [r3, #8]
 80027c4:	893b      	ldrh	r3, [r7, #8]
 80027c6:	7af9      	ldrb	r1, [r7, #11]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	47a0      	blx	r4
 80027cc:	6178      	str	r0, [r7, #20]
  return ret;
 80027ce:	697b      	ldr	r3, [r7, #20]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd90      	pop	{r4, r7, pc}

080027d8 <iis2dlpc_write_reg>:
  *
  */
int32_t iis2dlpc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	461a      	mov	r2, r3
 80027e4:	460b      	mov	r3, r1
 80027e6:	72fb      	strb	r3, [r7, #11]
 80027e8:	4613      	mov	r3, r2
 80027ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681c      	ldr	r4, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6898      	ldr	r0, [r3, #8]
 80027f4:	893b      	ldrh	r3, [r7, #8]
 80027f6:	7af9      	ldrb	r1, [r7, #11]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	47a0      	blx	r4
 80027fc:	6178      	str	r0, [r7, #20]
  return ret;
 80027fe:	697b      	ldr	r3, [r7, #20]
}
 8002800:	4618      	mov	r0, r3
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	bd90      	pop	{r4, r7, pc}

08002808 <iis2dlpc_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_set(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t val)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002814:	f107 0210 	add.w	r2, r7, #16
 8002818:	2301      	movs	r3, #1
 800281a:	2120      	movs	r1, #32
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ffc3 	bl	80027a8 <iis2dlpc_read_reg>
 8002822:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d118      	bne.n	800285c <iis2dlpc_power_mode_set+0x54>
    ctrl1.mode = ( (uint8_t) val & 0x0CU ) >> 2;
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	b2da      	uxtb	r2, r3
 8002834:	7c3b      	ldrb	r3, [r7, #16]
 8002836:	f362 0383 	bfi	r3, r2, #2, #2
 800283a:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	b2da      	uxtb	r2, r3
 8002844:	7c3b      	ldrb	r3, [r7, #16]
 8002846:	f362 0301 	bfi	r3, r2, #0, #2
 800284a:	743b      	strb	r3, [r7, #16]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 800284c:	f107 0210 	add.w	r2, r7, #16
 8002850:	2301      	movs	r3, #1
 8002852:	2120      	movs	r1, #32
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ffbf 	bl	80027d8 <iis2dlpc_write_reg>
 800285a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d107      	bne.n	8002872 <iis2dlpc_power_mode_set+0x6a>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 8002862:	f107 020c 	add.w	r2, r7, #12
 8002866:	2301      	movs	r3, #1
 8002868:	2125      	movs	r1, #37	; 0x25
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ff9c 	bl	80027a8 <iis2dlpc_read_reg>
 8002870:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d110      	bne.n	800289a <iis2dlpc_power_mode_set+0x92>
    ctrl6.low_noise = ( (uint8_t) val & 0x10U ) >> 4;
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	b2da      	uxtb	r2, r3
 8002882:	7b3b      	ldrb	r3, [r7, #12]
 8002884:	f362 0382 	bfi	r3, r2, #2, #1
 8002888:	733b      	strb	r3, [r7, #12]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 800288a:	f107 020c 	add.w	r2, r7, #12
 800288e:	2301      	movs	r3, #1
 8002890:	2125      	movs	r1, #37	; 0x25
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffa0 	bl	80027d8 <iis2dlpc_write_reg>
 8002898:	6178      	str	r0, [r7, #20]

  else {
    ret = ret;
  }

  return ret;
 800289a:	697b      	ldr	r3, [r7, #20]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <iis2dlpc_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_power_mode_get(stmdev_ctx_t *ctx,
                                iis2dlpc_mode_t *val)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl6_t ctrl6;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 80028ae:	f107 0210 	add.w	r2, r7, #16
 80028b2:	2301      	movs	r3, #1
 80028b4:	2120      	movs	r1, #32
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff76 	bl	80027a8 <iis2dlpc_read_reg>
 80028bc:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f040 80a3 	bne.w	8002a0c <iis2dlpc_power_mode_get+0x168>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &ctrl6, 1);
 80028c6:	f107 020c 	add.w	r2, r7, #12
 80028ca:	2301      	movs	r3, #1
 80028cc:	2125      	movs	r1, #37	; 0x25
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff6a 	bl	80027a8 <iis2dlpc_read_reg>
 80028d4:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80028d6:	7b3b      	ldrb	r3, [r7, #12]
 80028d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	011a      	lsls	r2, r3, #4
 80028e0:	7c3b      	ldrb	r3, [r7, #16]
 80028e2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
             ctrl1.lp_mode)) {
 80028ec:	7c3a      	ldrb	r2, [r7, #16]
 80028ee:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80028f2:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80028f4:	4413      	add	r3, r2
 80028f6:	2b1b      	cmp	r3, #27
 80028f8:	f200 8084 	bhi.w	8002a04 <iis2dlpc_power_mode_get+0x160>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <iis2dlpc_power_mode_get+0x60>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002995 	.word	0x08002995
 8002908:	0800298d 	.word	0x0800298d
 800290c:	08002985 	.word	0x08002985
 8002910:	0800297d 	.word	0x0800297d
 8002914:	08002975 	.word	0x08002975
 8002918:	08002a05 	.word	0x08002a05
 800291c:	08002a05 	.word	0x08002a05
 8002920:	08002a05 	.word	0x08002a05
 8002924:	080029b5 	.word	0x080029b5
 8002928:	080029ad 	.word	0x080029ad
 800292c:	080029a5 	.word	0x080029a5
 8002930:	0800299d 	.word	0x0800299d
 8002934:	08002a05 	.word	0x08002a05
 8002938:	08002a05 	.word	0x08002a05
 800293c:	08002a05 	.word	0x08002a05
 8002940:	08002a05 	.word	0x08002a05
 8002944:	080029dd 	.word	0x080029dd
 8002948:	080029d5 	.word	0x080029d5
 800294c:	080029cd 	.word	0x080029cd
 8002950:	080029c5 	.word	0x080029c5
 8002954:	080029bd 	.word	0x080029bd
 8002958:	08002a05 	.word	0x08002a05
 800295c:	08002a05 	.word	0x08002a05
 8002960:	08002a05 	.word	0x08002a05
 8002964:	080029fd 	.word	0x080029fd
 8002968:	080029f5 	.word	0x080029f5
 800296c:	080029ed 	.word	0x080029ed
 8002970:	080029e5 	.word	0x080029e5
      case IIS2DLPC_HIGH_PERFORMANCE:
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2204      	movs	r2, #4
 8002978:	701a      	strb	r2, [r3, #0]
        break;
 800297a:	e048      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_4:
        *val = IIS2DLPC_CONT_LOW_PWR_4;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2203      	movs	r2, #3
 8002980:	701a      	strb	r2, [r3, #0]
        break;
 8002982:	e044      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_3:
        *val = IIS2DLPC_CONT_LOW_PWR_3;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2202      	movs	r2, #2
 8002988:	701a      	strb	r2, [r3, #0]
        break;
 800298a:	e040      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_2:
        *val = IIS2DLPC_CONT_LOW_PWR_2;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
        break;
 8002992:	e03c      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_12bit:
        *val = IIS2DLPC_CONT_LOW_PWR_12bit;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
        break;
 800299a:	e038      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_4:
        *val = IIS2DLPC_SINGLE_LOW_PWR_4;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	220b      	movs	r2, #11
 80029a0:	701a      	strb	r2, [r3, #0]
        break;
 80029a2:	e034      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_3:
        *val = IIS2DLPC_SINGLE_LOW_PWR_3;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	220a      	movs	r2, #10
 80029a8:	701a      	strb	r2, [r3, #0]
        break;
 80029aa:	e030      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_2:
        *val = IIS2DLPC_SINGLE_LOW_PWR_2;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2209      	movs	r2, #9
 80029b0:	701a      	strb	r2, [r3, #0]
        break;
 80029b2:	e02c      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_12bit:
        *val = IIS2DLPC_SINGLE_LOW_PWR_12bit;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2208      	movs	r2, #8
 80029b8:	701a      	strb	r2, [r3, #0]
        break;
 80029ba:	e028      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE:
        *val = IIS2DLPC_HIGH_PERFORMANCE_LOW_NOISE;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2214      	movs	r2, #20
 80029c0:	701a      	strb	r2, [r3, #0]
        break;
 80029c2:	e024      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_4;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2213      	movs	r2, #19
 80029c8:	701a      	strb	r2, [r3, #0]
        break;
 80029ca:	e020      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_3;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2212      	movs	r2, #18
 80029d0:	701a      	strb	r2, [r3, #0]
        break;
 80029d2:	e01c      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_2;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2211      	movs	r2, #17
 80029d8:	701a      	strb	r2, [r3, #0]
        break;
 80029da:	e018      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = IIS2DLPC_CONT_LOW_PWR_LOW_NOISE_12bit;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2210      	movs	r2, #16
 80029e0:	701a      	strb	r2, [r3, #0]
        break;
 80029e2:	e014      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_4;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	221b      	movs	r2, #27
 80029e8:	701a      	strb	r2, [r3, #0]
        break;
 80029ea:	e010      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_3;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	221a      	movs	r2, #26
 80029f0:	701a      	strb	r2, [r3, #0]
        break;
 80029f2:	e00c      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = IIS2DLPC_SINGLE_LOW_PWR_LOW_NOISE_2;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2219      	movs	r2, #25
 80029f8:	701a      	strb	r2, [r3, #0]
        break;
 80029fa:	e008      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      case IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = IIS2DLPC_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2218      	movs	r2, #24
 8002a00:	701a      	strb	r2, [r3, #0]
        break;
 8002a02:	e004      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>

      default:
        *val = IIS2DLPC_HIGH_PERFORMANCE;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2204      	movs	r2, #4
 8002a08:	701a      	strb	r2, [r3, #0]
        break;
 8002a0a:	e000      	b.n	8002a0e <iis2dlpc_power_mode_get+0x16a>
    }
  }
 8002a0c:	bf00      	nop

  return ret;
 8002a0e:	697b      	ldr	r3, [r7, #20]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <iis2dlpc_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_set(stmdev_ctx_t *ctx, iis2dlpc_odr_t val)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002a24:	f107 0210 	add.w	r2, r7, #16
 8002a28:	2301      	movs	r3, #1
 8002a2a:	2120      	movs	r1, #32
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff febb 	bl	80027a8 <iis2dlpc_read_reg>
 8002a32:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10f      	bne.n	8002a5a <iis2dlpc_data_rate_set+0x42>
    ctrl1.odr = (uint8_t) val;
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	7c3b      	ldrb	r3, [r7, #16]
 8002a44:	f362 1307 	bfi	r3, r2, #4, #4
 8002a48:	743b      	strb	r3, [r7, #16]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002a4a:	f107 0210 	add.w	r2, r7, #16
 8002a4e:	2301      	movs	r3, #1
 8002a50:	2120      	movs	r1, #32
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff fec0 	bl	80027d8 <iis2dlpc_write_reg>
 8002a58:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <iis2dlpc_data_rate_set+0x58>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8002a60:	f107 020c 	add.w	r2, r7, #12
 8002a64:	2301      	movs	r3, #1
 8002a66:	2122      	movs	r1, #34	; 0x22
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff fe9d 	bl	80027a8 <iis2dlpc_read_reg>
 8002a6e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0) {
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d110      	bne.n	8002a98 <iis2dlpc_data_rate_set+0x80>
    ctrl3.slp_mode = ( (uint8_t) val & 0x30U ) >> 4;
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	7b3b      	ldrb	r3, [r7, #12]
 8002a82:	f362 0301 	bfi	r3, r2, #0, #2
 8002a86:	733b      	strb	r3, [r7, #12]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8002a88:	f107 020c 	add.w	r2, r7, #12
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	2122      	movs	r1, #34	; 0x22
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff fea1 	bl	80027d8 <iis2dlpc_write_reg>
 8002a96:	6178      	str	r0, [r7, #20]

  else {
    ret = ret;
  }

  return ret;
 8002a98:	697b      	ldr	r3, [r7, #20]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <iis2dlpc_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_data_rate_get(stmdev_ctx_t *ctx, iis2dlpc_odr_t *val)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl1_t ctrl1;
  iis2dlpc_ctrl3_t ctrl3;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL1, (uint8_t *) &ctrl1, 1);
 8002aae:	f107 0210 	add.w	r2, r7, #16
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	2120      	movs	r1, #32
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff fe76 	bl	80027a8 <iis2dlpc_read_reg>
 8002abc:	6178      	str	r0, [r7, #20]

  if (ret == 0) {
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f040 8091 	bne.w	8002be8 <iis2dlpc_data_rate_get+0x144>
    ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL3, (uint8_t *) &ctrl3, 1);
 8002ac6:	f107 020c 	add.w	r2, r7, #12
 8002aca:	2301      	movs	r3, #1
 8002acc:	2122      	movs	r1, #34	; 0x22
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff fe6a 	bl	80027a8 <iis2dlpc_read_reg>
 8002ad4:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr) {
 8002ad6:	7b3b      	ldrb	r3, [r7, #12]
 8002ad8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	7c3a      	ldrb	r2, [r7, #16]
 8002ae2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	4413      	add	r3, r2
 8002aea:	2b22      	cmp	r3, #34	; 0x22
 8002aec:	d878      	bhi.n	8002be0 <iis2dlpc_data_rate_get+0x13c>
 8002aee:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <iis2dlpc_data_rate_get+0x50>)
 8002af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af4:	08002b81 	.word	0x08002b81
 8002af8:	08002b89 	.word	0x08002b89
 8002afc:	08002b91 	.word	0x08002b91
 8002b00:	08002b99 	.word	0x08002b99
 8002b04:	08002ba1 	.word	0x08002ba1
 8002b08:	08002ba9 	.word	0x08002ba9
 8002b0c:	08002bb1 	.word	0x08002bb1
 8002b10:	08002bb9 	.word	0x08002bb9
 8002b14:	08002bc1 	.word	0x08002bc1
 8002b18:	08002bc9 	.word	0x08002bc9
 8002b1c:	08002be1 	.word	0x08002be1
 8002b20:	08002be1 	.word	0x08002be1
 8002b24:	08002be1 	.word	0x08002be1
 8002b28:	08002be1 	.word	0x08002be1
 8002b2c:	08002be1 	.word	0x08002be1
 8002b30:	08002be1 	.word	0x08002be1
 8002b34:	08002be1 	.word	0x08002be1
 8002b38:	08002be1 	.word	0x08002be1
 8002b3c:	08002bd1 	.word	0x08002bd1
 8002b40:	08002be1 	.word	0x08002be1
 8002b44:	08002be1 	.word	0x08002be1
 8002b48:	08002be1 	.word	0x08002be1
 8002b4c:	08002be1 	.word	0x08002be1
 8002b50:	08002be1 	.word	0x08002be1
 8002b54:	08002be1 	.word	0x08002be1
 8002b58:	08002be1 	.word	0x08002be1
 8002b5c:	08002be1 	.word	0x08002be1
 8002b60:	08002be1 	.word	0x08002be1
 8002b64:	08002be1 	.word	0x08002be1
 8002b68:	08002be1 	.word	0x08002be1
 8002b6c:	08002be1 	.word	0x08002be1
 8002b70:	08002be1 	.word	0x08002be1
 8002b74:	08002be1 	.word	0x08002be1
 8002b78:	08002be1 	.word	0x08002be1
 8002b7c:	08002bd9 	.word	0x08002bd9
      case IIS2DLPC_XL_ODR_OFF:
        *val = IIS2DLPC_XL_ODR_OFF;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
        break;
 8002b86:	e030      	b.n	8002bea <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_1Hz6_LP_ONLY:
        *val = IIS2DLPC_XL_ODR_1Hz6_LP_ONLY;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
        break;
 8002b8e:	e02c      	b.n	8002bea <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_12Hz5:
        *val = IIS2DLPC_XL_ODR_12Hz5;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2202      	movs	r2, #2
 8002b94:	701a      	strb	r2, [r3, #0]
        break;
 8002b96:	e028      	b.n	8002bea <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_25Hz:
        *val = IIS2DLPC_XL_ODR_25Hz;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	701a      	strb	r2, [r3, #0]
        break;
 8002b9e:	e024      	b.n	8002bea <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_50Hz:
        *val = IIS2DLPC_XL_ODR_50Hz;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	701a      	strb	r2, [r3, #0]
        break;
 8002ba6:	e020      	b.n	8002bea <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_100Hz:
        *val = IIS2DLPC_XL_ODR_100Hz;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2205      	movs	r2, #5
 8002bac:	701a      	strb	r2, [r3, #0]
        break;
 8002bae:	e01c      	b.n	8002bea <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_200Hz:
        *val = IIS2DLPC_XL_ODR_200Hz;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2206      	movs	r2, #6
 8002bb4:	701a      	strb	r2, [r3, #0]
        break;
 8002bb6:	e018      	b.n	8002bea <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_400Hz:
        *val = IIS2DLPC_XL_ODR_400Hz;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2207      	movs	r2, #7
 8002bbc:	701a      	strb	r2, [r3, #0]
        break;
 8002bbe:	e014      	b.n	8002bea <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_800Hz:
        *val = IIS2DLPC_XL_ODR_800Hz;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2208      	movs	r2, #8
 8002bc4:	701a      	strb	r2, [r3, #0]
        break;
 8002bc6:	e010      	b.n	8002bea <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_ODR_1k6Hz:
        *val = IIS2DLPC_XL_ODR_1k6Hz;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2209      	movs	r2, #9
 8002bcc:	701a      	strb	r2, [r3, #0]
        break;
 8002bce:	e00c      	b.n	8002bea <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_SET_SW_TRIG:
        *val = IIS2DLPC_XL_SET_SW_TRIG;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2212      	movs	r2, #18
 8002bd4:	701a      	strb	r2, [r3, #0]
        break;
 8002bd6:	e008      	b.n	8002bea <iis2dlpc_data_rate_get+0x146>

      case IIS2DLPC_XL_SET_PIN_TRIG:
        *val = IIS2DLPC_XL_SET_PIN_TRIG;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2222      	movs	r2, #34	; 0x22
 8002bdc:	701a      	strb	r2, [r3, #0]
        break;
 8002bde:	e004      	b.n	8002bea <iis2dlpc_data_rate_get+0x146>

      default:
        *val = IIS2DLPC_XL_ODR_OFF;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
        break;
 8002be6:	e000      	b.n	8002bea <iis2dlpc_data_rate_get+0x146>
    }
  }
 8002be8:	bf00      	nop

  return ret;
 8002bea:	697b      	ldr	r3, [r7, #20]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <iis2dlpc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002c00:	f107 0208 	add.w	r2, r7, #8
 8002c04:	2301      	movs	r3, #1
 8002c06:	2121      	movs	r1, #33	; 0x21
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7ff fdcd 	bl	80027a8 <iis2dlpc_read_reg>
 8002c0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10f      	bne.n	8002c36 <iis2dlpc_block_data_update_set+0x42>
    reg.bdu = val;
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	7a3b      	ldrb	r3, [r7, #8]
 8002c20:	f362 03c3 	bfi	r3, r2, #3, #1
 8002c24:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002c26:	f107 0208 	add.w	r2, r7, #8
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	2121      	movs	r1, #33	; 0x21
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fdd2 	bl	80027d8 <iis2dlpc_write_reg>
 8002c34:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002c36:	68fb      	ldr	r3, [r7, #12]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <iis2dlpc_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_set(stmdev_ctx_t *ctx, iis2dlpc_fs_t val)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8002c4c:	f107 0208 	add.w	r2, r7, #8
 8002c50:	2301      	movs	r3, #1
 8002c52:	2125      	movs	r1, #37	; 0x25
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff fda7 	bl	80027a8 <iis2dlpc_read_reg>
 8002c5a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10f      	bne.n	8002c82 <iis2dlpc_full_scale_set+0x42>
    reg.fs = (uint8_t) val;
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	7a3b      	ldrb	r3, [r7, #8]
 8002c6c:	f362 1305 	bfi	r3, r2, #4, #2
 8002c70:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8002c72:	f107 0208 	add.w	r2, r7, #8
 8002c76:	2301      	movs	r3, #1
 8002c78:	2125      	movs	r1, #37	; 0x25
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff fdac 	bl	80027d8 <iis2dlpc_write_reg>
 8002c80:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002c82:	68fb      	ldr	r3, [r7, #12]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <iis2dlpc_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_full_scale_get(stmdev_ctx_t *ctx, iis2dlpc_fs_t *val)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  iis2dlpc_ctrl6_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL6, (uint8_t *) &reg, 1);
 8002c96:	f107 0208 	add.w	r2, r7, #8
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	2125      	movs	r1, #37	; 0x25
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff fd82 	bl	80027a8 <iis2dlpc_read_reg>
 8002ca4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs) {
 8002ca6:	7a3b      	ldrb	r3, [r7, #8]
 8002ca8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d81a      	bhi.n	8002ce8 <iis2dlpc_full_scale_get+0x5c>
 8002cb2:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <iis2dlpc_full_scale_get+0x2c>)
 8002cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb8:	08002cc9 	.word	0x08002cc9
 8002cbc:	08002cd1 	.word	0x08002cd1
 8002cc0:	08002cd9 	.word	0x08002cd9
 8002cc4:	08002ce1 	.word	0x08002ce1
    case IIS2DLPC_2g:
      *val = IIS2DLPC_2g;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
      break;
 8002cce:	e00f      	b.n	8002cf0 <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_4g:
      *val = IIS2DLPC_4g;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
      break;
 8002cd6:	e00b      	b.n	8002cf0 <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_8g:
      *val = IIS2DLPC_8g;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	701a      	strb	r2, [r3, #0]
      break;
 8002cde:	e007      	b.n	8002cf0 <iis2dlpc_full_scale_get+0x64>

    case IIS2DLPC_16g:
      *val = IIS2DLPC_16g;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	701a      	strb	r2, [r3, #0]
      break;
 8002ce6:	e003      	b.n	8002cf0 <iis2dlpc_full_scale_get+0x64>

    default:
      *val = IIS2DLPC_2g;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
      break;
 8002cee:	bf00      	nop
  }

  return ret;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop

08002cfc <iis2dlpc_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_OUT_X_L, buff, 6);
 8002d06:	f107 020c 	add.w	r2, r7, #12
 8002d0a:	2306      	movs	r3, #6
 8002d0c:	2128      	movs	r1, #40	; 0x28
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fd4a 	bl	80027a8 <iis2dlpc_read_reg>
 8002d14:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002d16:	7b7b      	ldrb	r3, [r7, #13]
 8002d18:	b21a      	sxth	r2, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	7b3b      	ldrb	r3, [r7, #12]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	b21a      	sxth	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	b212      	sxth	r2, r2
 8002d40:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	3302      	adds	r3, #2
 8002d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	7bbb      	ldrb	r3, [r7, #14]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	b212      	sxth	r2, r2
 8002d5e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002d60:	7c7a      	ldrb	r2, [r7, #17]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	3304      	adds	r3, #4
 8002d66:	b212      	sxth	r2, r2
 8002d68:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	7c3b      	ldrb	r3, [r7, #16]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	3304      	adds	r3, #4
 8002d84:	b212      	sxth	r2, r2
 8002d86:	801a      	strh	r2, [r3, #0]
  return ret;
 8002d88:	697b      	ldr	r3, [r7, #20]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <iis2dlpc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_WHO_AM_I, buff, 1);
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	210f      	movs	r1, #15
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff fd00 	bl	80027a8 <iis2dlpc_read_reg>
 8002da8:	60f8      	str	r0, [r7, #12]
  return ret;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <iis2dlpc_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_ctrl2_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002dc0:	f107 0208 	add.w	r2, r7, #8
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	2121      	movs	r1, #33	; 0x21
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff fced 	bl	80027a8 <iis2dlpc_read_reg>
 8002dce:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10f      	bne.n	8002df6 <iis2dlpc_auto_increment_set+0x42>
    reg.if_add_inc = val;
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	7a3b      	ldrb	r3, [r7, #8]
 8002de0:	f362 0382 	bfi	r3, r2, #2, #1
 8002de4:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_CTRL2, (uint8_t *) &reg, 1);
 8002de6:	f107 0208 	add.w	r2, r7, #8
 8002dea:	2301      	movs	r3, #1
 8002dec:	2121      	movs	r1, #33	; 0x21
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff fcf2 	bl	80027d8 <iis2dlpc_write_reg>
 8002df4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002df6:	68fb      	ldr	r3, [r7, #12]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <iis2dlpc_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dlpc_fifo_mode_set(stmdev_ctx_t *ctx,
                               iis2dlpc_fmode_t val)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	70fb      	strb	r3, [r7, #3]
  iis2dlpc_fifo_ctrl_t reg;
  int32_t ret;
  ret = iis2dlpc_read_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg, 1);
 8002e0c:	f107 0208 	add.w	r2, r7, #8
 8002e10:	2301      	movs	r3, #1
 8002e12:	212e      	movs	r1, #46	; 0x2e
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff fcc7 	bl	80027a8 <iis2dlpc_read_reg>
 8002e1a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10f      	bne.n	8002e42 <iis2dlpc_fifo_mode_set+0x42>
    reg.fmode = (uint8_t) val;
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	7a3b      	ldrb	r3, [r7, #8]
 8002e2c:	f362 1347 	bfi	r3, r2, #5, #3
 8002e30:	723b      	strb	r3, [r7, #8]
    ret = iis2dlpc_write_reg(ctx, IIS2DLPC_FIFO_CTRL, (uint8_t *) &reg,
 8002e32:	f107 0208 	add.w	r2, r7, #8
 8002e36:	2301      	movs	r3, #1
 8002e38:	212e      	movs	r1, #46	; 0x2e
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff fccc 	bl	80027d8 <iis2dlpc_write_reg>
 8002e40:	60f8      	str	r0, [r7, #12]
                             1);
  }

  return ret;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <IIS2MDC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	e04b      	b.n	8002f00 <IIS2MDC_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	7b1a      	ldrb	r2, [r3, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a1a      	ldr	r2, [pc, #104]	; (8002f0c <IIS2MDC_RegisterBusIO+0xc0>)
 8002ea4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <IIS2MDC_RegisterBusIO+0xc4>)
 8002eaa:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	e01e      	b.n	8002f00 <IIS2MDC_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4798      	blx	r3
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	e014      	b.n	8002f00 <IIS2MDC_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d010      	beq.n	8002f00 <IIS2MDC_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10b      	bne.n	8002f00 <IIS2MDC_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	331c      	adds	r3, #28
 8002eec:	2101      	movs	r1, #1
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fbc8 	bl	8003684 <iis2mdc_i2c_interface_set>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <IIS2MDC_RegisterBusIO+0xb4>
          {
            ret = IIS2MDC_ERROR;
 8002efa:	f04f 33ff 	mov.w	r3, #4294967295
 8002efe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002f00:	68fb      	ldr	r3, [r7, #12]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	08003307 	.word	0x08003307
 8002f10:	08003369 	.word	0x08003369

08002f14 <IIS2MDC_Init>:
 * @brief  Initialize the IIS2MDC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	331c      	adds	r3, #28
 8002f20:	2101      	movs	r1, #1
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fb06 	bl	8003534 <iis2mdc_block_data_update_set>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d002      	beq.n	8002f34 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f32:	e028      	b.n	8002f86 <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	331c      	adds	r3, #28
 8002f38:	2102      	movs	r1, #2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fa75 	bl	800342a <iis2mdc_operating_mode_set>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	e01c      	b.n	8002f86 <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	331c      	adds	r3, #28
 8002f50:	2103      	movs	r1, #3
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fa8f 	bl	8003476 <iis2mdc_data_rate_set>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f62:	e010      	b.n	8002f86 <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	331c      	adds	r3, #28
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fb64 	bl	8003638 <iis2mdc_self_test_set>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	e004      	b.n	8002f86 <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <IIS2MDC_DeInit>:
 * @brief  Deinitialize the IIS2MDC magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f874 	bl	8003084 <IIS2MDC_MAG_Disable>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d002      	beq.n	8002fa8 <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	e004      	b.n	8002fb2 <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <IIS2MDC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	331c      	adds	r3, #28
 8002fc8:	6839      	ldr	r1, [r7, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fb23 	bl	8003616 <iis2mdc_device_id_get>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 8002fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fda:	e000      	b.n	8002fde <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <IIS2MDC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
 * @retval Component status
 */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2201      	movs	r2, #1
 8003002:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2200      	movs	r2, #0
 8003008:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2200      	movs	r2, #0
 800300e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2232      	movs	r2, #50	; 0x32
 800301a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <IIS2MDC_GetCapabilities+0x58>)
 8003030:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	42c80000 	.word	0x42c80000

08003044 <IIS2MDC_MAG_Enable>:
 * @brief Enable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e010      	b.n	800307c <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	331c      	adds	r3, #28
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f000 f9e2 	bl	800342a <iis2mdc_operating_mode_set>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 800306c:	f04f 33ff 	mov.w	r3, #4294967295
 8003070:	e004      	b.n	800307c <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <IIS2MDC_MAG_Disable>:
 * @brief Disable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e010      	b.n	80030bc <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	331c      	adds	r3, #28
 800309e:	2102      	movs	r1, #2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 f9c2 	bl	800342a <iis2mdc_operating_mode_set>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 80030ac:	f04f 33ff 	mov.w	r3, #4294967295
 80030b0:	e004      	b.n	80030bc <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <IIS2MDC_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80030d4:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <IIS2MDC_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	331c      	adds	r3, #28
 80030f6:	f107 020b 	add.w	r2, r7, #11
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 f9e1 	bl	80034c4 <iis2mdc_data_rate_get>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 8003108:	f04f 33ff 	mov.w	r3, #4294967295
 800310c:	e023      	b.n	8003156 <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800310e:	7afb      	ldrb	r3, [r7, #11]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d81b      	bhi.n	800314c <IIS2MDC_MAG_GetOutputDataRate+0x68>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	0800312d 	.word	0x0800312d
 8003120:	08003135 	.word	0x08003135
 8003124:	0800313d 	.word	0x0800313d
 8003128:	08003145 	.word	0x08003145
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	4a0c      	ldr	r2, [pc, #48]	; (8003160 <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 8003130:	601a      	str	r2, [r3, #0]
      break;
 8003132:	e00f      	b.n	8003154 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4a0b      	ldr	r2, [pc, #44]	; (8003164 <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 8003138:	601a      	str	r2, [r3, #0]
      break;
 800313a:	e00b      	b.n	8003154 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 8003140:	601a      	str	r2, [r3, #0]
      break;
 8003142:	e007      	b.n	8003154 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	4a09      	ldr	r2, [pc, #36]	; (800316c <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 8003148:	601a      	str	r2, [r3, #0]
      break;
 800314a:	e003      	b.n	8003154 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 800314c:	f04f 33ff 	mov.w	r3, #4294967295
 8003150:	60fb      	str	r3, [r7, #12]
      break;
 8003152:	bf00      	nop
  }

  return ret;
 8003154:	68fb      	ldr	r3, [r7, #12]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	41200000 	.word	0x41200000
 8003164:	41a00000 	.word	0x41a00000
 8003168:	42480000 	.word	0x42480000
 800316c:	42c80000 	.word	0x42c80000

08003170 <IIS2MDC_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 800317c:	edd7 7a00 	vldr	s15, [r7]
 8003180:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318c:	d801      	bhi.n	8003192 <IIS2MDC_MAG_SetOutputDataRate+0x22>
 800318e:	2300      	movs	r3, #0
 8003190:	e016      	b.n	80031c0 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8003192:	edd7 7a00 	vldr	s15, [r7]
 8003196:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800319a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800319e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a2:	d801      	bhi.n	80031a8 <IIS2MDC_MAG_SetOutputDataRate+0x38>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e00b      	b.n	80031c0 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 80031a8:	edd7 7a00 	vldr	s15, [r7]
 80031ac:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80031e8 <IIS2MDC_MAG_SetOutputDataRate+0x78>
 80031b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b8:	d801      	bhi.n	80031be <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e000      	b.n	80031c0 <IIS2MDC_MAG_SetOutputDataRate+0x50>
 80031be:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 80031c0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	331c      	adds	r3, #28
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f953 	bl	8003476 <iis2mdc_data_rate_set>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	e000      	b.n	80031de <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	42480000 	.word	0x42480000

080031ec <IIS2MDC_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2232      	movs	r2, #50	; 0x32
 80031fa:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <IIS2MDC_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <IIS2MDC_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	331c      	adds	r3, #28
 8003230:	f107 0208 	add.w	r2, r7, #8
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f9a2 	bl	8003580 <iis2mdc_magnetic_raw_get>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 8003242:	f04f 33ff 	mov.w	r3, #4294967295
 8003246:	e00c      	b.n	8003262 <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003248:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003250:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003258:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b086      	sub	sp, #24
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	331c      	adds	r3, #28
 8003278:	f107 0210 	add.w	r2, r7, #16
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f97e 	bl	8003580 <iis2mdc_magnetic_raw_get>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 800328a:	f04f 33ff 	mov.w	r3, #4294967295
 800328e:	e036      	b.n	80032fe <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 8003290:	f107 030c 	add.w	r3, r7, #12
 8003294:	4619      	mov	r1, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ff14 	bl	80030c4 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800329c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80032ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032b4:	ee17 2a90 	vmov	r2, s15
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80032bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80032c0:	ee07 3a90 	vmov	s15, r3
 80032c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80032cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032d4:	ee17 2a90 	vmov	r2, s15
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80032dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80032e0:	ee07 3a90 	vmov	s15, r3
 80032e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80032ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032f4:	ee17 2a90 	vmov	r2, s15
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003306:	b590      	push	{r4, r7, lr}
 8003308:	b087      	sub	sp, #28
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	607a      	str	r2, [r7, #4]
 8003310:	461a      	mov	r2, r3
 8003312:	460b      	mov	r3, r1
 8003314:	72fb      	strb	r3, [r7, #11]
 8003316:	4613      	mov	r3, r2
 8003318:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10e      	bne.n	8003344 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	695c      	ldr	r4, [r3, #20]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	7b1b      	ldrb	r3, [r3, #12]
 800332e:	b298      	uxth	r0, r3
 8003330:	7afb      	ldrb	r3, [r7, #11]
 8003332:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003336:	b2db      	uxtb	r3, r3
 8003338:	b299      	uxth	r1, r3
 800333a:	893b      	ldrh	r3, [r7, #8]
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	47a0      	blx	r4
 8003340:	4603      	mov	r3, r0
 8003342:	e00d      	b.n	8003360 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	695c      	ldr	r4, [r3, #20]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	7b1b      	ldrb	r3, [r3, #12]
 800334c:	b298      	uxth	r0, r3
 800334e:	7afb      	ldrb	r3, [r7, #11]
 8003350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003354:	b2db      	uxtb	r3, r3
 8003356:	b299      	uxth	r1, r3
 8003358:	893b      	ldrh	r3, [r7, #8]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	47a0      	blx	r4
 800335e:	4603      	mov	r3, r0
  }
}
 8003360:	4618      	mov	r0, r3
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	bd90      	pop	{r4, r7, pc}

08003368 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	461a      	mov	r2, r3
 8003374:	460b      	mov	r3, r1
 8003376:	72fb      	strb	r3, [r7, #11]
 8003378:	4613      	mov	r3, r2
 800337a:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10e      	bne.n	80033a6 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	691c      	ldr	r4, [r3, #16]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	7b1b      	ldrb	r3, [r3, #12]
 8003390:	b298      	uxth	r0, r3
 8003392:	7afb      	ldrb	r3, [r7, #11]
 8003394:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003398:	b2db      	uxtb	r3, r3
 800339a:	b299      	uxth	r1, r3
 800339c:	893b      	ldrh	r3, [r7, #8]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	47a0      	blx	r4
 80033a2:	4603      	mov	r3, r0
 80033a4:	e00d      	b.n	80033c2 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	691c      	ldr	r4, [r3, #16]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	7b1b      	ldrb	r3, [r3, #12]
 80033ae:	b298      	uxth	r0, r3
 80033b0:	7afb      	ldrb	r3, [r7, #11]
 80033b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	b299      	uxth	r1, r3
 80033ba:	893b      	ldrh	r3, [r7, #8]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	47a0      	blx	r4
 80033c0:	4603      	mov	r3, r0
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd90      	pop	{r4, r7, pc}

080033ca <iis2mdc_read_reg>:
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80033ca:	b590      	push	{r4, r7, lr}
 80033cc:	b087      	sub	sp, #28
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	607a      	str	r2, [r7, #4]
 80033d4:	461a      	mov	r2, r3
 80033d6:	460b      	mov	r3, r1
 80033d8:	72fb      	strb	r3, [r7, #11]
 80033da:	4613      	mov	r3, r2
 80033dc:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685c      	ldr	r4, [r3, #4]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6898      	ldr	r0, [r3, #8]
 80033e6:	893b      	ldrh	r3, [r7, #8]
 80033e8:	7af9      	ldrb	r1, [r7, #11]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	47a0      	blx	r4
 80033ee:	6178      	str	r0, [r7, #20]
  return ret;
 80033f0:	697b      	ldr	r3, [r7, #20]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd90      	pop	{r4, r7, pc}

080033fa <iis2mdc_write_reg>:
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80033fa:	b590      	push	{r4, r7, lr}
 80033fc:	b087      	sub	sp, #28
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	461a      	mov	r2, r3
 8003406:	460b      	mov	r3, r1
 8003408:	72fb      	strb	r3, [r7, #11]
 800340a:	4613      	mov	r3, r2
 800340c:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681c      	ldr	r4, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6898      	ldr	r0, [r3, #8]
 8003416:	893b      	ldrh	r3, [r7, #8]
 8003418:	7af9      	ldrb	r1, [r7, #11]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	47a0      	blx	r4
 800341e:	6178      	str	r0, [r7, #20]
  return ret;
 8003420:	697b      	ldr	r3, [r7, #20]
}
 8003422:	4618      	mov	r0, r3
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	bd90      	pop	{r4, r7, pc}

0800342a <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b084      	sub	sp, #16
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003436:	f107 0208 	add.w	r2, r7, #8
 800343a:	2301      	movs	r3, #1
 800343c:	2160      	movs	r1, #96	; 0x60
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ffc3 	bl	80033ca <iis2mdc_read_reg>
 8003444:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10f      	bne.n	800346c <iis2mdc_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	b2da      	uxtb	r2, r3
 8003454:	7a3b      	ldrb	r3, [r7, #8]
 8003456:	f362 0301 	bfi	r3, r2, #0, #2
 800345a:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800345c:	f107 0208 	add.w	r2, r7, #8
 8003460:	2301      	movs	r3, #1
 8003462:	2160      	movs	r1, #96	; 0x60
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ffc8 	bl	80033fa <iis2mdc_write_reg>
 800346a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800346c:	68fb      	ldr	r3, [r7, #12]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	460b      	mov	r3, r1
 8003480:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8003482:	f107 0208 	add.w	r2, r7, #8
 8003486:	2301      	movs	r3, #1
 8003488:	2160      	movs	r1, #96	; 0x60
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff ff9d 	bl	80033ca <iis2mdc_read_reg>
 8003490:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10f      	bne.n	80034b8 <iis2mdc_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	7a3b      	ldrb	r3, [r7, #8]
 80034a2:	f362 0383 	bfi	r3, r2, #2, #2
 80034a6:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80034a8:	f107 0208 	add.w	r2, r7, #8
 80034ac:	2301      	movs	r3, #1
 80034ae:	2160      	movs	r1, #96	; 0x60
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ffa2 	bl	80033fa <iis2mdc_write_reg>
 80034b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80034b8:	68fb      	ldr	r3, [r7, #12]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80034ce:	f107 0208 	add.w	r2, r7, #8
 80034d2:	2301      	movs	r3, #1
 80034d4:	2160      	movs	r1, #96	; 0x60
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff ff77 	bl	80033ca <iis2mdc_read_reg>
 80034dc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 80034de:	7a3b      	ldrb	r3, [r7, #8]
 80034e0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d81a      	bhi.n	8003520 <iis2mdc_data_rate_get+0x5c>
 80034ea:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <iis2mdc_data_rate_get+0x2c>)
 80034ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f0:	08003501 	.word	0x08003501
 80034f4:	08003509 	.word	0x08003509
 80034f8:	08003511 	.word	0x08003511
 80034fc:	08003519 	.word	0x08003519
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
      break;
 8003506:	e00f      	b.n	8003528 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2201      	movs	r2, #1
 800350c:	701a      	strb	r2, [r3, #0]
      break;
 800350e:	e00b      	b.n	8003528 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2202      	movs	r2, #2
 8003514:	701a      	strb	r2, [r3, #0]
      break;
 8003516:	e007      	b.n	8003528 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2203      	movs	r2, #3
 800351c:	701a      	strb	r2, [r3, #0]
      break;
 800351e:	e003      	b.n	8003528 <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
      break;
 8003526:	bf00      	nop
  }

  return ret;
 8003528:	68fb      	ldr	r3, [r7, #12]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop

08003534 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003540:	f107 0208 	add.w	r2, r7, #8
 8003544:	2301      	movs	r3, #1
 8003546:	2162      	movs	r1, #98	; 0x62
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff ff3e 	bl	80033ca <iis2mdc_read_reg>
 800354e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <iis2mdc_block_data_update_set+0x42>
    reg.bdu = val;
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	b2da      	uxtb	r2, r3
 800355e:	7a3b      	ldrb	r3, [r7, #8]
 8003560:	f362 1304 	bfi	r3, r2, #4, #1
 8003564:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003566:	f107 0208 	add.w	r2, r7, #8
 800356a:	2301      	movs	r3, #1
 800356c:	2162      	movs	r1, #98	; 0x62
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff ff43 	bl	80033fa <iis2mdc_write_reg>
 8003574:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003576:	68fb      	ldr	r3, [r7, #12]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 800358a:	f107 020c 	add.w	r2, r7, #12
 800358e:	2306      	movs	r3, #6
 8003590:	2168      	movs	r1, #104	; 0x68
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ff19 	bl	80033ca <iis2mdc_read_reg>
 8003598:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800359a:	7b7b      	ldrb	r3, [r7, #13]
 800359c:	b21a      	sxth	r2, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	7b3b      	ldrb	r3, [r7, #12]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	b21a      	sxth	r2, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	3302      	adds	r3, #2
 80035c2:	b212      	sxth	r2, r2
 80035c4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	3302      	adds	r3, #2
 80035ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	7bbb      	ldrb	r3, [r7, #14]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	4413      	add	r3, r2
 80035da:	b29a      	uxth	r2, r3
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	3302      	adds	r3, #2
 80035e0:	b212      	sxth	r2, r2
 80035e2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80035e4:	7c7a      	ldrb	r2, [r7, #17]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	3304      	adds	r3, #4
 80035ea:	b212      	sxth	r2, r2
 80035ec:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	3304      	adds	r3, #4
 80035f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	021b      	lsls	r3, r3, #8
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	7c3b      	ldrb	r3, [r7, #16]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	4413      	add	r3, r2
 8003602:	b29a      	uxth	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	3304      	adds	r3, #4
 8003608:	b212      	sxth	r2, r2
 800360a:	801a      	strh	r2, [r3, #0]
  return ret;
 800360c:	697b      	ldr	r3, [r7, #20]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8003620:	2301      	movs	r3, #1
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	214f      	movs	r1, #79	; 0x4f
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff fecf 	bl	80033ca <iis2mdc_read_reg>
 800362c:	60f8      	str	r0, [r7, #12]
  return ret;
 800362e:	68fb      	ldr	r3, [r7, #12]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003644:	f107 0208 	add.w	r2, r7, #8
 8003648:	2301      	movs	r3, #1
 800364a:	2162      	movs	r1, #98	; 0x62
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff febc 	bl	80033ca <iis2mdc_read_reg>
 8003652:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <iis2mdc_self_test_set+0x42>
    reg.self_test = val;
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	b2da      	uxtb	r2, r3
 8003662:	7a3b      	ldrb	r3, [r7, #8]
 8003664:	f362 0341 	bfi	r3, r2, #1, #1
 8003668:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800366a:	f107 0208 	add.w	r2, r7, #8
 800366e:	2301      	movs	r3, #1
 8003670:	2162      	movs	r1, #98	; 0x62
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7ff fec1 	bl	80033fa <iis2mdc_write_reg>
 8003678:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800367a:	68fb      	ldr	r3, [r7, #12]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8003690:	f107 0208 	add.w	r2, r7, #8
 8003694:	2301      	movs	r3, #1
 8003696:	2162      	movs	r1, #98	; 0x62
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff fe96 	bl	80033ca <iis2mdc_read_reg>
 800369e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10f      	bne.n	80036c6 <iis2mdc_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	7a3b      	ldrb	r3, [r7, #8]
 80036b0:	f362 1345 	bfi	r3, r2, #5, #1
 80036b4:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 80036b6:	f107 0208 	add.w	r2, r7, #8
 80036ba:	2301      	movs	r3, #1
 80036bc:	2162      	movs	r1, #98	; 0x62
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff fe9b 	bl	80033fa <iis2mdc_write_reg>
 80036c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80036c6:	68fb      	ldr	r3, [r7, #12]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <ISM330DHCX_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d103      	bne.n	80036ec <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 80036e4:	f04f 33ff 	mov.w	r3, #4294967295
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e04d      	b.n	8003788 <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	7b1a      	ldrb	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	699a      	ldr	r2, [r3, #24]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a1b      	ldr	r2, [pc, #108]	; (8003794 <ISM330DHCX_RegisterBusIO+0xc4>)
 8003728:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a1a      	ldr	r2, [pc, #104]	; (8003798 <ISM330DHCX_RegisterBusIO+0xc8>)
 800372e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d103      	bne.n	8003746 <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 800373e:	f04f 33ff 	mov.w	r3, #4294967295
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e020      	b.n	8003788 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4798      	blx	r3
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e016      	b.n	8003788 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d112      	bne.n	8003788 <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10d      	bne.n	8003788 <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800376c:	230c      	movs	r3, #12
 800376e:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8003770:	7afb      	ldrb	r3, [r7, #11]
 8003772:	461a      	mov	r2, r3
 8003774:	2112      	movs	r1, #18
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fd61 	bl	800423e <ISM330DHCX_Write_Reg>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 8003782:	f04f 33ff 	mov.w	r3, #4294967295
 8003786:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003788:	68fb      	ldr	r3, [r7, #12]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	080046ad 	.word	0x080046ad
 8003798:	080046e3 	.word	0x080046e3

0800379c <ISM330DHCX_Init>:
 * @brief  Initialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Set DEVICE_CONF bit */
  if (ism330dhcx_device_conf_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	331c      	adds	r3, #28
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fd20 	bl	80051f0 <ism330dhcx_device_conf_set>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	e078      	b.n	80038ae <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	331c      	adds	r3, #28
 80037c0:	2101      	movs	r1, #1
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 fd97 	bl	80052f6 <ism330dhcx_auto_increment_set>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	e06c      	b.n	80038ae <ISM330DHCX_Init+0x112>
  }

    /* SW reset */
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	331c      	adds	r3, #28
 80037d8:	2101      	movs	r1, #1
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 fd65 	bl	80052aa <ism330dhcx_reset_set>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 80037e6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ea:	e060      	b.n	80038ae <ISM330DHCX_Init+0x112>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	331c      	adds	r3, #28
 80037f0:	2101      	movs	r1, #1
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 fd7f 	bl	80052f6 <ism330dhcx_auto_increment_set>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003802:	e054      	b.n	80038ae <ISM330DHCX_Init+0x112>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	331c      	adds	r3, #28
 8003808:	2101      	movs	r1, #1
 800380a:	4618      	mov	r0, r3
 800380c:	f001 fc34 	bl	8005078 <ism330dhcx_block_data_update_set>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 8003816:	f04f 33ff 	mov.w	r3, #4294967295
 800381a:	e048      	b.n	80038ae <ISM330DHCX_Init+0x112>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	331c      	adds	r3, #28
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f001 fd8d 	bl	8005342 <ism330dhcx_fifo_mode_set>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <ISM330DHCX_Init+0x98>
  {
    return ISM330DHCX_ERROR;
 800382e:	f04f 33ff 	mov.w	r3, #4294967295
 8003832:	e03c      	b.n	80038ae <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2204      	movs	r2, #4
 8003838:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	331c      	adds	r3, #28
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fff6 	bl	8004834 <ism330dhcx_xl_data_rate_set>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
 8003852:	e02c      	b.n	80038ae <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	331c      	adds	r3, #28
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f000 ff8c 	bl	8004778 <ism330dhcx_xl_full_scale_set>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <ISM330DHCX_Init+0xd0>
  {
    return ISM330DHCX_ERROR;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	e020      	b.n	80038ae <ISM330DHCX_Init+0x112>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2204      	movs	r2, #4
 8003870:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	331c      	adds	r3, #28
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f001 fa2a 	bl	8004cd4 <ism330dhcx_gy_data_rate_set>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 8003886:	f04f 33ff 	mov.w	r3, #4294967295
 800388a:	e010      	b.n	80038ae <ISM330DHCX_Init+0x112>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	331c      	adds	r3, #28
 8003890:	210c      	movs	r1, #12
 8003892:	4618      	mov	r0, r3
 8003894:	f001 f9a6 	bl	8004be4 <ism330dhcx_gy_full_scale_set>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <ISM330DHCX_Init+0x108>
  {
    return ISM330DHCX_ERROR;
 800389e:	f04f 33ff 	mov.w	r3, #4294967295
 80038a2:	e004      	b.n	80038ae <ISM330DHCX_Init+0x112>
  }

  pObj->is_initialized = 1;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <ISM330DHCX_DeInit>:
 * @brief  Deinitialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f888 	bl	80039d4 <ISM330DHCX_ACC_Disable>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295
 80038ce:	e015      	b.n	80038fc <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fa92 	bl	8003dfa <ISM330DHCX_GYRO_Disable>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 80038dc:	f04f 33ff 	mov.w	r3, #4294967295
 80038e0:	e00c      	b.n	80038fc <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <ISM330DHCX_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	331c      	adds	r3, #28
 8003912:	6839      	ldr	r1, [r7, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f001 fcb7 	bl	8005288 <ism330dhcx_device_id_get>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 8003920:	f04f 33ff 	mov.w	r3, #4294967295
 8003924:	e000      	b.n	8003928 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2201      	movs	r2, #1
 8003944:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2200      	movs	r2, #0
 800394a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003958:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2210      	movs	r2, #16
 800395e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2200      	movs	r2, #0
 8003964:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	4a07      	ldr	r2, [pc, #28]	; (8003988 <ISM330DHCX_GetCapabilities+0x58>)
 800396a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4a06      	ldr	r2, [pc, #24]	; (8003988 <ISM330DHCX_GetCapabilities+0x58>)
 8003970:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	45d05800 	.word	0x45d05800

0800398c <ISM330DHCX_ACC_Enable>:
 * @brief  Enable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	e014      	b.n	80039cc <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f103 021c 	add.w	r2, r3, #28
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f000 ff3f 	bl	8004834 <ism330dhcx_xl_data_rate_set>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 80039bc:	f04f 33ff 	mov.w	r3, #4294967295
 80039c0:	e004      	b.n	80039cc <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <ISM330DHCX_ACC_Disable>:
 * @brief  Disable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e01f      	b.n	8003a2a <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f103 021c 	add.w	r2, r3, #28
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	332b      	adds	r3, #43	; 0x2b
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f001 f88c 	bl	8004b14 <ism330dhcx_xl_data_rate_get>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8003a02:	f04f 33ff 	mov.w	r3, #4294967295
 8003a06:	e010      	b.n	8003a2a <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	331c      	adds	r3, #28
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 ff10 	bl	8004834 <ism330dhcx_xl_data_rate_set>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1e:	e004      	b.n	8003a2a <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <ISM330DHCX_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	331c      	adds	r3, #28
 8003a46:	f107 020b 	add.w	r2, r7, #11
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 feb9 	bl	80047c4 <ism330dhcx_xl_full_scale_get>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003a58:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5c:	e023      	b.n	8003aa6 <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8003a5e:	7afb      	ldrb	r3, [r7, #11]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d81b      	bhi.n	8003a9c <ISM330DHCX_ACC_GetSensitivity+0x68>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <ISM330DHCX_ACC_GetSensitivity+0x38>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003a85 	.word	0x08003a85
 8003a78:	08003a8d 	.word	0x08003a8d
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	4a0c      	ldr	r2, [pc, #48]	; (8003ab0 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8003a80:	601a      	str	r2, [r3, #0]
      break;
 8003a82:	e00f      	b.n	8003aa4 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	4a0b      	ldr	r2, [pc, #44]	; (8003ab4 <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8003a88:	601a      	str	r2, [r3, #0]
      break;
 8003a8a:	e00b      	b.n	8003aa4 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8003a90:	601a      	str	r2, [r3, #0]
      break;
 8003a92:	e007      	b.n	8003aa4 <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	4a09      	ldr	r2, [pc, #36]	; (8003abc <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8003a98:	601a      	str	r2, [r3, #0]
      break;
 8003a9a:	e003      	b.n	8003aa4 <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8003a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa0:	60fb      	str	r3, [r7, #12]
      break;
 8003aa2:	bf00      	nop
  }

  return ret;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	3d79db23 	.word	0x3d79db23
 8003ab4:	3df9db23 	.word	0x3df9db23
 8003ab8:	3e79db23 	.word	0x3e79db23
 8003abc:	3ef9db23 	.word	0x3ef9db23

08003ac0 <ISM330DHCX_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	331c      	adds	r3, #28
 8003ad2:	f107 020b 	add.w	r2, r7, #11
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 f81b 	bl	8004b14 <ism330dhcx_xl_data_rate_get>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae8:	e04e      	b.n	8003b88 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003aea:	7afb      	ldrb	r3, [r7, #11]
 8003aec:	2b0a      	cmp	r3, #10
 8003aee:	d846      	bhi.n	8003b7e <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b25 	.word	0x08003b25
 8003afc:	08003b2f 	.word	0x08003b2f
 8003b00:	08003b37 	.word	0x08003b37
 8003b04:	08003b3f 	.word	0x08003b3f
 8003b08:	08003b47 	.word	0x08003b47
 8003b0c:	08003b4f 	.word	0x08003b4f
 8003b10:	08003b57 	.word	0x08003b57
 8003b14:	08003b5f 	.word	0x08003b5f
 8003b18:	08003b67 	.word	0x08003b67
 8003b1c:	08003b6f 	.word	0x08003b6f
 8003b20:	08003b77 	.word	0x08003b77
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
      break;
 8003b2c:	e02b      	b.n	8003b86 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 8003b32:	601a      	str	r2, [r3, #0]
      break;
 8003b34:	e027      	b.n	8003b86 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	4a16      	ldr	r2, [pc, #88]	; (8003b94 <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 8003b3a:	601a      	str	r2, [r3, #0]
      break;
 8003b3c:	e023      	b.n	8003b86 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	4a15      	ldr	r2, [pc, #84]	; (8003b98 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 8003b42:	601a      	str	r2, [r3, #0]
      break;
 8003b44:	e01f      	b.n	8003b86 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	4a14      	ldr	r2, [pc, #80]	; (8003b9c <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 8003b4a:	601a      	str	r2, [r3, #0]
      break;
 8003b4c:	e01b      	b.n	8003b86 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 8003b52:	601a      	str	r2, [r3, #0]
      break;
 8003b54:	e017      	b.n	8003b86 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_417Hz:
      *Odr = 417.0f;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	4a12      	ldr	r2, [pc, #72]	; (8003ba4 <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 8003b5a:	601a      	str	r2, [r3, #0]
      break;
 8003b5c:	e013      	b.n	8003b86 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	4a11      	ldr	r2, [pc, #68]	; (8003ba8 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 8003b62:	601a      	str	r2, [r3, #0]
      break;
 8003b64:	e00f      	b.n	8003b86 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	4a10      	ldr	r2, [pc, #64]	; (8003bac <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 8003b6a:	601a      	str	r2, [r3, #0]
      break;
 8003b6c:	e00b      	b.n	8003b86 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	4a0f      	ldr	r2, [pc, #60]	; (8003bb0 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 8003b72:	601a      	str	r2, [r3, #0]
      break;
 8003b74:	e007      	b.n	8003b86 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	4a0e      	ldr	r2, [pc, #56]	; (8003bb4 <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 8003b7a:	601a      	str	r2, [r3, #0]
      break;
 8003b7c:	e003      	b.n	8003b86 <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8003b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b82:	60fb      	str	r3, [r7, #12]
      break;
 8003b84:	bf00      	nop
  }

  return ret;
 8003b86:	68fb      	ldr	r3, [r7, #12]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	41480000 	.word	0x41480000
 8003b94:	41d00000 	.word	0x41d00000
 8003b98:	42500000 	.word	0x42500000
 8003b9c:	42d00000 	.word	0x42d00000
 8003ba0:	43500000 	.word	0x43500000
 8003ba4:	43d08000 	.word	0x43d08000
 8003ba8:	44504000 	.word	0x44504000
 8003bac:	44d06000 	.word	0x44d06000
 8003bb0:	45505000 	.word	0x45505000
 8003bb4:	45d05800 	.word	0x45d05800

08003bb8 <ISM330DHCX_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d106      	bne.n	8003bdc <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8003bce:	ed97 0a00 	vldr	s0, [r7]
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fb4e 	bl	8004274 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	e005      	b.n	8003be8 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8003bdc:	ed97 0a00 	vldr	s0, [r7]
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fbd3 	bl	800438c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 8003be6:	4603      	mov	r3, r0
  }
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <ISM330DHCX_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	331c      	adds	r3, #28
 8003c02:	f107 020b 	add.w	r2, r7, #11
 8003c06:	4611      	mov	r1, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fddb 	bl	80047c4 <ism330dhcx_xl_full_scale_get>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003c14:	f04f 33ff 	mov.w	r3, #4294967295
 8003c18:	e023      	b.n	8003c62 <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8003c1a:	7afb      	ldrb	r3, [r7, #11]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d81b      	bhi.n	8003c58 <ISM330DHCX_ACC_GetFullScale+0x68>
 8003c20:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <ISM330DHCX_ACC_GetFullScale+0x38>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c39 	.word	0x08003c39
 8003c2c:	08003c51 	.word	0x08003c51
 8003c30:	08003c41 	.word	0x08003c41
 8003c34:	08003c49 	.word	0x08003c49
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	601a      	str	r2, [r3, #0]
      break;
 8003c3e:	e00f      	b.n	8003c60 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2204      	movs	r2, #4
 8003c44:	601a      	str	r2, [r3, #0]
      break;
 8003c46:	e00b      	b.n	8003c60 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2208      	movs	r2, #8
 8003c4c:	601a      	str	r2, [r3, #0]
      break;
 8003c4e:	e007      	b.n	8003c60 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2210      	movs	r2, #16
 8003c54:	601a      	str	r2, [r3, #0]
      break;
 8003c56:	e003      	b.n	8003c60 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5c:	60fb      	str	r3, [r7, #12]
      break;
 8003c5e:	bf00      	nop
  }

  return ret;
 8003c60:	68fb      	ldr	r3, [r7, #12]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop

08003c6c <ISM330DHCX_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	dd0b      	ble.n	8003c94 <ISM330DHCX_ACC_SetFullScale+0x28>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	dd06      	ble.n	8003c90 <ISM330DHCX_ACC_SetFullScale+0x24>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	dc01      	bgt.n	8003c8c <ISM330DHCX_ACC_SetFullScale+0x20>
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e004      	b.n	8003c96 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e002      	b.n	8003c96 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e000      	b.n	8003c96 <ISM330DHCX_ACC_SetFullScale+0x2a>
 8003c94:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 8003c96:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	331c      	adds	r3, #28
 8003c9c:	7bfa      	ldrb	r2, [r7, #15]
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fd69 	bl	8004778 <ism330dhcx_xl_full_scale_set>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8003cac:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb0:	e000      	b.n	8003cb4 <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <ISM330DHCX_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	331c      	adds	r3, #28
 8003cca:	f107 0208 	add.w	r2, r7, #8
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 fa42 	bl	800515a <ism330dhcx_acceleration_raw_get>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8003cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce0:	e00c      	b.n	8003cfc <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003ce2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003cea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003cf2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <ISM330DHCX_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	331c      	adds	r3, #28
 8003d18:	f107 0210 	add.w	r2, r7, #16
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 fa1b 	bl	800515a <ism330dhcx_acceleration_raw_get>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	e03c      	b.n	8003daa <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	4619      	mov	r1, r3
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff fe7c 	bl	8003a34 <ISM330DHCX_ACC_GetSensitivity>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 8003d42:	f04f 33ff 	mov.w	r3, #4294967295
 8003d46:	e030      	b.n	8003daa <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003d48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d60:	ee17 2a90 	vmov	r2, s15
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003d68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d6c:	ee07 3a90 	vmov	s15, r3
 8003d70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d74:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d80:	ee17 2a90 	vmov	r2, s15
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003d88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d8c:	ee07 3a90 	vmov	s15, r3
 8003d90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d94:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003da0:	ee17 2a90 	vmov	r2, s15
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <ISM330DHCX_GYRO_Enable>:
 * @brief  Enable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e014      	b.n	8003df2 <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f103 021c 	add.w	r2, r3, #28
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	f000 ff7c 	bl	8004cd4 <ism330dhcx_gy_data_rate_set>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
 8003de6:	e004      	b.n	8003df2 <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <ISM330DHCX_GYRO_Disable>:
 * @brief  Disable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e01f      	b.n	8003e50 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f103 021c 	add.w	r2, r3, #28
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	332c      	adds	r3, #44	; 0x2c
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f001 f8c9 	bl	8004fb4 <ism330dhcx_gy_data_rate_get>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 8003e28:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2c:	e010      	b.n	8003e50 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	331c      	adds	r3, #28
 8003e32:	2100      	movs	r1, #0
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 ff4d 	bl	8004cd4 <ism330dhcx_gy_data_rate_set>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8003e40:	f04f 33ff 	mov.w	r3, #4294967295
 8003e44:	e004      	b.n	8003e50 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <ISM330DHCX_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	331c      	adds	r3, #28
 8003e6a:	f107 020b 	add.w	r2, r7, #11
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fedd 	bl	8004c30 <ism330dhcx_gy_full_scale_get>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e80:	e039      	b.n	8003ef6 <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8003e82:	7afb      	ldrb	r3, [r7, #11]
 8003e84:	2b0c      	cmp	r3, #12
 8003e86:	d831      	bhi.n	8003eec <ISM330DHCX_GYRO_GetSensitivity+0x94>
 8003e88:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8003e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8e:	bf00      	nop
 8003e90:	08003ecd 	.word	0x08003ecd
 8003e94:	08003eed 	.word	0x08003eed
 8003e98:	08003ec5 	.word	0x08003ec5
 8003e9c:	08003eed 	.word	0x08003eed
 8003ea0:	08003ed5 	.word	0x08003ed5
 8003ea4:	08003eed 	.word	0x08003eed
 8003ea8:	08003eed 	.word	0x08003eed
 8003eac:	08003eed 	.word	0x08003eed
 8003eb0:	08003edd 	.word	0x08003edd
 8003eb4:	08003eed 	.word	0x08003eed
 8003eb8:	08003eed 	.word	0x08003eed
 8003ebc:	08003eed 	.word	0x08003eed
 8003ec0:	08003ee5 	.word	0x08003ee5
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4a0e      	ldr	r2, [pc, #56]	; (8003f00 <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 8003ec8:	601a      	str	r2, [r3, #0]
      break;
 8003eca:	e013      	b.n	8003ef4 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	4a0d      	ldr	r2, [pc, #52]	; (8003f04 <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 8003ed0:	601a      	str	r2, [r3, #0]
      break;
 8003ed2:	e00f      	b.n	8003ef4 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4a0c      	ldr	r2, [pc, #48]	; (8003f08 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8003ed8:	601a      	str	r2, [r3, #0]
      break;
 8003eda:	e00b      	b.n	8003ef4 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	4a0b      	ldr	r2, [pc, #44]	; (8003f0c <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8003ee0:	601a      	str	r2, [r3, #0]
      break;
 8003ee2:	e007      	b.n	8003ef4 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8003ee8:	601a      	str	r2, [r3, #0]
      break;
 8003eea:	e003      	b.n	8003ef4 <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 8003eec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef0:	60fb      	str	r3, [r7, #12]
      break;
 8003ef2:	bf00      	nop
  }

  return ret;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	408c0000 	.word	0x408c0000
 8003f04:	410c0000 	.word	0x410c0000
 8003f08:	418c0000 	.word	0x418c0000
 8003f0c:	420c0000 	.word	0x420c0000
 8003f10:	428c0000 	.word	0x428c0000

08003f14 <ISM330DHCX_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	331c      	adds	r3, #28
 8003f26:	f107 020b 	add.w	r2, r7, #11
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 f841 	bl	8004fb4 <ism330dhcx_gy_data_rate_get>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8003f38:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3c:	e04e      	b.n	8003fdc <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8003f3e:	7afb      	ldrb	r3, [r7, #11]
 8003f40:	2b0a      	cmp	r3, #10
 8003f42:	d846      	bhi.n	8003fd2 <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f79 	.word	0x08003f79
 8003f50:	08003f83 	.word	0x08003f83
 8003f54:	08003f8b 	.word	0x08003f8b
 8003f58:	08003f93 	.word	0x08003f93
 8003f5c:	08003f9b 	.word	0x08003f9b
 8003f60:	08003fa3 	.word	0x08003fa3
 8003f64:	08003fab 	.word	0x08003fab
 8003f68:	08003fb3 	.word	0x08003fb3
 8003f6c:	08003fbb 	.word	0x08003fbb
 8003f70:	08003fc3 	.word	0x08003fc3
 8003f74:	08003fcb 	.word	0x08003fcb
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]
      break;
 8003f80:	e02b      	b.n	8003fda <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	4a17      	ldr	r2, [pc, #92]	; (8003fe4 <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8003f86:	601a      	str	r2, [r3, #0]
      break;
 8003f88:	e027      	b.n	8003fda <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 8003f8e:	601a      	str	r2, [r3, #0]
      break;
 8003f90:	e023      	b.n	8003fda <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	4a15      	ldr	r2, [pc, #84]	; (8003fec <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 8003f96:	601a      	str	r2, [r3, #0]
      break;
 8003f98:	e01f      	b.n	8003fda <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	4a14      	ldr	r2, [pc, #80]	; (8003ff0 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8003f9e:	601a      	str	r2, [r3, #0]
      break;
 8003fa0:	e01b      	b.n	8003fda <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	4a13      	ldr	r2, [pc, #76]	; (8003ff4 <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 8003fa6:	601a      	str	r2, [r3, #0]
      break;
 8003fa8:	e017      	b.n	8003fda <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_417Hz:
      *Odr = 417.0f;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	4a12      	ldr	r2, [pc, #72]	; (8003ff8 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8003fae:	601a      	str	r2, [r3, #0]
      break;
 8003fb0:	e013      	b.n	8003fda <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	4a11      	ldr	r2, [pc, #68]	; (8003ffc <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 8003fb6:	601a      	str	r2, [r3, #0]
      break;
 8003fb8:	e00f      	b.n	8003fda <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	4a10      	ldr	r2, [pc, #64]	; (8004000 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8003fbe:	601a      	str	r2, [r3, #0]
      break;
 8003fc0:	e00b      	b.n	8003fda <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	4a0f      	ldr	r2, [pc, #60]	; (8004004 <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 8003fc6:	601a      	str	r2, [r3, #0]
      break;
 8003fc8:	e007      	b.n	8003fda <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	4a0e      	ldr	r2, [pc, #56]	; (8004008 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8003fce:	601a      	str	r2, [r3, #0]
      break;
 8003fd0:	e003      	b.n	8003fda <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8003fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd6:	60fb      	str	r3, [r7, #12]
      break;
 8003fd8:	bf00      	nop
  }

  return ret;
 8003fda:	68fb      	ldr	r3, [r7, #12]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	41480000 	.word	0x41480000
 8003fe8:	41d00000 	.word	0x41d00000
 8003fec:	42500000 	.word	0x42500000
 8003ff0:	42d00000 	.word	0x42d00000
 8003ff4:	43500000 	.word	0x43500000
 8003ff8:	43d08000 	.word	0x43d08000
 8003ffc:	44504000 	.word	0x44504000
 8004000:	44d06000 	.word	0x44d06000
 8004004:	45505000 	.word	0x45505000
 8004008:	45d05800 	.word	0x45d05800

0800400c <ISM330DHCX_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800401e:	2b01      	cmp	r3, #1
 8004020:	d106      	bne.n	8004030 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004022:	ed97 0a00 	vldr	s0, [r7]
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa32 	bl	8004490 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 800402c:	4603      	mov	r3, r0
 800402e:	e005      	b.n	800403c <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004030:	ed97 0a00 	vldr	s0, [r7]
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fab7 	bl	80045a8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 800403a:	4603      	mov	r3, r0
  }
}
 800403c:	4618      	mov	r0, r3
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <ISM330DHCX_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	331c      	adds	r3, #28
 8004056:	f107 020b 	add.w	r2, r7, #11
 800405a:	4611      	mov	r1, r2
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fde7 	bl	8004c30 <ism330dhcx_gy_full_scale_get>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004068:	f04f 33ff 	mov.w	r3, #4294967295
 800406c:	e03c      	b.n	80040e8 <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 800406e:	7afb      	ldrb	r3, [r7, #11]
 8004070:	2b0c      	cmp	r3, #12
 8004072:	d834      	bhi.n	80040de <ISM330DHCX_GYRO_GetFullScale+0x9a>
 8004074:	a201      	add	r2, pc, #4	; (adr r2, 800407c <ISM330DHCX_GYRO_GetFullScale+0x38>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	080040b9 	.word	0x080040b9
 8004080:	080040df 	.word	0x080040df
 8004084:	080040b1 	.word	0x080040b1
 8004088:	080040df 	.word	0x080040df
 800408c:	080040c1 	.word	0x080040c1
 8004090:	080040df 	.word	0x080040df
 8004094:	080040df 	.word	0x080040df
 8004098:	080040df 	.word	0x080040df
 800409c:	080040cb 	.word	0x080040cb
 80040a0:	080040df 	.word	0x080040df
 80040a4:	080040df 	.word	0x080040df
 80040a8:	080040df 	.word	0x080040df
 80040ac:	080040d5 	.word	0x080040d5
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	227d      	movs	r2, #125	; 0x7d
 80040b4:	601a      	str	r2, [r3, #0]
      break;
 80040b6:	e016      	b.n	80040e6 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	22fa      	movs	r2, #250	; 0xfa
 80040bc:	601a      	str	r2, [r3, #0]
      break;
 80040be:	e012      	b.n	80040e6 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80040c6:	601a      	str	r2, [r3, #0]
      break;
 80040c8:	e00d      	b.n	80040e6 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040d0:	601a      	str	r2, [r3, #0]
      break;
 80040d2:	e008      	b.n	80040e6 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80040da:	601a      	str	r2, [r3, #0]
      break;
 80040dc:	e003      	b.n	80040e6 <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 80040de:	f04f 33ff 	mov.w	r3, #4294967295
 80040e2:	60fb      	str	r3, [r7, #12]
      break;
 80040e4:	bf00      	nop
  }

  return ret;
 80040e6:	68fb      	ldr	r3, [r7, #12]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <ISM330DHCX_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b7d      	cmp	r3, #125	; 0x7d
 80040fe:	dd12      	ble.n	8004126 <ISM330DHCX_GYRO_SetFullScale+0x36>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2bfa      	cmp	r3, #250	; 0xfa
 8004104:	dd0d      	ble.n	8004122 <ISM330DHCX_GYRO_SetFullScale+0x32>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800410c:	dd07      	ble.n	800411e <ISM330DHCX_GYRO_SetFullScale+0x2e>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004114:	dc01      	bgt.n	800411a <ISM330DHCX_GYRO_SetFullScale+0x2a>
 8004116:	2308      	movs	r3, #8
 8004118:	e006      	b.n	8004128 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800411a:	230c      	movs	r3, #12
 800411c:	e004      	b.n	8004128 <ISM330DHCX_GYRO_SetFullScale+0x38>
 800411e:	2304      	movs	r3, #4
 8004120:	e002      	b.n	8004128 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004122:	2300      	movs	r3, #0
 8004124:	e000      	b.n	8004128 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004126:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8004128:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	331c      	adds	r3, #28
 800412e:	7bfa      	ldrb	r2, [r7, #15]
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fd56 	bl	8004be4 <ism330dhcx_gy_full_scale_set>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 800413e:	f04f 33ff 	mov.w	r3, #4294967295
 8004142:	e000      	b.n	8004146 <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <ISM330DHCX_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	331c      	adds	r3, #28
 800415c:	f107 0208 	add.w	r2, r7, #8
 8004160:	4611      	mov	r1, r2
 8004162:	4618      	mov	r0, r3
 8004164:	f000 ffae 	bl	80050c4 <ism330dhcx_angular_rate_raw_get>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 800416e:	f04f 33ff 	mov.w	r3, #4294967295
 8004172:	e00c      	b.n	800418e <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004174:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800417c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004184:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <ISM330DHCX_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b086      	sub	sp, #24
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	331c      	adds	r3, #28
 80041a4:	f107 0210 	add.w	r2, r7, #16
 80041a8:	4611      	mov	r1, r2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 ff8a 	bl	80050c4 <ism330dhcx_angular_rate_raw_get>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 80041b6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ba:	e03c      	b.n	8004236 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 80041bc:	f107 030c 	add.w	r3, r7, #12
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fe48 	bl	8003e58 <ISM330DHCX_GYRO_GetSensitivity>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	e030      	b.n	8004236 <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80041d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80041d8:	ee07 3a90 	vmov	s15, r3
 80041dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80041e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041ec:	ee17 2a90 	vmov	r2, s15
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80041f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041f8:	ee07 3a90 	vmov	s15, r3
 80041fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004200:	edd7 7a03 	vldr	s15, [r7, #12]
 8004204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800420c:	ee17 2a90 	vmov	r2, s15
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004214:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004218:	ee07 3a90 	vmov	s15, r3
 800421c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004220:	edd7 7a03 	vldr	s15, [r7, #12]
 8004224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800422c:	ee17 2a90 	vmov	r2, s15
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <ISM330DHCX_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	460b      	mov	r3, r1
 8004248:	70fb      	strb	r3, [r7, #3]
 800424a:	4613      	mov	r3, r2
 800424c:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f103 001c 	add.w	r0, r3, #28
 8004254:	1cba      	adds	r2, r7, #2
 8004256:	78f9      	ldrb	r1, [r7, #3]
 8004258:	2301      	movs	r3, #1
 800425a:	f000 fa75 	bl	8004748 <ism330dhcx_write_reg>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004264:	f04f 33ff 	mov.w	r3, #4294967295
 8004268:	e000      	b.n	800426c <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8004280:	edd7 7a00 	vldr	s15, [r7]
 8004284:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800428c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004290:	d801      	bhi.n	8004296 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004292:	2301      	movs	r3, #1
 8004294:	e058      	b.n	8004348 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004296:	edd7 7a00 	vldr	s15, [r7]
 800429a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800429e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	d801      	bhi.n	80042ac <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e04d      	b.n	8004348 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80042ac:	edd7 7a00 	vldr	s15, [r7]
 80042b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004370 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80042b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042bc:	d801      	bhi.n	80042c2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80042be:	2303      	movs	r3, #3
 80042c0:	e042      	b.n	8004348 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80042c2:	edd7 7a00 	vldr	s15, [r7]
 80042c6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004374 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 80042ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d2:	d801      	bhi.n	80042d8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 80042d4:	2304      	movs	r3, #4
 80042d6:	e037      	b.n	8004348 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80042d8:	edd7 7a00 	vldr	s15, [r7]
 80042dc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004378 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 80042e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e8:	d801      	bhi.n	80042ee <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80042ea:	2305      	movs	r3, #5
 80042ec:	e02c      	b.n	8004348 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80042ee:	edd7 7a00 	vldr	s15, [r7]
 80042f2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800437c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 80042f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fe:	d801      	bhi.n	8004304 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004300:	2306      	movs	r3, #6
 8004302:	e021      	b.n	8004348 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004304:	edd7 7a00 	vldr	s15, [r7]
 8004308:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004380 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800430c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004314:	d801      	bhi.n	800431a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004316:	2307      	movs	r3, #7
 8004318:	e016      	b.n	8004348 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800431a:	edd7 7a00 	vldr	s15, [r7]
 800431e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004384 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432a:	d801      	bhi.n	8004330 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800432c:	2308      	movs	r3, #8
 800432e:	e00b      	b.n	8004348 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004330:	edd7 7a00 	vldr	s15, [r7]
 8004334:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004388 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800433c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004340:	d801      	bhi.n	8004346 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004342:	2309      	movs	r3, #9
 8004344:	e000      	b.n	8004348 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004346:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8004348:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
          :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	331c      	adds	r3, #28
 800434e:	7bfa      	ldrb	r2, [r7, #15]
 8004350:	4611      	mov	r1, r2
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fa6e 	bl	8004834 <ism330dhcx_xl_data_rate_set>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 800435e:	f04f 33ff 	mov.w	r3, #4294967295
 8004362:	e000      	b.n	8004366 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	42500000 	.word	0x42500000
 8004374:	42d00000 	.word	0x42d00000
 8004378:	43500000 	.word	0x43500000
 800437c:	43d08000 	.word	0x43d08000
 8004380:	44504000 	.word	0x44504000
 8004384:	44d06000 	.word	0x44d06000
 8004388:	45505000 	.word	0x45505000

0800438c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8004398:	edd7 7a00 	vldr	s15, [r7]
 800439c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80043a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a8:	d801      	bhi.n	80043ae <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e058      	b.n	8004460 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80043ae:	edd7 7a00 	vldr	s15, [r7]
 80043b2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80043b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043be:	d801      	bhi.n	80043c4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e04d      	b.n	8004460 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80043c4:	edd7 7a00 	vldr	s15, [r7]
 80043c8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004474 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80043cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d4:	d801      	bhi.n	80043da <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80043d6:	2303      	movs	r3, #3
 80043d8:	e042      	b.n	8004460 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80043da:	edd7 7a00 	vldr	s15, [r7]
 80043de:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004478 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 80043e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ea:	d801      	bhi.n	80043f0 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 80043ec:	2304      	movs	r3, #4
 80043ee:	e037      	b.n	8004460 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80043f0:	edd7 7a00 	vldr	s15, [r7]
 80043f4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800447c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80043f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004400:	d801      	bhi.n	8004406 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004402:	2305      	movs	r3, #5
 8004404:	e02c      	b.n	8004460 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004406:	edd7 7a00 	vldr	s15, [r7]
 800440a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004480 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800440e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004416:	d801      	bhi.n	800441c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004418:	2306      	movs	r3, #6
 800441a:	e021      	b.n	8004460 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800441c:	edd7 7a00 	vldr	s15, [r7]
 8004420:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004484 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442c:	d801      	bhi.n	8004432 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800442e:	2307      	movs	r3, #7
 8004430:	e016      	b.n	8004460 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004432:	edd7 7a00 	vldr	s15, [r7]
 8004436:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004488 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800443a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800443e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004442:	d801      	bhi.n	8004448 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004444:	2308      	movs	r3, #8
 8004446:	e00b      	b.n	8004460 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004448:	edd7 7a00 	vldr	s15, [r7]
 800444c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800448c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004450:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004458:	d801      	bhi.n	800445e <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800445a:	2309      	movs	r3, #9
 800445c:	e000      	b.n	8004460 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800445e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
                :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	42500000 	.word	0x42500000
 8004478:	42d00000 	.word	0x42d00000
 800447c:	43500000 	.word	0x43500000
 8004480:	43d08000 	.word	0x43d08000
 8004484:	44504000 	.word	0x44504000
 8004488:	44d06000 	.word	0x44d06000
 800448c:	45505000 	.word	0x45505000

08004490 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800449c:	edd7 7a00 	vldr	s15, [r7]
 80044a0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80044a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ac:	d801      	bhi.n	80044b2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e058      	b.n	8004564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80044b2:	edd7 7a00 	vldr	s15, [r7]
 80044b6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80044ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c2:	d801      	bhi.n	80044c8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e04d      	b.n	8004564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80044c8:	edd7 7a00 	vldr	s15, [r7]
 80044cc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800458c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80044d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d8:	d801      	bhi.n	80044de <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80044da:	2303      	movs	r3, #3
 80044dc:	e042      	b.n	8004564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80044de:	edd7 7a00 	vldr	s15, [r7]
 80044e2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004590 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80044e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ee:	d801      	bhi.n	80044f4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80044f0:	2304      	movs	r3, #4
 80044f2:	e037      	b.n	8004564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80044f4:	edd7 7a00 	vldr	s15, [r7]
 80044f8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004594 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80044fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004504:	d801      	bhi.n	800450a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004506:	2305      	movs	r3, #5
 8004508:	e02c      	b.n	8004564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800450a:	edd7 7a00 	vldr	s15, [r7]
 800450e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004598 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004512:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451a:	d801      	bhi.n	8004520 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800451c:	2306      	movs	r3, #6
 800451e:	e021      	b.n	8004564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004520:	edd7 7a00 	vldr	s15, [r7]
 8004524:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800459c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800452c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004530:	d801      	bhi.n	8004536 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004532:	2307      	movs	r3, #7
 8004534:	e016      	b.n	8004564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004536:	edd7 7a00 	vldr	s15, [r7]
 800453a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80045a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800453e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004546:	d801      	bhi.n	800454c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004548:	2308      	movs	r3, #8
 800454a:	e00b      	b.n	8004564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800454c:	edd7 7a00 	vldr	s15, [r7]
 8004550:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80045a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455c:	d801      	bhi.n	8004562 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800455e:	2309      	movs	r3, #9
 8004560:	e000      	b.n	8004564 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004562:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8004564:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
          :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	331c      	adds	r3, #28
 800456a:	7bfa      	ldrb	r2, [r7, #15]
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fbb0 	bl	8004cd4 <ism330dhcx_gy_data_rate_set>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	e000      	b.n	8004582 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	42500000 	.word	0x42500000
 8004590:	42d00000 	.word	0x42d00000
 8004594:	43500000 	.word	0x43500000
 8004598:	43d08000 	.word	0x43d08000
 800459c:	44504000 	.word	0x44504000
 80045a0:	44d06000 	.word	0x44d06000
 80045a4:	45505000 	.word	0x45505000

080045a8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 80045b4:	edd7 7a00 	vldr	s15, [r7]
 80045b8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80045bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c4:	d801      	bhi.n	80045ca <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e058      	b.n	800467c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80045ca:	edd7 7a00 	vldr	s15, [r7]
 80045ce:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80045d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045da:	d801      	bhi.n	80045e0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80045dc:	2302      	movs	r3, #2
 80045de:	e04d      	b.n	800467c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80045e0:	edd7 7a00 	vldr	s15, [r7]
 80045e4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004690 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80045e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f0:	d801      	bhi.n	80045f6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80045f2:	2303      	movs	r3, #3
 80045f4:	e042      	b.n	800467c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80045f6:	edd7 7a00 	vldr	s15, [r7]
 80045fa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004694 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80045fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004606:	d801      	bhi.n	800460c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004608:	2304      	movs	r3, #4
 800460a:	e037      	b.n	800467c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800460c:	edd7 7a00 	vldr	s15, [r7]
 8004610:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004698 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461c:	d801      	bhi.n	8004622 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800461e:	2305      	movs	r3, #5
 8004620:	e02c      	b.n	800467c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004622:	edd7 7a00 	vldr	s15, [r7]
 8004626:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800469c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800462a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004632:	d801      	bhi.n	8004638 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004634:	2306      	movs	r3, #6
 8004636:	e021      	b.n	800467c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004638:	edd7 7a00 	vldr	s15, [r7]
 800463c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80046a0 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004648:	d801      	bhi.n	800464e <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800464a:	2307      	movs	r3, #7
 800464c:	e016      	b.n	800467c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800464e:	edd7 7a00 	vldr	s15, [r7]
 8004652:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80046a4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800465a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465e:	d801      	bhi.n	8004664 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004660:	2308      	movs	r3, #8
 8004662:	e00b      	b.n	800467c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004664:	edd7 7a00 	vldr	s15, [r7]
 8004668:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80046a8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800466c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004674:	d801      	bhi.n	800467a <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004676:	2309      	movs	r3, #9
 8004678:	e000      	b.n	800467c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800467a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
                 :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	42500000 	.word	0x42500000
 8004694:	42d00000 	.word	0x42d00000
 8004698:	43500000 	.word	0x43500000
 800469c:	43d08000 	.word	0x43d08000
 80046a0:	44504000 	.word	0x44504000
 80046a4:	44d06000 	.word	0x44d06000
 80046a8:	45505000 	.word	0x45505000

080046ac <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80046ac:	b590      	push	{r4, r7, lr}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	461a      	mov	r2, r3
 80046b8:	460b      	mov	r3, r1
 80046ba:	72fb      	strb	r3, [r7, #11]
 80046bc:	4613      	mov	r3, r2
 80046be:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	695c      	ldr	r4, [r3, #20]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	7b1b      	ldrb	r3, [r3, #12]
 80046cc:	b298      	uxth	r0, r3
 80046ce:	7afb      	ldrb	r3, [r7, #11]
 80046d0:	b299      	uxth	r1, r3
 80046d2:	893b      	ldrh	r3, [r7, #8]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	47a0      	blx	r4
 80046d8:	4603      	mov	r3, r0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd90      	pop	{r4, r7, pc}

080046e2 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80046e2:	b590      	push	{r4, r7, lr}
 80046e4:	b087      	sub	sp, #28
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	461a      	mov	r2, r3
 80046ee:	460b      	mov	r3, r1
 80046f0:	72fb      	strb	r3, [r7, #11]
 80046f2:	4613      	mov	r3, r2
 80046f4:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	691c      	ldr	r4, [r3, #16]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	7b1b      	ldrb	r3, [r3, #12]
 8004702:	b298      	uxth	r0, r3
 8004704:	7afb      	ldrb	r3, [r7, #11]
 8004706:	b299      	uxth	r1, r3
 8004708:	893b      	ldrh	r3, [r7, #8]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	47a0      	blx	r4
 800470e:	4603      	mov	r3, r0
}
 8004710:	4618      	mov	r0, r3
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	bd90      	pop	{r4, r7, pc}

08004718 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	461a      	mov	r2, r3
 8004724:	460b      	mov	r3, r1
 8004726:	72fb      	strb	r3, [r7, #11]
 8004728:	4613      	mov	r3, r2
 800472a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	685c      	ldr	r4, [r3, #4]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6898      	ldr	r0, [r3, #8]
 8004734:	893b      	ldrh	r3, [r7, #8]
 8004736:	7af9      	ldrb	r1, [r7, #11]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	47a0      	blx	r4
 800473c:	6178      	str	r0, [r7, #20]
  return ret;
 800473e:	697b      	ldr	r3, [r7, #20]
}
 8004740:	4618      	mov	r0, r3
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	bd90      	pop	{r4, r7, pc}

08004748 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	607a      	str	r2, [r7, #4]
 8004752:	461a      	mov	r2, r3
 8004754:	460b      	mov	r3, r1
 8004756:	72fb      	strb	r3, [r7, #11]
 8004758:	4613      	mov	r3, r2
 800475a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681c      	ldr	r4, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6898      	ldr	r0, [r3, #8]
 8004764:	893b      	ldrh	r3, [r7, #8]
 8004766:	7af9      	ldrb	r1, [r7, #11]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	47a0      	blx	r4
 800476c:	6178      	str	r0, [r7, #20]
  return ret;
 800476e:	697b      	ldr	r3, [r7, #20]
}
 8004770:	4618      	mov	r0, r3
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	bd90      	pop	{r4, r7, pc}

08004778 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004784:	f107 0208 	add.w	r2, r7, #8
 8004788:	2301      	movs	r3, #1
 800478a:	2110      	movs	r1, #16
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff ffc3 	bl	8004718 <ism330dhcx_read_reg>
 8004792:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0) {
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10f      	bne.n	80047ba <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	7a3b      	ldrb	r3, [r7, #8]
 80047a4:	f362 0383 	bfi	r3, r2, #2, #2
 80047a8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80047aa:	f107 0208 	add.w	r2, r7, #8
 80047ae:	2301      	movs	r3, #1
 80047b0:	2110      	movs	r1, #16
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff ffc8 	bl	8004748 <ism330dhcx_write_reg>
 80047b8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80047ba:	68fb      	ldr	r3, [r7, #12]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80047ce:	f107 0208 	add.w	r2, r7, #8
 80047d2:	2301      	movs	r3, #1
 80047d4:	2110      	movs	r1, #16
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff ff9e 	bl	8004718 <ism330dhcx_read_reg>
 80047dc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl) {
 80047de:	7a3b      	ldrb	r3, [r7, #8]
 80047e0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d81a      	bhi.n	8004820 <ism330dhcx_xl_full_scale_get+0x5c>
 80047ea:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <ism330dhcx_xl_full_scale_get+0x2c>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	08004801 	.word	0x08004801
 80047f4:	08004809 	.word	0x08004809
 80047f8:	08004811 	.word	0x08004811
 80047fc:	08004819 	.word	0x08004819
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
      break;
 8004806:	e00f      	b.n	8004828 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2201      	movs	r2, #1
 800480c:	701a      	strb	r2, [r3, #0]
      break;
 800480e:	e00b      	b.n	8004828 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2202      	movs	r2, #2
 8004814:	701a      	strb	r2, [r3, #0]
      break;
 8004816:	e007      	b.n	8004828 <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2203      	movs	r2, #3
 800481c:	701a      	strb	r2, [r3, #0]
      break;
 800481e:	e003      	b.n	8004828 <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2200      	movs	r2, #0
 8004824:	701a      	strb	r2, [r3, #0]
      break;
 8004826:	bf00      	nop
  }

  return ret;
 8004828:	68fb      	ldr	r3, [r7, #12]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop

08004834 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8004844:	f107 030c 	add.w	r3, r7, #12
 8004848:	4619      	mov	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fd9f 	bl	800538e <ism330dhcx_fsm_enable_get>
 8004850:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	f040 80c4 	bne.w	80049e2 <ism330dhcx_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800485a:	7b3b      	ldrb	r3, [r7, #12]
 800485c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004860:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004862:	7b3b      	ldrb	r3, [r7, #12]
 8004864:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004868:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800486a:	4313      	orrs	r3, r2
 800486c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800486e:	7b3b      	ldrb	r3, [r7, #12]
 8004870:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004874:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004876:	4313      	orrs	r3, r2
 8004878:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800487a:	7b3b      	ldrb	r3, [r7, #12]
 800487c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004880:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004882:	4313      	orrs	r3, r2
 8004884:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004886:	7b3b      	ldrb	r3, [r7, #12]
 8004888:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800488c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 800488e:	4313      	orrs	r3, r2
 8004890:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004892:	7b3b      	ldrb	r3, [r7, #12]
 8004894:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004898:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 800489a:	4313      	orrs	r3, r2
 800489c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800489e:	7b3b      	ldrb	r3, [r7, #12]
 80048a0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80048a4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80048a6:	4313      	orrs	r3, r2
 80048a8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80048aa:	7b3b      	ldrb	r3, [r7, #12]
 80048ac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80048b0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 80048b2:	4313      	orrs	r3, r2
 80048b4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80048b6:	7b7b      	ldrb	r3, [r7, #13]
 80048b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80048bc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 80048be:	4313      	orrs	r3, r2
 80048c0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80048c2:	7b7b      	ldrb	r3, [r7, #13]
 80048c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80048c8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 80048ca:	4313      	orrs	r3, r2
 80048cc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80048ce:	7b7b      	ldrb	r3, [r7, #13]
 80048d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80048d4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 80048d6:	4313      	orrs	r3, r2
 80048d8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80048da:	7b7b      	ldrb	r3, [r7, #13]
 80048dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80048e0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80048e2:	4313      	orrs	r3, r2
 80048e4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80048e6:	7b7b      	ldrb	r3, [r7, #13]
 80048e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80048ec:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80048ee:	4313      	orrs	r3, r2
 80048f0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80048f2:	7b7b      	ldrb	r3, [r7, #13]
 80048f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80048f8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80048fa:	4313      	orrs	r3, r2
 80048fc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80048fe:	7b7b      	ldrb	r3, [r7, #13]
 8004900:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004904:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8004906:	4313      	orrs	r3, r2
 8004908:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 800490a:	7b7b      	ldrb	r3, [r7, #13]
 800490c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004910:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004912:	4313      	orrs	r3, r2
 8004914:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004916:	2b01      	cmp	r3, #1
 8004918:	d163      	bne.n	80049e2 <ism330dhcx_xl_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 800491a:	f107 030b 	add.w	r3, r7, #11
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fd61 	bl	80053e8 <ism330dhcx_fsm_data_rate_get>
 8004926:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d159      	bne.n	80049e2 <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 800492e:	7afb      	ldrb	r3, [r7, #11]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d853      	bhi.n	80049dc <ism330dhcx_xl_data_rate_set+0x1a8>
 8004934:	a201      	add	r2, pc, #4	; (adr r2, 800493c <ism330dhcx_xl_data_rate_set+0x108>)
 8004936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493a:	bf00      	nop
 800493c:	0800494d 	.word	0x0800494d
 8004940:	0800495f 	.word	0x0800495f
 8004944:	0800497d 	.word	0x0800497d
 8004948:	080049a7 	.word	0x080049a7
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8004952:	2301      	movs	r3, #1
 8004954:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004956:	e045      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	75fb      	strb	r3, [r7, #23]
            break;
 800495c:	e042      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004964:	2302      	movs	r3, #2
 8004966:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004968:	e03c      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 800496a:	78fb      	ldrb	r3, [r7, #3]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d102      	bne.n	8004976 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004970:	2302      	movs	r3, #2
 8004972:	75fb      	strb	r3, [r7, #23]
            break;
 8004974:	e036      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	75fb      	strb	r3, [r7, #23]
            break;
 800497a:	e033      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004982:	2303      	movs	r3, #3
 8004984:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004986:	e02d      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d102      	bne.n	8004994 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800498e:	2303      	movs	r3, #3
 8004990:	75fb      	strb	r3, [r7, #23]
            break;
 8004992:	e027      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d102      	bne.n	80049a0 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800499a:	2303      	movs	r3, #3
 800499c:	75fb      	strb	r3, [r7, #23]
            break;
 800499e:	e021      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	75fb      	strb	r3, [r7, #23]
            break;
 80049a4:	e01e      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 80049a6:	78fb      	ldrb	r3, [r7, #3]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d102      	bne.n	80049b2 <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80049ac:	2304      	movs	r3, #4
 80049ae:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 80049b0:	e018      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d102      	bne.n	80049be <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80049b8:	2304      	movs	r3, #4
 80049ba:	75fb      	strb	r3, [r7, #23]
            break;
 80049bc:	e012      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d102      	bne.n	80049ca <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80049c4:	2304      	movs	r3, #4
 80049c6:	75fb      	strb	r3, [r7, #23]
            break;
 80049c8:	e00c      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d102      	bne.n	80049d6 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80049d0:	2304      	movs	r3, #4
 80049d2:	75fb      	strb	r3, [r7, #23]
            break;
 80049d4:	e006      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	75fb      	strb	r3, [r7, #23]
            break;
 80049da:	e003      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	75fb      	strb	r3, [r7, #23]
            break;
 80049e0:	e000      	b.n	80049e4 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 80049e2:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d16d      	bne.n	8004aca <ism330dhcx_xl_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 80049ee:	f107 030a 	add.w	r3, r7, #10
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fd3f 	bl	8005478 <ism330dhcx_mlc_get>
 80049fa:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 80049fc:	7abb      	ldrb	r3, [r7, #10]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d163      	bne.n	8004aca <ism330dhcx_xl_data_rate_set+0x296>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8004a02:	f107 0309 	add.w	r3, r7, #9
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fd5f 	bl	80054cc <ism330dhcx_mlc_data_rate_get>
 8004a0e:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d159      	bne.n	8004aca <ism330dhcx_xl_data_rate_set+0x296>
        switch (mlc_odr) {
 8004a16:	7a7b      	ldrb	r3, [r7, #9]
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d853      	bhi.n	8004ac4 <ism330dhcx_xl_data_rate_set+0x290>
 8004a1c:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <ism330dhcx_xl_data_rate_set+0x1f0>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004a35 	.word	0x08004a35
 8004a28:	08004a47 	.word	0x08004a47
 8004a2c:	08004a65 	.word	0x08004a65
 8004a30:	08004a8f 	.word	0x08004a8f
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <ism330dhcx_xl_data_rate_set+0x20c>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004a3e:	e045      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8004a40:	78fb      	ldrb	r3, [r7, #3]
 8004a42:	75fb      	strb	r3, [r7, #23]
            break;
 8004a44:	e042      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <ism330dhcx_xl_data_rate_set+0x21e>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004a50:	e03c      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8004a52:	78fb      	ldrb	r3, [r7, #3]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d102      	bne.n	8004a5e <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	75fb      	strb	r3, [r7, #23]
            break;
 8004a5c:	e036      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	75fb      	strb	r3, [r7, #23]
            break;
 8004a62:	e033      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d102      	bne.n	8004a70 <ism330dhcx_xl_data_rate_set+0x23c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004a6e:	e02d      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d102      	bne.n	8004a7c <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004a76:	2303      	movs	r3, #3
 8004a78:	75fb      	strb	r3, [r7, #23]
            break;
 8004a7a:	e027      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d102      	bne.n	8004a88 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8004a82:	2303      	movs	r3, #3
 8004a84:	75fb      	strb	r3, [r7, #23]
            break;
 8004a86:	e021      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	75fb      	strb	r3, [r7, #23]
            break;
 8004a8c:	e01e      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF) {
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d102      	bne.n	8004a9a <ism330dhcx_xl_data_rate_set+0x266>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004a94:	2304      	movs	r3, #4
 8004a96:	75fb      	strb	r3, [r7, #23]

            else {
              odr_xl = val;
            }

            break;
 8004a98:	e018      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5) {
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d102      	bne.n	8004aa6 <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	75fb      	strb	r3, [r7, #23]
            break;
 8004aa4:	e012      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz) {
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d102      	bne.n	8004ab2 <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004aac:	2304      	movs	r3, #4
 8004aae:	75fb      	strb	r3, [r7, #23]
            break;
 8004ab0:	e00c      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz) {
 8004ab2:	78fb      	ldrb	r3, [r7, #3]
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d102      	bne.n	8004abe <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8004ab8:	2304      	movs	r3, #4
 8004aba:	75fb      	strb	r3, [r7, #23]
            break;
 8004abc:	e006      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	75fb      	strb	r3, [r7, #23]
            break;
 8004ac2:	e003      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	75fb      	strb	r3, [r7, #23]
            break;
 8004ac8:	e000      	b.n	8004acc <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 8004aca:	bf00      	nop
    }
  }

  if (ret == 0) {
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d107      	bne.n	8004ae2 <ism330dhcx_xl_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004ad2:	f107 0208 	add.w	r2, r7, #8
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	2110      	movs	r1, #16
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff fe1c 	bl	8004718 <ism330dhcx_read_reg>
 8004ae0:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0) {
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10f      	bne.n	8004b08 <ism330dhcx_xl_data_rate_set+0x2d4>
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8004ae8:	7dfb      	ldrb	r3, [r7, #23]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	7a3b      	ldrb	r3, [r7, #8]
 8004af2:	f362 1307 	bfi	r3, r2, #4, #4
 8004af6:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004af8:	f107 0208 	add.w	r2, r7, #8
 8004afc:	2301      	movs	r3, #1
 8004afe:	2110      	movs	r1, #16
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff fe21 	bl	8004748 <ism330dhcx_write_reg>
 8004b06:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8004b08:	693b      	ldr	r3, [r7, #16]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop

08004b14 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8004b1e:	f107 0208 	add.w	r2, r7, #8
 8004b22:	2301      	movs	r3, #1
 8004b24:	2110      	movs	r1, #16
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff fdf6 	bl	8004718 <ism330dhcx_read_reg>
 8004b2c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl) {
 8004b2e:	7a3b      	ldrb	r3, [r7, #8]
 8004b30:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b0b      	cmp	r3, #11
 8004b38:	d84a      	bhi.n	8004bd0 <ism330dhcx_xl_data_rate_get+0xbc>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <ism330dhcx_xl_data_rate_get+0x2c>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004b71 	.word	0x08004b71
 8004b44:	08004b79 	.word	0x08004b79
 8004b48:	08004b81 	.word	0x08004b81
 8004b4c:	08004b89 	.word	0x08004b89
 8004b50:	08004b91 	.word	0x08004b91
 8004b54:	08004b99 	.word	0x08004b99
 8004b58:	08004ba1 	.word	0x08004ba1
 8004b5c:	08004ba9 	.word	0x08004ba9
 8004b60:	08004bb1 	.word	0x08004bb1
 8004b64:	08004bb9 	.word	0x08004bb9
 8004b68:	08004bc1 	.word	0x08004bc1
 8004b6c:	08004bc9 	.word	0x08004bc9
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2200      	movs	r2, #0
 8004b74:	701a      	strb	r2, [r3, #0]
      break;
 8004b76:	e02f      	b.n	8004bd8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	701a      	strb	r2, [r3, #0]
      break;
 8004b7e:	e02b      	b.n	8004bd8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2202      	movs	r2, #2
 8004b84:	701a      	strb	r2, [r3, #0]
      break;
 8004b86:	e027      	b.n	8004bd8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	701a      	strb	r2, [r3, #0]
      break;
 8004b8e:	e023      	b.n	8004bd8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2204      	movs	r2, #4
 8004b94:	701a      	strb	r2, [r3, #0]
      break;
 8004b96:	e01f      	b.n	8004bd8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2205      	movs	r2, #5
 8004b9c:	701a      	strb	r2, [r3, #0]
      break;
 8004b9e:	e01b      	b.n	8004bd8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_417Hz:
      *val = ISM330DHCX_XL_ODR_417Hz;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2206      	movs	r2, #6
 8004ba4:	701a      	strb	r2, [r3, #0]
      break;
 8004ba6:	e017      	b.n	8004bd8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2207      	movs	r2, #7
 8004bac:	701a      	strb	r2, [r3, #0]
      break;
 8004bae:	e013      	b.n	8004bd8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1667Hz:
      *val = ISM330DHCX_XL_ODR_1667Hz;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	701a      	strb	r2, [r3, #0]
      break;
 8004bb6:	e00f      	b.n	8004bd8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3333Hz:
      *val = ISM330DHCX_XL_ODR_3333Hz;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2209      	movs	r2, #9
 8004bbc:	701a      	strb	r2, [r3, #0]
      break;
 8004bbe:	e00b      	b.n	8004bd8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	220a      	movs	r2, #10
 8004bc4:	701a      	strb	r2, [r3, #0]
      break;
 8004bc6:	e007      	b.n	8004bd8 <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6Hz5:
      *val = ISM330DHCX_XL_ODR_6Hz5;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	220b      	movs	r2, #11
 8004bcc:	701a      	strb	r2, [r3, #0]
      break;
 8004bce:	e003      	b.n	8004bd8 <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
      break;
 8004bd6:	bf00      	nop
  }

  return ret;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop

08004be4 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004bf0:	f107 0208 	add.w	r2, r7, #8
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	2111      	movs	r1, #17
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff fd8d 	bl	8004718 <ism330dhcx_read_reg>
 8004bfe:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0) {
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t)val;
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	7a3b      	ldrb	r3, [r7, #8]
 8004c10:	f362 0303 	bfi	r3, r2, #0, #4
 8004c14:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8004c16:	f107 0208 	add.w	r2, r7, #8
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	2111      	movs	r1, #17
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff fd92 	bl	8004748 <ism330dhcx_write_reg>
 8004c24:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8004c26:	68fb      	ldr	r3, [r7, #12]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004c3a:	f107 0208 	add.w	r2, r7, #8
 8004c3e:	2301      	movs	r3, #1
 8004c40:	2111      	movs	r1, #17
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff fd68 	bl	8004718 <ism330dhcx_read_reg>
 8004c48:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g) {
 8004c4a:	7a3b      	ldrb	r3, [r7, #8]
 8004c4c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b0c      	cmp	r3, #12
 8004c54:	d834      	bhi.n	8004cc0 <ism330dhcx_gy_full_scale_get+0x90>
 8004c56:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <ism330dhcx_gy_full_scale_get+0x2c>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004c99 	.word	0x08004c99
 8004c60:	08004cb9 	.word	0x08004cb9
 8004c64:	08004c91 	.word	0x08004c91
 8004c68:	08004cc1 	.word	0x08004cc1
 8004c6c:	08004ca1 	.word	0x08004ca1
 8004c70:	08004cc1 	.word	0x08004cc1
 8004c74:	08004cc1 	.word	0x08004cc1
 8004c78:	08004cc1 	.word	0x08004cc1
 8004c7c:	08004ca9 	.word	0x08004ca9
 8004c80:	08004cc1 	.word	0x08004cc1
 8004c84:	08004cc1 	.word	0x08004cc1
 8004c88:	08004cc1 	.word	0x08004cc1
 8004c8c:	08004cb1 	.word	0x08004cb1
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2202      	movs	r2, #2
 8004c94:	701a      	strb	r2, [r3, #0]
      break;
 8004c96:	e017      	b.n	8004cc8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	701a      	strb	r2, [r3, #0]
      break;
 8004c9e:	e013      	b.n	8004cc8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	701a      	strb	r2, [r3, #0]
      break;
 8004ca6:	e00f      	b.n	8004cc8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2208      	movs	r2, #8
 8004cac:	701a      	strb	r2, [r3, #0]
      break;
 8004cae:	e00b      	b.n	8004cc8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	220c      	movs	r2, #12
 8004cb4:	701a      	strb	r2, [r3, #0]
      break;
 8004cb6:	e007      	b.n	8004cc8 <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]
      break;
 8004cbe:	e003      	b.n	8004cc8 <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	701a      	strb	r2, [r3, #0]
      break;
 8004cc6:	bf00      	nop
  }

  return ret;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop

08004cd4 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8004ce4:	f107 030c 	add.w	r3, r7, #12
 8004ce8:	4619      	mov	r1, r3
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fb4f 	bl	800538e <ism330dhcx_fsm_enable_get>
 8004cf0:	6138      	str	r0, [r7, #16]

  if (ret == 0) {
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f040 80c4 	bne.w	8004e82 <ism330dhcx_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004cfa:	7b3b      	ldrb	r3, [r7, #12]
 8004cfc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d00:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004d02:	7b3b      	ldrb	r3, [r7, #12]
 8004d04:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004d08:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004d0e:	7b3b      	ldrb	r3, [r7, #12]
 8004d10:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004d14:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8004d16:	4313      	orrs	r3, r2
 8004d18:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004d1a:	7b3b      	ldrb	r3, [r7, #12]
 8004d1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004d20:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8004d22:	4313      	orrs	r3, r2
 8004d24:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004d26:	7b3b      	ldrb	r3, [r7, #12]
 8004d28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004d2c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004d32:	7b3b      	ldrb	r3, [r7, #12]
 8004d34:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004d38:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004d3e:	7b3b      	ldrb	r3, [r7, #12]
 8004d40:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004d44:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8004d46:	4313      	orrs	r3, r2
 8004d48:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004d4a:	7b3b      	ldrb	r3, [r7, #12]
 8004d4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004d50:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8004d52:	4313      	orrs	r3, r2
 8004d54:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004d56:	7b7b      	ldrb	r3, [r7, #13]
 8004d58:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004d5c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8004d62:	7b7b      	ldrb	r3, [r7, #13]
 8004d64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004d68:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8004d6e:	7b7b      	ldrb	r3, [r7, #13]
 8004d70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004d74:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8004d76:	4313      	orrs	r3, r2
 8004d78:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8004d7a:	7b7b      	ldrb	r3, [r7, #13]
 8004d7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004d80:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8004d82:	4313      	orrs	r3, r2
 8004d84:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8004d86:	7b7b      	ldrb	r3, [r7, #13]
 8004d88:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004d8c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8004d92:	7b7b      	ldrb	r3, [r7, #13]
 8004d94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004d98:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004d9e:	7b7b      	ldrb	r3, [r7, #13]
 8004da0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004da4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8004da6:	4313      	orrs	r3, r2
 8004da8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ) {
 8004daa:	7b7b      	ldrb	r3, [r7, #13]
 8004dac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004db0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8004db2:	4313      	orrs	r3, r2
 8004db4:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d163      	bne.n	8004e82 <ism330dhcx_gy_data_rate_set+0x1ae>
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8004dba:	f107 030b 	add.w	r3, r7, #11
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fb11 	bl	80053e8 <ism330dhcx_fsm_data_rate_get>
 8004dc6:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d159      	bne.n	8004e82 <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8004dce:	7afb      	ldrb	r3, [r7, #11]
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d853      	bhi.n	8004e7c <ism330dhcx_gy_data_rate_set+0x1a8>
 8004dd4:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <ism330dhcx_gy_data_rate_set+0x108>)
 8004dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dda:	bf00      	nop
 8004ddc:	08004ded 	.word	0x08004ded
 8004de0:	08004dff 	.word	0x08004dff
 8004de4:	08004e1d 	.word	0x08004e1d
 8004de8:	08004e47 	.word	0x08004e47
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d102      	bne.n	8004df8 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8004df2:	2301      	movs	r3, #1
 8004df4:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004df6:	e045      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	75fb      	strb	r3, [r7, #23]
            break;
 8004dfc:	e042      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d102      	bne.n	8004e0a <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004e04:	2302      	movs	r3, #2
 8004e06:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004e08:	e03c      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d102      	bne.n	8004e16 <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004e10:	2302      	movs	r3, #2
 8004e12:	75fb      	strb	r3, [r7, #23]
            break;
 8004e14:	e036      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	75fb      	strb	r3, [r7, #23]
            break;
 8004e1a:	e033      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d102      	bne.n	8004e28 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004e22:	2303      	movs	r3, #3
 8004e24:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004e26:	e02d      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d102      	bne.n	8004e34 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	75fb      	strb	r3, [r7, #23]
            break;
 8004e32:	e027      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d102      	bne.n	8004e40 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	75fb      	strb	r3, [r7, #23]
            break;
 8004e3e:	e021      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	75fb      	strb	r3, [r7, #23]
            break;
 8004e44:	e01e      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004e46:	78fb      	ldrb	r3, [r7, #3]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004e50:	e018      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004e52:	78fb      	ldrb	r3, [r7, #3]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d102      	bne.n	8004e5e <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004e58:	2304      	movs	r3, #4
 8004e5a:	75fb      	strb	r3, [r7, #23]
            break;
 8004e5c:	e012      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d102      	bne.n	8004e6a <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004e64:	2304      	movs	r3, #4
 8004e66:	75fb      	strb	r3, [r7, #23]
            break;
 8004e68:	e00c      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d102      	bne.n	8004e76 <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004e70:	2304      	movs	r3, #4
 8004e72:	75fb      	strb	r3, [r7, #23]
            break;
 8004e74:	e006      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	75fb      	strb	r3, [r7, #23]
            break;
 8004e7a:	e003      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	75fb      	strb	r3, [r7, #23]
            break;
 8004e80:	e000      	b.n	8004e84 <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 8004e82:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8004e84:	2300      	movs	r3, #0
 8004e86:	72bb      	strb	r3, [r7, #10]

  if (ret == 0) {
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d16d      	bne.n	8004f6a <ism330dhcx_gy_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8004e8e:	f107 030a 	add.w	r3, r7, #10
 8004e92:	4619      	mov	r1, r3
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 faef 	bl	8005478 <ism330dhcx_mlc_get>
 8004e9a:	6138      	str	r0, [r7, #16]

    if ( mlc_enable == PROPERTY_ENABLE ) {
 8004e9c:	7abb      	ldrb	r3, [r7, #10]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d163      	bne.n	8004f6a <ism330dhcx_gy_data_rate_set+0x296>
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8004ea2:	f107 0309 	add.w	r3, r7, #9
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fb0f 	bl	80054cc <ism330dhcx_mlc_data_rate_get>
 8004eae:	6138      	str	r0, [r7, #16]

      if (ret == 0) {
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d159      	bne.n	8004f6a <ism330dhcx_gy_data_rate_set+0x296>
        switch (mlc_odr) {
 8004eb6:	7a7b      	ldrb	r3, [r7, #9]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d853      	bhi.n	8004f64 <ism330dhcx_gy_data_rate_set+0x290>
 8004ebc:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <ism330dhcx_gy_data_rate_set+0x1f0>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004ed5 	.word	0x08004ed5
 8004ec8:	08004ee7 	.word	0x08004ee7
 8004ecc:	08004f05 	.word	0x08004f05
 8004ed0:	08004f2f 	.word	0x08004f2f
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004ed4:	78fb      	ldrb	r3, [r7, #3]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <ism330dhcx_gy_data_rate_set+0x20c>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8004eda:	2301      	movs	r3, #1
 8004edc:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004ede:	e045      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	75fb      	strb	r3, [r7, #23]
            break;
 8004ee4:	e042      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d102      	bne.n	8004ef2 <ism330dhcx_gy_data_rate_set+0x21e>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004eec:	2302      	movs	r3, #2
 8004eee:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004ef0:	e03c      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d102      	bne.n	8004efe <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	75fb      	strb	r3, [r7, #23]
            break;
 8004efc:	e036      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	75fb      	strb	r3, [r7, #23]
            break;
 8004f02:	e033      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <ism330dhcx_gy_data_rate_set+0x23c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004f0e:	e02d      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d102      	bne.n	8004f1c <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004f16:	2303      	movs	r3, #3
 8004f18:	75fb      	strb	r3, [r7, #23]
            break;
 8004f1a:	e027      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d102      	bne.n	8004f28 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8004f22:	2303      	movs	r3, #3
 8004f24:	75fb      	strb	r3, [r7, #23]
            break;
 8004f26:	e021      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8004f28:	78fb      	ldrb	r3, [r7, #3]
 8004f2a:	75fb      	strb	r3, [r7, #23]
            break;
 8004f2c:	e01e      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF) {
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <ism330dhcx_gy_data_rate_set+0x266>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004f34:	2304      	movs	r3, #4
 8004f36:	75fb      	strb	r3, [r7, #23]

            else {
              odr_gy = val;
            }

            break;
 8004f38:	e018      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5) {
 8004f3a:	78fb      	ldrb	r3, [r7, #3]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d102      	bne.n	8004f46 <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004f40:	2304      	movs	r3, #4
 8004f42:	75fb      	strb	r3, [r7, #23]
            break;
 8004f44:	e012      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz) {
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d102      	bne.n	8004f52 <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	75fb      	strb	r3, [r7, #23]
            break;
 8004f50:	e00c      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz) {
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d102      	bne.n	8004f5e <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8004f58:	2304      	movs	r3, #4
 8004f5a:	75fb      	strb	r3, [r7, #23]
            break;
 8004f5c:	e006      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	75fb      	strb	r3, [r7, #23]
            break;
 8004f62:	e003      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	75fb      	strb	r3, [r7, #23]
            break;
 8004f68:	e000      	b.n	8004f6c <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8004f6a:	bf00      	nop
    }
  }

  if (ret == 0) {
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d107      	bne.n	8004f82 <ism330dhcx_gy_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004f72:	f107 0208 	add.w	r2, r7, #8
 8004f76:	2301      	movs	r3, #1
 8004f78:	2111      	movs	r1, #17
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7ff fbcc 	bl	8004718 <ism330dhcx_read_reg>
 8004f80:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0) {
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10f      	bne.n	8004fa8 <ism330dhcx_gy_data_rate_set+0x2d4>
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	7a3b      	ldrb	r3, [r7, #8]
 8004f92:	f362 1307 	bfi	r3, r2, #4, #4
 8004f96:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8004f98:	f107 0208 	add.w	r2, r7, #8
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	2111      	movs	r1, #17
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff fbd1 	bl	8004748 <ism330dhcx_write_reg>
 8004fa6:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8004fa8:	693b      	ldr	r3, [r7, #16]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop

08004fb4 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8004fbe:	f107 0208 	add.w	r2, r7, #8
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	2111      	movs	r1, #17
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff fba6 	bl	8004718 <ism330dhcx_read_reg>
 8004fcc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g) {
 8004fce:	7a3b      	ldrb	r3, [r7, #8]
 8004fd0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b0a      	cmp	r3, #10
 8004fd8:	d844      	bhi.n	8005064 <ism330dhcx_gy_data_rate_get+0xb0>
 8004fda:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <ism330dhcx_gy_data_rate_get+0x2c>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	0800500d 	.word	0x0800500d
 8004fe4:	08005015 	.word	0x08005015
 8004fe8:	0800501d 	.word	0x0800501d
 8004fec:	08005025 	.word	0x08005025
 8004ff0:	0800502d 	.word	0x0800502d
 8004ff4:	08005035 	.word	0x08005035
 8004ff8:	0800503d 	.word	0x0800503d
 8004ffc:	08005045 	.word	0x08005045
 8005000:	0800504d 	.word	0x0800504d
 8005004:	08005055 	.word	0x08005055
 8005008:	0800505d 	.word	0x0800505d
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
      break;
 8005012:	e02b      	b.n	800506c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]
      break;
 800501a:	e027      	b.n	800506c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2202      	movs	r2, #2
 8005020:	701a      	strb	r2, [r3, #0]
      break;
 8005022:	e023      	b.n	800506c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2203      	movs	r2, #3
 8005028:	701a      	strb	r2, [r3, #0]
      break;
 800502a:	e01f      	b.n	800506c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2204      	movs	r2, #4
 8005030:	701a      	strb	r2, [r3, #0]
      break;
 8005032:	e01b      	b.n	800506c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2205      	movs	r2, #5
 8005038:	701a      	strb	r2, [r3, #0]
      break;
 800503a:	e017      	b.n	800506c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_417Hz:
      *val = ISM330DHCX_GY_ODR_417Hz;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	2206      	movs	r2, #6
 8005040:	701a      	strb	r2, [r3, #0]
      break;
 8005042:	e013      	b.n	800506c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2207      	movs	r2, #7
 8005048:	701a      	strb	r2, [r3, #0]
      break;
 800504a:	e00f      	b.n	800506c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1667Hz:
      *val = ISM330DHCX_GY_ODR_1667Hz;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2208      	movs	r2, #8
 8005050:	701a      	strb	r2, [r3, #0]
      break;
 8005052:	e00b      	b.n	800506c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3333Hz:
      *val = ISM330DHCX_GY_ODR_3333Hz;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2209      	movs	r2, #9
 8005058:	701a      	strb	r2, [r3, #0]
      break;
 800505a:	e007      	b.n	800506c <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	220a      	movs	r2, #10
 8005060:	701a      	strb	r2, [r3, #0]
      break;
 8005062:	e003      	b.n	800506c <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2200      	movs	r2, #0
 8005068:	701a      	strb	r2, [r3, #0]
      break;
 800506a:	bf00      	nop
  }

  return ret;
 800506c:	68fb      	ldr	r3, [r7, #12]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop

08005078 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005084:	f107 0208 	add.w	r2, r7, #8
 8005088:	2301      	movs	r3, #1
 800508a:	2112      	movs	r1, #18
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff fb43 	bl	8004718 <ism330dhcx_read_reg>
 8005092:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10f      	bne.n	80050ba <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu = (uint8_t)val;
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	7a3b      	ldrb	r3, [r7, #8]
 80050a4:	f362 1386 	bfi	r3, r2, #6, #1
 80050a8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80050aa:	f107 0208 	add.w	r2, r7, #8
 80050ae:	2301      	movs	r3, #1
 80050b0:	2112      	movs	r1, #18
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff fb48 	bl	8004748 <ism330dhcx_write_reg>
 80050b8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80050ba:	68fb      	ldr	r3, [r7, #12]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <ism330dhcx_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 80050ce:	f107 020c 	add.w	r2, r7, #12
 80050d2:	2306      	movs	r3, #6
 80050d4:	2122      	movs	r1, #34	; 0x22
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff fb1e 	bl	8004718 <ism330dhcx_read_reg>
 80050dc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80050de:	7b7b      	ldrb	r3, [r7, #13]
 80050e0:	b21a      	sxth	r2, r3
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	7b3b      	ldrb	r3, [r7, #12]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	4413      	add	r3, r2
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	b21a      	sxth	r2, r3
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005100:	7bfa      	ldrb	r2, [r7, #15]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	3302      	adds	r3, #2
 8005106:	b212      	sxth	r2, r2
 8005108:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	3302      	adds	r3, #2
 800510e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005112:	b29b      	uxth	r3, r3
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	b29a      	uxth	r2, r3
 8005118:	7bbb      	ldrb	r3, [r7, #14]
 800511a:	b29b      	uxth	r3, r3
 800511c:	4413      	add	r3, r2
 800511e:	b29a      	uxth	r2, r3
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	3302      	adds	r3, #2
 8005124:	b212      	sxth	r2, r2
 8005126:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005128:	7c7a      	ldrb	r2, [r7, #17]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	3304      	adds	r3, #4
 800512e:	b212      	sxth	r2, r2
 8005130:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	3304      	adds	r3, #4
 8005136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800513a:	b29b      	uxth	r3, r3
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	b29a      	uxth	r2, r3
 8005140:	7c3b      	ldrb	r3, [r7, #16]
 8005142:	b29b      	uxth	r3, r3
 8005144:	4413      	add	r3, r2
 8005146:	b29a      	uxth	r2, r3
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	3304      	adds	r3, #4
 800514c:	b212      	sxth	r2, r2
 800514e:	801a      	strh	r2, [r3, #0]
  return ret;
 8005150:	697b      	ldr	r3, [r7, #20]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b086      	sub	sp, #24
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8005164:	f107 020c 	add.w	r2, r7, #12
 8005168:	2306      	movs	r3, #6
 800516a:	2128      	movs	r1, #40	; 0x28
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff fad3 	bl	8004718 <ism330dhcx_read_reg>
 8005172:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005174:	7b7b      	ldrb	r3, [r7, #13]
 8005176:	b21a      	sxth	r2, r3
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005182:	b29b      	uxth	r3, r3
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	b29a      	uxth	r2, r3
 8005188:	7b3b      	ldrb	r3, [r7, #12]
 800518a:	b29b      	uxth	r3, r3
 800518c:	4413      	add	r3, r2
 800518e:	b29b      	uxth	r3, r3
 8005190:	b21a      	sxth	r2, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005196:	7bfa      	ldrb	r2, [r7, #15]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	3302      	adds	r3, #2
 800519c:	b212      	sxth	r2, r2
 800519e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	3302      	adds	r3, #2
 80051a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	021b      	lsls	r3, r3, #8
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	7bbb      	ldrb	r3, [r7, #14]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	4413      	add	r3, r2
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	3302      	adds	r3, #2
 80051ba:	b212      	sxth	r2, r2
 80051bc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80051be:	7c7a      	ldrb	r2, [r7, #17]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	3304      	adds	r3, #4
 80051c4:	b212      	sxth	r2, r2
 80051c6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	3304      	adds	r3, #4
 80051cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	7c3b      	ldrb	r3, [r7, #16]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	4413      	add	r3, r2
 80051dc:	b29a      	uxth	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	3304      	adds	r3, #4
 80051e2:	b212      	sxth	r2, r2
 80051e4:	801a      	strh	r2, [r3, #0]
  return ret;
 80051e6:	697b      	ldr	r3, [r7, #20]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 80051fc:	f107 0208 	add.w	r2, r7, #8
 8005200:	2301      	movs	r3, #1
 8005202:	2118      	movs	r1, #24
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff fa87 	bl	8004718 <ism330dhcx_read_reg>
 800520a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0) {
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10f      	bne.n	8005232 <ism330dhcx_device_conf_set+0x42>
    ctrl9_xl.device_conf = (uint8_t)val;
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	b2da      	uxtb	r2, r3
 800521a:	7a3b      	ldrb	r3, [r7, #8]
 800521c:	f362 0341 	bfi	r3, r2, #1, #1
 8005220:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 8005222:	f107 0208 	add.w	r2, r7, #8
 8005226:	2301      	movs	r3, #1
 8005228:	2118      	movs	r1, #24
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff fa8c 	bl	8004748 <ism330dhcx_write_reg>
 8005230:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 8005232:	68fb      	ldr	r3, [r7, #12]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005248:	f107 0208 	add.w	r2, r7, #8
 800524c:	2301      	movs	r3, #1
 800524e:	2101      	movs	r1, #1
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7ff fa61 	bl	8004718 <ism330dhcx_read_reg>
 8005256:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0) {
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10f      	bne.n	800527e <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access = (uint8_t)val;
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	b2da      	uxtb	r2, r3
 8005266:	7a3b      	ldrb	r3, [r7, #8]
 8005268:	f362 1387 	bfi	r3, r2, #6, #2
 800526c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 800526e:	f107 0208 	add.w	r2, r7, #8
 8005272:	2301      	movs	r3, #1
 8005274:	2101      	movs	r1, #1
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fa66 	bl	8004748 <ism330dhcx_write_reg>
 800527c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800527e:	68fb      	ldr	r3, [r7, #12]
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 8005292:	2301      	movs	r3, #1
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	210f      	movs	r1, #15
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff fa3d 	bl	8004718 <ism330dhcx_read_reg>
 800529e:	60f8      	str	r0, [r7, #12]
  return ret;
 80052a0:	68fb      	ldr	r3, [r7, #12]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	460b      	mov	r3, r1
 80052b4:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80052b6:	f107 0208 	add.w	r2, r7, #8
 80052ba:	2301      	movs	r3, #1
 80052bc:	2112      	movs	r1, #18
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff fa2a 	bl	8004718 <ism330dhcx_read_reg>
 80052c4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10f      	bne.n	80052ec <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset = (uint8_t)val;
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	7a3b      	ldrb	r3, [r7, #8]
 80052d6:	f362 0300 	bfi	r3, r2, #0, #1
 80052da:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 80052dc:	f107 0208 	add.w	r2, r7, #8
 80052e0:	2301      	movs	r3, #1
 80052e2:	2112      	movs	r1, #18
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff fa2f 	bl	8004748 <ism330dhcx_write_reg>
 80052ea:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80052ec:	68fb      	ldr	r3, [r7, #12]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b084      	sub	sp, #16
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	460b      	mov	r3, r1
 8005300:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8005302:	f107 0208 	add.w	r2, r7, #8
 8005306:	2301      	movs	r3, #1
 8005308:	2112      	movs	r1, #18
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff fa04 	bl	8004718 <ism330dhcx_read_reg>
 8005310:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0) {
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10f      	bne.n	8005338 <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc = (uint8_t)val;
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	b2da      	uxtb	r2, r3
 8005320:	7a3b      	ldrb	r3, [r7, #8]
 8005322:	f362 0382 	bfi	r3, r2, #2, #1
 8005326:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005328:	f107 0208 	add.w	r2, r7, #8
 800532c:	2301      	movs	r3, #1
 800532e:	2112      	movs	r1, #18
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff fa09 	bl	8004748 <ism330dhcx_write_reg>
 8005336:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8005338:	68fb      	ldr	r3, [r7, #12]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	460b      	mov	r3, r1
 800534c:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 800534e:	f107 0208 	add.w	r2, r7, #8
 8005352:	2301      	movs	r3, #1
 8005354:	210a      	movs	r1, #10
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff f9de 	bl	8004718 <ism330dhcx_read_reg>
 800535c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0) {
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10f      	bne.n	8005384 <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	b2da      	uxtb	r2, r3
 800536c:	7a3b      	ldrb	r3, [r7, #8]
 800536e:	f362 0302 	bfi	r3, r2, #0, #3
 8005372:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8005374:	f107 0208 	add.w	r2, r7, #8
 8005378:	2301      	movs	r3, #1
 800537a:	210a      	movs	r1, #10
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff f9e3 	bl	8004748 <ism330dhcx_write_reg>
 8005382:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8005384:	68fb      	ldr	r3, [r7, #12]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005398:	2102      	movs	r1, #2
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff ff4e 	bl	800523c <ism330dhcx_mem_bank_set>
 80053a0:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 80053a8:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 80053aa:	2301      	movs	r3, #1
 80053ac:	2146      	movs	r1, #70	; 0x46
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7ff f9b2 	bl	8004718 <ism330dhcx_read_reg>
 80053b4:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d107      	bne.n	80053cc <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 80053c0:	2301      	movs	r3, #1
 80053c2:	2147      	movs	r1, #71	; 0x47
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff f9a7 	bl	8004718 <ism330dhcx_read_reg>
 80053ca:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0) {
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d104      	bne.n	80053dc <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80053d2:	2100      	movs	r1, #0
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff ff31 	bl	800523c <ism330dhcx_mem_bank_set>
 80053da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80053dc:	68fb      	ldr	r3, [r7, #12]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80053f2:	2102      	movs	r1, #2
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff ff21 	bl	800523c <ism330dhcx_mem_bank_set>
 80053fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d107      	bne.n	8005412 <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8005402:	f107 0208 	add.w	r2, r7, #8
 8005406:	2301      	movs	r3, #1
 8005408:	215f      	movs	r1, #95	; 0x5f
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff f984 	bl	8004718 <ism330dhcx_read_reg>
 8005410:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0) {
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d104      	bne.n	8005422 <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005418:	2100      	movs	r1, #0
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff ff0e 	bl	800523c <ism330dhcx_mem_bank_set>
 8005420:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr) {
 8005422:	7a3b      	ldrb	r3, [r7, #8]
 8005424:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b03      	cmp	r3, #3
 800542c:	d81a      	bhi.n	8005464 <ism330dhcx_fsm_data_rate_get+0x7c>
 800542e:	a201      	add	r2, pc, #4	; (adr r2, 8005434 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8005430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005434:	08005445 	.word	0x08005445
 8005438:	0800544d 	.word	0x0800544d
 800543c:	08005455 	.word	0x08005455
 8005440:	0800545d 	.word	0x0800545d
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2200      	movs	r2, #0
 8005448:	701a      	strb	r2, [r3, #0]
      break;
 800544a:	e00f      	b.n	800546c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	701a      	strb	r2, [r3, #0]
      break;
 8005452:	e00b      	b.n	800546c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2202      	movs	r2, #2
 8005458:	701a      	strb	r2, [r3, #0]
      break;
 800545a:	e007      	b.n	800546c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2203      	movs	r2, #3
 8005460:	701a      	strb	r2, [r3, #0]
      break;
 8005462:	e003      	b.n	800546c <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2200      	movs	r2, #0
 8005468:	701a      	strb	r2, [r3, #0]
      break;
 800546a:	bf00      	nop
  }

  return ret;
 800546c:	68fb      	ldr	r3, [r7, #12]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop

08005478 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005482:	2102      	movs	r1, #2
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff fed9 	bl	800523c <ism330dhcx_mem_bank_set>
 800548a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d107      	bne.n	80054a2 <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8005492:	f107 0208 	add.w	r2, r7, #8
 8005496:	2301      	movs	r3, #1
 8005498:	2105      	movs	r1, #5
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff f93c 	bl	8004718 <ism330dhcx_read_reg>
 80054a0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10b      	bne.n	80054c0 <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80054a8:	2100      	movs	r1, #0
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff fec6 	bl	800523c <ism330dhcx_mem_bank_set>
 80054b0:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 80054b2:	7a3b      	ldrb	r3, [r7, #8]
 80054b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80054c0:	68fb      	ldr	r3, [r7, #12]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80054d6:	2102      	movs	r1, #2
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff feaf 	bl	800523c <ism330dhcx_mem_bank_set>
 80054de:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d107      	bne.n	80054f6 <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 80054e6:	f107 0208 	add.w	r2, r7, #8
 80054ea:	2301      	movs	r3, #1
 80054ec:	2160      	movs	r1, #96	; 0x60
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff f912 	bl	8004718 <ism330dhcx_read_reg>
 80054f4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0) {
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d12a      	bne.n	8005552 <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 80054fc:	7a3b      	ldrb	r3, [r7, #8]
 80054fe:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b03      	cmp	r3, #3
 8005506:	d81b      	bhi.n	8005540 <ism330dhcx_mlc_data_rate_get+0x74>
 8005508:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <ism330dhcx_mlc_data_rate_get+0x44>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	08005521 	.word	0x08005521
 8005514:	08005529 	.word	0x08005529
 8005518:	08005531 	.word	0x08005531
 800551c:	08005539 	.word	0x08005539
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2200      	movs	r2, #0
 8005524:	701a      	strb	r2, [r3, #0]
        break;
 8005526:	e00f      	b.n	8005548 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2201      	movs	r2, #1
 800552c:	701a      	strb	r2, [r3, #0]
        break;
 800552e:	e00b      	b.n	8005548 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2202      	movs	r2, #2
 8005534:	701a      	strb	r2, [r3, #0]
        break;
 8005536:	e007      	b.n	8005548 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2203      	movs	r2, #3
 800553c:	701a      	strb	r2, [r3, #0]
        break;
 800553e:	e003      	b.n	8005548 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2200      	movs	r2, #0
 8005544:	701a      	strb	r2, [r3, #0]
        break;
 8005546:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005548:	2100      	movs	r1, #0
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff fe76 	bl	800523c <ism330dhcx_mem_bank_set>
 8005550:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005552:	68fb      	ldr	r3, [r7, #12]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <IKS02A1_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS02A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08e      	sub	sp, #56	; 0x38
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005566:	2300      	movs	r3, #0
 8005568:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800556a:	2301      	movs	r3, #1
 800556c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS02A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d06e      	beq.n	8005656 <IKS02A1_MOTION_SENSOR_Init+0xfa>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b02      	cmp	r3, #2
 800557c:	f200 809d 	bhi.w	80056ba <IKS02A1_MOTION_SENSOR_Init+0x15e>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <IKS02A1_MOTION_SENSOR_Init+0x32>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d032      	beq.n	80055f2 <IKS02A1_MOTION_SENSOR_Init+0x96>
 800558c:	e095      	b.n	80056ba <IKS02A1_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS02A1_MOTION_SENSOR_ISM330DHCX_0 == 1)
    case IKS02A1_ISM330DHCX_0:
      if (ISM330DHCX_0_Probe(Functions) != BSP_ERROR_NONE)
 800558e:	6838      	ldr	r0, [r7, #0]
 8005590:	f000 f8e0 	bl	8005754 <ISM330DHCX_0_Probe>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <IKS02A1_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	e0cc      	b.n	800573a <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80055a0:	4a68      	ldr	r2, [pc, #416]	; (8005744 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	4967      	ldr	r1, [pc, #412]	; (8005748 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80055b2:	f107 010c 	add.w	r1, r7, #12
 80055b6:	4610      	mov	r0, r2
 80055b8:	4798      	blx	r3
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <IKS02A1_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80055c0:	f06f 0306 	mvn.w	r3, #6
 80055c4:	e0b9      	b.n	800573a <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80055c6:	7b3b      	ldrb	r3, [r7, #12]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d103      	bne.n	80055d4 <IKS02A1_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	f043 0302 	orr.w	r3, r3, #2
 80055d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80055d4:	7b7b      	ldrb	r3, [r7, #13]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d103      	bne.n	80055e2 <IKS02A1_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	f043 0301 	orr.w	r3, r3, #1
 80055e0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80055e2:	7bbb      	ldrb	r3, [r7, #14]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d16c      	bne.n	80056c2 <IKS02A1_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	f043 0304 	orr.w	r3, r3, #4
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80055f0:	e067      	b.n	80056c2 <IKS02A1_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS02A1_MOTION_SENSOR_IIS2DLPC_0 == 1)
    case IKS02A1_IIS2DLPC_0:
      if (IIS2DLPC_0_Probe(Functions) != BSP_ERROR_NONE)
 80055f2:	6838      	ldr	r0, [r7, #0]
 80055f4:	f000 f96a 	bl	80058cc <IIS2DLPC_0_Probe>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <IKS02A1_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80055fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005602:	e09a      	b.n	800573a <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005604:	4a4f      	ldr	r2, [pc, #316]	; (8005744 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	494e      	ldr	r1, [pc, #312]	; (8005748 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005616:	f107 010c 	add.w	r1, r7, #12
 800561a:	4610      	mov	r0, r2
 800561c:	4798      	blx	r3
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <IKS02A1_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005624:	f06f 0306 	mvn.w	r3, #6
 8005628:	e087      	b.n	800573a <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800562a:	7b3b      	ldrb	r3, [r7, #12]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d103      	bne.n	8005638 <IKS02A1_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005632:	f043 0302 	orr.w	r3, r3, #2
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005638:	7b7b      	ldrb	r3, [r7, #13]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d103      	bne.n	8005646 <IKS02A1_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	f043 0301 	orr.w	r3, r3, #1
 8005644:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005646:	7bbb      	ldrb	r3, [r7, #14]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d13c      	bne.n	80056c6 <IKS02A1_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	f043 0304 	orr.w	r3, r3, #4
 8005652:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005654:	e037      	b.n	80056c6 <IKS02A1_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS02A1_MOTION_SENSOR_IIS2MDC_0 == 1)
    case IKS02A1_IIS2MDC_0:
      if (IIS2MDC_0_Probe(Functions) != BSP_ERROR_NONE)
 8005656:	6838      	ldr	r0, [r7, #0]
 8005658:	f000 f9e0 	bl	8005a1c <IIS2MDC_0_Probe>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <IKS02A1_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8005662:	f04f 33ff 	mov.w	r3, #4294967295
 8005666:	e068      	b.n	800573a <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005668:	4a36      	ldr	r2, [pc, #216]	; (8005744 <IKS02A1_MOTION_SENSOR_Init+0x1e8>)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	4935      	ldr	r1, [pc, #212]	; (8005748 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800567a:	f107 010c 	add.w	r1, r7, #12
 800567e:	4610      	mov	r0, r2
 8005680:	4798      	blx	r3
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <IKS02A1_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005688:	f06f 0306 	mvn.w	r3, #6
 800568c:	e055      	b.n	800573a <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800568e:	7b3b      	ldrb	r3, [r7, #12]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d103      	bne.n	800569c <IKS02A1_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	f043 0302 	orr.w	r3, r3, #2
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800569c:	7b7b      	ldrb	r3, [r7, #13]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d103      	bne.n	80056aa <IKS02A1_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80056aa:	7bbb      	ldrb	r3, [r7, #14]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d10c      	bne.n	80056ca <IKS02A1_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	f043 0304 	orr.w	r3, r3, #4
 80056b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80056b8:	e007      	b.n	80056ca <IKS02A1_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80056ba:	f06f 0301 	mvn.w	r3, #1
 80056be:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80056c0:	e004      	b.n	80056cc <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 80056c2:	bf00      	nop
 80056c4:	e002      	b.n	80056cc <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 80056c6:	bf00      	nop
 80056c8:	e000      	b.n	80056cc <IKS02A1_MOTION_SENSOR_Init+0x170>
      break;
 80056ca:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80056cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <IKS02A1_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80056d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d4:	e031      	b.n	800573a <IKS02A1_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 80056d6:	2300      	movs	r3, #0
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056da:	e02a      	b.n	8005732 <IKS02A1_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	4013      	ands	r3, r2
 80056e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d11e      	bne.n	8005726 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
 80056e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	4013      	ands	r3, r2
 80056ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d118      	bne.n	8005726 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80056f4:	4a15      	ldr	r2, [pc, #84]	; (800574c <IKS02A1_MOTION_SENSOR_Init+0x1f0>)
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056fc:	4814      	ldr	r0, [pc, #80]	; (8005750 <IKS02A1_MOTION_SENSOR_Init+0x1f4>)
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	4413      	add	r3, r2
 8005706:	440b      	add	r3, r1
 8005708:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	490e      	ldr	r1, [pc, #56]	; (8005748 <IKS02A1_MOTION_SENSOR_Init+0x1ec>)
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005716:	4610      	mov	r0, r2
 8005718:	4798      	blx	r3
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <IKS02A1_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005720:	f06f 0304 	mvn.w	r3, #4
 8005724:	e009      	b.n	800573a <IKS02A1_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS02A1_MOTION_FUNCTIONS_NBR; i++)
 800572c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572e:	3301      	adds	r3, #1
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005734:	2b02      	cmp	r3, #2
 8005736:	d9d1      	bls.n	80056dc <IKS02A1_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800573a:	4618      	mov	r0, r3
 800573c:	3738      	adds	r7, #56	; 0x38
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	200005a4 	.word	0x200005a4
 8005748:	2005e600 	.word	0x2005e600
 800574c:	200004d0 	.word	0x200004d0
 8005750:	20000580 	.word	0x20000580

08005754 <ISM330DHCX_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t ISM330DHCX_0_Probe(uint32_t Functions)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b092      	sub	sp, #72	; 0x48
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  ISM330DHCX_IO_t            io_ctx;
  uint8_t                    id;
  static ISM330DHCX_Object_t ism330dhcx_obj_0;
  ISM330DHCX_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800575c:	2300      	movs	r3, #0
 800575e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = ISM330DHCX_I2C_BUS; /* I2C */
 8005760:	2300      	movs	r3, #0
 8005762:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = ISM330DHCX_I2C_ADD_H;
 8005764:	23d7      	movs	r3, #215	; 0xd7
 8005766:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 800576a:	4b4a      	ldr	r3, [pc, #296]	; (8005894 <ISM330DHCX_0_Probe+0x140>)
 800576c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 800576e:	4b4a      	ldr	r3, [pc, #296]	; (8005898 <ISM330DHCX_0_Probe+0x144>)
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 8005772:	4b4a      	ldr	r3, [pc, #296]	; (800589c <ISM330DHCX_0_Probe+0x148>)
 8005774:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 8005776:	4b4a      	ldr	r3, [pc, #296]	; (80058a0 <ISM330DHCX_0_Probe+0x14c>)
 8005778:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 800577a:	4b4a      	ldr	r3, [pc, #296]	; (80058a4 <ISM330DHCX_0_Probe+0x150>)
 800577c:	643b      	str	r3, [r7, #64]	; 0x40

  if (ISM330DHCX_RegisterBusIO(&ism330dhcx_obj_0, &io_ctx) != ISM330DHCX_OK)
 800577e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005782:	4619      	mov	r1, r3
 8005784:	4848      	ldr	r0, [pc, #288]	; (80058a8 <ISM330DHCX_0_Probe+0x154>)
 8005786:	f7fd ffa3 	bl	80036d0 <ISM330DHCX_RegisterBusIO>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <ISM330DHCX_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005790:	f06f 0306 	mvn.w	r3, #6
 8005794:	647b      	str	r3, [r7, #68]	; 0x44
 8005796:	e077      	b.n	8005888 <ISM330DHCX_0_Probe+0x134>
  }
  else if (ISM330DHCX_ReadID(&ism330dhcx_obj_0, &id) != ISM330DHCX_OK)
 8005798:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800579c:	4619      	mov	r1, r3
 800579e:	4842      	ldr	r0, [pc, #264]	; (80058a8 <ISM330DHCX_0_Probe+0x154>)
 80057a0:	f7fe f8b0 	bl	8003904 <ISM330DHCX_ReadID>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <ISM330DHCX_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057aa:	f06f 0306 	mvn.w	r3, #6
 80057ae:	647b      	str	r3, [r7, #68]	; 0x44
 80057b0:	e06a      	b.n	8005888 <ISM330DHCX_0_Probe+0x134>
  }
  else if (id != ISM330DHCX_ID)
 80057b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057b6:	2b6b      	cmp	r3, #107	; 0x6b
 80057b8:	d003      	beq.n	80057c2 <ISM330DHCX_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057ba:	f06f 0306 	mvn.w	r3, #6
 80057be:	647b      	str	r3, [r7, #68]	; 0x44
 80057c0:	e062      	b.n	8005888 <ISM330DHCX_0_Probe+0x134>
  }
  else
  {
    (void)ISM330DHCX_GetCapabilities(&ism330dhcx_obj_0, &cap);
 80057c2:	f107 0308 	add.w	r3, r7, #8
 80057c6:	4619      	mov	r1, r3
 80057c8:	4837      	ldr	r0, [pc, #220]	; (80058a8 <ISM330DHCX_0_Probe+0x154>)
 80057ca:	f7fe f8b1 	bl	8003930 <ISM330DHCX_GetCapabilities>
    MotionCtx[IKS02A1_ISM330DHCX_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80057ce:	7a7b      	ldrb	r3, [r7, #9]
 80057d0:	461a      	mov	r2, r3
 80057d2:	7a3b      	ldrb	r3, [r7, #8]
 80057d4:	005b      	lsls	r3, r3, #1
 80057d6:	431a      	orrs	r2, r3
 80057d8:	7abb      	ldrb	r3, [r7, #10]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4313      	orrs	r3, r2
 80057de:	4a33      	ldr	r2, [pc, #204]	; (80058ac <ISM330DHCX_0_Probe+0x158>)
 80057e0:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS02A1_ISM330DHCX_0] = &ism330dhcx_obj_0;
 80057e2:	4b33      	ldr	r3, [pc, #204]	; (80058b0 <ISM330DHCX_0_Probe+0x15c>)
 80057e4:	4a30      	ldr	r2, [pc, #192]	; (80058a8 <ISM330DHCX_0_Probe+0x154>)
 80057e6:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_ISM330DHCX_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&ISM330DHCX_COMMON_Driver;
 80057e8:	4b32      	ldr	r3, [pc, #200]	; (80058b4 <ISM330DHCX_0_Probe+0x160>)
 80057ea:	4a33      	ldr	r2, [pc, #204]	; (80058b8 <ISM330DHCX_0_Probe+0x164>)
 80057ec:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 80057ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d11d      	bne.n	8005830 <ISM330DHCX_0_Probe+0xdc>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d018      	beq.n	8005830 <ISM330DHCX_0_Probe+0xdc>
 80057fe:	7a7b      	ldrb	r3, [r7, #9]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d115      	bne.n	8005830 <ISM330DHCX_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&ISM330DHCX_GYRO_Driver;
 8005804:	4b2d      	ldr	r3, [pc, #180]	; (80058bc <ISM330DHCX_0_Probe+0x168>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	4a2d      	ldr	r2, [pc, #180]	; (80058c0 <ISM330DHCX_0_Probe+0x16c>)
 800580a:	492e      	ldr	r1, [pc, #184]	; (80058c4 <ISM330DHCX_0_Probe+0x170>)
 800580c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 8005810:	4b28      	ldr	r3, [pc, #160]	; (80058b4 <ISM330DHCX_0_Probe+0x160>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a26      	ldr	r2, [pc, #152]	; (80058b0 <ISM330DHCX_0_Probe+0x15c>)
 8005818:	6812      	ldr	r2, [r2, #0]
 800581a:	4610      	mov	r0, r2
 800581c:	4798      	blx	r3
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <ISM330DHCX_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005824:	f06f 0304 	mvn.w	r3, #4
 8005828:	647b      	str	r3, [r7, #68]	; 0x44
 800582a:	e001      	b.n	8005830 <ISM330DHCX_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800582c:	2300      	movs	r3, #0
 800582e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005832:	2b00      	cmp	r3, #0
 8005834:	d11d      	bne.n	8005872 <ISM330DHCX_0_Probe+0x11e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d018      	beq.n	8005872 <ISM330DHCX_0_Probe+0x11e>
 8005840:	7a3b      	ldrb	r3, [r7, #8]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d115      	bne.n	8005872 <ISM330DHCX_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_ISM330DHCX_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005846:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <ISM330DHCX_0_Probe+0x168>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	4a1d      	ldr	r2, [pc, #116]	; (80058c0 <ISM330DHCX_0_Probe+0x16c>)
 800584c:	491e      	ldr	r1, [pc, #120]	; (80058c8 <ISM330DHCX_0_Probe+0x174>)
 800584e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&ISM330DHCX_ACC_Driver;

      if (MotionDrv[IKS02A1_ISM330DHCX_0]->Init(MotionCompObj[IKS02A1_ISM330DHCX_0]) != ISM330DHCX_OK)
 8005852:	4b18      	ldr	r3, [pc, #96]	; (80058b4 <ISM330DHCX_0_Probe+0x160>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <ISM330DHCX_0_Probe+0x15c>)
 800585a:	6812      	ldr	r2, [r2, #0]
 800585c:	4610      	mov	r0, r2
 800585e:	4798      	blx	r3
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <ISM330DHCX_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005866:	f06f 0304 	mvn.w	r3, #4
 800586a:	647b      	str	r3, [r7, #68]	; 0x44
 800586c:	e001      	b.n	8005872 <ISM330DHCX_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800586e:	2300      	movs	r3, #0
 8005870:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005874:	2b00      	cmp	r3, #0
 8005876:	d107      	bne.n	8005888 <ISM330DHCX_0_Probe+0x134>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <ISM330DHCX_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005882:	f06f 0304 	mvn.w	r3, #4
 8005886:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800588a:	4618      	mov	r0, r3
 800588c:	3748      	adds	r7, #72	; 0x48
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	08001279 	.word	0x08001279
 8005898:	080012f5 	.word	0x080012f5
 800589c:	080013a9 	.word	0x080013a9
 80058a0:	08001345 	.word	0x08001345
 80058a4:	0800140d 	.word	0x0800140d
 80058a8:	200005bc 	.word	0x200005bc
 80058ac:	200005b0 	.word	0x200005b0
 80058b0:	2005e600 	.word	0x2005e600
 80058b4:	200005a4 	.word	0x200005a4
 80058b8:	20000478 	.word	0x20000478
 80058bc:	200004d0 	.word	0x200004d0
 80058c0:	20000580 	.word	0x20000580
 80058c4:	200004ac 	.word	0x200004ac
 80058c8:	20000488 	.word	0x20000488

080058cc <IIS2DLPC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t IIS2DLPC_0_Probe(uint32_t Functions)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b092      	sub	sp, #72	; 0x48
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  IIS2DLPC_IO_t            io_ctx;
  uint8_t                  id;
  static IIS2DLPC_Object_t iis2dlpc_obj_0;
  IIS2DLPC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80058d4:	2300      	movs	r3, #0
 80058d6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2DLPC_I2C_BUS; /* I2C */
 80058d8:	2300      	movs	r3, #0
 80058da:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = IIS2DLPC_I2C_ADD_H;
 80058dc:	2333      	movs	r3, #51	; 0x33
 80058de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 80058e2:	4b41      	ldr	r3, [pc, #260]	; (80059e8 <IIS2DLPC_0_Probe+0x11c>)
 80058e4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 80058e6:	4b41      	ldr	r3, [pc, #260]	; (80059ec <IIS2DLPC_0_Probe+0x120>)
 80058e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 80058ea:	4b41      	ldr	r3, [pc, #260]	; (80059f0 <IIS2DLPC_0_Probe+0x124>)
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 80058ee:	4b41      	ldr	r3, [pc, #260]	; (80059f4 <IIS2DLPC_0_Probe+0x128>)
 80058f0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 80058f2:	4b41      	ldr	r3, [pc, #260]	; (80059f8 <IIS2DLPC_0_Probe+0x12c>)
 80058f4:	643b      	str	r3, [r7, #64]	; 0x40

  if (IIS2DLPC_RegisterBusIO(&iis2dlpc_obj_0, &io_ctx) != IIS2DLPC_OK)
 80058f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058fa:	4619      	mov	r1, r3
 80058fc:	483f      	ldr	r0, [pc, #252]	; (80059fc <IIS2DLPC_0_Probe+0x130>)
 80058fe:	f7fb ff97 	bl	8001830 <IIS2DLPC_RegisterBusIO>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <IIS2DLPC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005908:	f06f 0306 	mvn.w	r3, #6
 800590c:	647b      	str	r3, [r7, #68]	; 0x44
 800590e:	e065      	b.n	80059dc <IIS2DLPC_0_Probe+0x110>
  }
  else if (IIS2DLPC_ReadID(&iis2dlpc_obj_0, &id) != IIS2DLPC_OK)
 8005910:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005914:	4619      	mov	r1, r3
 8005916:	4839      	ldr	r0, [pc, #228]	; (80059fc <IIS2DLPC_0_Probe+0x130>)
 8005918:	f7fc f874 	bl	8001a04 <IIS2DLPC_ReadID>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <IIS2DLPC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005922:	f06f 0306 	mvn.w	r3, #6
 8005926:	647b      	str	r3, [r7, #68]	; 0x44
 8005928:	e058      	b.n	80059dc <IIS2DLPC_0_Probe+0x110>
  }
  else if (id != IIS2DLPC_ID)
 800592a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800592e:	2b44      	cmp	r3, #68	; 0x44
 8005930:	d003      	beq.n	800593a <IIS2DLPC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005932:	f06f 0306 	mvn.w	r3, #6
 8005936:	647b      	str	r3, [r7, #68]	; 0x44
 8005938:	e050      	b.n	80059dc <IIS2DLPC_0_Probe+0x110>
  }
  else
  {
    (void)IIS2DLPC_GetCapabilities(&iis2dlpc_obj_0, &cap);
 800593a:	f107 0308 	add.w	r3, r7, #8
 800593e:	4619      	mov	r1, r3
 8005940:	482e      	ldr	r0, [pc, #184]	; (80059fc <IIS2DLPC_0_Probe+0x130>)
 8005942:	f7fc f875 	bl	8001a30 <IIS2DLPC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2DLPC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005946:	7a7b      	ldrb	r3, [r7, #9]
 8005948:	461a      	mov	r2, r3
 800594a:	7a3b      	ldrb	r3, [r7, #8]
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	431a      	orrs	r2, r3
 8005950:	7abb      	ldrb	r3, [r7, #10]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4313      	orrs	r3, r2
 8005956:	4a2a      	ldr	r2, [pc, #168]	; (8005a00 <IIS2DLPC_0_Probe+0x134>)
 8005958:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS02A1_IIS2DLPC_0] = &iis2dlpc_obj_0;
 800595a:	4b2a      	ldr	r3, [pc, #168]	; (8005a04 <IIS2DLPC_0_Probe+0x138>)
 800595c:	4a27      	ldr	r2, [pc, #156]	; (80059fc <IIS2DLPC_0_Probe+0x130>)
 800595e:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2DLPC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2DLPC_COMMON_Driver;
 8005960:	4b29      	ldr	r3, [pc, #164]	; (8005a08 <IIS2DLPC_0_Probe+0x13c>)
 8005962:	4a2a      	ldr	r2, [pc, #168]	; (8005a0c <IIS2DLPC_0_Probe+0x140>)
 8005964:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10a      	bne.n	8005982 <IIS2DLPC_0_Probe+0xb6>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <IIS2DLPC_0_Probe+0xb6>
 8005976:	7a7b      	ldrb	r3, [r7, #9]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d102      	bne.n	8005982 <IIS2DLPC_0_Probe+0xb6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800597c:	f06f 0304 	mvn.w	r3, #4
 8005980:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005982:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005984:	2b00      	cmp	r3, #0
 8005986:	d11e      	bne.n	80059c6 <IIS2DLPC_0_Probe+0xfa>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d019      	beq.n	80059c6 <IIS2DLPC_0_Probe+0xfa>
 8005992:	7a3b      	ldrb	r3, [r7, #8]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d116      	bne.n	80059c6 <IIS2DLPC_0_Probe+0xfa>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2DLPC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005998:	4b1d      	ldr	r3, [pc, #116]	; (8005a10 <IIS2DLPC_0_Probe+0x144>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <IIS2DLPC_0_Probe+0x148>)
 800599e:	3303      	adds	r3, #3
 80059a0:	491d      	ldr	r1, [pc, #116]	; (8005a18 <IIS2DLPC_0_Probe+0x14c>)
 80059a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&IIS2DLPC_ACC_Driver;

      if (MotionDrv[IKS02A1_IIS2DLPC_0]->Init(MotionCompObj[IKS02A1_IIS2DLPC_0]) != IIS2DLPC_OK)
 80059a6:	4b18      	ldr	r3, [pc, #96]	; (8005a08 <IIS2DLPC_0_Probe+0x13c>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a15      	ldr	r2, [pc, #84]	; (8005a04 <IIS2DLPC_0_Probe+0x138>)
 80059ae:	6852      	ldr	r2, [r2, #4]
 80059b0:	4610      	mov	r0, r2
 80059b2:	4798      	blx	r3
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <IIS2DLPC_0_Probe+0xf6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80059ba:	f06f 0304 	mvn.w	r3, #4
 80059be:	647b      	str	r3, [r7, #68]	; 0x44
 80059c0:	e001      	b.n	80059c6 <IIS2DLPC_0_Probe+0xfa>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80059c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d107      	bne.n	80059dc <IIS2DLPC_0_Probe+0x110>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f003 0304 	and.w	r3, r3, #4
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <IIS2DLPC_0_Probe+0x110>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80059d6:	f06f 0304 	mvn.w	r3, #4
 80059da:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80059dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3748      	adds	r7, #72	; 0x48
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	08001279 	.word	0x08001279
 80059ec:	080012f5 	.word	0x080012f5
 80059f0:	080013a9 	.word	0x080013a9
 80059f4:	08001345 	.word	0x08001345
 80059f8:	0800140d 	.word	0x0800140d
 80059fc:	200005ec 	.word	0x200005ec
 8005a00:	200005b0 	.word	0x200005b0
 8005a04:	2005e600 	.word	0x2005e600
 8005a08:	200005a4 	.word	0x200005a4
 8005a0c:	20000410 	.word	0x20000410
 8005a10:	200004d0 	.word	0x200004d0
 8005a14:	20000580 	.word	0x20000580
 8005a18:	20000420 	.word	0x20000420

08005a1c <IIS2MDC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t IIS2MDC_0_Probe(uint32_t Functions)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b092      	sub	sp, #72	; 0x48
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  IIS2MDC_IO_t            io_ctx;
  uint8_t                 id;
  static IIS2MDC_Object_t iis2mdc_obj_0;
  IIS2MDC_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005a24:	2300      	movs	r3, #0
 8005a26:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = IIS2MDC_I2C_BUS; /* I2C */
 8005a28:	2300      	movs	r3, #0
 8005a2a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = IIS2MDC_I2C_ADD;
 8005a2c:	233d      	movs	r3, #61	; 0x3d
 8005a2e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS02A1_I2C_Init;
 8005a32:	4b41      	ldr	r3, [pc, #260]	; (8005b38 <IIS2MDC_0_Probe+0x11c>)
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS02A1_I2C_DeInit;
 8005a36:	4b41      	ldr	r3, [pc, #260]	; (8005b3c <IIS2MDC_0_Probe+0x120>)
 8005a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS02A1_I2C_ReadReg;
 8005a3a:	4b41      	ldr	r3, [pc, #260]	; (8005b40 <IIS2MDC_0_Probe+0x124>)
 8005a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS02A1_I2C_WriteReg;
 8005a3e:	4b41      	ldr	r3, [pc, #260]	; (8005b44 <IIS2MDC_0_Probe+0x128>)
 8005a40:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS02A1_GetTick;
 8005a42:	4b41      	ldr	r3, [pc, #260]	; (8005b48 <IIS2MDC_0_Probe+0x12c>)
 8005a44:	643b      	str	r3, [r7, #64]	; 0x40

  if (IIS2MDC_RegisterBusIO(&iis2mdc_obj_0, &io_ctx) != IIS2MDC_OK)
 8005a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	483f      	ldr	r0, [pc, #252]	; (8005b4c <IIS2MDC_0_Probe+0x130>)
 8005a4e:	f7fd f9fd 	bl	8002e4c <IIS2MDC_RegisterBusIO>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <IIS2MDC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005a58:	f06f 0306 	mvn.w	r3, #6
 8005a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a5e:	e065      	b.n	8005b2c <IIS2MDC_0_Probe+0x110>
  }
  else if (IIS2MDC_ReadID(&iis2mdc_obj_0, &id) != IIS2MDC_OK)
 8005a60:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005a64:	4619      	mov	r1, r3
 8005a66:	4839      	ldr	r0, [pc, #228]	; (8005b4c <IIS2MDC_0_Probe+0x130>)
 8005a68:	f7fd faa7 	bl	8002fba <IIS2MDC_ReadID>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <IIS2MDC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005a72:	f06f 0306 	mvn.w	r3, #6
 8005a76:	647b      	str	r3, [r7, #68]	; 0x44
 8005a78:	e058      	b.n	8005b2c <IIS2MDC_0_Probe+0x110>
  }
  else if (id != IIS2MDC_ID)
 8005a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d003      	beq.n	8005a8a <IIS2MDC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005a82:	f06f 0306 	mvn.w	r3, #6
 8005a86:	647b      	str	r3, [r7, #68]	; 0x44
 8005a88:	e050      	b.n	8005b2c <IIS2MDC_0_Probe+0x110>
  }
  else
  {
    (void)IIS2MDC_GetCapabilities(&iis2mdc_obj_0, &cap);
 8005a8a:	f107 0308 	add.w	r3, r7, #8
 8005a8e:	4619      	mov	r1, r3
 8005a90:	482e      	ldr	r0, [pc, #184]	; (8005b4c <IIS2MDC_0_Probe+0x130>)
 8005a92:	f7fd faa9 	bl	8002fe8 <IIS2MDC_GetCapabilities>
    MotionCtx[IKS02A1_IIS2MDC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005a96:	7a7b      	ldrb	r3, [r7, #9]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	7a3b      	ldrb	r3, [r7, #8]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	7abb      	ldrb	r3, [r7, #10]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	4a2a      	ldr	r2, [pc, #168]	; (8005b50 <IIS2MDC_0_Probe+0x134>)
 8005aa8:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS02A1_IIS2MDC_0] = &iis2mdc_obj_0;
 8005aaa:	4b2a      	ldr	r3, [pc, #168]	; (8005b54 <IIS2MDC_0_Probe+0x138>)
 8005aac:	4a27      	ldr	r2, [pc, #156]	; (8005b4c <IIS2MDC_0_Probe+0x130>)
 8005aae:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS02A1_IIS2MDC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&IIS2MDC_COMMON_Driver;
 8005ab0:	4b29      	ldr	r3, [pc, #164]	; (8005b58 <IIS2MDC_0_Probe+0x13c>)
 8005ab2:	4a2a      	ldr	r2, [pc, #168]	; (8005b5c <IIS2MDC_0_Probe+0x140>)
 8005ab4:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <IIS2MDC_0_Probe+0xb6>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d005      	beq.n	8005ad2 <IIS2MDC_0_Probe+0xb6>
 8005ac6:	7a7b      	ldrb	r3, [r7, #9]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d102      	bne.n	8005ad2 <IIS2MDC_0_Probe+0xb6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005acc:	f06f 0304 	mvn.w	r3, #4
 8005ad0:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <IIS2MDC_0_Probe+0xd2>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <IIS2MDC_0_Probe+0xd2>
 8005ae2:	7a3b      	ldrb	r3, [r7, #8]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d102      	bne.n	8005aee <IIS2MDC_0_Probe+0xd2>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ae8:	f06f 0304 	mvn.w	r3, #4
 8005aec:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d11b      	bne.n	8005b2c <IIS2MDC_0_Probe+0x110>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d016      	beq.n	8005b2c <IIS2MDC_0_Probe+0x110>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS02A1_IIS2MDC_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005afe:	4b18      	ldr	r3, [pc, #96]	; (8005b60 <IIS2MDC_0_Probe+0x144>)
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <IIS2MDC_0_Probe+0x148>)
 8005b04:	3306      	adds	r3, #6
 8005b06:	4918      	ldr	r1, [pc, #96]	; (8005b68 <IIS2MDC_0_Probe+0x14c>)
 8005b08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&IIS2MDC_MAG_Driver;

      if (MotionDrv[IKS02A1_IIS2MDC_0]->Init(MotionCompObj[IKS02A1_IIS2MDC_0]) != IIS2MDC_OK)
 8005b0c:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <IIS2MDC_0_Probe+0x13c>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a10      	ldr	r2, [pc, #64]	; (8005b54 <IIS2MDC_0_Probe+0x138>)
 8005b14:	6892      	ldr	r2, [r2, #8]
 8005b16:	4610      	mov	r0, r2
 8005b18:	4798      	blx	r3
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <IIS2MDC_0_Probe+0x10c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b20:	f06f 0304 	mvn.w	r3, #4
 8005b24:	647b      	str	r3, [r7, #68]	; 0x44
 8005b26:	e001      	b.n	8005b2c <IIS2MDC_0_Probe+0x110>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
  }
  return ret;
 8005b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3748      	adds	r7, #72	; 0x48
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	08001279 	.word	0x08001279
 8005b3c:	080012f5 	.word	0x080012f5
 8005b40:	080013a9 	.word	0x080013a9
 8005b44:	08001345 	.word	0x08001345
 8005b48:	0800140d 	.word	0x0800140d
 8005b4c:	20000620 	.word	0x20000620
 8005b50:	200005b0 	.word	0x200005b0
 8005b54:	2005e600 	.word	0x2005e600
 8005b58:	200005a4 	.word	0x200005a4
 8005b5c:	20000444 	.word	0x20000444
 8005b60:	200004d0 	.word	0x200004d0
 8005b64:	20000580 	.word	0x20000580
 8005b68:	20000454 	.word	0x20000454

08005b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b70:	2003      	movs	r0, #3
 8005b72:	f000 f971 	bl	8005e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b76:	2000      	movs	r0, #0
 8005b78:	f000 f806 	bl	8005b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b7c:	f7fb fa52 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b90:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <HAL_InitTick+0x54>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <HAL_InitTick+0x58>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 f999 	bl	8005ede <HAL_SYSTICK_Config>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e00e      	b.n	8005bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b0f      	cmp	r3, #15
 8005bba:	d80a      	bhi.n	8005bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc4:	f000 f953 	bl	8005e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005bc8:	4a06      	ldr	r2, [pc, #24]	; (8005be4 <HAL_InitTick+0x5c>)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	e000      	b.n	8005bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	2000040c 	.word	0x2000040c
 8005be0:	200004e8 	.word	0x200004e8
 8005be4:	200004e4 	.word	0x200004e4

08005be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <HAL_IncTick+0x20>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4b06      	ldr	r3, [pc, #24]	; (8005c0c <HAL_IncTick+0x24>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	4a04      	ldr	r2, [pc, #16]	; (8005c0c <HAL_IncTick+0x24>)
 8005bfa:	6013      	str	r3, [r2, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	200004e8 	.word	0x200004e8
 8005c0c:	2005e60c 	.word	0x2005e60c

08005c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  return uwTick;
 8005c14:	4b03      	ldr	r3, [pc, #12]	; (8005c24 <HAL_GetTick+0x14>)
 8005c16:	681b      	ldr	r3, [r3, #0]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	2005e60c 	.word	0x2005e60c

08005c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c30:	f7ff ffee 	bl	8005c10 <HAL_GetTick>
 8005c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	d005      	beq.n	8005c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c42:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <HAL_Delay+0x44>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c4e:	bf00      	nop
 8005c50:	f7ff ffde 	bl	8005c10 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d8f7      	bhi.n	8005c50 <HAL_Delay+0x28>
  {
  }
}
 8005c60:	bf00      	nop
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200004e8 	.word	0x200004e8

08005c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c80:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <__NVIC_SetPriorityGrouping+0x40>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c98:	4b06      	ldr	r3, [pc, #24]	; (8005cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c9e:	4a04      	ldr	r2, [pc, #16]	; (8005cb0 <__NVIC_SetPriorityGrouping+0x40>)
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	60d3      	str	r3, [r2, #12]
}
 8005ca4:	bf00      	nop
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	e000ed00 	.word	0xe000ed00
 8005cb4:	05fa0000 	.word	0x05fa0000

08005cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cbc:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	0a1b      	lsrs	r3, r3, #8
 8005cc2:	f003 0307 	and.w	r3, r3, #7
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	e000ed00 	.word	0xe000ed00

08005cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	db0b      	blt.n	8005cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ce6:	79fb      	ldrb	r3, [r7, #7]
 8005ce8:	f003 021f 	and.w	r2, r3, #31
 8005cec:	4907      	ldr	r1, [pc, #28]	; (8005d0c <__NVIC_EnableIRQ+0x38>)
 8005cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	2001      	movs	r0, #1
 8005cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8005cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	e000e100 	.word	0xe000e100

08005d10 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	db12      	blt.n	8005d48 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	f003 021f 	and.w	r2, r3, #31
 8005d28:	490a      	ldr	r1, [pc, #40]	; (8005d54 <__NVIC_DisableIRQ+0x44>)
 8005d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	2001      	movs	r0, #1
 8005d32:	fa00 f202 	lsl.w	r2, r0, r2
 8005d36:	3320      	adds	r3, #32
 8005d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005d3c:	f3bf 8f4f 	dsb	sy
}
 8005d40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d42:	f3bf 8f6f 	isb	sy
}
 8005d46:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	e000e100 	.word	0xe000e100

08005d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	6039      	str	r1, [r7, #0]
 8005d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	db0a      	blt.n	8005d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	490c      	ldr	r1, [pc, #48]	; (8005da4 <__NVIC_SetPriority+0x4c>)
 8005d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d76:	0112      	lsls	r2, r2, #4
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d80:	e00a      	b.n	8005d98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	4908      	ldr	r1, [pc, #32]	; (8005da8 <__NVIC_SetPriority+0x50>)
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	3b04      	subs	r3, #4
 8005d90:	0112      	lsls	r2, r2, #4
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	440b      	add	r3, r1
 8005d96:	761a      	strb	r2, [r3, #24]
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	e000e100 	.word	0xe000e100
 8005da8:	e000ed00 	.word	0xe000ed00

08005dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b089      	sub	sp, #36	; 0x24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f1c3 0307 	rsb	r3, r3, #7
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	bf28      	it	cs
 8005dca:	2304      	movcs	r3, #4
 8005dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	2b06      	cmp	r3, #6
 8005dd4:	d902      	bls.n	8005ddc <NVIC_EncodePriority+0x30>
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	3b03      	subs	r3, #3
 8005dda:	e000      	b.n	8005dde <NVIC_EncodePriority+0x32>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005de0:	f04f 32ff 	mov.w	r2, #4294967295
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dea:	43da      	mvns	r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	401a      	ands	r2, r3
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005df4:	f04f 31ff 	mov.w	r1, #4294967295
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfe:	43d9      	mvns	r1, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e04:	4313      	orrs	r3, r2
         );
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3724      	adds	r7, #36	; 0x24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
	...

08005e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e24:	d301      	bcc.n	8005e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e26:	2301      	movs	r3, #1
 8005e28:	e00f      	b.n	8005e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e2a:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <SysTick_Config+0x40>)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e32:	210f      	movs	r1, #15
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295
 8005e38:	f7ff ff8e 	bl	8005d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e3c:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <SysTick_Config+0x40>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e42:	4b04      	ldr	r3, [pc, #16]	; (8005e54 <SysTick_Config+0x40>)
 8005e44:	2207      	movs	r2, #7
 8005e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	e000e010 	.word	0xe000e010

08005e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff ff05 	bl	8005c70 <__NVIC_SetPriorityGrouping>
}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b086      	sub	sp, #24
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	4603      	mov	r3, r0
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e80:	f7ff ff1a 	bl	8005cb8 <__NVIC_GetPriorityGrouping>
 8005e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68b9      	ldr	r1, [r7, #8]
 8005e8a:	6978      	ldr	r0, [r7, #20]
 8005e8c:	f7ff ff8e 	bl	8005dac <NVIC_EncodePriority>
 8005e90:	4602      	mov	r2, r0
 8005e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e96:	4611      	mov	r1, r2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff ff5d 	bl	8005d58 <__NVIC_SetPriority>
}
 8005e9e:	bf00      	nop
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	4603      	mov	r3, r0
 8005eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff ff0d 	bl	8005cd4 <__NVIC_EnableIRQ>
}
 8005eba:	bf00      	nop
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	4603      	mov	r3, r0
 8005eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff ff1d 	bl	8005d10 <__NVIC_DisableIRQ>
}
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff ff94 	bl	8005e14 <SysTick_Config>
 8005eec:	4603      	mov	r3, r0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e054      	b.n	8005fb4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	7f5b      	ldrb	r3, [r3, #29]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fa fb2a 	bl	8000574 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	791b      	ldrb	r3, [r3, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10c      	bne.n	8005f48 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a22      	ldr	r2, [pc, #136]	; (8005fbc <HAL_CRC_Init+0xc4>)
 8005f34:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0218 	bic.w	r2, r2, #24
 8005f44:	609a      	str	r2, [r3, #8]
 8005f46:	e00c      	b.n	8005f62 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6899      	ldr	r1, [r3, #8]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	461a      	mov	r2, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f834 	bl	8005fc0 <HAL_CRCEx_Polynomial_Set>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e028      	b.n	8005fb4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	795b      	ldrb	r3, [r3, #5]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d105      	bne.n	8005f76 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f72:	611a      	str	r2, [r3, #16]
 8005f74:	e004      	b.n	8005f80 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6912      	ldr	r2, [r2, #16]
 8005f7e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	695a      	ldr	r2, [r3, #20]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699a      	ldr	r2, [r3, #24]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	04c11db7 	.word	0x04c11db7

08005fc0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005fd0:	231f      	movs	r3, #31
 8005fd2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005fd4:	bf00      	nop
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1e5a      	subs	r2, r3, #1
 8005fda:	613a      	str	r2, [r7, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d009      	beq.n	8005ff4 <HAL_CRCEx_Polynomial_Set+0x34>
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f003 031f 	and.w	r3, r3, #31
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fec:	f003 0301 	and.w	r3, r3, #1
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0f0      	beq.n	8005fd6 <HAL_CRCEx_Polynomial_Set+0x16>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b18      	cmp	r3, #24
 8005ff8:	d846      	bhi.n	8006088 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005ffa:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	0800608f 	.word	0x0800608f
 8006004:	08006089 	.word	0x08006089
 8006008:	08006089 	.word	0x08006089
 800600c:	08006089 	.word	0x08006089
 8006010:	08006089 	.word	0x08006089
 8006014:	08006089 	.word	0x08006089
 8006018:	08006089 	.word	0x08006089
 800601c:	08006089 	.word	0x08006089
 8006020:	0800607d 	.word	0x0800607d
 8006024:	08006089 	.word	0x08006089
 8006028:	08006089 	.word	0x08006089
 800602c:	08006089 	.word	0x08006089
 8006030:	08006089 	.word	0x08006089
 8006034:	08006089 	.word	0x08006089
 8006038:	08006089 	.word	0x08006089
 800603c:	08006089 	.word	0x08006089
 8006040:	08006071 	.word	0x08006071
 8006044:	08006089 	.word	0x08006089
 8006048:	08006089 	.word	0x08006089
 800604c:	08006089 	.word	0x08006089
 8006050:	08006089 	.word	0x08006089
 8006054:	08006089 	.word	0x08006089
 8006058:	08006089 	.word	0x08006089
 800605c:	08006089 	.word	0x08006089
 8006060:	08006065 	.word	0x08006065
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b06      	cmp	r3, #6
 8006068:	d913      	bls.n	8006092 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800606e:	e010      	b.n	8006092 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b07      	cmp	r3, #7
 8006074:	d90f      	bls.n	8006096 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800607a:	e00c      	b.n	8006096 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b0f      	cmp	r3, #15
 8006080:	d90b      	bls.n	800609a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006086:	e008      	b.n	800609a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	75fb      	strb	r3, [r7, #23]
      break;
 800608c:	e006      	b.n	800609c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800608e:	bf00      	nop
 8006090:	e004      	b.n	800609c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006092:	bf00      	nop
 8006094:	e002      	b.n	800609c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006096:	bf00      	nop
 8006098:	e000      	b.n	800609c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800609a:	bf00      	nop
  }
  if (status == HAL_OK)
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10d      	bne.n	80060be <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f023 0118 	bic.w	r1, r3, #24
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80060be:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80060d8:	f7ff fd9a 	bl	8005c10 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e099      	b.n	800621c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0201 	bic.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006108:	e00f      	b.n	800612a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800610a:	f7ff fd81 	bl	8005c10 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b05      	cmp	r3, #5
 8006116:	d908      	bls.n	800612a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2203      	movs	r2, #3
 8006122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e078      	b.n	800621c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e8      	bne.n	800610a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4b38      	ldr	r3, [pc, #224]	; (8006224 <HAL_DMA_Init+0x158>)
 8006144:	4013      	ands	r3, r2
 8006146:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006156:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800616e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	4313      	orrs	r3, r2
 800617a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	2b04      	cmp	r3, #4
 8006182:	d107      	bne.n	8006194 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618c:	4313      	orrs	r3, r2
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	4313      	orrs	r3, r2
 8006192:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f023 0307 	bic.w	r3, r3, #7
 80061aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d117      	bne.n	80061ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00e      	beq.n	80061ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fb67 	bl	80068a4 <DMA_CheckFifoParam>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2240      	movs	r2, #64	; 0x40
 80061e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80061ea:	2301      	movs	r3, #1
 80061ec:	e016      	b.n	800621c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fb1e 	bl	8006838 <DMA_CalcBaseAndBitshift>
 80061fc:	4603      	mov	r3, r0
 80061fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006204:	223f      	movs	r2, #63	; 0x3f
 8006206:	409a      	lsls	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	e010803f 	.word	0xe010803f

08006228 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e050      	b.n	80062dc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d101      	bne.n	800624a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006246:	2302      	movs	r3, #2
 8006248:	e048      	b.n	80062dc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0201 	bic.w	r2, r2, #1
 8006258:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2200      	movs	r2, #0
 8006268:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2200      	movs	r2, #0
 8006270:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2200      	movs	r2, #0
 8006278:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2200      	movs	r2, #0
 8006280:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2221      	movs	r2, #33	; 0x21
 8006288:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fad4 	bl	8006838 <DMA_CalcBaseAndBitshift>
 8006290:	4603      	mov	r3, r0
 8006292:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006298:	223f      	movs	r2, #63	; 0x3f
 800629a:	409a      	lsls	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006302:	2b01      	cmp	r3, #1
 8006304:	d101      	bne.n	800630a <HAL_DMA_Start_IT+0x26>
 8006306:	2302      	movs	r3, #2
 8006308:	e048      	b.n	800639c <HAL_DMA_Start_IT+0xb8>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b01      	cmp	r3, #1
 800631c:	d137      	bne.n	800638e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2202      	movs	r2, #2
 8006322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 fa52 	bl	80067dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633c:	223f      	movs	r2, #63	; 0x3f
 800633e:	409a      	lsls	r2, r3
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0216 	orr.w	r2, r2, #22
 8006352:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695a      	ldr	r2, [r3, #20]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006362:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d007      	beq.n	800637c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0208 	orr.w	r2, r2, #8
 800637a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0201 	orr.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	e005      	b.n	800639a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006396:	2302      	movs	r3, #2
 8006398:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800639a:	7dfb      	ldrb	r3, [r7, #23]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80063b2:	f7ff fc2d 	bl	8005c10 <HAL_GetTick>
 80063b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d008      	beq.n	80063d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2280      	movs	r2, #128	; 0x80
 80063c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e052      	b.n	800647c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0216 	bic.w	r2, r2, #22
 80063e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	695a      	ldr	r2, [r3, #20]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d103      	bne.n	8006406 <HAL_DMA_Abort+0x62>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006402:	2b00      	cmp	r3, #0
 8006404:	d007      	beq.n	8006416 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0208 	bic.w	r2, r2, #8
 8006414:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0201 	bic.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006426:	e013      	b.n	8006450 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006428:	f7ff fbf2 	bl	8005c10 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b05      	cmp	r3, #5
 8006434:	d90c      	bls.n	8006450 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2220      	movs	r2, #32
 800643a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2203      	movs	r2, #3
 8006440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e015      	b.n	800647c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1e4      	bne.n	8006428 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006462:	223f      	movs	r2, #63	; 0x3f
 8006464:	409a      	lsls	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d004      	beq.n	80064a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2280      	movs	r2, #128	; 0x80
 800649c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e00c      	b.n	80064bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2205      	movs	r2, #5
 80064a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0201 	bic.w	r2, r2, #1
 80064b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80064d4:	4b92      	ldr	r3, [pc, #584]	; (8006720 <HAL_DMA_IRQHandler+0x258>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a92      	ldr	r2, [pc, #584]	; (8006724 <HAL_DMA_IRQHandler+0x25c>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	0a9b      	lsrs	r3, r3, #10
 80064e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f2:	2208      	movs	r2, #8
 80064f4:	409a      	lsls	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d01a      	beq.n	8006534 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b00      	cmp	r3, #0
 800650a:	d013      	beq.n	8006534 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0204 	bic.w	r2, r2, #4
 800651a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006520:	2208      	movs	r2, #8
 8006522:	409a      	lsls	r2, r3
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652c:	f043 0201 	orr.w	r2, r3, #1
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006538:	2201      	movs	r2, #1
 800653a:	409a      	lsls	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4013      	ands	r3, r2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d012      	beq.n	800656a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006556:	2201      	movs	r2, #1
 8006558:	409a      	lsls	r2, r3
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006562:	f043 0202 	orr.w	r2, r3, #2
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656e:	2204      	movs	r2, #4
 8006570:	409a      	lsls	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4013      	ands	r3, r2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d012      	beq.n	80065a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658c:	2204      	movs	r2, #4
 800658e:	409a      	lsls	r2, r3
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006598:	f043 0204 	orr.w	r2, r3, #4
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a4:	2210      	movs	r2, #16
 80065a6:	409a      	lsls	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d043      	beq.n	8006638 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d03c      	beq.n	8006638 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c2:	2210      	movs	r2, #16
 80065c4:	409a      	lsls	r2, r3
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d018      	beq.n	800660a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d108      	bne.n	80065f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d024      	beq.n	8006638 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
 80065f6:	e01f      	b.n	8006638 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01b      	beq.n	8006638 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
 8006608:	e016      	b.n	8006638 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006614:	2b00      	cmp	r3, #0
 8006616:	d107      	bne.n	8006628 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0208 	bic.w	r2, r2, #8
 8006626:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800663c:	2220      	movs	r2, #32
 800663e:	409a      	lsls	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4013      	ands	r3, r2
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 808e 	beq.w	8006766 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0310 	and.w	r3, r3, #16
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 8086 	beq.w	8006766 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665e:	2220      	movs	r2, #32
 8006660:	409a      	lsls	r2, r3
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b05      	cmp	r3, #5
 8006670:	d136      	bne.n	80066e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0216 	bic.w	r2, r2, #22
 8006680:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	695a      	ldr	r2, [r3, #20]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006690:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d103      	bne.n	80066a2 <HAL_DMA_IRQHandler+0x1da>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d007      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0208 	bic.w	r2, r2, #8
 80066b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b6:	223f      	movs	r2, #63	; 0x3f
 80066b8:	409a      	lsls	r2, r3
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d07d      	beq.n	80067d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	4798      	blx	r3
        }
        return;
 80066de:	e078      	b.n	80067d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01c      	beq.n	8006728 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d108      	bne.n	800670e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006700:	2b00      	cmp	r3, #0
 8006702:	d030      	beq.n	8006766 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	4798      	blx	r3
 800670c:	e02b      	b.n	8006766 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d027      	beq.n	8006766 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	4798      	blx	r3
 800671e:	e022      	b.n	8006766 <HAL_DMA_IRQHandler+0x29e>
 8006720:	2000040c 	.word	0x2000040c
 8006724:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10f      	bne.n	8006756 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0210 	bic.w	r2, r2, #16
 8006744:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676a:	2b00      	cmp	r3, #0
 800676c:	d032      	beq.n	80067d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d022      	beq.n	80067c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2205      	movs	r2, #5
 800677e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0201 	bic.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	3301      	adds	r3, #1
 8006796:	60bb      	str	r3, [r7, #8]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	429a      	cmp	r2, r3
 800679c:	d307      	bcc.n	80067ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1f2      	bne.n	8006792 <HAL_DMA_IRQHandler+0x2ca>
 80067ac:	e000      	b.n	80067b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80067ae:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	4798      	blx	r3
 80067d0:	e000      	b.n	80067d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80067d2:	bf00      	nop
    }
  }
}
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop

080067dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
 80067e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2b40      	cmp	r3, #64	; 0x40
 8006808:	d108      	bne.n	800681c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800681a:	e007      	b.n	800682c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	60da      	str	r2, [r3, #12]
}
 800682c:	bf00      	nop
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	b2db      	uxtb	r3, r3
 8006846:	3b10      	subs	r3, #16
 8006848:	4a13      	ldr	r2, [pc, #76]	; (8006898 <DMA_CalcBaseAndBitshift+0x60>)
 800684a:	fba2 2303 	umull	r2, r3, r2, r3
 800684e:	091b      	lsrs	r3, r3, #4
 8006850:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006852:	4a12      	ldr	r2, [pc, #72]	; (800689c <DMA_CalcBaseAndBitshift+0x64>)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2b03      	cmp	r3, #3
 8006864:	d908      	bls.n	8006878 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	4b0c      	ldr	r3, [pc, #48]	; (80068a0 <DMA_CalcBaseAndBitshift+0x68>)
 800686e:	4013      	ands	r3, r2
 8006870:	1d1a      	adds	r2, r3, #4
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	659a      	str	r2, [r3, #88]	; 0x58
 8006876:	e006      	b.n	8006886 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	4b08      	ldr	r3, [pc, #32]	; (80068a0 <DMA_CalcBaseAndBitshift+0x68>)
 8006880:	4013      	ands	r3, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	aaaaaaab 	.word	0xaaaaaaab
 800689c:	0800d32c 	.word	0x0800d32c
 80068a0:	fffffc00 	.word	0xfffffc00

080068a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d11f      	bne.n	80068fe <DMA_CheckFifoParam+0x5a>
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d856      	bhi.n	8006972 <DMA_CheckFifoParam+0xce>
 80068c4:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <DMA_CheckFifoParam+0x28>)
 80068c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ca:	bf00      	nop
 80068cc:	080068dd 	.word	0x080068dd
 80068d0:	080068ef 	.word	0x080068ef
 80068d4:	080068dd 	.word	0x080068dd
 80068d8:	08006973 	.word	0x08006973
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d046      	beq.n	8006976 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068ec:	e043      	b.n	8006976 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068f6:	d140      	bne.n	800697a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068fc:	e03d      	b.n	800697a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006906:	d121      	bne.n	800694c <DMA_CheckFifoParam+0xa8>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b03      	cmp	r3, #3
 800690c:	d837      	bhi.n	800697e <DMA_CheckFifoParam+0xda>
 800690e:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <DMA_CheckFifoParam+0x70>)
 8006910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006914:	08006925 	.word	0x08006925
 8006918:	0800692b 	.word	0x0800692b
 800691c:	08006925 	.word	0x08006925
 8006920:	0800693d 	.word	0x0800693d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	73fb      	strb	r3, [r7, #15]
      break;
 8006928:	e030      	b.n	800698c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d025      	beq.n	8006982 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800693a:	e022      	b.n	8006982 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006944:	d11f      	bne.n	8006986 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800694a:	e01c      	b.n	8006986 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b02      	cmp	r3, #2
 8006950:	d903      	bls.n	800695a <DMA_CheckFifoParam+0xb6>
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b03      	cmp	r3, #3
 8006956:	d003      	beq.n	8006960 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006958:	e018      	b.n	800698c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	73fb      	strb	r3, [r7, #15]
      break;
 800695e:	e015      	b.n	800698c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00e      	beq.n	800698a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	73fb      	strb	r3, [r7, #15]
      break;
 8006970:	e00b      	b.n	800698a <DMA_CheckFifoParam+0xe6>
      break;
 8006972:	bf00      	nop
 8006974:	e00a      	b.n	800698c <DMA_CheckFifoParam+0xe8>
      break;
 8006976:	bf00      	nop
 8006978:	e008      	b.n	800698c <DMA_CheckFifoParam+0xe8>
      break;
 800697a:	bf00      	nop
 800697c:	e006      	b.n	800698c <DMA_CheckFifoParam+0xe8>
      break;
 800697e:	bf00      	nop
 8006980:	e004      	b.n	800698c <DMA_CheckFifoParam+0xe8>
      break;
 8006982:	bf00      	nop
 8006984:	e002      	b.n	800698c <DMA_CheckFifoParam+0xe8>
      break;   
 8006986:	bf00      	nop
 8006988:	e000      	b.n	800698c <DMA_CheckFifoParam+0xe8>
      break;
 800698a:	bf00      	nop
    }
  } 
  
  return status; 
 800698c:	7bfb      	ldrb	r3, [r7, #15]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop

0800699c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	460b      	mov	r3, r1
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80069ae:	7afb      	ldrb	r3, [r7, #11]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d103      	bne.n	80069bc <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	605a      	str	r2, [r3, #4]
      break;
 80069ba:	e002      	b.n	80069c2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	75fb      	strb	r3, [r7, #23]
      break;
 80069c0:	bf00      	nop
  }

  return status;
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	371c      	adds	r7, #28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e003      	b.n	80069ec <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80069ea:	2300      	movs	r3, #0
  }
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b089      	sub	sp, #36	; 0x24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006a02:	2300      	movs	r3, #0
 8006a04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006a06:	2300      	movs	r3, #0
 8006a08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006a12:	2300      	movs	r3, #0
 8006a14:	61fb      	str	r3, [r7, #28]
 8006a16:	e175      	b.n	8006d04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006a18:	2201      	movs	r2, #1
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	f040 8164 	bne.w	8006cfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d005      	beq.n	8006a4e <HAL_GPIO_Init+0x56>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d130      	bne.n	8006ab0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	2203      	movs	r2, #3
 8006a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5e:	43db      	mvns	r3, r3
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	4013      	ands	r3, r2
 8006a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a84:	2201      	movs	r2, #1
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	4013      	ands	r3, r2
 8006a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	091b      	lsrs	r3, r3, #4
 8006a9a:	f003 0201 	and.w	r2, r3, #1
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d017      	beq.n	8006aec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	43db      	mvns	r3, r3
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d123      	bne.n	8006b40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	08da      	lsrs	r2, r3, #3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3208      	adds	r2, #8
 8006b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	220f      	movs	r2, #15
 8006b10:	fa02 f303 	lsl.w	r3, r2, r3
 8006b14:	43db      	mvns	r3, r3
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	08da      	lsrs	r2, r3, #3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3208      	adds	r2, #8
 8006b3a:	69b9      	ldr	r1, [r7, #24]
 8006b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	43db      	mvns	r3, r3
 8006b52:	69ba      	ldr	r2, [r7, #24]
 8006b54:	4013      	ands	r3, r2
 8006b56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f003 0203 	and.w	r2, r3, #3
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	fa02 f303 	lsl.w	r3, r2, r3
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 80be 	beq.w	8006cfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b82:	4b66      	ldr	r3, [pc, #408]	; (8006d1c <HAL_GPIO_Init+0x324>)
 8006b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b86:	4a65      	ldr	r2, [pc, #404]	; (8006d1c <HAL_GPIO_Init+0x324>)
 8006b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b8e:	4b63      	ldr	r3, [pc, #396]	; (8006d1c <HAL_GPIO_Init+0x324>)
 8006b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006b9a:	4a61      	ldr	r2, [pc, #388]	; (8006d20 <HAL_GPIO_Init+0x328>)
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	089b      	lsrs	r3, r3, #2
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	220f      	movs	r2, #15
 8006bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a58      	ldr	r2, [pc, #352]	; (8006d24 <HAL_GPIO_Init+0x32c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d037      	beq.n	8006c36 <HAL_GPIO_Init+0x23e>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a57      	ldr	r2, [pc, #348]	; (8006d28 <HAL_GPIO_Init+0x330>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d031      	beq.n	8006c32 <HAL_GPIO_Init+0x23a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a56      	ldr	r2, [pc, #344]	; (8006d2c <HAL_GPIO_Init+0x334>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d02b      	beq.n	8006c2e <HAL_GPIO_Init+0x236>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a55      	ldr	r2, [pc, #340]	; (8006d30 <HAL_GPIO_Init+0x338>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d025      	beq.n	8006c2a <HAL_GPIO_Init+0x232>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a54      	ldr	r2, [pc, #336]	; (8006d34 <HAL_GPIO_Init+0x33c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01f      	beq.n	8006c26 <HAL_GPIO_Init+0x22e>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a53      	ldr	r2, [pc, #332]	; (8006d38 <HAL_GPIO_Init+0x340>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d019      	beq.n	8006c22 <HAL_GPIO_Init+0x22a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a52      	ldr	r2, [pc, #328]	; (8006d3c <HAL_GPIO_Init+0x344>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d013      	beq.n	8006c1e <HAL_GPIO_Init+0x226>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a51      	ldr	r2, [pc, #324]	; (8006d40 <HAL_GPIO_Init+0x348>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00d      	beq.n	8006c1a <HAL_GPIO_Init+0x222>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a50      	ldr	r2, [pc, #320]	; (8006d44 <HAL_GPIO_Init+0x34c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d007      	beq.n	8006c16 <HAL_GPIO_Init+0x21e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a4f      	ldr	r2, [pc, #316]	; (8006d48 <HAL_GPIO_Init+0x350>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d101      	bne.n	8006c12 <HAL_GPIO_Init+0x21a>
 8006c0e:	2309      	movs	r3, #9
 8006c10:	e012      	b.n	8006c38 <HAL_GPIO_Init+0x240>
 8006c12:	230a      	movs	r3, #10
 8006c14:	e010      	b.n	8006c38 <HAL_GPIO_Init+0x240>
 8006c16:	2308      	movs	r3, #8
 8006c18:	e00e      	b.n	8006c38 <HAL_GPIO_Init+0x240>
 8006c1a:	2307      	movs	r3, #7
 8006c1c:	e00c      	b.n	8006c38 <HAL_GPIO_Init+0x240>
 8006c1e:	2306      	movs	r3, #6
 8006c20:	e00a      	b.n	8006c38 <HAL_GPIO_Init+0x240>
 8006c22:	2305      	movs	r3, #5
 8006c24:	e008      	b.n	8006c38 <HAL_GPIO_Init+0x240>
 8006c26:	2304      	movs	r3, #4
 8006c28:	e006      	b.n	8006c38 <HAL_GPIO_Init+0x240>
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e004      	b.n	8006c38 <HAL_GPIO_Init+0x240>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e002      	b.n	8006c38 <HAL_GPIO_Init+0x240>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e000      	b.n	8006c38 <HAL_GPIO_Init+0x240>
 8006c36:	2300      	movs	r3, #0
 8006c38:	69fa      	ldr	r2, [r7, #28]
 8006c3a:	f002 0203 	and.w	r2, r2, #3
 8006c3e:	0092      	lsls	r2, r2, #2
 8006c40:	4093      	lsls	r3, r2
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006c48:	4935      	ldr	r1, [pc, #212]	; (8006d20 <HAL_GPIO_Init+0x328>)
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	089b      	lsrs	r3, r3, #2
 8006c4e:	3302      	adds	r3, #2
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c56:	4b3d      	ldr	r3, [pc, #244]	; (8006d4c <HAL_GPIO_Init+0x354>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	43db      	mvns	r3, r3
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	4013      	ands	r3, r2
 8006c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c7a:	4a34      	ldr	r2, [pc, #208]	; (8006d4c <HAL_GPIO_Init+0x354>)
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c80:	4b32      	ldr	r3, [pc, #200]	; (8006d4c <HAL_GPIO_Init+0x354>)
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ca4:	4a29      	ldr	r2, [pc, #164]	; (8006d4c <HAL_GPIO_Init+0x354>)
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006caa:	4b28      	ldr	r3, [pc, #160]	; (8006d4c <HAL_GPIO_Init+0x354>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	43db      	mvns	r3, r3
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006cce:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <HAL_GPIO_Init+0x354>)
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006cd4:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <HAL_GPIO_Init+0x354>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d003      	beq.n	8006cf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006cf8:	4a14      	ldr	r2, [pc, #80]	; (8006d4c <HAL_GPIO_Init+0x354>)
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	3301      	adds	r3, #1
 8006d02:	61fb      	str	r3, [r7, #28]
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	2b0f      	cmp	r3, #15
 8006d08:	f67f ae86 	bls.w	8006a18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	3724      	adds	r7, #36	; 0x24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	40013800 	.word	0x40013800
 8006d24:	40020000 	.word	0x40020000
 8006d28:	40020400 	.word	0x40020400
 8006d2c:	40020800 	.word	0x40020800
 8006d30:	40020c00 	.word	0x40020c00
 8006d34:	40021000 	.word	0x40021000
 8006d38:	40021400 	.word	0x40021400
 8006d3c:	40021800 	.word	0x40021800
 8006d40:	40021c00 	.word	0x40021c00
 8006d44:	40022000 	.word	0x40022000
 8006d48:	40022400 	.word	0x40022400
 8006d4c:	40013c00 	.word	0x40013c00

08006d50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006d66:	2300      	movs	r3, #0
 8006d68:	617b      	str	r3, [r7, #20]
 8006d6a:	e0d9      	b.n	8006f20 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	f040 80c9 	bne.w	8006f1a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006d88:	4a6b      	ldr	r2, [pc, #428]	; (8006f38 <HAL_GPIO_DeInit+0x1e8>)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	089b      	lsrs	r3, r3, #2
 8006d8e:	3302      	adds	r3, #2
 8006d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d94:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f003 0303 	and.w	r3, r3, #3
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	220f      	movs	r2, #15
 8006da0:	fa02 f303 	lsl.w	r3, r2, r3
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	4013      	ands	r3, r2
 8006da8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a63      	ldr	r2, [pc, #396]	; (8006f3c <HAL_GPIO_DeInit+0x1ec>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d037      	beq.n	8006e22 <HAL_GPIO_DeInit+0xd2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a62      	ldr	r2, [pc, #392]	; (8006f40 <HAL_GPIO_DeInit+0x1f0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d031      	beq.n	8006e1e <HAL_GPIO_DeInit+0xce>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a61      	ldr	r2, [pc, #388]	; (8006f44 <HAL_GPIO_DeInit+0x1f4>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d02b      	beq.n	8006e1a <HAL_GPIO_DeInit+0xca>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a60      	ldr	r2, [pc, #384]	; (8006f48 <HAL_GPIO_DeInit+0x1f8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d025      	beq.n	8006e16 <HAL_GPIO_DeInit+0xc6>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a5f      	ldr	r2, [pc, #380]	; (8006f4c <HAL_GPIO_DeInit+0x1fc>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d01f      	beq.n	8006e12 <HAL_GPIO_DeInit+0xc2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a5e      	ldr	r2, [pc, #376]	; (8006f50 <HAL_GPIO_DeInit+0x200>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d019      	beq.n	8006e0e <HAL_GPIO_DeInit+0xbe>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a5d      	ldr	r2, [pc, #372]	; (8006f54 <HAL_GPIO_DeInit+0x204>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <HAL_GPIO_DeInit+0xba>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a5c      	ldr	r2, [pc, #368]	; (8006f58 <HAL_GPIO_DeInit+0x208>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d00d      	beq.n	8006e06 <HAL_GPIO_DeInit+0xb6>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a5b      	ldr	r2, [pc, #364]	; (8006f5c <HAL_GPIO_DeInit+0x20c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d007      	beq.n	8006e02 <HAL_GPIO_DeInit+0xb2>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a5a      	ldr	r2, [pc, #360]	; (8006f60 <HAL_GPIO_DeInit+0x210>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d101      	bne.n	8006dfe <HAL_GPIO_DeInit+0xae>
 8006dfa:	2309      	movs	r3, #9
 8006dfc:	e012      	b.n	8006e24 <HAL_GPIO_DeInit+0xd4>
 8006dfe:	230a      	movs	r3, #10
 8006e00:	e010      	b.n	8006e24 <HAL_GPIO_DeInit+0xd4>
 8006e02:	2308      	movs	r3, #8
 8006e04:	e00e      	b.n	8006e24 <HAL_GPIO_DeInit+0xd4>
 8006e06:	2307      	movs	r3, #7
 8006e08:	e00c      	b.n	8006e24 <HAL_GPIO_DeInit+0xd4>
 8006e0a:	2306      	movs	r3, #6
 8006e0c:	e00a      	b.n	8006e24 <HAL_GPIO_DeInit+0xd4>
 8006e0e:	2305      	movs	r3, #5
 8006e10:	e008      	b.n	8006e24 <HAL_GPIO_DeInit+0xd4>
 8006e12:	2304      	movs	r3, #4
 8006e14:	e006      	b.n	8006e24 <HAL_GPIO_DeInit+0xd4>
 8006e16:	2303      	movs	r3, #3
 8006e18:	e004      	b.n	8006e24 <HAL_GPIO_DeInit+0xd4>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e002      	b.n	8006e24 <HAL_GPIO_DeInit+0xd4>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e000      	b.n	8006e24 <HAL_GPIO_DeInit+0xd4>
 8006e22:	2300      	movs	r3, #0
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	f002 0203 	and.w	r2, r2, #3
 8006e2a:	0092      	lsls	r2, r2, #2
 8006e2c:	4093      	lsls	r3, r2
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d132      	bne.n	8006e9a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006e34:	4b4b      	ldr	r3, [pc, #300]	; (8006f64 <HAL_GPIO_DeInit+0x214>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	43db      	mvns	r3, r3
 8006e3c:	4949      	ldr	r1, [pc, #292]	; (8006f64 <HAL_GPIO_DeInit+0x214>)
 8006e3e:	4013      	ands	r3, r2
 8006e40:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006e42:	4b48      	ldr	r3, [pc, #288]	; (8006f64 <HAL_GPIO_DeInit+0x214>)
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	43db      	mvns	r3, r3
 8006e4a:	4946      	ldr	r1, [pc, #280]	; (8006f64 <HAL_GPIO_DeInit+0x214>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006e50:	4b44      	ldr	r3, [pc, #272]	; (8006f64 <HAL_GPIO_DeInit+0x214>)
 8006e52:	68da      	ldr	r2, [r3, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	43db      	mvns	r3, r3
 8006e58:	4942      	ldr	r1, [pc, #264]	; (8006f64 <HAL_GPIO_DeInit+0x214>)
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006e5e:	4b41      	ldr	r3, [pc, #260]	; (8006f64 <HAL_GPIO_DeInit+0x214>)
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	43db      	mvns	r3, r3
 8006e66:	493f      	ldr	r1, [pc, #252]	; (8006f64 <HAL_GPIO_DeInit+0x214>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	220f      	movs	r2, #15
 8006e76:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006e7c:	4a2e      	ldr	r2, [pc, #184]	; (8006f38 <HAL_GPIO_DeInit+0x1e8>)
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	089b      	lsrs	r3, r3, #2
 8006e82:	3302      	adds	r3, #2
 8006e84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	43da      	mvns	r2, r3
 8006e8c:	482a      	ldr	r0, [pc, #168]	; (8006f38 <HAL_GPIO_DeInit+0x1e8>)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	089b      	lsrs	r3, r3, #2
 8006e92:	400a      	ands	r2, r1
 8006e94:	3302      	adds	r3, #2
 8006e96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	2103      	movs	r1, #3
 8006ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea8:	43db      	mvns	r3, r3
 8006eaa:	401a      	ands	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	08da      	lsrs	r2, r3, #3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3208      	adds	r2, #8
 8006eb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f003 0307 	and.w	r3, r3, #7
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	220f      	movs	r2, #15
 8006ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eca:	43db      	mvns	r3, r3
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	08d2      	lsrs	r2, r2, #3
 8006ed0:	4019      	ands	r1, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3208      	adds	r2, #8
 8006ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	2103      	movs	r1, #3
 8006ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	401a      	ands	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8006efc:	43db      	mvns	r3, r3
 8006efe:	401a      	ands	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	2103      	movs	r1, #3
 8006f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f12:	43db      	mvns	r3, r3
 8006f14:	401a      	ands	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	2b0f      	cmp	r3, #15
 8006f24:	f67f af22 	bls.w	8006d6c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	371c      	adds	r7, #28
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	40013800 	.word	0x40013800
 8006f3c:	40020000 	.word	0x40020000
 8006f40:	40020400 	.word	0x40020400
 8006f44:	40020800 	.word	0x40020800
 8006f48:	40020c00 	.word	0x40020c00
 8006f4c:	40021000 	.word	0x40021000
 8006f50:	40021400 	.word	0x40021400
 8006f54:	40021800 	.word	0x40021800
 8006f58:	40021c00 	.word	0x40021c00
 8006f5c:	40022000 	.word	0x40022000
 8006f60:	40022400 	.word	0x40022400
 8006f64:	40013c00 	.word	0x40013c00

08006f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	460b      	mov	r3, r1
 8006f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691a      	ldr	r2, [r3, #16]
 8006f78:	887b      	ldrh	r3, [r7, #2]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f80:	2301      	movs	r3, #1
 8006f82:	73fb      	strb	r3, [r7, #15]
 8006f84:	e001      	b.n	8006f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f86:	2300      	movs	r3, #0
 8006f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	807b      	strh	r3, [r7, #2]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fa8:	787b      	ldrb	r3, [r7, #1]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fae:	887a      	ldrh	r2, [r7, #2]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006fb4:	e003      	b.n	8006fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006fb6:	887b      	ldrh	r3, [r7, #2]
 8006fb8:	041a      	lsls	r2, r3, #16
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	619a      	str	r2, [r3, #24]
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
	...

08006fcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006fd6:	4b08      	ldr	r3, [pc, #32]	; (8006ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fd8:	695a      	ldr	r2, [r3, #20]
 8006fda:	88fb      	ldrh	r3, [r7, #6]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d006      	beq.n	8006ff0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006fe2:	4a05      	ldr	r2, [pc, #20]	; (8006ff8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006fe4:	88fb      	ldrh	r3, [r7, #6]
 8006fe6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006fe8:	88fb      	ldrh	r3, [r7, #6]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 f806 	bl	8006ffc <HAL_GPIO_EXTI_Callback>
  }
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	40013c00 	.word	0x40013c00

08006ffc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
	...

08007014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e07f      	b.n	8007126 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7f9 fc46 	bl	80008cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2224      	movs	r2, #36	; 0x24
 8007044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0201 	bic.w	r2, r2, #1
 8007056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007064:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007074:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d107      	bne.n	800708e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800708a:	609a      	str	r2, [r3, #8]
 800708c:	e006      	b.n	800709c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689a      	ldr	r2, [r3, #8]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800709a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d104      	bne.n	80070ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6859      	ldr	r1, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	4b1d      	ldr	r3, [pc, #116]	; (8007130 <HAL_I2C_Init+0x11c>)
 80070ba:	430b      	orrs	r3, r1
 80070bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	69d9      	ldr	r1, [r3, #28]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a1a      	ldr	r2, [r3, #32]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0201 	orr.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	02008000 	.word	0x02008000

08007134 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e021      	b.n	800718a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2224      	movs	r2, #36	; 0x24
 800714a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 0201 	bic.w	r2, r2, #1
 800715c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7f9 fc5a 	bl	8000a18 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af02      	add	r7, sp, #8
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	4608      	mov	r0, r1
 800719e:	4611      	mov	r1, r2
 80071a0:	461a      	mov	r2, r3
 80071a2:	4603      	mov	r3, r0
 80071a4:	817b      	strh	r3, [r7, #10]
 80071a6:	460b      	mov	r3, r1
 80071a8:	813b      	strh	r3, [r7, #8]
 80071aa:	4613      	mov	r3, r2
 80071ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	f040 80f9 	bne.w	80073ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <HAL_I2C_Mem_Write+0x34>
 80071c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d105      	bne.n	80071d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e0ed      	b.n	80073b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_I2C_Mem_Write+0x4e>
 80071de:	2302      	movs	r3, #2
 80071e0:	e0e6      	b.n	80073b0 <HAL_I2C_Mem_Write+0x21c>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071ea:	f7fe fd11 	bl	8005c10 <HAL_GetTick>
 80071ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	2319      	movs	r3, #25
 80071f6:	2201      	movs	r2, #1
 80071f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 faf7 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d001      	beq.n	800720c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e0d1      	b.n	80073b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2221      	movs	r2, #33	; 0x21
 8007210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2240      	movs	r2, #64	; 0x40
 8007218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6a3a      	ldr	r2, [r7, #32]
 8007226:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800722c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007234:	88f8      	ldrh	r0, [r7, #6]
 8007236:	893a      	ldrh	r2, [r7, #8]
 8007238:	8979      	ldrh	r1, [r7, #10]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	9301      	str	r3, [sp, #4]
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	4603      	mov	r3, r0
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 fa07 	bl	8007658 <I2C_RequestMemoryWrite>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d005      	beq.n	800725c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e0a9      	b.n	80073b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007260:	b29b      	uxth	r3, r3
 8007262:	2bff      	cmp	r3, #255	; 0xff
 8007264:	d90e      	bls.n	8007284 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	22ff      	movs	r2, #255	; 0xff
 800726a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007270:	b2da      	uxtb	r2, r3
 8007272:	8979      	ldrh	r1, [r7, #10]
 8007274:	2300      	movs	r3, #0
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fc5f 	bl	8007b40 <I2C_TransferConfig>
 8007282:	e00f      	b.n	80072a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007288:	b29a      	uxth	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007292:	b2da      	uxtb	r2, r3
 8007294:	8979      	ldrh	r1, [r7, #10]
 8007296:	2300      	movs	r3, #0
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 fc4e 	bl	8007b40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 fae1 	bl	8007870 <I2C_WaitOnTXISFlagUntilTimeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e07b      	b.n	80073b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	781a      	ldrb	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	3b01      	subs	r3, #1
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e0:	3b01      	subs	r3, #1
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d034      	beq.n	800735c <HAL_I2C_Mem_Write+0x1c8>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d130      	bne.n	800735c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007300:	2200      	movs	r2, #0
 8007302:	2180      	movs	r1, #128	; 0x80
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 fa73 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e04d      	b.n	80073b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007318:	b29b      	uxth	r3, r3
 800731a:	2bff      	cmp	r3, #255	; 0xff
 800731c:	d90e      	bls.n	800733c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	22ff      	movs	r2, #255	; 0xff
 8007322:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007328:	b2da      	uxtb	r2, r3
 800732a:	8979      	ldrh	r1, [r7, #10]
 800732c:	2300      	movs	r3, #0
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 fc03 	bl	8007b40 <I2C_TransferConfig>
 800733a:	e00f      	b.n	800735c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800734a:	b2da      	uxtb	r2, r3
 800734c:	8979      	ldrh	r1, [r7, #10]
 800734e:	2300      	movs	r3, #0
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 fbf2 	bl	8007b40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007360:	b29b      	uxth	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d19e      	bne.n	80072a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 fac0 	bl	80078f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e01a      	b.n	80073b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2220      	movs	r2, #32
 8007380:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6859      	ldr	r1, [r3, #4]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <HAL_I2C_Mem_Write+0x224>)
 800738e:	400b      	ands	r3, r1
 8007390:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2220      	movs	r2, #32
 8007396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	e000      	b.n	80073b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80073ae:	2302      	movs	r3, #2
  }
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	fe00e800 	.word	0xfe00e800

080073bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b088      	sub	sp, #32
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	4608      	mov	r0, r1
 80073c6:	4611      	mov	r1, r2
 80073c8:	461a      	mov	r2, r3
 80073ca:	4603      	mov	r3, r0
 80073cc:	817b      	strh	r3, [r7, #10]
 80073ce:	460b      	mov	r3, r1
 80073d0:	813b      	strh	r3, [r7, #8]
 80073d2:	4613      	mov	r3, r2
 80073d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b20      	cmp	r3, #32
 80073e0:	f040 80fd 	bne.w	80075de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <HAL_I2C_Mem_Read+0x34>
 80073ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d105      	bne.n	80073fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e0f1      	b.n	80075e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_I2C_Mem_Read+0x4e>
 8007406:	2302      	movs	r3, #2
 8007408:	e0ea      	b.n	80075e0 <HAL_I2C_Mem_Read+0x224>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007412:	f7fe fbfd 	bl	8005c10 <HAL_GetTick>
 8007416:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	2319      	movs	r3, #25
 800741e:	2201      	movs	r2, #1
 8007420:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f000 f9e3 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e0d5      	b.n	80075e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2222      	movs	r2, #34	; 0x22
 8007438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2240      	movs	r2, #64	; 0x40
 8007440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a3a      	ldr	r2, [r7, #32]
 800744e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007454:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800745c:	88f8      	ldrh	r0, [r7, #6]
 800745e:	893a      	ldrh	r2, [r7, #8]
 8007460:	8979      	ldrh	r1, [r7, #10]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	4603      	mov	r3, r0
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f000 f947 	bl	8007700 <I2C_RequestMemoryRead>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e0ad      	b.n	80075e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007488:	b29b      	uxth	r3, r3
 800748a:	2bff      	cmp	r3, #255	; 0xff
 800748c:	d90e      	bls.n	80074ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	22ff      	movs	r2, #255	; 0xff
 8007492:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007498:	b2da      	uxtb	r2, r3
 800749a:	8979      	ldrh	r1, [r7, #10]
 800749c:	4b52      	ldr	r3, [pc, #328]	; (80075e8 <HAL_I2C_Mem_Read+0x22c>)
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 fb4b 	bl	8007b40 <I2C_TransferConfig>
 80074aa:	e00f      	b.n	80074cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	8979      	ldrh	r1, [r7, #10]
 80074be:	4b4a      	ldr	r3, [pc, #296]	; (80075e8 <HAL_I2C_Mem_Read+0x22c>)
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 fb3a 	bl	8007b40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	2200      	movs	r2, #0
 80074d4:	2104      	movs	r1, #4
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 f98a 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e07c      	b.n	80075e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	b2d2      	uxtb	r2, r2
 80074f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d034      	beq.n	800758c <HAL_I2C_Mem_Read+0x1d0>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007526:	2b00      	cmp	r3, #0
 8007528:	d130      	bne.n	800758c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	2200      	movs	r2, #0
 8007532:	2180      	movs	r1, #128	; 0x80
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 f95b 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e04d      	b.n	80075e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007548:	b29b      	uxth	r3, r3
 800754a:	2bff      	cmp	r3, #255	; 0xff
 800754c:	d90e      	bls.n	800756c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	22ff      	movs	r2, #255	; 0xff
 8007552:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007558:	b2da      	uxtb	r2, r3
 800755a:	8979      	ldrh	r1, [r7, #10]
 800755c:	2300      	movs	r3, #0
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 faeb 	bl	8007b40 <I2C_TransferConfig>
 800756a:	e00f      	b.n	800758c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757a:	b2da      	uxtb	r2, r3
 800757c:	8979      	ldrh	r1, [r7, #10]
 800757e:	2300      	movs	r3, #0
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 fada 	bl	8007b40 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007590:	b29b      	uxth	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d19a      	bne.n	80074cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 f9a8 	bl	80078f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e01a      	b.n	80075e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2220      	movs	r2, #32
 80075b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6859      	ldr	r1, [r3, #4]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	4b0b      	ldr	r3, [pc, #44]	; (80075ec <HAL_I2C_Mem_Read+0x230>)
 80075be:	400b      	ands	r3, r1
 80075c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	e000      	b.n	80075e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80075de:	2302      	movs	r3, #2
  }
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	80002400 	.word	0x80002400
 80075ec:	fe00e800 	.word	0xfe00e800

080075f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760c:	2b00      	cmp	r3, #0
 800760e:	d005      	beq.n	800761c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	68f9      	ldr	r1, [r7, #12]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4798      	blx	r3
  }
}
 800761c:	bf00      	nop
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007632:	b2db      	uxtb	r3, r3
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800764c:	4618      	mov	r0, r3
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af02      	add	r7, sp, #8
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	4608      	mov	r0, r1
 8007662:	4611      	mov	r1, r2
 8007664:	461a      	mov	r2, r3
 8007666:	4603      	mov	r3, r0
 8007668:	817b      	strh	r3, [r7, #10]
 800766a:	460b      	mov	r3, r1
 800766c:	813b      	strh	r3, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007672:	88fb      	ldrh	r3, [r7, #6]
 8007674:	b2da      	uxtb	r2, r3
 8007676:	8979      	ldrh	r1, [r7, #10]
 8007678:	4b20      	ldr	r3, [pc, #128]	; (80076fc <I2C_RequestMemoryWrite+0xa4>)
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fa5d 	bl	8007b40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	69b9      	ldr	r1, [r7, #24]
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 f8f0 	bl	8007870 <I2C_WaitOnTXISFlagUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e02c      	b.n	80076f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800769a:	88fb      	ldrh	r3, [r7, #6]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d105      	bne.n	80076ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076a0:	893b      	ldrh	r3, [r7, #8]
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	629a      	str	r2, [r3, #40]	; 0x28
 80076aa:	e015      	b.n	80076d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076ac:	893b      	ldrh	r3, [r7, #8]
 80076ae:	0a1b      	lsrs	r3, r3, #8
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	69b9      	ldr	r1, [r7, #24]
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 f8d6 	bl	8007870 <I2C_WaitOnTXISFlagUntilTimeout>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e012      	b.n	80076f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076ce:	893b      	ldrh	r3, [r7, #8]
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	2200      	movs	r2, #0
 80076e0:	2180      	movs	r1, #128	; 0x80
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 f884 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	80002000 	.word	0x80002000

08007700 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af02      	add	r7, sp, #8
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	4608      	mov	r0, r1
 800770a:	4611      	mov	r1, r2
 800770c:	461a      	mov	r2, r3
 800770e:	4603      	mov	r3, r0
 8007710:	817b      	strh	r3, [r7, #10]
 8007712:	460b      	mov	r3, r1
 8007714:	813b      	strh	r3, [r7, #8]
 8007716:	4613      	mov	r3, r2
 8007718:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800771a:	88fb      	ldrh	r3, [r7, #6]
 800771c:	b2da      	uxtb	r2, r3
 800771e:	8979      	ldrh	r1, [r7, #10]
 8007720:	4b20      	ldr	r3, [pc, #128]	; (80077a4 <I2C_RequestMemoryRead+0xa4>)
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	2300      	movs	r3, #0
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fa0a 	bl	8007b40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	69b9      	ldr	r1, [r7, #24]
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 f89d 	bl	8007870 <I2C_WaitOnTXISFlagUntilTimeout>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e02c      	b.n	800779a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007740:	88fb      	ldrh	r3, [r7, #6]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d105      	bne.n	8007752 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007746:	893b      	ldrh	r3, [r7, #8]
 8007748:	b2da      	uxtb	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	629a      	str	r2, [r3, #40]	; 0x28
 8007750:	e015      	b.n	800777e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007752:	893b      	ldrh	r3, [r7, #8]
 8007754:	0a1b      	lsrs	r3, r3, #8
 8007756:	b29b      	uxth	r3, r3
 8007758:	b2da      	uxtb	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007760:	69fa      	ldr	r2, [r7, #28]
 8007762:	69b9      	ldr	r1, [r7, #24]
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 f883 	bl	8007870 <I2C_WaitOnTXISFlagUntilTimeout>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e012      	b.n	800779a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007774:	893b      	ldrh	r3, [r7, #8]
 8007776:	b2da      	uxtb	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	2200      	movs	r2, #0
 8007786:	2140      	movs	r1, #64	; 0x40
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 f831 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e000      	b.n	800779a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	80002000 	.word	0x80002000

080077a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d103      	bne.n	80077c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2200      	movs	r2, #0
 80077c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d007      	beq.n	80077e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699a      	ldr	r2, [r3, #24]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f042 0201 	orr.w	r2, r2, #1
 80077e2:	619a      	str	r2, [r3, #24]
  }
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	4613      	mov	r3, r2
 80077fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007800:	e022      	b.n	8007848 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007808:	d01e      	beq.n	8007848 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800780a:	f7fe fa01 	bl	8005c10 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d302      	bcc.n	8007820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d113      	bne.n	8007848 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007824:	f043 0220 	orr.w	r2, r3, #32
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2220      	movs	r2, #32
 8007830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e00f      	b.n	8007868 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	4013      	ands	r3, r2
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	429a      	cmp	r2, r3
 8007856:	bf0c      	ite	eq
 8007858:	2301      	moveq	r3, #1
 800785a:	2300      	movne	r3, #0
 800785c:	b2db      	uxtb	r3, r3
 800785e:	461a      	mov	r2, r3
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	429a      	cmp	r2, r3
 8007864:	d0cd      	beq.n	8007802 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800787c:	e02c      	b.n	80078d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	68b9      	ldr	r1, [r7, #8]
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 f870 	bl	8007968 <I2C_IsErrorOccurred>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e02a      	b.n	80078e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d01e      	beq.n	80078d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800789a:	f7fe f9b9 	bl	8005c10 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d302      	bcc.n	80078b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d113      	bne.n	80078d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b4:	f043 0220 	orr.w	r2, r3, #32
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e007      	b.n	80078e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d1cb      	bne.n	800787e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078fc:	e028      	b.n	8007950 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	68b9      	ldr	r1, [r7, #8]
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f830 	bl	8007968 <I2C_IsErrorOccurred>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e026      	b.n	8007960 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007912:	f7fe f97d 	bl	8005c10 <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	429a      	cmp	r2, r3
 8007920:	d302      	bcc.n	8007928 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d113      	bne.n	8007950 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792c:	f043 0220 	orr.w	r2, r3, #32
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2220      	movs	r2, #32
 8007938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e007      	b.n	8007960 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	f003 0320 	and.w	r3, r3, #32
 800795a:	2b20      	cmp	r3, #32
 800795c:	d1cf      	bne.n	80078fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08a      	sub	sp, #40	; 0x28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	d075      	beq.n	8007a80 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2210      	movs	r2, #16
 800799a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800799c:	e056      	b.n	8007a4c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a4:	d052      	beq.n	8007a4c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80079a6:	f7fe f933 	bl	8005c10 <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d302      	bcc.n	80079bc <I2C_IsErrorOccurred+0x54>
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d147      	bne.n	8007a4c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079de:	d12e      	bne.n	8007a3e <I2C_IsErrorOccurred+0xd6>
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079e6:	d02a      	beq.n	8007a3e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80079e8:	7cfb      	ldrb	r3, [r7, #19]
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d027      	beq.n	8007a3e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079fc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80079fe:	f7fe f907 	bl	8005c10 <HAL_GetTick>
 8007a02:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a04:	e01b      	b.n	8007a3e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007a06:	f7fe f903 	bl	8005c10 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b19      	cmp	r3, #25
 8007a12:	d914      	bls.n	8007a3e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a18:	f043 0220 	orr.w	r2, r3, #32
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d1dc      	bne.n	8007a06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	d003      	beq.n	8007a62 <I2C_IsErrorOccurred+0xfa>
 8007a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d09d      	beq.n	800799e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d103      	bne.n	8007a72 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	f043 0304 	orr.w	r3, r3, #4
 8007a78:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00b      	beq.n	8007aaa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007a92:	6a3b      	ldr	r3, [r7, #32]
 8007a94:	f043 0301 	orr.w	r3, r3, #1
 8007a98:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aa2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00b      	beq.n	8007acc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	f043 0308 	orr.w	r3, r3, #8
 8007aba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ac4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	f043 0302 	orr.w	r3, r3, #2
 8007adc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ae6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d01c      	beq.n	8007b30 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f7ff fe56 	bl	80077a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6859      	ldr	r1, [r3, #4]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	4b0d      	ldr	r3, [pc, #52]	; (8007b3c <I2C_IsErrorOccurred+0x1d4>)
 8007b08:	400b      	ands	r3, r1
 8007b0a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	431a      	orrs	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3728      	adds	r7, #40	; 0x28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	fe00e800 	.word	0xfe00e800

08007b40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	607b      	str	r3, [r7, #4]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	817b      	strh	r3, [r7, #10]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b52:	897b      	ldrh	r3, [r7, #10]
 8007b54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b58:	7a7b      	ldrb	r3, [r7, #9]
 8007b5a:	041b      	lsls	r3, r3, #16
 8007b5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b60:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b6e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	0d5b      	lsrs	r3, r3, #21
 8007b7a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007b7e:	4b08      	ldr	r3, [pc, #32]	; (8007ba0 <I2C_TransferConfig+0x60>)
 8007b80:	430b      	orrs	r3, r1
 8007b82:	43db      	mvns	r3, r3
 8007b84:	ea02 0103 	and.w	r1, r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007b92:	bf00      	nop
 8007b94:	371c      	adds	r7, #28
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	03ff63ff 	.word	0x03ff63ff

08007ba4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b20      	cmp	r3, #32
 8007bb8:	d138      	bne.n	8007c2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d101      	bne.n	8007bc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e032      	b.n	8007c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2224      	movs	r2, #36	; 0x24
 8007bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f022 0201 	bic.w	r2, r2, #1
 8007be6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6819      	ldr	r1, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f042 0201 	orr.w	r2, r2, #1
 8007c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	e000      	b.n	8007c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c2c:	2302      	movs	r3, #2
  }
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	d139      	bne.n	8007cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d101      	bne.n	8007c5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	e033      	b.n	8007cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2224      	movs	r2, #36	; 0x24
 8007c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 0201 	bic.w	r2, r2, #1
 8007c7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007c8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	021b      	lsls	r3, r3, #8
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	e000      	b.n	8007cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007cc4:	2302      	movs	r3, #2
  }
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cdc:	4b0b      	ldr	r3, [pc, #44]	; (8007d0c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce0:	4a0a      	ldr	r2, [pc, #40]	; (8007d0c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ce6:	6453      	str	r3, [r2, #68]	; 0x44
 8007ce8:	4b08      	ldr	r3, [pc, #32]	; (8007d0c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cf0:	60fb      	str	r3, [r7, #12]
 8007cf2:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 8007cf4:	4b06      	ldr	r3, [pc, #24]	; (8007d10 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	4905      	ldr	r1, [pc, #20]	; (8007d10 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	604b      	str	r3, [r1, #4]
}
 8007d00:	bf00      	nop
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	40023800 	.word	0x40023800
 8007d10:	40013800 	.word	0x40013800

08007d14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b088      	sub	sp, #32
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e0d2      	b.n	8007ecc <HAL_I2S_Init+0x1b8>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d106      	bne.n	8007d40 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7f8 fec0 	bl	8000ac0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	69d9      	ldr	r1, [r3, #28]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	4b60      	ldr	r3, [pc, #384]	; (8007ed4 <HAL_I2S_Init+0x1c0>)
 8007d54:	400b      	ands	r3, r1
 8007d56:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d067      	beq.n	8007e38 <HAL_I2S_Init+0x124>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d102      	bne.n	8007d76 <HAL_I2S_Init+0x62>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007d70:	2310      	movs	r3, #16
 8007d72:	617b      	str	r3, [r7, #20]
 8007d74:	e001      	b.n	8007d7a <HAL_I2S_Init+0x66>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007d76:	2320      	movs	r3, #32
 8007d78:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d802      	bhi.n	8007d88 <HAL_I2S_Init+0x74>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	617b      	str	r3, [r7, #20]
    }

    /* If an external I2S clock has to be used, the specific define should be set
    in the project configuration or in the stm32f3xx_conf.h file */
    if (hi2s->Init.ClockSource == I2S_CLOCK_EXTERNAL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d102      	bne.n	8007d96 <HAL_I2S_Init+0x82>
    {
      /* Set the I2S clock to the external clock  value */
      i2sclk = EXTERNAL_CLOCK_VALUE;
 8007d90:	4b51      	ldr	r3, [pc, #324]	; (8007ed8 <HAL_I2S_Init+0x1c4>)
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	e003      	b.n	8007d9e <HAL_I2S_Init+0x8a>
    }
    else
    {
      /* Get the I2S source clock value */
      i2sclk = I2S_GetClockFreq(hi2s);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f9dc 	bl	8008154 <I2S_GetClockFreq>
 8007d9c:	60f8      	str	r0, [r7, #12]
    }

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007da6:	d125      	bne.n	8007df4 <HAL_I2S_Init+0xe0>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d010      	beq.n	8007dd2 <HAL_I2S_Init+0xbe>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	fbb2 f2f3 	udiv	r2, r2, r3
 8007dba:	4613      	mov	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	005b      	lsls	r3, r3, #1
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dcc:	3305      	adds	r3, #5
 8007dce:	613b      	str	r3, [r7, #16]
 8007dd0:	e01f      	b.n	8007e12 <HAL_I2S_Init+0xfe>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ddc:	4613      	mov	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	461a      	mov	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dee:	3305      	adds	r3, #5
 8007df0:	613b      	str	r3, [r7, #16]
 8007df2:	e00e      	b.n	8007e12 <HAL_I2S_Init+0xfe>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	461a      	mov	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0e:	3305      	adds	r3, #5
 8007e10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	4a31      	ldr	r2, [pc, #196]	; (8007edc <HAL_I2S_Init+0x1c8>)
 8007e16:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1a:	08db      	lsrs	r3, r3, #3
 8007e1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f003 0301 	and.w	r3, r3, #1
 8007e24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	085b      	lsrs	r3, r3, #1
 8007e2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	021b      	lsls	r3, r3, #8
 8007e34:	61bb      	str	r3, [r7, #24]
 8007e36:	e003      	b.n	8007e40 <HAL_I2S_Init+0x12c>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007e38:	2302      	movs	r3, #2
 8007e3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d902      	bls.n	8007e4c <HAL_I2S_Init+0x138>
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	2bff      	cmp	r3, #255	; 0xff
 8007e4a:	d907      	bls.n	8007e5c <HAL_I2S_Init+0x148>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e50:	f043 0210 	orr.w	r2, r3, #16
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	63da      	str	r2, [r3, #60]	; 0x3c
    return  HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e037      	b.n	8007ecc <HAL_I2S_Init+0x1b8>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	691a      	ldr	r2, [r3, #16]
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	ea42 0103 	orr.w	r1, r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	69fa      	ldr	r2, [r7, #28]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	69da      	ldr	r2, [r3, #28]
 8007e76:	4b17      	ldr	r3, [pc, #92]	; (8007ed4 <HAL_I2S_Init+0x1c0>)
 8007e78:	4013      	ands	r3, r2
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6851      	ldr	r1, [r2, #4]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	6892      	ldr	r2, [r2, #8]
 8007e82:	4311      	orrs	r1, r2
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	68d2      	ldr	r2, [r2, #12]
 8007e88:	4311      	orrs	r1, r2
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	6992      	ldr	r2, [r2, #24]
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	431a      	orrs	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e9a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	2b30      	cmp	r3, #48	; 0x30
 8007ea2:	d003      	beq.n	8007eac <HAL_I2S_Init+0x198>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	2bb0      	cmp	r3, #176	; 0xb0
 8007eaa:	d107      	bne.n	8007ebc <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	69da      	ldr	r2, [r3, #28]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007eba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->State     = HAL_I2S_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3720      	adds	r7, #32
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	fffff040 	.word	0xfffff040
 8007ed8:	00bb8000 	.word	0x00bb8000
 8007edc:	cccccccd 	.word	0xcccccccd

08007ee0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	4613      	mov	r3, r2
 8007eec:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <HAL_I2S_Receive_DMA+0x1a>
 8007ef4:	88fb      	ldrh	r3, [r7, #6]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e0a1      	b.n	8008042 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d101      	bne.n	8007f0e <HAL_I2S_Receive_DMA+0x2e>
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	e099      	b.n	8008042 <HAL_I2S_Receive_DMA+0x162>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d005      	beq.n	8007f2e <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_BUSY;
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e089      	b.n	8008042 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2204      	movs	r2, #4
 8007f32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2s->pRxBuffPtr = pData;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	629a      	str	r2, [r3, #40]	; 0x28

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	f003 0307 	and.w	r3, r3, #7
 8007f4c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d002      	beq.n	8007f5a <HAL_I2S_Receive_DMA+0x7a>
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2b05      	cmp	r3, #5
 8007f58:	d10a      	bne.n	8007f70 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8007f5a:	88fb      	ldrh	r3, [r7, #6]
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = (Size << 1U);
 8007f64:	88fb      	ldrh	r3, [r7, #6]
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	85da      	strh	r2, [r3, #46]	; 0x2e
 8007f6e:	e005      	b.n	8007f7c <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	88fa      	ldrh	r2, [r7, #6]
 8007f74:	859a      	strh	r2, [r3, #44]	; 0x2c
    hi2s->RxXferCount = Size;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	88fa      	ldrh	r2, [r7, #6]
 8007f7a:	85da      	strh	r2, [r3, #46]	; 0x2e
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f80:	4a32      	ldr	r2, [pc, #200]	; (800804c <HAL_I2S_Receive_DMA+0x16c>)
 8007f82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f88:	4a31      	ldr	r2, [pc, #196]	; (8008050 <HAL_I2S_Receive_DMA+0x170>)
 8007f8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f90:	4a30      	ldr	r2, [pc, #192]	; (8008054 <HAL_I2S_Receive_DMA+0x174>)
 8007f92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fa2:	d10a      	bne.n	8007fba <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	613b      	str	r3, [r7, #16]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	613b      	str	r3, [r7, #16]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	330c      	adds	r3, #12
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fca:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fd0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8007fd2:	f7fe f987 	bl	80062e4 <HAL_DMA_Start_IT>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00f      	beq.n	8007ffc <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe0:	f043 0208 	orr.w	r2, r3, #8
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->State = HAL_I2S_STATE_READY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    __HAL_UNLOCK(hi2s);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e022      	b.n	8008042 <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008006:	2b00      	cmp	r3, #0
 8008008:	d107      	bne.n	800801a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69da      	ldr	r2, [r3, #28]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008018:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	d107      	bne.n	8008038 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	0800822f 	.word	0x0800822f
 8008050:	080081ed 	.word	0x080081ed
 8008054:	0800824b 	.word	0x0800824b

08008058 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	099b      	lsrs	r3, r3, #6
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10e      	bne.n	800809a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f003 0301 	and.w	r3, r3, #1
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8008082:	2b00      	cmp	r3, #0
 8008084:	d009      	beq.n	800809a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	099b      	lsrs	r3, r3, #6
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f92d 	bl	80082f2 <I2S_Receive_IT>
    return;
 8008098:	e044      	b.n	8008124 <HAL_I2S_IRQHandler+0xcc>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	085b      	lsrs	r3, r3, #1
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d009      	beq.n	80080ba <HAL_I2S_IRQHandler+0x62>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	09db      	lsrs	r3, r3, #7
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_I2S_IRQHandler+0x62>
  {
    I2S_Transmit_IT(hi2s);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f8ef 	bl	8008296 <I2S_Transmit_IT>
    return;
 80080b8:	e034      	b.n	8008124 <HAL_I2S_IRQHandler+0xcc>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	095b      	lsrs	r3, r3, #5
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d02e      	beq.n	8008124 <HAL_I2S_IRQHandler+0xcc>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	099b      	lsrs	r3, r3, #6
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00d      	beq.n	80080ee <HAL_I2S_IRQHandler+0x96>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80080e0:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e6:	f043 0202 	orr.w	r2, r3, #2
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	08db      	lsrs	r3, r3, #3
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00d      	beq.n	8008116 <HAL_I2S_IRQHandler+0xbe>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008108:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810e:	f043 0204 	orr.w	r2, r3, #4
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f80d 	bl	800813e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800812a:	b480      	push	{r7}
 800812c:	b083      	sub	sp, #12
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8008132:	bf00      	nop
 8008134:	370c      	adds	r7, #12
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800813e:	b480      	push	{r7}
 8008140:	b083      	sub	sp, #12
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8008146:	bf00      	nop
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
	...

08008154 <I2S_GetClockFreq>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *               the configuration information for I2S module.
  * @retval I2S Clock Input
  */
static uint32_t I2S_GetClockFreq(I2S_HandleTypeDef *hi2s)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t i2sclocksource;

  /* Configure I2S Clock based on I2S source clock selection */

  /* I2S_CLK_x : I2S Block Clock configuration for different clock sources selected */
  switch (hi2s->Init.ClockSource)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d02d      	beq.n	80081c0 <I2S_GetClockFreq+0x6c>
 8008164:	2b02      	cmp	r3, #2
 8008166:	d12e      	bne.n	80081c6 <I2S_GetClockFreq+0x72>
  {
    case I2S_CLOCK_PLL :
    {
      /* Configure the PLLI2S division factor */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008168:	4b1c      	ldr	r3, [pc, #112]	; (80081dc <I2S_GetClockFreq+0x88>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d108      	bne.n	8008186 <I2S_GetClockFreq+0x32>
      {
        /* In Case the PLL Source is HSI (Internal Clock) */
        vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008174:	4b19      	ldr	r3, [pc, #100]	; (80081dc <I2S_GetClockFreq+0x88>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800817c:	4a18      	ldr	r2, [pc, #96]	; (80081e0 <I2S_GetClockFreq+0x8c>)
 800817e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008182:	617b      	str	r3, [r7, #20]
 8008184:	e007      	b.n	8008196 <I2S_GetClockFreq+0x42>
      }
      else
      {
        /* In Case the PLL Source is HSE (External Clock) */
        vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008186:	4b15      	ldr	r3, [pc, #84]	; (80081dc <I2S_GetClockFreq+0x88>)
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800818e:	4a15      	ldr	r2, [pc, #84]	; (80081e4 <I2S_GetClockFreq+0x90>)
 8008190:	fbb2 f3f3 	udiv	r3, r2, r3
 8008194:	617b      	str	r3, [r7, #20]
      }

      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* I2S_CLK(first level) = PLLI2S_VCO Output/PLLI2SR */
      tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U;
 8008196:	4b11      	ldr	r3, [pc, #68]	; (80081dc <I2S_GetClockFreq+0x88>)
 8008198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800819c:	0f1b      	lsrs	r3, r3, #28
 800819e:	f003 0307 	and.w	r3, r3, #7
 80081a2:	60fb      	str	r3, [r7, #12]
      i2sclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80081a4:	4b0d      	ldr	r3, [pc, #52]	; (80081dc <I2S_GetClockFreq+0x88>)
 80081a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081aa:	099b      	lsrs	r3, r3, #6
 80081ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	fb02 f203 	mul.w	r2, r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081bc:	613b      	str	r3, [r7, #16]

      break;
 80081be:	e005      	b.n	80081cc <I2S_GetClockFreq+0x78>
    }
    case I2S_CLOCK_EXTERNAL :
    {
      i2sclocksource = EXTERNAL_CLOCK_VALUE;
 80081c0:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <I2S_GetClockFreq+0x94>)
 80081c2:	613b      	str	r3, [r7, #16]
      break;
 80081c4:	e002      	b.n	80081cc <I2S_GetClockFreq+0x78>
    }
    default :
    {
      i2sclocksource = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	613b      	str	r3, [r7, #16]
      break;
 80081ca:	bf00      	nop
    }
  }

  /* the return result is the value of I2S clock */
  return i2sclocksource;
 80081cc:	693b      	ldr	r3, [r7, #16]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	371c      	adds	r7, #28
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	40023800 	.word	0x40023800
 80081e0:	00f42400 	.word	0x00f42400
 80081e4:	007a1200 	.word	0x007a1200
 80081e8:	00bb8000 	.word	0x00bb8000

080081ec <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10e      	bne.n	8008220 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 0201 	bic.w	r2, r2, #1
 8008210:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	85da      	strh	r2, [r3, #46]	; 0x2e
    hi2s->State = HAL_I2S_STATE_READY;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f7f8 fd59 	bl	8000cd8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008226:	bf00      	nop
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7f8 fd35 	bl	8000cac <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0203 	bic.w	r2, r2, #3
 8008266:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	84da      	strh	r2, [r3, #38]	; 0x26
  hi2s->RxXferCount = 0U;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	85da      	strh	r2, [r3, #46]	; 0x2e

  hi2s->State = HAL_I2S_STATE_READY;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008280:	f043 0208 	orr.w	r2, r3, #8
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7ff ff58 	bl	800813e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800828e:	bf00      	nop
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	881a      	ldrh	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	1c9a      	adds	r2, r3, #2
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	621a      	str	r2, [r3, #32]
  hi2s->TxXferCount--;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	3b01      	subs	r3, #1
 80082bc:	b29a      	uxth	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	84da      	strh	r2, [r3, #38]	; 0x26

  if (hi2s->TxXferCount == 0U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10e      	bne.n	80082ea <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	685a      	ldr	r2, [r3, #4]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80082da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff ff20 	bl	800812a <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80082ea:	bf00      	nop
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68da      	ldr	r2, [r3, #12]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	b292      	uxth	r2, r2
 8008306:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830c:	1c9a      	adds	r2, r3, #2
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	629a      	str	r2, [r3, #40]	; 0x28
  hi2s->RxXferCount--;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008316:	b29b      	uxth	r3, r3
 8008318:	3b01      	subs	r3, #1
 800831a:	b29a      	uxth	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	85da      	strh	r2, [r3, #46]	; 0x2e

  if (hi2s->RxXferCount == 0U)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008324:	b29b      	uxth	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10e      	bne.n	8008348 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008338:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7f8 fcc8 	bl	8000cd8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008354:	4b05      	ldr	r3, [pc, #20]	; (800836c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a04      	ldr	r2, [pc, #16]	; (800836c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800835a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800835e:	6013      	str	r3, [r2, #0]
}
 8008360:	bf00      	nop
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	40007000 	.word	0x40007000

08008370 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800837a:	4b23      	ldr	r3, [pc, #140]	; (8008408 <HAL_PWREx_EnableOverDrive+0x98>)
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	4a22      	ldr	r2, [pc, #136]	; (8008408 <HAL_PWREx_EnableOverDrive+0x98>)
 8008380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008384:	6413      	str	r3, [r2, #64]	; 0x40
 8008386:	4b20      	ldr	r3, [pc, #128]	; (8008408 <HAL_PWREx_EnableOverDrive+0x98>)
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800838e:	603b      	str	r3, [r7, #0]
 8008390:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008392:	4b1e      	ldr	r3, [pc, #120]	; (800840c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a1d      	ldr	r2, [pc, #116]	; (800840c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800839c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800839e:	f7fd fc37 	bl	8005c10 <HAL_GetTick>
 80083a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80083a4:	e009      	b.n	80083ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80083a6:	f7fd fc33 	bl	8005c10 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083b4:	d901      	bls.n	80083ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e022      	b.n	8008400 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80083ba:	4b14      	ldr	r3, [pc, #80]	; (800840c <HAL_PWREx_EnableOverDrive+0x9c>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c6:	d1ee      	bne.n	80083a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80083c8:	4b10      	ldr	r3, [pc, #64]	; (800840c <HAL_PWREx_EnableOverDrive+0x9c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a0f      	ldr	r2, [pc, #60]	; (800840c <HAL_PWREx_EnableOverDrive+0x9c>)
 80083ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083d4:	f7fd fc1c 	bl	8005c10 <HAL_GetTick>
 80083d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80083da:	e009      	b.n	80083f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80083dc:	f7fd fc18 	bl	8005c10 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083ea:	d901      	bls.n	80083f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e007      	b.n	8008400 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80083f0:	4b06      	ldr	r3, [pc, #24]	; (800840c <HAL_PWREx_EnableOverDrive+0x9c>)
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083fc:	d1ee      	bne.n	80083dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	40023800 	.word	0x40023800
 800840c:	40007000 	.word	0x40007000

08008410 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008418:	2300      	movs	r3, #0
 800841a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e29b      	b.n	800895e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 8087 	beq.w	8008542 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008434:	4b96      	ldr	r3, [pc, #600]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f003 030c 	and.w	r3, r3, #12
 800843c:	2b04      	cmp	r3, #4
 800843e:	d00c      	beq.n	800845a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008440:	4b93      	ldr	r3, [pc, #588]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f003 030c 	and.w	r3, r3, #12
 8008448:	2b08      	cmp	r3, #8
 800844a:	d112      	bne.n	8008472 <HAL_RCC_OscConfig+0x62>
 800844c:	4b90      	ldr	r3, [pc, #576]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008458:	d10b      	bne.n	8008472 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800845a:	4b8d      	ldr	r3, [pc, #564]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d06c      	beq.n	8008540 <HAL_RCC_OscConfig+0x130>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d168      	bne.n	8008540 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e275      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800847a:	d106      	bne.n	800848a <HAL_RCC_OscConfig+0x7a>
 800847c:	4b84      	ldr	r3, [pc, #528]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a83      	ldr	r2, [pc, #524]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 8008482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	e02e      	b.n	80084e8 <HAL_RCC_OscConfig+0xd8>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10c      	bne.n	80084ac <HAL_RCC_OscConfig+0x9c>
 8008492:	4b7f      	ldr	r3, [pc, #508]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a7e      	ldr	r2, [pc, #504]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 8008498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	4b7c      	ldr	r3, [pc, #496]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a7b      	ldr	r2, [pc, #492]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80084a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084a8:	6013      	str	r3, [r2, #0]
 80084aa:	e01d      	b.n	80084e8 <HAL_RCC_OscConfig+0xd8>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084b4:	d10c      	bne.n	80084d0 <HAL_RCC_OscConfig+0xc0>
 80084b6:	4b76      	ldr	r3, [pc, #472]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a75      	ldr	r2, [pc, #468]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80084bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084c0:	6013      	str	r3, [r2, #0]
 80084c2:	4b73      	ldr	r3, [pc, #460]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a72      	ldr	r2, [pc, #456]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80084c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084cc:	6013      	str	r3, [r2, #0]
 80084ce:	e00b      	b.n	80084e8 <HAL_RCC_OscConfig+0xd8>
 80084d0:	4b6f      	ldr	r3, [pc, #444]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a6e      	ldr	r2, [pc, #440]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80084d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084da:	6013      	str	r3, [r2, #0]
 80084dc:	4b6c      	ldr	r3, [pc, #432]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a6b      	ldr	r2, [pc, #428]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80084e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d013      	beq.n	8008518 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f0:	f7fd fb8e 	bl	8005c10 <HAL_GetTick>
 80084f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084f6:	e008      	b.n	800850a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084f8:	f7fd fb8a 	bl	8005c10 <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	2b64      	cmp	r3, #100	; 0x64
 8008504:	d901      	bls.n	800850a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e229      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800850a:	4b61      	ldr	r3, [pc, #388]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0f0      	beq.n	80084f8 <HAL_RCC_OscConfig+0xe8>
 8008516:	e014      	b.n	8008542 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008518:	f7fd fb7a 	bl	8005c10 <HAL_GetTick>
 800851c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800851e:	e008      	b.n	8008532 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008520:	f7fd fb76 	bl	8005c10 <HAL_GetTick>
 8008524:	4602      	mov	r2, r0
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	2b64      	cmp	r3, #100	; 0x64
 800852c:	d901      	bls.n	8008532 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e215      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008532:	4b57      	ldr	r3, [pc, #348]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1f0      	bne.n	8008520 <HAL_RCC_OscConfig+0x110>
 800853e:	e000      	b.n	8008542 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d069      	beq.n	8008622 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800854e:	4b50      	ldr	r3, [pc, #320]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f003 030c 	and.w	r3, r3, #12
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00b      	beq.n	8008572 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800855a:	4b4d      	ldr	r3, [pc, #308]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f003 030c 	and.w	r3, r3, #12
 8008562:	2b08      	cmp	r3, #8
 8008564:	d11c      	bne.n	80085a0 <HAL_RCC_OscConfig+0x190>
 8008566:	4b4a      	ldr	r3, [pc, #296]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d116      	bne.n	80085a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008572:	4b47      	ldr	r3, [pc, #284]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d005      	beq.n	800858a <HAL_RCC_OscConfig+0x17a>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d001      	beq.n	800858a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e1e9      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800858a:	4b41      	ldr	r3, [pc, #260]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	493d      	ldr	r1, [pc, #244]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 800859a:	4313      	orrs	r3, r2
 800859c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800859e:	e040      	b.n	8008622 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d023      	beq.n	80085f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085a8:	4b39      	ldr	r3, [pc, #228]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a38      	ldr	r2, [pc, #224]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80085ae:	f043 0301 	orr.w	r3, r3, #1
 80085b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b4:	f7fd fb2c 	bl	8005c10 <HAL_GetTick>
 80085b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085ba:	e008      	b.n	80085ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085bc:	f7fd fb28 	bl	8005c10 <HAL_GetTick>
 80085c0:	4602      	mov	r2, r0
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d901      	bls.n	80085ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e1c7      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085ce:	4b30      	ldr	r3, [pc, #192]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d0f0      	beq.n	80085bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085da:	4b2d      	ldr	r3, [pc, #180]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	4929      	ldr	r1, [pc, #164]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	600b      	str	r3, [r1, #0]
 80085ee:	e018      	b.n	8008622 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085f0:	4b27      	ldr	r3, [pc, #156]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a26      	ldr	r2, [pc, #152]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 80085f6:	f023 0301 	bic.w	r3, r3, #1
 80085fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085fc:	f7fd fb08 	bl	8005c10 <HAL_GetTick>
 8008600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008602:	e008      	b.n	8008616 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008604:	f7fd fb04 	bl	8005c10 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	2b02      	cmp	r3, #2
 8008610:	d901      	bls.n	8008616 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e1a3      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008616:	4b1e      	ldr	r3, [pc, #120]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1f0      	bne.n	8008604 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0308 	and.w	r3, r3, #8
 800862a:	2b00      	cmp	r3, #0
 800862c:	d038      	beq.n	80086a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d019      	beq.n	800866a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008636:	4b16      	ldr	r3, [pc, #88]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 8008638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800863a:	4a15      	ldr	r2, [pc, #84]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 800863c:	f043 0301 	orr.w	r3, r3, #1
 8008640:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008642:	f7fd fae5 	bl	8005c10 <HAL_GetTick>
 8008646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008648:	e008      	b.n	800865c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800864a:	f7fd fae1 	bl	8005c10 <HAL_GetTick>
 800864e:	4602      	mov	r2, r0
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	2b02      	cmp	r3, #2
 8008656:	d901      	bls.n	800865c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008658:	2303      	movs	r3, #3
 800865a:	e180      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800865c:	4b0c      	ldr	r3, [pc, #48]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 800865e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d0f0      	beq.n	800864a <HAL_RCC_OscConfig+0x23a>
 8008668:	e01a      	b.n	80086a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800866a:	4b09      	ldr	r3, [pc, #36]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 800866c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800866e:	4a08      	ldr	r2, [pc, #32]	; (8008690 <HAL_RCC_OscConfig+0x280>)
 8008670:	f023 0301 	bic.w	r3, r3, #1
 8008674:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008676:	f7fd facb 	bl	8005c10 <HAL_GetTick>
 800867a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800867c:	e00a      	b.n	8008694 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800867e:	f7fd fac7 	bl	8005c10 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	2b02      	cmp	r3, #2
 800868a:	d903      	bls.n	8008694 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e166      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
 8008690:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008694:	4b92      	ldr	r3, [pc, #584]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1ee      	bne.n	800867e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0304 	and.w	r3, r3, #4
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 80a4 	beq.w	80087f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086ae:	4b8c      	ldr	r3, [pc, #560]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10d      	bne.n	80086d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80086ba:	4b89      	ldr	r3, [pc, #548]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	4a88      	ldr	r2, [pc, #544]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 80086c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086c4:	6413      	str	r3, [r2, #64]	; 0x40
 80086c6:	4b86      	ldr	r3, [pc, #536]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 80086c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ce:	60bb      	str	r3, [r7, #8]
 80086d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086d2:	2301      	movs	r3, #1
 80086d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086d6:	4b83      	ldr	r3, [pc, #524]	; (80088e4 <HAL_RCC_OscConfig+0x4d4>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d118      	bne.n	8008714 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80086e2:	4b80      	ldr	r3, [pc, #512]	; (80088e4 <HAL_RCC_OscConfig+0x4d4>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a7f      	ldr	r2, [pc, #508]	; (80088e4 <HAL_RCC_OscConfig+0x4d4>)
 80086e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086ee:	f7fd fa8f 	bl	8005c10 <HAL_GetTick>
 80086f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086f4:	e008      	b.n	8008708 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086f6:	f7fd fa8b 	bl	8005c10 <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	2b64      	cmp	r3, #100	; 0x64
 8008702:	d901      	bls.n	8008708 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e12a      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008708:	4b76      	ldr	r3, [pc, #472]	; (80088e4 <HAL_RCC_OscConfig+0x4d4>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0f0      	beq.n	80086f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d106      	bne.n	800872a <HAL_RCC_OscConfig+0x31a>
 800871c:	4b70      	ldr	r3, [pc, #448]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 800871e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008720:	4a6f      	ldr	r2, [pc, #444]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008722:	f043 0301 	orr.w	r3, r3, #1
 8008726:	6713      	str	r3, [r2, #112]	; 0x70
 8008728:	e02d      	b.n	8008786 <HAL_RCC_OscConfig+0x376>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10c      	bne.n	800874c <HAL_RCC_OscConfig+0x33c>
 8008732:	4b6b      	ldr	r3, [pc, #428]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008736:	4a6a      	ldr	r2, [pc, #424]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008738:	f023 0301 	bic.w	r3, r3, #1
 800873c:	6713      	str	r3, [r2, #112]	; 0x70
 800873e:	4b68      	ldr	r3, [pc, #416]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008742:	4a67      	ldr	r2, [pc, #412]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008744:	f023 0304 	bic.w	r3, r3, #4
 8008748:	6713      	str	r3, [r2, #112]	; 0x70
 800874a:	e01c      	b.n	8008786 <HAL_RCC_OscConfig+0x376>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	2b05      	cmp	r3, #5
 8008752:	d10c      	bne.n	800876e <HAL_RCC_OscConfig+0x35e>
 8008754:	4b62      	ldr	r3, [pc, #392]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008758:	4a61      	ldr	r2, [pc, #388]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 800875a:	f043 0304 	orr.w	r3, r3, #4
 800875e:	6713      	str	r3, [r2, #112]	; 0x70
 8008760:	4b5f      	ldr	r3, [pc, #380]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008764:	4a5e      	ldr	r2, [pc, #376]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008766:	f043 0301 	orr.w	r3, r3, #1
 800876a:	6713      	str	r3, [r2, #112]	; 0x70
 800876c:	e00b      	b.n	8008786 <HAL_RCC_OscConfig+0x376>
 800876e:	4b5c      	ldr	r3, [pc, #368]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008772:	4a5b      	ldr	r2, [pc, #364]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008774:	f023 0301 	bic.w	r3, r3, #1
 8008778:	6713      	str	r3, [r2, #112]	; 0x70
 800877a:	4b59      	ldr	r3, [pc, #356]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 800877c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800877e:	4a58      	ldr	r2, [pc, #352]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008780:	f023 0304 	bic.w	r3, r3, #4
 8008784:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d015      	beq.n	80087ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800878e:	f7fd fa3f 	bl	8005c10 <HAL_GetTick>
 8008792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008794:	e00a      	b.n	80087ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008796:	f7fd fa3b 	bl	8005c10 <HAL_GetTick>
 800879a:	4602      	mov	r2, r0
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	1ad3      	subs	r3, r2, r3
 80087a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d901      	bls.n	80087ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e0d8      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087ac:	4b4c      	ldr	r3, [pc, #304]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 80087ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d0ee      	beq.n	8008796 <HAL_RCC_OscConfig+0x386>
 80087b8:	e014      	b.n	80087e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ba:	f7fd fa29 	bl	8005c10 <HAL_GetTick>
 80087be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087c0:	e00a      	b.n	80087d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087c2:	f7fd fa25 	bl	8005c10 <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d901      	bls.n	80087d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e0c2      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087d8:	4b41      	ldr	r3, [pc, #260]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 80087da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087dc:	f003 0302 	and.w	r3, r3, #2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1ee      	bne.n	80087c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80087e4:	7dfb      	ldrb	r3, [r7, #23]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d105      	bne.n	80087f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087ea:	4b3d      	ldr	r3, [pc, #244]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 80087ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ee:	4a3c      	ldr	r2, [pc, #240]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 80087f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f000 80ae 	beq.w	800895c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008800:	4b37      	ldr	r3, [pc, #220]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f003 030c 	and.w	r3, r3, #12
 8008808:	2b08      	cmp	r3, #8
 800880a:	d06d      	beq.n	80088e8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	2b02      	cmp	r3, #2
 8008812:	d14b      	bne.n	80088ac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008814:	4b32      	ldr	r3, [pc, #200]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a31      	ldr	r2, [pc, #196]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 800881a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800881e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008820:	f7fd f9f6 	bl	8005c10 <HAL_GetTick>
 8008824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008826:	e008      	b.n	800883a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008828:	f7fd f9f2 	bl	8005c10 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	2b02      	cmp	r3, #2
 8008834:	d901      	bls.n	800883a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e091      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800883a:	4b29      	ldr	r3, [pc, #164]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1f0      	bne.n	8008828 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	69da      	ldr	r2, [r3, #28]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	431a      	orrs	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008854:	019b      	lsls	r3, r3, #6
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885c:	085b      	lsrs	r3, r3, #1
 800885e:	3b01      	subs	r3, #1
 8008860:	041b      	lsls	r3, r3, #16
 8008862:	431a      	orrs	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008868:	061b      	lsls	r3, r3, #24
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008870:	071b      	lsls	r3, r3, #28
 8008872:	491b      	ldr	r1, [pc, #108]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 8008874:	4313      	orrs	r3, r2
 8008876:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008878:	4b19      	ldr	r3, [pc, #100]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a18      	ldr	r2, [pc, #96]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 800887e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008884:	f7fd f9c4 	bl	8005c10 <HAL_GetTick>
 8008888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800888a:	e008      	b.n	800889e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800888c:	f7fd f9c0 	bl	8005c10 <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b02      	cmp	r3, #2
 8008898:	d901      	bls.n	800889e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e05f      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800889e:	4b10      	ldr	r3, [pc, #64]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0f0      	beq.n	800888c <HAL_RCC_OscConfig+0x47c>
 80088aa:	e057      	b.n	800895c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088ac:	4b0c      	ldr	r3, [pc, #48]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a0b      	ldr	r2, [pc, #44]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 80088b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b8:	f7fd f9aa 	bl	8005c10 <HAL_GetTick>
 80088bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088be:	e008      	b.n	80088d2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088c0:	f7fd f9a6 	bl	8005c10 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d901      	bls.n	80088d2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e045      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088d2:	4b03      	ldr	r3, [pc, #12]	; (80088e0 <HAL_RCC_OscConfig+0x4d0>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1f0      	bne.n	80088c0 <HAL_RCC_OscConfig+0x4b0>
 80088de:	e03d      	b.n	800895c <HAL_RCC_OscConfig+0x54c>
 80088e0:	40023800 	.word	0x40023800
 80088e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80088e8:	4b1f      	ldr	r3, [pc, #124]	; (8008968 <HAL_RCC_OscConfig+0x558>)
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d030      	beq.n	8008958 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008900:	429a      	cmp	r2, r3
 8008902:	d129      	bne.n	8008958 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800890e:	429a      	cmp	r2, r3
 8008910:	d122      	bne.n	8008958 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008918:	4013      	ands	r3, r2
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800891e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008920:	4293      	cmp	r3, r2
 8008922:	d119      	bne.n	8008958 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892e:	085b      	lsrs	r3, r3, #1
 8008930:	3b01      	subs	r3, #1
 8008932:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008934:	429a      	cmp	r2, r3
 8008936:	d10f      	bne.n	8008958 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008942:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008944:	429a      	cmp	r2, r3
 8008946:	d107      	bne.n	8008958 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008952:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008954:	429a      	cmp	r2, r3
 8008956:	d001      	beq.n	800895c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e000      	b.n	800895e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	40023800 	.word	0x40023800

0800896c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e0d0      	b.n	8008b26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008984:	4b6a      	ldr	r3, [pc, #424]	; (8008b30 <HAL_RCC_ClockConfig+0x1c4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 030f 	and.w	r3, r3, #15
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d910      	bls.n	80089b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008992:	4b67      	ldr	r3, [pc, #412]	; (8008b30 <HAL_RCC_ClockConfig+0x1c4>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f023 020f 	bic.w	r2, r3, #15
 800899a:	4965      	ldr	r1, [pc, #404]	; (8008b30 <HAL_RCC_ClockConfig+0x1c4>)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	4313      	orrs	r3, r2
 80089a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089a2:	4b63      	ldr	r3, [pc, #396]	; (8008b30 <HAL_RCC_ClockConfig+0x1c4>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 030f 	and.w	r3, r3, #15
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d001      	beq.n	80089b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e0b8      	b.n	8008b26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0302 	and.w	r3, r3, #2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d020      	beq.n	8008a02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0304 	and.w	r3, r3, #4
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089cc:	4b59      	ldr	r3, [pc, #356]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	4a58      	ldr	r2, [pc, #352]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 80089d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80089d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0308 	and.w	r3, r3, #8
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d005      	beq.n	80089f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089e4:	4b53      	ldr	r3, [pc, #332]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	4a52      	ldr	r2, [pc, #328]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 80089ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80089ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089f0:	4b50      	ldr	r3, [pc, #320]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	494d      	ldr	r1, [pc, #308]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d040      	beq.n	8008a90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d107      	bne.n	8008a26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a16:	4b47      	ldr	r3, [pc, #284]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d115      	bne.n	8008a4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e07f      	b.n	8008b26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d107      	bne.n	8008a3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a2e:	4b41      	ldr	r3, [pc, #260]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d109      	bne.n	8008a4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e073      	b.n	8008b26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a3e:	4b3d      	ldr	r3, [pc, #244]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e06b      	b.n	8008b26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a4e:	4b39      	ldr	r3, [pc, #228]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f023 0203 	bic.w	r2, r3, #3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	4936      	ldr	r1, [pc, #216]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a60:	f7fd f8d6 	bl	8005c10 <HAL_GetTick>
 8008a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a66:	e00a      	b.n	8008a7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a68:	f7fd f8d2 	bl	8005c10 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d901      	bls.n	8008a7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e053      	b.n	8008b26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a7e:	4b2d      	ldr	r3, [pc, #180]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f003 020c 	and.w	r2, r3, #12
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d1eb      	bne.n	8008a68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a90:	4b27      	ldr	r3, [pc, #156]	; (8008b30 <HAL_RCC_ClockConfig+0x1c4>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 030f 	and.w	r3, r3, #15
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d210      	bcs.n	8008ac0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a9e:	4b24      	ldr	r3, [pc, #144]	; (8008b30 <HAL_RCC_ClockConfig+0x1c4>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f023 020f 	bic.w	r2, r3, #15
 8008aa6:	4922      	ldr	r1, [pc, #136]	; (8008b30 <HAL_RCC_ClockConfig+0x1c4>)
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aae:	4b20      	ldr	r3, [pc, #128]	; (8008b30 <HAL_RCC_ClockConfig+0x1c4>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 030f 	and.w	r3, r3, #15
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d001      	beq.n	8008ac0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e032      	b.n	8008b26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0304 	and.w	r3, r3, #4
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d008      	beq.n	8008ade <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008acc:	4b19      	ldr	r3, [pc, #100]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	4916      	ldr	r1, [pc, #88]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 0308 	and.w	r3, r3, #8
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d009      	beq.n	8008afe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008aea:	4b12      	ldr	r3, [pc, #72]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	00db      	lsls	r3, r3, #3
 8008af8:	490e      	ldr	r1, [pc, #56]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008afe:	f000 f821 	bl	8008b44 <HAL_RCC_GetSysClockFreq>
 8008b02:	4602      	mov	r2, r0
 8008b04:	4b0b      	ldr	r3, [pc, #44]	; (8008b34 <HAL_RCC_ClockConfig+0x1c8>)
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	091b      	lsrs	r3, r3, #4
 8008b0a:	f003 030f 	and.w	r3, r3, #15
 8008b0e:	490a      	ldr	r1, [pc, #40]	; (8008b38 <HAL_RCC_ClockConfig+0x1cc>)
 8008b10:	5ccb      	ldrb	r3, [r1, r3]
 8008b12:	fa22 f303 	lsr.w	r3, r2, r3
 8008b16:	4a09      	ldr	r2, [pc, #36]	; (8008b3c <HAL_RCC_ClockConfig+0x1d0>)
 8008b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008b1a:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <HAL_RCC_ClockConfig+0x1d4>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fd f832 	bl	8005b88 <HAL_InitTick>

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	40023c00 	.word	0x40023c00
 8008b34:	40023800 	.word	0x40023800
 8008b38:	0800d314 	.word	0x0800d314
 8008b3c:	2000040c 	.word	0x2000040c
 8008b40:	200004e4 	.word	0x200004e4

08008b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	607b      	str	r3, [r7, #4]
 8008b50:	2300      	movs	r3, #0
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	2300      	movs	r3, #0
 8008b56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b5c:	4b67      	ldr	r3, [pc, #412]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f003 030c 	and.w	r3, r3, #12
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	d00d      	beq.n	8008b84 <HAL_RCC_GetSysClockFreq+0x40>
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	f200 80bd 	bhi.w	8008ce8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d002      	beq.n	8008b78 <HAL_RCC_GetSysClockFreq+0x34>
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d003      	beq.n	8008b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8008b76:	e0b7      	b.n	8008ce8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b78:	4b61      	ldr	r3, [pc, #388]	; (8008d00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008b7a:	60bb      	str	r3, [r7, #8]
      break;
 8008b7c:	e0b7      	b.n	8008cee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b7e:	4b61      	ldr	r3, [pc, #388]	; (8008d04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008b80:	60bb      	str	r3, [r7, #8]
      break;
 8008b82:	e0b4      	b.n	8008cee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b84:	4b5d      	ldr	r3, [pc, #372]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b8c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008b8e:	4b5b      	ldr	r3, [pc, #364]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d04d      	beq.n	8008c36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b9a:	4b58      	ldr	r3, [pc, #352]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	099b      	lsrs	r3, r3, #6
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008baa:	f04f 0100 	mov.w	r1, #0
 8008bae:	ea02 0800 	and.w	r8, r2, r0
 8008bb2:	ea03 0901 	and.w	r9, r3, r1
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	4649      	mov	r1, r9
 8008bba:	f04f 0200 	mov.w	r2, #0
 8008bbe:	f04f 0300 	mov.w	r3, #0
 8008bc2:	014b      	lsls	r3, r1, #5
 8008bc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008bc8:	0142      	lsls	r2, r0, #5
 8008bca:	4610      	mov	r0, r2
 8008bcc:	4619      	mov	r1, r3
 8008bce:	ebb0 0008 	subs.w	r0, r0, r8
 8008bd2:	eb61 0109 	sbc.w	r1, r1, r9
 8008bd6:	f04f 0200 	mov.w	r2, #0
 8008bda:	f04f 0300 	mov.w	r3, #0
 8008bde:	018b      	lsls	r3, r1, #6
 8008be0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008be4:	0182      	lsls	r2, r0, #6
 8008be6:	1a12      	subs	r2, r2, r0
 8008be8:	eb63 0301 	sbc.w	r3, r3, r1
 8008bec:	f04f 0000 	mov.w	r0, #0
 8008bf0:	f04f 0100 	mov.w	r1, #0
 8008bf4:	00d9      	lsls	r1, r3, #3
 8008bf6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bfa:	00d0      	lsls	r0, r2, #3
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	460b      	mov	r3, r1
 8008c00:	eb12 0208 	adds.w	r2, r2, r8
 8008c04:	eb43 0309 	adc.w	r3, r3, r9
 8008c08:	f04f 0000 	mov.w	r0, #0
 8008c0c:	f04f 0100 	mov.w	r1, #0
 8008c10:	0259      	lsls	r1, r3, #9
 8008c12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008c16:	0250      	lsls	r0, r2, #9
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4619      	mov	r1, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	461a      	mov	r2, r3
 8008c24:	f04f 0300 	mov.w	r3, #0
 8008c28:	f7f7 fb06 	bl	8000238 <__aeabi_uldivmod>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4613      	mov	r3, r2
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	e04a      	b.n	8008ccc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c36:	4b31      	ldr	r3, [pc, #196]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	099b      	lsrs	r3, r3, #6
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f04f 0300 	mov.w	r3, #0
 8008c42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008c46:	f04f 0100 	mov.w	r1, #0
 8008c4a:	ea02 0400 	and.w	r4, r2, r0
 8008c4e:	ea03 0501 	and.w	r5, r3, r1
 8008c52:	4620      	mov	r0, r4
 8008c54:	4629      	mov	r1, r5
 8008c56:	f04f 0200 	mov.w	r2, #0
 8008c5a:	f04f 0300 	mov.w	r3, #0
 8008c5e:	014b      	lsls	r3, r1, #5
 8008c60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008c64:	0142      	lsls	r2, r0, #5
 8008c66:	4610      	mov	r0, r2
 8008c68:	4619      	mov	r1, r3
 8008c6a:	1b00      	subs	r0, r0, r4
 8008c6c:	eb61 0105 	sbc.w	r1, r1, r5
 8008c70:	f04f 0200 	mov.w	r2, #0
 8008c74:	f04f 0300 	mov.w	r3, #0
 8008c78:	018b      	lsls	r3, r1, #6
 8008c7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008c7e:	0182      	lsls	r2, r0, #6
 8008c80:	1a12      	subs	r2, r2, r0
 8008c82:	eb63 0301 	sbc.w	r3, r3, r1
 8008c86:	f04f 0000 	mov.w	r0, #0
 8008c8a:	f04f 0100 	mov.w	r1, #0
 8008c8e:	00d9      	lsls	r1, r3, #3
 8008c90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c94:	00d0      	lsls	r0, r2, #3
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	1912      	adds	r2, r2, r4
 8008c9c:	eb45 0303 	adc.w	r3, r5, r3
 8008ca0:	f04f 0000 	mov.w	r0, #0
 8008ca4:	f04f 0100 	mov.w	r1, #0
 8008ca8:	0299      	lsls	r1, r3, #10
 8008caa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008cae:	0290      	lsls	r0, r2, #10
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4610      	mov	r0, r2
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	f04f 0300 	mov.w	r3, #0
 8008cc0:	f7f7 faba 	bl	8000238 <__aeabi_uldivmod>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4613      	mov	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008ccc:	4b0b      	ldr	r3, [pc, #44]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	0c1b      	lsrs	r3, r3, #16
 8008cd2:	f003 0303 	and.w	r3, r3, #3
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008cdc:	68fa      	ldr	r2, [r7, #12]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce4:	60bb      	str	r3, [r7, #8]
      break;
 8008ce6:	e002      	b.n	8008cee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ce8:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008cea:	60bb      	str	r3, [r7, #8]
      break;
 8008cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cee:	68bb      	ldr	r3, [r7, #8]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008cfa:	bf00      	nop
 8008cfc:	40023800 	.word	0x40023800
 8008d00:	00f42400 	.word	0x00f42400
 8008d04:	007a1200 	.word	0x007a1200

08008d08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d0c:	4b03      	ldr	r3, [pc, #12]	; (8008d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	2000040c 	.word	0x2000040c

08008d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008d24:	f7ff fff0 	bl	8008d08 <HAL_RCC_GetHCLKFreq>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	0a9b      	lsrs	r3, r3, #10
 8008d30:	f003 0307 	and.w	r3, r3, #7
 8008d34:	4903      	ldr	r1, [pc, #12]	; (8008d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d36:	5ccb      	ldrb	r3, [r1, r3]
 8008d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	40023800 	.word	0x40023800
 8008d44:	0800d324 	.word	0x0800d324

08008d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008d4c:	f7ff ffdc 	bl	8008d08 <HAL_RCC_GetHCLKFreq>
 8008d50:	4602      	mov	r2, r0
 8008d52:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	0b5b      	lsrs	r3, r3, #13
 8008d58:	f003 0307 	and.w	r3, r3, #7
 8008d5c:	4903      	ldr	r1, [pc, #12]	; (8008d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d5e:	5ccb      	ldrb	r3, [r1, r3]
 8008d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	40023800 	.word	0x40023800
 8008d6c:	0800d324 	.word	0x0800d324

08008d70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b088      	sub	sp, #32
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008d84:	2300      	movs	r3, #0
 8008d86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d012      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008d98:	4b69      	ldr	r3, [pc, #420]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	4a68      	ldr	r2, [pc, #416]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008da2:	6093      	str	r3, [r2, #8]
 8008da4:	4b66      	ldr	r3, [pc, #408]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008da6:	689a      	ldr	r2, [r3, #8]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dac:	4964      	ldr	r1, [pc, #400]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d017      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008dca:	4b5d      	ldr	r3, [pc, #372]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd8:	4959      	ldr	r1, [pc, #356]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008de8:	d101      	bne.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008dea:	2301      	movs	r3, #1
 8008dec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008df6:	2301      	movs	r3, #1
 8008df8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d017      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008e06:	4b4e      	ldr	r3, [pc, #312]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e14:	494a      	ldr	r1, [pc, #296]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e16:	4313      	orrs	r3, r2
 8008e18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e24:	d101      	bne.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008e26:	2301      	movs	r3, #1
 8008e28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008e32:	2301      	movs	r3, #1
 8008e34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008e42:	2301      	movs	r3, #1
 8008e44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 0320 	and.w	r3, r3, #32
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 808b 	beq.w	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e54:	4b3a      	ldr	r3, [pc, #232]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e58:	4a39      	ldr	r2, [pc, #228]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e5e:	6413      	str	r3, [r2, #64]	; 0x40
 8008e60:	4b37      	ldr	r3, [pc, #220]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e68:	60bb      	str	r3, [r7, #8]
 8008e6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008e6c:	4b35      	ldr	r3, [pc, #212]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a34      	ldr	r2, [pc, #208]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e78:	f7fc feca 	bl	8005c10 <HAL_GetTick>
 8008e7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008e7e:	e008      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e80:	f7fc fec6 	bl	8005c10 <HAL_GetTick>
 8008e84:	4602      	mov	r2, r0
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	2b64      	cmp	r3, #100	; 0x64
 8008e8c:	d901      	bls.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e38f      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008e92:	4b2c      	ldr	r3, [pc, #176]	; (8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0f0      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e9e:	4b28      	ldr	r3, [pc, #160]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ea6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d035      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d02e      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ebc:	4b20      	ldr	r3, [pc, #128]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ec4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008ec6:	4b1e      	ldr	r3, [pc, #120]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eca:	4a1d      	ldr	r2, [pc, #116]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ed0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ed2:	4b1b      	ldr	r3, [pc, #108]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed6:	4a1a      	ldr	r2, [pc, #104]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008edc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008ede:	4a18      	ldr	r2, [pc, #96]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008ee4:	4b16      	ldr	r3, [pc, #88]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d114      	bne.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef0:	f7fc fe8e 	bl	8005c10 <HAL_GetTick>
 8008ef4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ef6:	e00a      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ef8:	f7fc fe8a 	bl	8005c10 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d901      	bls.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e351      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f0e:	4b0c      	ldr	r3, [pc, #48]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0ee      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f26:	d111      	bne.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008f28:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008f34:	4b04      	ldr	r3, [pc, #16]	; (8008f48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008f36:	400b      	ands	r3, r1
 8008f38:	4901      	ldr	r1, [pc, #4]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	608b      	str	r3, [r1, #8]
 8008f3e:	e00b      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008f40:	40023800 	.word	0x40023800
 8008f44:	40007000 	.word	0x40007000
 8008f48:	0ffffcff 	.word	0x0ffffcff
 8008f4c:	4bb3      	ldr	r3, [pc, #716]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	4ab2      	ldr	r2, [pc, #712]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008f56:	6093      	str	r3, [r2, #8]
 8008f58:	4bb0      	ldr	r3, [pc, #704]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f64:	49ad      	ldr	r1, [pc, #692]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f66:	4313      	orrs	r3, r2
 8008f68:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0310 	and.w	r3, r3, #16
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d010      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f76:	4ba9      	ldr	r3, [pc, #676]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f7c:	4aa7      	ldr	r2, [pc, #668]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008f86:	4ba5      	ldr	r3, [pc, #660]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f90:	49a2      	ldr	r1, [pc, #648]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00a      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008fa4:	4b9d      	ldr	r3, [pc, #628]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008faa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb2:	499a      	ldr	r1, [pc, #616]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008fc6:	4b95      	ldr	r3, [pc, #596]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fd4:	4991      	ldr	r1, [pc, #580]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00a      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008fe8:	4b8c      	ldr	r3, [pc, #560]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff6:	4989      	ldr	r1, [pc, #548]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00a      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800900a:	4b84      	ldr	r3, [pc, #528]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800900c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009010:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009018:	4980      	ldr	r1, [pc, #512]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800901a:	4313      	orrs	r3, r2
 800901c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00a      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800902c:	4b7b      	ldr	r3, [pc, #492]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800902e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009032:	f023 0203 	bic.w	r2, r3, #3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903a:	4978      	ldr	r1, [pc, #480]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800903c:	4313      	orrs	r3, r2
 800903e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800904e:	4b73      	ldr	r3, [pc, #460]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009054:	f023 020c 	bic.w	r2, r3, #12
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800905c:	496f      	ldr	r1, [pc, #444]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800905e:	4313      	orrs	r3, r2
 8009060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00a      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009070:	4b6a      	ldr	r3, [pc, #424]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009076:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800907e:	4967      	ldr	r1, [pc, #412]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009080:	4313      	orrs	r3, r2
 8009082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00a      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009092:	4b62      	ldr	r3, [pc, #392]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009098:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a0:	495e      	ldr	r1, [pc, #376]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00a      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80090b4:	4b59      	ldr	r3, [pc, #356]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80090b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c2:	4956      	ldr	r1, [pc, #344]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00a      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80090d6:	4b51      	ldr	r3, [pc, #324]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80090d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090e4:	494d      	ldr	r1, [pc, #308]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00a      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80090f8:	4b48      	ldr	r3, [pc, #288]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80090fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009106:	4945      	ldr	r1, [pc, #276]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009108:	4313      	orrs	r3, r2
 800910a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00a      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800911a:	4b40      	ldr	r3, [pc, #256]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800911c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009120:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009128:	493c      	ldr	r1, [pc, #240]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800912a:	4313      	orrs	r3, r2
 800912c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00a      	beq.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800913c:	4b37      	ldr	r3, [pc, #220]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800913e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009142:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800914a:	4934      	ldr	r1, [pc, #208]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800914c:	4313      	orrs	r3, r2
 800914e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d011      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800915e:	4b2f      	ldr	r3, [pc, #188]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009164:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800916c:	492b      	ldr	r1, [pc, #172]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800916e:	4313      	orrs	r3, r2
 8009170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800917c:	d101      	bne.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800917e:	2301      	movs	r3, #1
 8009180:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0308 	and.w	r3, r3, #8
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800918e:	2301      	movs	r3, #1
 8009190:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00a      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800919e:	4b1f      	ldr	r3, [pc, #124]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ac:	491b      	ldr	r1, [pc, #108]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00b      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80091c0:	4b16      	ldr	r3, [pc, #88]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091d0:	4912      	ldr	r1, [pc, #72]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00b      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80091e4:	4b0d      	ldr	r3, [pc, #52]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091f4:	4909      	ldr	r1, [pc, #36]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80091f6:	4313      	orrs	r3, r2
 80091f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00f      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009208:	4b04      	ldr	r3, [pc, #16]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800920a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800920e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009218:	e002      	b.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800921a:	bf00      	nop
 800921c:	40023800 	.word	0x40023800
 8009220:	4986      	ldr	r1, [pc, #536]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009222:	4313      	orrs	r3, r2
 8009224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00b      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009234:	4b81      	ldr	r3, [pc, #516]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800923a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009244:	497d      	ldr	r1, [pc, #500]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009246:	4313      	orrs	r3, r2
 8009248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d006      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 80d6 	beq.w	800940c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009260:	4b76      	ldr	r3, [pc, #472]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a75      	ldr	r2, [pc, #468]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009266:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800926a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800926c:	f7fc fcd0 	bl	8005c10 <HAL_GetTick>
 8009270:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009272:	e008      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009274:	f7fc fccc 	bl	8005c10 <HAL_GetTick>
 8009278:	4602      	mov	r2, r0
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	2b64      	cmp	r3, #100	; 0x64
 8009280:	d901      	bls.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e195      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009286:	4b6d      	ldr	r3, [pc, #436]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1f0      	bne.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	2b00      	cmp	r3, #0
 800929c:	d021      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d11d      	bne.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80092a6:	4b65      	ldr	r3, [pc, #404]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80092a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ac:	0c1b      	lsrs	r3, r3, #16
 80092ae:	f003 0303 	and.w	r3, r3, #3
 80092b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80092b4:	4b61      	ldr	r3, [pc, #388]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80092b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092ba:	0e1b      	lsrs	r3, r3, #24
 80092bc:	f003 030f 	and.w	r3, r3, #15
 80092c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	019a      	lsls	r2, r3, #6
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	041b      	lsls	r3, r3, #16
 80092cc:	431a      	orrs	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	061b      	lsls	r3, r3, #24
 80092d2:	431a      	orrs	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	071b      	lsls	r3, r3, #28
 80092da:	4958      	ldr	r1, [pc, #352]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80092dc:	4313      	orrs	r3, r2
 80092de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d004      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092f6:	d00a      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009300:	2b00      	cmp	r3, #0
 8009302:	d02e      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800930c:	d129      	bne.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800930e:	4b4b      	ldr	r3, [pc, #300]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009314:	0c1b      	lsrs	r3, r3, #16
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800931c:	4b47      	ldr	r3, [pc, #284]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800931e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009322:	0f1b      	lsrs	r3, r3, #28
 8009324:	f003 0307 	and.w	r3, r3, #7
 8009328:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	019a      	lsls	r2, r3, #6
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	041b      	lsls	r3, r3, #16
 8009334:	431a      	orrs	r2, r3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	061b      	lsls	r3, r3, #24
 800933c:	431a      	orrs	r2, r3
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	071b      	lsls	r3, r3, #28
 8009342:	493e      	ldr	r1, [pc, #248]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009344:	4313      	orrs	r3, r2
 8009346:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800934a:	4b3c      	ldr	r3, [pc, #240]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800934c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009350:	f023 021f 	bic.w	r2, r3, #31
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	3b01      	subs	r3, #1
 800935a:	4938      	ldr	r1, [pc, #224]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800935c:	4313      	orrs	r3, r2
 800935e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d01d      	beq.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800936e:	4b33      	ldr	r3, [pc, #204]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009374:	0e1b      	lsrs	r3, r3, #24
 8009376:	f003 030f 	and.w	r3, r3, #15
 800937a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800937c:	4b2f      	ldr	r3, [pc, #188]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800937e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009382:	0f1b      	lsrs	r3, r3, #28
 8009384:	f003 0307 	and.w	r3, r3, #7
 8009388:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	019a      	lsls	r2, r3, #6
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	041b      	lsls	r3, r3, #16
 8009396:	431a      	orrs	r2, r3
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	061b      	lsls	r3, r3, #24
 800939c:	431a      	orrs	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	071b      	lsls	r3, r3, #28
 80093a2:	4926      	ldr	r1, [pc, #152]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80093a4:	4313      	orrs	r3, r2
 80093a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d011      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	019a      	lsls	r2, r3, #6
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	041b      	lsls	r3, r3, #16
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	061b      	lsls	r3, r3, #24
 80093ca:	431a      	orrs	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	071b      	lsls	r3, r3, #28
 80093d2:	491a      	ldr	r1, [pc, #104]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80093da:	4b18      	ldr	r3, [pc, #96]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a17      	ldr	r2, [pc, #92]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80093e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093e6:	f7fc fc13 	bl	8005c10 <HAL_GetTick>
 80093ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80093ec:	e008      	b.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80093ee:	f7fc fc0f 	bl	8005c10 <HAL_GetTick>
 80093f2:	4602      	mov	r2, r0
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	2b64      	cmp	r3, #100	; 0x64
 80093fa:	d901      	bls.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e0d8      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009400:	4b0e      	ldr	r3, [pc, #56]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d0f0      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	2b01      	cmp	r3, #1
 8009410:	f040 80ce 	bne.w	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009414:	4b09      	ldr	r3, [pc, #36]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a08      	ldr	r2, [pc, #32]	; (800943c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800941a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800941e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009420:	f7fc fbf6 	bl	8005c10 <HAL_GetTick>
 8009424:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009426:	e00b      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009428:	f7fc fbf2 	bl	8005c10 <HAL_GetTick>
 800942c:	4602      	mov	r2, r0
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	2b64      	cmp	r3, #100	; 0x64
 8009434:	d904      	bls.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e0bb      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800943a:	bf00      	nop
 800943c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009440:	4b5e      	ldr	r3, [pc, #376]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800944c:	d0ec      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d009      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800946a:	2b00      	cmp	r3, #0
 800946c:	d02e      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009472:	2b00      	cmp	r3, #0
 8009474:	d12a      	bne.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009476:	4b51      	ldr	r3, [pc, #324]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800947c:	0c1b      	lsrs	r3, r3, #16
 800947e:	f003 0303 	and.w	r3, r3, #3
 8009482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009484:	4b4d      	ldr	r3, [pc, #308]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800948a:	0f1b      	lsrs	r3, r3, #28
 800948c:	f003 0307 	and.w	r3, r3, #7
 8009490:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	019a      	lsls	r2, r3, #6
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	041b      	lsls	r3, r3, #16
 800949c:	431a      	orrs	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	061b      	lsls	r3, r3, #24
 80094a4:	431a      	orrs	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	071b      	lsls	r3, r3, #28
 80094aa:	4944      	ldr	r1, [pc, #272]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80094ac:	4313      	orrs	r3, r2
 80094ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80094b2:	4b42      	ldr	r3, [pc, #264]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80094b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c0:	3b01      	subs	r3, #1
 80094c2:	021b      	lsls	r3, r3, #8
 80094c4:	493d      	ldr	r1, [pc, #244]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d022      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094e0:	d11d      	bne.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80094e2:	4b36      	ldr	r3, [pc, #216]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80094e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e8:	0e1b      	lsrs	r3, r3, #24
 80094ea:	f003 030f 	and.w	r3, r3, #15
 80094ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80094f0:	4b32      	ldr	r3, [pc, #200]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80094f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094f6:	0f1b      	lsrs	r3, r3, #28
 80094f8:	f003 0307 	and.w	r3, r3, #7
 80094fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	695b      	ldr	r3, [r3, #20]
 8009502:	019a      	lsls	r2, r3, #6
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a1b      	ldr	r3, [r3, #32]
 8009508:	041b      	lsls	r3, r3, #16
 800950a:	431a      	orrs	r2, r3
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	061b      	lsls	r3, r3, #24
 8009510:	431a      	orrs	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	071b      	lsls	r3, r3, #28
 8009516:	4929      	ldr	r1, [pc, #164]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009518:	4313      	orrs	r3, r2
 800951a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0308 	and.w	r3, r3, #8
 8009526:	2b00      	cmp	r3, #0
 8009528:	d028      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800952a:	4b24      	ldr	r3, [pc, #144]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800952c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009530:	0e1b      	lsrs	r3, r3, #24
 8009532:	f003 030f 	and.w	r3, r3, #15
 8009536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009538:	4b20      	ldr	r3, [pc, #128]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800953a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800953e:	0c1b      	lsrs	r3, r3, #16
 8009540:	f003 0303 	and.w	r3, r3, #3
 8009544:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	019a      	lsls	r2, r3, #6
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	041b      	lsls	r3, r3, #16
 8009550:	431a      	orrs	r2, r3
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	061b      	lsls	r3, r3, #24
 8009556:	431a      	orrs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	69db      	ldr	r3, [r3, #28]
 800955c:	071b      	lsls	r3, r3, #28
 800955e:	4917      	ldr	r1, [pc, #92]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009560:	4313      	orrs	r3, r2
 8009562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009566:	4b15      	ldr	r3, [pc, #84]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800956c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009574:	4911      	ldr	r1, [pc, #68]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009576:	4313      	orrs	r3, r2
 8009578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800957c:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a0e      	ldr	r2, [pc, #56]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009588:	f7fc fb42 	bl	8005c10 <HAL_GetTick>
 800958c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800958e:	e008      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009590:	f7fc fb3e 	bl	8005c10 <HAL_GetTick>
 8009594:	4602      	mov	r2, r0
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	2b64      	cmp	r3, #100	; 0x64
 800959c:	d901      	bls.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e007      	b.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80095a2:	4b06      	ldr	r3, [pc, #24]	; (80095bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095ae:	d1ef      	bne.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3720      	adds	r7, #32
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	40023800 	.word	0x40023800

080095c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e049      	b.n	8009666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d106      	bne.n	80095ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7f8 f83a 	bl	8001660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2202      	movs	r2, #2
 80095f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	3304      	adds	r3, #4
 80095fc:	4619      	mov	r1, r3
 80095fe:	4610      	mov	r0, r2
 8009600:	f000 fa50 	bl	8009aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2201      	movs	r2, #1
 8009608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b082      	sub	sp, #8
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	f003 0302 	and.w	r3, r3, #2
 8009680:	2b02      	cmp	r3, #2
 8009682:	d122      	bne.n	80096ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	f003 0302 	and.w	r3, r3, #2
 800968e:	2b02      	cmp	r3, #2
 8009690:	d11b      	bne.n	80096ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f06f 0202 	mvn.w	r2, #2
 800969a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	f003 0303 	and.w	r3, r3, #3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d003      	beq.n	80096b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 f9d9 	bl	8009a68 <HAL_TIM_IC_CaptureCallback>
 80096b6:	e005      	b.n	80096c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f9cb 	bl	8009a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f9dc 	bl	8009a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	f003 0304 	and.w	r3, r3, #4
 80096d4:	2b04      	cmp	r3, #4
 80096d6:	d122      	bne.n	800971e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f003 0304 	and.w	r3, r3, #4
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d11b      	bne.n	800971e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f06f 0204 	mvn.w	r2, #4
 80096ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009700:	2b00      	cmp	r3, #0
 8009702:	d003      	beq.n	800970c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f9af 	bl	8009a68 <HAL_TIM_IC_CaptureCallback>
 800970a:	e005      	b.n	8009718 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f9a1 	bl	8009a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f9b2 	bl	8009a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	f003 0308 	and.w	r3, r3, #8
 8009728:	2b08      	cmp	r3, #8
 800972a:	d122      	bne.n	8009772 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f003 0308 	and.w	r3, r3, #8
 8009736:	2b08      	cmp	r3, #8
 8009738:	d11b      	bne.n	8009772 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f06f 0208 	mvn.w	r2, #8
 8009742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2204      	movs	r2, #4
 8009748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	69db      	ldr	r3, [r3, #28]
 8009750:	f003 0303 	and.w	r3, r3, #3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d003      	beq.n	8009760 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 f985 	bl	8009a68 <HAL_TIM_IC_CaptureCallback>
 800975e:	e005      	b.n	800976c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 f977 	bl	8009a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f988 	bl	8009a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	f003 0310 	and.w	r3, r3, #16
 800977c:	2b10      	cmp	r3, #16
 800977e:	d122      	bne.n	80097c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	f003 0310 	and.w	r3, r3, #16
 800978a:	2b10      	cmp	r3, #16
 800978c:	d11b      	bne.n	80097c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f06f 0210 	mvn.w	r2, #16
 8009796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2208      	movs	r2, #8
 800979c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f95b 	bl	8009a68 <HAL_TIM_IC_CaptureCallback>
 80097b2:	e005      	b.n	80097c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f94d 	bl	8009a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f95e 	bl	8009a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d10e      	bne.n	80097f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d107      	bne.n	80097f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f06f 0201 	mvn.w	r2, #1
 80097ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f927 	bl	8009a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097fc:	2b80      	cmp	r3, #128	; 0x80
 80097fe:	d10e      	bne.n	800981e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800980a:	2b80      	cmp	r3, #128	; 0x80
 800980c:	d107      	bne.n	800981e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fb15 	bl	8009e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800982c:	d10e      	bne.n	800984c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009838:	2b80      	cmp	r3, #128	; 0x80
 800983a:	d107      	bne.n	800984c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fb08 	bl	8009e5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009856:	2b40      	cmp	r3, #64	; 0x40
 8009858:	d10e      	bne.n	8009878 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009864:	2b40      	cmp	r3, #64	; 0x40
 8009866:	d107      	bne.n	8009878 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f90c 	bl	8009a90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b20      	cmp	r3, #32
 8009884:	d10e      	bne.n	80098a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	f003 0320 	and.w	r3, r3, #32
 8009890:	2b20      	cmp	r3, #32
 8009892:	d107      	bne.n	80098a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f06f 0220 	mvn.w	r2, #32
 800989c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fac8 	bl	8009e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098a4:	bf00      	nop
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d101      	bne.n	80098c8 <HAL_TIM_ConfigClockSource+0x1c>
 80098c4:	2302      	movs	r3, #2
 80098c6:	e0b4      	b.n	8009a32 <HAL_TIM_ConfigClockSource+0x186>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2202      	movs	r2, #2
 80098d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	4b56      	ldr	r3, [pc, #344]	; (8009a3c <HAL_TIM_ConfigClockSource+0x190>)
 80098e4:	4013      	ands	r3, r2
 80098e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009900:	d03e      	beq.n	8009980 <HAL_TIM_ConfigClockSource+0xd4>
 8009902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009906:	f200 8087 	bhi.w	8009a18 <HAL_TIM_ConfigClockSource+0x16c>
 800990a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800990e:	f000 8086 	beq.w	8009a1e <HAL_TIM_ConfigClockSource+0x172>
 8009912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009916:	d87f      	bhi.n	8009a18 <HAL_TIM_ConfigClockSource+0x16c>
 8009918:	2b70      	cmp	r3, #112	; 0x70
 800991a:	d01a      	beq.n	8009952 <HAL_TIM_ConfigClockSource+0xa6>
 800991c:	2b70      	cmp	r3, #112	; 0x70
 800991e:	d87b      	bhi.n	8009a18 <HAL_TIM_ConfigClockSource+0x16c>
 8009920:	2b60      	cmp	r3, #96	; 0x60
 8009922:	d050      	beq.n	80099c6 <HAL_TIM_ConfigClockSource+0x11a>
 8009924:	2b60      	cmp	r3, #96	; 0x60
 8009926:	d877      	bhi.n	8009a18 <HAL_TIM_ConfigClockSource+0x16c>
 8009928:	2b50      	cmp	r3, #80	; 0x50
 800992a:	d03c      	beq.n	80099a6 <HAL_TIM_ConfigClockSource+0xfa>
 800992c:	2b50      	cmp	r3, #80	; 0x50
 800992e:	d873      	bhi.n	8009a18 <HAL_TIM_ConfigClockSource+0x16c>
 8009930:	2b40      	cmp	r3, #64	; 0x40
 8009932:	d058      	beq.n	80099e6 <HAL_TIM_ConfigClockSource+0x13a>
 8009934:	2b40      	cmp	r3, #64	; 0x40
 8009936:	d86f      	bhi.n	8009a18 <HAL_TIM_ConfigClockSource+0x16c>
 8009938:	2b30      	cmp	r3, #48	; 0x30
 800993a:	d064      	beq.n	8009a06 <HAL_TIM_ConfigClockSource+0x15a>
 800993c:	2b30      	cmp	r3, #48	; 0x30
 800993e:	d86b      	bhi.n	8009a18 <HAL_TIM_ConfigClockSource+0x16c>
 8009940:	2b20      	cmp	r3, #32
 8009942:	d060      	beq.n	8009a06 <HAL_TIM_ConfigClockSource+0x15a>
 8009944:	2b20      	cmp	r3, #32
 8009946:	d867      	bhi.n	8009a18 <HAL_TIM_ConfigClockSource+0x16c>
 8009948:	2b00      	cmp	r3, #0
 800994a:	d05c      	beq.n	8009a06 <HAL_TIM_ConfigClockSource+0x15a>
 800994c:	2b10      	cmp	r3, #16
 800994e:	d05a      	beq.n	8009a06 <HAL_TIM_ConfigClockSource+0x15a>
 8009950:	e062      	b.n	8009a18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6818      	ldr	r0, [r3, #0]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	6899      	ldr	r1, [r3, #8]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	f000 f9b9 	bl	8009cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009974:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	609a      	str	r2, [r3, #8]
      break;
 800997e:	e04f      	b.n	8009a20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6818      	ldr	r0, [r3, #0]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	6899      	ldr	r1, [r3, #8]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	f000 f9a2 	bl	8009cd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	689a      	ldr	r2, [r3, #8]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099a2:	609a      	str	r2, [r3, #8]
      break;
 80099a4:	e03c      	b.n	8009a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6818      	ldr	r0, [r3, #0]
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	6859      	ldr	r1, [r3, #4]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	461a      	mov	r2, r3
 80099b4:	f000 f916 	bl	8009be4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2150      	movs	r1, #80	; 0x50
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 f96f 	bl	8009ca2 <TIM_ITRx_SetConfig>
      break;
 80099c4:	e02c      	b.n	8009a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6818      	ldr	r0, [r3, #0]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	6859      	ldr	r1, [r3, #4]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	461a      	mov	r2, r3
 80099d4:	f000 f935 	bl	8009c42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2160      	movs	r1, #96	; 0x60
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 f95f 	bl	8009ca2 <TIM_ITRx_SetConfig>
      break;
 80099e4:	e01c      	b.n	8009a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6818      	ldr	r0, [r3, #0]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	6859      	ldr	r1, [r3, #4]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	461a      	mov	r2, r3
 80099f4:	f000 f8f6 	bl	8009be4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2140      	movs	r1, #64	; 0x40
 80099fe:	4618      	mov	r0, r3
 8009a00:	f000 f94f 	bl	8009ca2 <TIM_ITRx_SetConfig>
      break;
 8009a04:	e00c      	b.n	8009a20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	4610      	mov	r0, r2
 8009a12:	f000 f946 	bl	8009ca2 <TIM_ITRx_SetConfig>
      break;
 8009a16:	e003      	b.n	8009a20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a1c:	e000      	b.n	8009a20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	fffeff88 	.word	0xfffeff88

08009a40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a40      	ldr	r2, [pc, #256]	; (8009bb8 <TIM_Base_SetConfig+0x114>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d013      	beq.n	8009ae4 <TIM_Base_SetConfig+0x40>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ac2:	d00f      	beq.n	8009ae4 <TIM_Base_SetConfig+0x40>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a3d      	ldr	r2, [pc, #244]	; (8009bbc <TIM_Base_SetConfig+0x118>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d00b      	beq.n	8009ae4 <TIM_Base_SetConfig+0x40>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a3c      	ldr	r2, [pc, #240]	; (8009bc0 <TIM_Base_SetConfig+0x11c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d007      	beq.n	8009ae4 <TIM_Base_SetConfig+0x40>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a3b      	ldr	r2, [pc, #236]	; (8009bc4 <TIM_Base_SetConfig+0x120>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d003      	beq.n	8009ae4 <TIM_Base_SetConfig+0x40>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a3a      	ldr	r2, [pc, #232]	; (8009bc8 <TIM_Base_SetConfig+0x124>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d108      	bne.n	8009af6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a2f      	ldr	r2, [pc, #188]	; (8009bb8 <TIM_Base_SetConfig+0x114>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d02b      	beq.n	8009b56 <TIM_Base_SetConfig+0xb2>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b04:	d027      	beq.n	8009b56 <TIM_Base_SetConfig+0xb2>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a2c      	ldr	r2, [pc, #176]	; (8009bbc <TIM_Base_SetConfig+0x118>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d023      	beq.n	8009b56 <TIM_Base_SetConfig+0xb2>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a2b      	ldr	r2, [pc, #172]	; (8009bc0 <TIM_Base_SetConfig+0x11c>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d01f      	beq.n	8009b56 <TIM_Base_SetConfig+0xb2>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a2a      	ldr	r2, [pc, #168]	; (8009bc4 <TIM_Base_SetConfig+0x120>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d01b      	beq.n	8009b56 <TIM_Base_SetConfig+0xb2>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a29      	ldr	r2, [pc, #164]	; (8009bc8 <TIM_Base_SetConfig+0x124>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d017      	beq.n	8009b56 <TIM_Base_SetConfig+0xb2>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a28      	ldr	r2, [pc, #160]	; (8009bcc <TIM_Base_SetConfig+0x128>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d013      	beq.n	8009b56 <TIM_Base_SetConfig+0xb2>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a27      	ldr	r2, [pc, #156]	; (8009bd0 <TIM_Base_SetConfig+0x12c>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d00f      	beq.n	8009b56 <TIM_Base_SetConfig+0xb2>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a26      	ldr	r2, [pc, #152]	; (8009bd4 <TIM_Base_SetConfig+0x130>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d00b      	beq.n	8009b56 <TIM_Base_SetConfig+0xb2>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a25      	ldr	r2, [pc, #148]	; (8009bd8 <TIM_Base_SetConfig+0x134>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d007      	beq.n	8009b56 <TIM_Base_SetConfig+0xb2>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a24      	ldr	r2, [pc, #144]	; (8009bdc <TIM_Base_SetConfig+0x138>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d003      	beq.n	8009b56 <TIM_Base_SetConfig+0xb2>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a23      	ldr	r2, [pc, #140]	; (8009be0 <TIM_Base_SetConfig+0x13c>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d108      	bne.n	8009b68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	689a      	ldr	r2, [r3, #8]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a0a      	ldr	r2, [pc, #40]	; (8009bb8 <TIM_Base_SetConfig+0x114>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d003      	beq.n	8009b9c <TIM_Base_SetConfig+0xf8>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a0c      	ldr	r2, [pc, #48]	; (8009bc8 <TIM_Base_SetConfig+0x124>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d103      	bne.n	8009ba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	691a      	ldr	r2, [r3, #16]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	615a      	str	r2, [r3, #20]
}
 8009baa:	bf00      	nop
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	40010000 	.word	0x40010000
 8009bbc:	40000400 	.word	0x40000400
 8009bc0:	40000800 	.word	0x40000800
 8009bc4:	40000c00 	.word	0x40000c00
 8009bc8:	40010400 	.word	0x40010400
 8009bcc:	40014000 	.word	0x40014000
 8009bd0:	40014400 	.word	0x40014400
 8009bd4:	40014800 	.word	0x40014800
 8009bd8:	40001800 	.word	0x40001800
 8009bdc:	40001c00 	.word	0x40001c00
 8009be0:	40002000 	.word	0x40002000

08009be4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b087      	sub	sp, #28
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	f023 0201 	bic.w	r2, r3, #1
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	011b      	lsls	r3, r3, #4
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f023 030a 	bic.w	r3, r3, #10
 8009c20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	621a      	str	r2, [r3, #32]
}
 8009c36:	bf00      	nop
 8009c38:	371c      	adds	r7, #28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b087      	sub	sp, #28
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	60f8      	str	r0, [r7, #12]
 8009c4a:	60b9      	str	r1, [r7, #8]
 8009c4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	f023 0210 	bic.w	r2, r3, #16
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	699b      	ldr	r3, [r3, #24]
 8009c5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6a1b      	ldr	r3, [r3, #32]
 8009c64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	031b      	lsls	r3, r3, #12
 8009c72:	697a      	ldr	r2, [r7, #20]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	011b      	lsls	r3, r3, #4
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	621a      	str	r2, [r3, #32]
}
 8009c96:	bf00      	nop
 8009c98:	371c      	adds	r7, #28
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr

08009ca2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b085      	sub	sp, #20
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	f043 0307 	orr.w	r3, r3, #7
 8009cc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	609a      	str	r2, [r3, #8]
}
 8009ccc:	bf00      	nop
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	021a      	lsls	r2, r3, #8
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	697a      	ldr	r2, [r7, #20]
 8009d0a:	609a      	str	r2, [r3, #8]
}
 8009d0c:	bf00      	nop
 8009d0e:	371c      	adds	r7, #28
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d101      	bne.n	8009d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d2c:	2302      	movs	r3, #2
 8009d2e:	e06d      	b.n	8009e0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2202      	movs	r2, #2
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a30      	ldr	r2, [pc, #192]	; (8009e18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d004      	beq.n	8009d64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a2f      	ldr	r2, [pc, #188]	; (8009e1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d108      	bne.n	8009d76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a20      	ldr	r2, [pc, #128]	; (8009e18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d022      	beq.n	8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da2:	d01d      	beq.n	8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a1d      	ldr	r2, [pc, #116]	; (8009e20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d018      	beq.n	8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a1c      	ldr	r2, [pc, #112]	; (8009e24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d013      	beq.n	8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a1a      	ldr	r2, [pc, #104]	; (8009e28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d00e      	beq.n	8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a15      	ldr	r2, [pc, #84]	; (8009e1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d009      	beq.n	8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a16      	ldr	r2, [pc, #88]	; (8009e2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d004      	beq.n	8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a15      	ldr	r2, [pc, #84]	; (8009e30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d10c      	bne.n	8009dfa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009de6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	68ba      	ldr	r2, [r7, #8]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	40010000 	.word	0x40010000
 8009e1c:	40010400 	.word	0x40010400
 8009e20:	40000400 	.word	0x40000400
 8009e24:	40000800 	.word	0x40000800
 8009e28:	40000c00 	.word	0x40000c00
 8009e2c:	40014000 	.word	0x40014000
 8009e30:	40001800 	.word	0x40001800

08009e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e3c:	bf00      	nop
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e64:	bf00      	nop
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d101      	bne.n	8009e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e040      	b.n	8009f04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d106      	bne.n	8009e98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f7f7 fc3a 	bl	800170c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2224      	movs	r2, #36	; 0x24
 8009e9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f022 0201 	bic.w	r2, r2, #1
 8009eac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fb9a 	bl	800a5e8 <UART_SetConfig>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d101      	bne.n	8009ebe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e022      	b.n	8009f04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d002      	beq.n	8009ecc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fdf0 	bl	800aaac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	689a      	ldr	r2, [r3, #8]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f042 0201 	orr.w	r2, r2, #1
 8009efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 fe77 	bl	800abf0 <UART_CheckIdleState>
 8009f02:	4603      	mov	r3, r0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b08b      	sub	sp, #44	; 0x2c
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	4613      	mov	r3, r2
 8009f18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f1e:	2b20      	cmp	r3, #32
 8009f20:	d156      	bne.n	8009fd0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <HAL_UART_Transmit_IT+0x22>
 8009f28:	88fb      	ldrh	r3, [r7, #6]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e04f      	b.n	8009fd2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d101      	bne.n	8009f40 <HAL_UART_Transmit_IT+0x34>
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	e048      	b.n	8009fd2 <HAL_UART_Transmit_IT+0xc6>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	88fa      	ldrh	r2, [r7, #6]
 8009f52:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	88fa      	ldrh	r2, [r7, #6]
 8009f5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2221      	movs	r2, #33	; 0x21
 8009f70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f7a:	d107      	bne.n	8009f8c <HAL_UART_Transmit_IT+0x80>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d103      	bne.n	8009f8c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4a16      	ldr	r2, [pc, #88]	; (8009fe0 <HAL_UART_Transmit_IT+0xd4>)
 8009f88:	669a      	str	r2, [r3, #104]	; 0x68
 8009f8a:	e002      	b.n	8009f92 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4a15      	ldr	r2, [pc, #84]	; (8009fe4 <HAL_UART_Transmit_IT+0xd8>)
 8009f90:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	e853 3f00 	ldrex	r3, [r3]
 8009fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fae:	627b      	str	r3, [r7, #36]	; 0x24
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb8:	623b      	str	r3, [r7, #32]
 8009fba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbc:	69f9      	ldr	r1, [r7, #28]
 8009fbe:	6a3a      	ldr	r2, [r7, #32]
 8009fc0:	e841 2300 	strex	r3, r2, [r1]
 8009fc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d1e6      	bne.n	8009f9a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	e000      	b.n	8009fd2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8009fd0:	2302      	movs	r3, #2
  }
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	372c      	adds	r7, #44	; 0x2c
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	0800afb3 	.word	0x0800afb3
 8009fe4:	0800aefd 	.word	0x0800aefd

08009fe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b0ba      	sub	sp, #232	; 0xe8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	69db      	ldr	r3, [r3, #28]
 8009ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a00e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a012:	f640 030f 	movw	r3, #2063	; 0x80f
 800a016:	4013      	ands	r3, r2
 800a018:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a01c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a020:	2b00      	cmp	r3, #0
 800a022:	d115      	bne.n	800a050 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a028:	f003 0320 	and.w	r3, r3, #32
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00f      	beq.n	800a050 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a034:	f003 0320 	and.w	r3, r3, #32
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d009      	beq.n	800a050 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 82a4 	beq.w	800a58e <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	4798      	blx	r3
      }
      return;
 800a04e:	e29e      	b.n	800a58e <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a054:	2b00      	cmp	r3, #0
 800a056:	f000 8117 	beq.w	800a288 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a05a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a05e:	f003 0301 	and.w	r3, r3, #1
 800a062:	2b00      	cmp	r3, #0
 800a064:	d106      	bne.n	800a074 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a066:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a06a:	4b85      	ldr	r3, [pc, #532]	; (800a280 <HAL_UART_IRQHandler+0x298>)
 800a06c:	4013      	ands	r3, r2
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 810a 	beq.w	800a288 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d011      	beq.n	800a0a4 <HAL_UART_IRQHandler+0xbc>
 800a080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00b      	beq.n	800a0a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2201      	movs	r2, #1
 800a092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a09a:	f043 0201 	orr.w	r2, r3, #1
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0a8:	f003 0302 	and.w	r3, r3, #2
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d011      	beq.n	800a0d4 <HAL_UART_IRQHandler+0xec>
 800a0b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0b4:	f003 0301 	and.w	r3, r3, #1
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00b      	beq.n	800a0d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0ca:	f043 0204 	orr.w	r2, r3, #4
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0d8:	f003 0304 	and.w	r3, r3, #4
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d011      	beq.n	800a104 <HAL_UART_IRQHandler+0x11c>
 800a0e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0e4:	f003 0301 	and.w	r3, r3, #1
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00b      	beq.n	800a104 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2204      	movs	r2, #4
 800a0f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0fa:	f043 0202 	orr.w	r2, r3, #2
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a108:	f003 0308 	and.w	r3, r3, #8
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d017      	beq.n	800a140 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a114:	f003 0320 	and.w	r3, r3, #32
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d105      	bne.n	800a128 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a11c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a120:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00b      	beq.n	800a140 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2208      	movs	r2, #8
 800a12e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a136:	f043 0208 	orr.w	r2, r3, #8
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d012      	beq.n	800a172 <HAL_UART_IRQHandler+0x18a>
 800a14c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a150:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00c      	beq.n	800a172 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a160:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a168:	f043 0220 	orr.w	r2, r3, #32
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f000 820a 	beq.w	800a592 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a182:	f003 0320 	and.w	r3, r3, #32
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00d      	beq.n	800a1a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a18a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a18e:	f003 0320 	and.w	r3, r3, #32
 800a192:	2b00      	cmp	r3, #0
 800a194:	d007      	beq.n	800a1a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d003      	beq.n	800a1a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ba:	2b40      	cmp	r3, #64	; 0x40
 800a1bc:	d005      	beq.n	800a1ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a1be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d04f      	beq.n	800a26a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fe1d 	bl	800ae0a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1da:	2b40      	cmp	r3, #64	; 0x40
 800a1dc:	d141      	bne.n	800a262 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	3308      	adds	r3, #8
 800a1e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a1ec:	e853 3f00 	ldrex	r3, [r3]
 800a1f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a1f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a1f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3308      	adds	r3, #8
 800a206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a20a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a20e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a21a:	e841 2300 	strex	r3, r2, [r1]
 800a21e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1d9      	bne.n	800a1de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d013      	beq.n	800a25a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a236:	4a13      	ldr	r2, [pc, #76]	; (800a284 <HAL_UART_IRQHandler+0x29c>)
 800a238:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fc f920 	bl	8006484 <HAL_DMA_Abort_IT>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d017      	beq.n	800a27a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a254:	4610      	mov	r0, r2
 800a256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a258:	e00f      	b.n	800a27a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f9a4 	bl	800a5a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a260:	e00b      	b.n	800a27a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f9a0 	bl	800a5a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a268:	e007      	b.n	800a27a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f99c 	bl	800a5a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a278:	e18b      	b.n	800a592 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a27a:	bf00      	nop
    return;
 800a27c:	e189      	b.n	800a592 <HAL_UART_IRQHandler+0x5aa>
 800a27e:	bf00      	nop
 800a280:	04000120 	.word	0x04000120
 800a284:	0800aed1 	.word	0x0800aed1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	f040 8144 	bne.w	800a51a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a296:	f003 0310 	and.w	r3, r3, #16
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f000 813d 	beq.w	800a51a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2a4:	f003 0310 	and.w	r3, r3, #16
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f000 8136 	beq.w	800a51a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2210      	movs	r2, #16
 800a2b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c0:	2b40      	cmp	r3, #64	; 0x40
 800a2c2:	f040 80b2 	bne.w	800a42a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a2d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	f000 815d 	beq.w	800a596 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a2e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	f080 8155 	bcs.w	800a596 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a2f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2fa:	69db      	ldr	r3, [r3, #28]
 800a2fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a300:	f000 8085 	beq.w	800a40e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a310:	e853 3f00 	ldrex	r3, [r3]
 800a314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a31c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	461a      	mov	r2, r3
 800a32a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a32e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a332:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a33a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a33e:	e841 2300 	strex	r3, r2, [r1]
 800a342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1da      	bne.n	800a304 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	3308      	adds	r3, #8
 800a354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a358:	e853 3f00 	ldrex	r3, [r3]
 800a35c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a35e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a360:	f023 0301 	bic.w	r3, r3, #1
 800a364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	3308      	adds	r3, #8
 800a36e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a376:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a37a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a37e:	e841 2300 	strex	r3, r2, [r1]
 800a382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1e1      	bne.n	800a34e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3308      	adds	r3, #8
 800a390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a394:	e853 3f00 	ldrex	r3, [r3]
 800a398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a39a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a39c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3308      	adds	r3, #8
 800a3aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a3ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a3b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a3bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e3      	bne.n	800a38a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2220      	movs	r2, #32
 800a3c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3d6:	e853 3f00 	ldrex	r3, [r3]
 800a3da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a3dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3de:	f023 0310 	bic.w	r3, r3, #16
 800a3e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a3f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a3f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a3f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a3f8:	e841 2300 	strex	r3, r2, [r1]
 800a3fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1e4      	bne.n	800a3ce <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fb ffcb 	bl	80063a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	b29b      	uxth	r3, r3
 800a420:	4619      	mov	r1, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f8ca 	bl	800a5bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a428:	e0b5      	b.n	800a596 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a436:	b29b      	uxth	r3, r3
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a444:	b29b      	uxth	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 80a7 	beq.w	800a59a <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800a44c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a450:	2b00      	cmp	r3, #0
 800a452:	f000 80a2 	beq.w	800a59a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45e:	e853 3f00 	ldrex	r3, [r3]
 800a462:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a466:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a46a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	461a      	mov	r2, r3
 800a474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a478:	647b      	str	r3, [r7, #68]	; 0x44
 800a47a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a47e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a480:	e841 2300 	strex	r3, r2, [r1]
 800a484:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1e4      	bne.n	800a456 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3308      	adds	r3, #8
 800a492:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	623b      	str	r3, [r7, #32]
   return(result);
 800a49c:	6a3b      	ldr	r3, [r7, #32]
 800a49e:	f023 0301 	bic.w	r3, r3, #1
 800a4a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a4b0:	633a      	str	r2, [r7, #48]	; 0x30
 800a4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4b8:	e841 2300 	strex	r3, r2, [r1]
 800a4bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1e3      	bne.n	800a48c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2220      	movs	r2, #32
 800a4c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	e853 3f00 	ldrex	r3, [r3]
 800a4e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 0310 	bic.w	r3, r3, #16
 800a4ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4f8:	61fb      	str	r3, [r7, #28]
 800a4fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fc:	69b9      	ldr	r1, [r7, #24]
 800a4fe:	69fa      	ldr	r2, [r7, #28]
 800a500:	e841 2300 	strex	r3, r2, [r1]
 800a504:	617b      	str	r3, [r7, #20]
   return(result);
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d1e4      	bne.n	800a4d6 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a50c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a510:	4619      	mov	r1, r3
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f852 	bl	800a5bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a518:	e03f      	b.n	800a59a <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a51e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00e      	beq.n	800a544 <HAL_UART_IRQHandler+0x55c>
 800a526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a52a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d008      	beq.n	800a544 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a53a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f849 	bl	800a5d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a542:	e02d      	b.n	800a5a0 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00e      	beq.n	800a56e <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d008      	beq.n	800a56e <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a560:	2b00      	cmp	r3, #0
 800a562:	d01c      	beq.n	800a59e <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	4798      	blx	r3
    }
    return;
 800a56c:	e017      	b.n	800a59e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a56e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a576:	2b00      	cmp	r3, #0
 800a578:	d012      	beq.n	800a5a0 <HAL_UART_IRQHandler+0x5b8>
 800a57a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a57e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00c      	beq.n	800a5a0 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fd73 	bl	800b072 <UART_EndTransmit_IT>
    return;
 800a58c:	e008      	b.n	800a5a0 <HAL_UART_IRQHandler+0x5b8>
      return;
 800a58e:	bf00      	nop
 800a590:	e006      	b.n	800a5a0 <HAL_UART_IRQHandler+0x5b8>
    return;
 800a592:	bf00      	nop
 800a594:	e004      	b.n	800a5a0 <HAL_UART_IRQHandler+0x5b8>
      return;
 800a596:	bf00      	nop
 800a598:	e002      	b.n	800a5a0 <HAL_UART_IRQHandler+0x5b8>
      return;
 800a59a:	bf00      	nop
 800a59c:	e000      	b.n	800a5a0 <HAL_UART_IRQHandler+0x5b8>
    return;
 800a59e:	bf00      	nop
  }

}
 800a5a0:	37e8      	adds	r7, #232	; 0xe8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop

0800a5a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5dc:	bf00      	nop
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b088      	sub	sp, #32
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	689a      	ldr	r2, [r3, #8]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	691b      	ldr	r3, [r3, #16]
 800a5fc:	431a      	orrs	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	431a      	orrs	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	69db      	ldr	r3, [r3, #28]
 800a608:	4313      	orrs	r3, r2
 800a60a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	4ba7      	ldr	r3, [pc, #668]	; (800a8b0 <UART_SetConfig+0x2c8>)
 800a614:	4013      	ands	r3, r2
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	6812      	ldr	r2, [r2, #0]
 800a61a:	6979      	ldr	r1, [r7, #20]
 800a61c:	430b      	orrs	r3, r1
 800a61e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	68da      	ldr	r2, [r3, #12]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	430a      	orrs	r2, r1
 800a634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a1b      	ldr	r3, [r3, #32]
 800a640:	697a      	ldr	r2, [r7, #20]
 800a642:	4313      	orrs	r3, r2
 800a644:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	430a      	orrs	r2, r1
 800a658:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a95      	ldr	r2, [pc, #596]	; (800a8b4 <UART_SetConfig+0x2cc>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d120      	bne.n	800a6a6 <UART_SetConfig+0xbe>
 800a664:	4b94      	ldr	r3, [pc, #592]	; (800a8b8 <UART_SetConfig+0x2d0>)
 800a666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a66a:	f003 0303 	and.w	r3, r3, #3
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d816      	bhi.n	800a6a0 <UART_SetConfig+0xb8>
 800a672:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <UART_SetConfig+0x90>)
 800a674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a678:	0800a689 	.word	0x0800a689
 800a67c:	0800a695 	.word	0x0800a695
 800a680:	0800a68f 	.word	0x0800a68f
 800a684:	0800a69b 	.word	0x0800a69b
 800a688:	2301      	movs	r3, #1
 800a68a:	77fb      	strb	r3, [r7, #31]
 800a68c:	e14f      	b.n	800a92e <UART_SetConfig+0x346>
 800a68e:	2302      	movs	r3, #2
 800a690:	77fb      	strb	r3, [r7, #31]
 800a692:	e14c      	b.n	800a92e <UART_SetConfig+0x346>
 800a694:	2304      	movs	r3, #4
 800a696:	77fb      	strb	r3, [r7, #31]
 800a698:	e149      	b.n	800a92e <UART_SetConfig+0x346>
 800a69a:	2308      	movs	r3, #8
 800a69c:	77fb      	strb	r3, [r7, #31]
 800a69e:	e146      	b.n	800a92e <UART_SetConfig+0x346>
 800a6a0:	2310      	movs	r3, #16
 800a6a2:	77fb      	strb	r3, [r7, #31]
 800a6a4:	e143      	b.n	800a92e <UART_SetConfig+0x346>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a84      	ldr	r2, [pc, #528]	; (800a8bc <UART_SetConfig+0x2d4>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d132      	bne.n	800a716 <UART_SetConfig+0x12e>
 800a6b0:	4b81      	ldr	r3, [pc, #516]	; (800a8b8 <UART_SetConfig+0x2d0>)
 800a6b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6b6:	f003 030c 	and.w	r3, r3, #12
 800a6ba:	2b0c      	cmp	r3, #12
 800a6bc:	d828      	bhi.n	800a710 <UART_SetConfig+0x128>
 800a6be:	a201      	add	r2, pc, #4	; (adr r2, 800a6c4 <UART_SetConfig+0xdc>)
 800a6c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c4:	0800a6f9 	.word	0x0800a6f9
 800a6c8:	0800a711 	.word	0x0800a711
 800a6cc:	0800a711 	.word	0x0800a711
 800a6d0:	0800a711 	.word	0x0800a711
 800a6d4:	0800a705 	.word	0x0800a705
 800a6d8:	0800a711 	.word	0x0800a711
 800a6dc:	0800a711 	.word	0x0800a711
 800a6e0:	0800a711 	.word	0x0800a711
 800a6e4:	0800a6ff 	.word	0x0800a6ff
 800a6e8:	0800a711 	.word	0x0800a711
 800a6ec:	0800a711 	.word	0x0800a711
 800a6f0:	0800a711 	.word	0x0800a711
 800a6f4:	0800a70b 	.word	0x0800a70b
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	77fb      	strb	r3, [r7, #31]
 800a6fc:	e117      	b.n	800a92e <UART_SetConfig+0x346>
 800a6fe:	2302      	movs	r3, #2
 800a700:	77fb      	strb	r3, [r7, #31]
 800a702:	e114      	b.n	800a92e <UART_SetConfig+0x346>
 800a704:	2304      	movs	r3, #4
 800a706:	77fb      	strb	r3, [r7, #31]
 800a708:	e111      	b.n	800a92e <UART_SetConfig+0x346>
 800a70a:	2308      	movs	r3, #8
 800a70c:	77fb      	strb	r3, [r7, #31]
 800a70e:	e10e      	b.n	800a92e <UART_SetConfig+0x346>
 800a710:	2310      	movs	r3, #16
 800a712:	77fb      	strb	r3, [r7, #31]
 800a714:	e10b      	b.n	800a92e <UART_SetConfig+0x346>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a69      	ldr	r2, [pc, #420]	; (800a8c0 <UART_SetConfig+0x2d8>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d120      	bne.n	800a762 <UART_SetConfig+0x17a>
 800a720:	4b65      	ldr	r3, [pc, #404]	; (800a8b8 <UART_SetConfig+0x2d0>)
 800a722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a726:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a72a:	2b30      	cmp	r3, #48	; 0x30
 800a72c:	d013      	beq.n	800a756 <UART_SetConfig+0x16e>
 800a72e:	2b30      	cmp	r3, #48	; 0x30
 800a730:	d814      	bhi.n	800a75c <UART_SetConfig+0x174>
 800a732:	2b20      	cmp	r3, #32
 800a734:	d009      	beq.n	800a74a <UART_SetConfig+0x162>
 800a736:	2b20      	cmp	r3, #32
 800a738:	d810      	bhi.n	800a75c <UART_SetConfig+0x174>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d002      	beq.n	800a744 <UART_SetConfig+0x15c>
 800a73e:	2b10      	cmp	r3, #16
 800a740:	d006      	beq.n	800a750 <UART_SetConfig+0x168>
 800a742:	e00b      	b.n	800a75c <UART_SetConfig+0x174>
 800a744:	2300      	movs	r3, #0
 800a746:	77fb      	strb	r3, [r7, #31]
 800a748:	e0f1      	b.n	800a92e <UART_SetConfig+0x346>
 800a74a:	2302      	movs	r3, #2
 800a74c:	77fb      	strb	r3, [r7, #31]
 800a74e:	e0ee      	b.n	800a92e <UART_SetConfig+0x346>
 800a750:	2304      	movs	r3, #4
 800a752:	77fb      	strb	r3, [r7, #31]
 800a754:	e0eb      	b.n	800a92e <UART_SetConfig+0x346>
 800a756:	2308      	movs	r3, #8
 800a758:	77fb      	strb	r3, [r7, #31]
 800a75a:	e0e8      	b.n	800a92e <UART_SetConfig+0x346>
 800a75c:	2310      	movs	r3, #16
 800a75e:	77fb      	strb	r3, [r7, #31]
 800a760:	e0e5      	b.n	800a92e <UART_SetConfig+0x346>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a57      	ldr	r2, [pc, #348]	; (800a8c4 <UART_SetConfig+0x2dc>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d120      	bne.n	800a7ae <UART_SetConfig+0x1c6>
 800a76c:	4b52      	ldr	r3, [pc, #328]	; (800a8b8 <UART_SetConfig+0x2d0>)
 800a76e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a772:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a776:	2bc0      	cmp	r3, #192	; 0xc0
 800a778:	d013      	beq.n	800a7a2 <UART_SetConfig+0x1ba>
 800a77a:	2bc0      	cmp	r3, #192	; 0xc0
 800a77c:	d814      	bhi.n	800a7a8 <UART_SetConfig+0x1c0>
 800a77e:	2b80      	cmp	r3, #128	; 0x80
 800a780:	d009      	beq.n	800a796 <UART_SetConfig+0x1ae>
 800a782:	2b80      	cmp	r3, #128	; 0x80
 800a784:	d810      	bhi.n	800a7a8 <UART_SetConfig+0x1c0>
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <UART_SetConfig+0x1a8>
 800a78a:	2b40      	cmp	r3, #64	; 0x40
 800a78c:	d006      	beq.n	800a79c <UART_SetConfig+0x1b4>
 800a78e:	e00b      	b.n	800a7a8 <UART_SetConfig+0x1c0>
 800a790:	2300      	movs	r3, #0
 800a792:	77fb      	strb	r3, [r7, #31]
 800a794:	e0cb      	b.n	800a92e <UART_SetConfig+0x346>
 800a796:	2302      	movs	r3, #2
 800a798:	77fb      	strb	r3, [r7, #31]
 800a79a:	e0c8      	b.n	800a92e <UART_SetConfig+0x346>
 800a79c:	2304      	movs	r3, #4
 800a79e:	77fb      	strb	r3, [r7, #31]
 800a7a0:	e0c5      	b.n	800a92e <UART_SetConfig+0x346>
 800a7a2:	2308      	movs	r3, #8
 800a7a4:	77fb      	strb	r3, [r7, #31]
 800a7a6:	e0c2      	b.n	800a92e <UART_SetConfig+0x346>
 800a7a8:	2310      	movs	r3, #16
 800a7aa:	77fb      	strb	r3, [r7, #31]
 800a7ac:	e0bf      	b.n	800a92e <UART_SetConfig+0x346>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a45      	ldr	r2, [pc, #276]	; (800a8c8 <UART_SetConfig+0x2e0>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d125      	bne.n	800a804 <UART_SetConfig+0x21c>
 800a7b8:	4b3f      	ldr	r3, [pc, #252]	; (800a8b8 <UART_SetConfig+0x2d0>)
 800a7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7c6:	d017      	beq.n	800a7f8 <UART_SetConfig+0x210>
 800a7c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7cc:	d817      	bhi.n	800a7fe <UART_SetConfig+0x216>
 800a7ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7d2:	d00b      	beq.n	800a7ec <UART_SetConfig+0x204>
 800a7d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7d8:	d811      	bhi.n	800a7fe <UART_SetConfig+0x216>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d003      	beq.n	800a7e6 <UART_SetConfig+0x1fe>
 800a7de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7e2:	d006      	beq.n	800a7f2 <UART_SetConfig+0x20a>
 800a7e4:	e00b      	b.n	800a7fe <UART_SetConfig+0x216>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	77fb      	strb	r3, [r7, #31]
 800a7ea:	e0a0      	b.n	800a92e <UART_SetConfig+0x346>
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	77fb      	strb	r3, [r7, #31]
 800a7f0:	e09d      	b.n	800a92e <UART_SetConfig+0x346>
 800a7f2:	2304      	movs	r3, #4
 800a7f4:	77fb      	strb	r3, [r7, #31]
 800a7f6:	e09a      	b.n	800a92e <UART_SetConfig+0x346>
 800a7f8:	2308      	movs	r3, #8
 800a7fa:	77fb      	strb	r3, [r7, #31]
 800a7fc:	e097      	b.n	800a92e <UART_SetConfig+0x346>
 800a7fe:	2310      	movs	r3, #16
 800a800:	77fb      	strb	r3, [r7, #31]
 800a802:	e094      	b.n	800a92e <UART_SetConfig+0x346>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a30      	ldr	r2, [pc, #192]	; (800a8cc <UART_SetConfig+0x2e4>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d125      	bne.n	800a85a <UART_SetConfig+0x272>
 800a80e:	4b2a      	ldr	r3, [pc, #168]	; (800a8b8 <UART_SetConfig+0x2d0>)
 800a810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a814:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a81c:	d017      	beq.n	800a84e <UART_SetConfig+0x266>
 800a81e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a822:	d817      	bhi.n	800a854 <UART_SetConfig+0x26c>
 800a824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a828:	d00b      	beq.n	800a842 <UART_SetConfig+0x25a>
 800a82a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a82e:	d811      	bhi.n	800a854 <UART_SetConfig+0x26c>
 800a830:	2b00      	cmp	r3, #0
 800a832:	d003      	beq.n	800a83c <UART_SetConfig+0x254>
 800a834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a838:	d006      	beq.n	800a848 <UART_SetConfig+0x260>
 800a83a:	e00b      	b.n	800a854 <UART_SetConfig+0x26c>
 800a83c:	2301      	movs	r3, #1
 800a83e:	77fb      	strb	r3, [r7, #31]
 800a840:	e075      	b.n	800a92e <UART_SetConfig+0x346>
 800a842:	2302      	movs	r3, #2
 800a844:	77fb      	strb	r3, [r7, #31]
 800a846:	e072      	b.n	800a92e <UART_SetConfig+0x346>
 800a848:	2304      	movs	r3, #4
 800a84a:	77fb      	strb	r3, [r7, #31]
 800a84c:	e06f      	b.n	800a92e <UART_SetConfig+0x346>
 800a84e:	2308      	movs	r3, #8
 800a850:	77fb      	strb	r3, [r7, #31]
 800a852:	e06c      	b.n	800a92e <UART_SetConfig+0x346>
 800a854:	2310      	movs	r3, #16
 800a856:	77fb      	strb	r3, [r7, #31]
 800a858:	e069      	b.n	800a92e <UART_SetConfig+0x346>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a1c      	ldr	r2, [pc, #112]	; (800a8d0 <UART_SetConfig+0x2e8>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d137      	bne.n	800a8d4 <UART_SetConfig+0x2ec>
 800a864:	4b14      	ldr	r3, [pc, #80]	; (800a8b8 <UART_SetConfig+0x2d0>)
 800a866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a86a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a86e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a872:	d017      	beq.n	800a8a4 <UART_SetConfig+0x2bc>
 800a874:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a878:	d817      	bhi.n	800a8aa <UART_SetConfig+0x2c2>
 800a87a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a87e:	d00b      	beq.n	800a898 <UART_SetConfig+0x2b0>
 800a880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a884:	d811      	bhi.n	800a8aa <UART_SetConfig+0x2c2>
 800a886:	2b00      	cmp	r3, #0
 800a888:	d003      	beq.n	800a892 <UART_SetConfig+0x2aa>
 800a88a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a88e:	d006      	beq.n	800a89e <UART_SetConfig+0x2b6>
 800a890:	e00b      	b.n	800a8aa <UART_SetConfig+0x2c2>
 800a892:	2300      	movs	r3, #0
 800a894:	77fb      	strb	r3, [r7, #31]
 800a896:	e04a      	b.n	800a92e <UART_SetConfig+0x346>
 800a898:	2302      	movs	r3, #2
 800a89a:	77fb      	strb	r3, [r7, #31]
 800a89c:	e047      	b.n	800a92e <UART_SetConfig+0x346>
 800a89e:	2304      	movs	r3, #4
 800a8a0:	77fb      	strb	r3, [r7, #31]
 800a8a2:	e044      	b.n	800a92e <UART_SetConfig+0x346>
 800a8a4:	2308      	movs	r3, #8
 800a8a6:	77fb      	strb	r3, [r7, #31]
 800a8a8:	e041      	b.n	800a92e <UART_SetConfig+0x346>
 800a8aa:	2310      	movs	r3, #16
 800a8ac:	77fb      	strb	r3, [r7, #31]
 800a8ae:	e03e      	b.n	800a92e <UART_SetConfig+0x346>
 800a8b0:	efff69f3 	.word	0xefff69f3
 800a8b4:	40011000 	.word	0x40011000
 800a8b8:	40023800 	.word	0x40023800
 800a8bc:	40004400 	.word	0x40004400
 800a8c0:	40004800 	.word	0x40004800
 800a8c4:	40004c00 	.word	0x40004c00
 800a8c8:	40005000 	.word	0x40005000
 800a8cc:	40011400 	.word	0x40011400
 800a8d0:	40007800 	.word	0x40007800
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a71      	ldr	r2, [pc, #452]	; (800aaa0 <UART_SetConfig+0x4b8>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d125      	bne.n	800a92a <UART_SetConfig+0x342>
 800a8de:	4b71      	ldr	r3, [pc, #452]	; (800aaa4 <UART_SetConfig+0x4bc>)
 800a8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a8e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a8ec:	d017      	beq.n	800a91e <UART_SetConfig+0x336>
 800a8ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a8f2:	d817      	bhi.n	800a924 <UART_SetConfig+0x33c>
 800a8f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8f8:	d00b      	beq.n	800a912 <UART_SetConfig+0x32a>
 800a8fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8fe:	d811      	bhi.n	800a924 <UART_SetConfig+0x33c>
 800a900:	2b00      	cmp	r3, #0
 800a902:	d003      	beq.n	800a90c <UART_SetConfig+0x324>
 800a904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a908:	d006      	beq.n	800a918 <UART_SetConfig+0x330>
 800a90a:	e00b      	b.n	800a924 <UART_SetConfig+0x33c>
 800a90c:	2300      	movs	r3, #0
 800a90e:	77fb      	strb	r3, [r7, #31]
 800a910:	e00d      	b.n	800a92e <UART_SetConfig+0x346>
 800a912:	2302      	movs	r3, #2
 800a914:	77fb      	strb	r3, [r7, #31]
 800a916:	e00a      	b.n	800a92e <UART_SetConfig+0x346>
 800a918:	2304      	movs	r3, #4
 800a91a:	77fb      	strb	r3, [r7, #31]
 800a91c:	e007      	b.n	800a92e <UART_SetConfig+0x346>
 800a91e:	2308      	movs	r3, #8
 800a920:	77fb      	strb	r3, [r7, #31]
 800a922:	e004      	b.n	800a92e <UART_SetConfig+0x346>
 800a924:	2310      	movs	r3, #16
 800a926:	77fb      	strb	r3, [r7, #31]
 800a928:	e001      	b.n	800a92e <UART_SetConfig+0x346>
 800a92a:	2310      	movs	r3, #16
 800a92c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	69db      	ldr	r3, [r3, #28]
 800a932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a936:	d15a      	bne.n	800a9ee <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800a938:	7ffb      	ldrb	r3, [r7, #31]
 800a93a:	2b08      	cmp	r3, #8
 800a93c:	d827      	bhi.n	800a98e <UART_SetConfig+0x3a6>
 800a93e:	a201      	add	r2, pc, #4	; (adr r2, 800a944 <UART_SetConfig+0x35c>)
 800a940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a944:	0800a969 	.word	0x0800a969
 800a948:	0800a971 	.word	0x0800a971
 800a94c:	0800a979 	.word	0x0800a979
 800a950:	0800a98f 	.word	0x0800a98f
 800a954:	0800a97f 	.word	0x0800a97f
 800a958:	0800a98f 	.word	0x0800a98f
 800a95c:	0800a98f 	.word	0x0800a98f
 800a960:	0800a98f 	.word	0x0800a98f
 800a964:	0800a987 	.word	0x0800a987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a968:	f7fe f9da 	bl	8008d20 <HAL_RCC_GetPCLK1Freq>
 800a96c:	61b8      	str	r0, [r7, #24]
        break;
 800a96e:	e013      	b.n	800a998 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a970:	f7fe f9ea 	bl	8008d48 <HAL_RCC_GetPCLK2Freq>
 800a974:	61b8      	str	r0, [r7, #24]
        break;
 800a976:	e00f      	b.n	800a998 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a978:	4b4b      	ldr	r3, [pc, #300]	; (800aaa8 <UART_SetConfig+0x4c0>)
 800a97a:	61bb      	str	r3, [r7, #24]
        break;
 800a97c:	e00c      	b.n	800a998 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a97e:	f7fe f8e1 	bl	8008b44 <HAL_RCC_GetSysClockFreq>
 800a982:	61b8      	str	r0, [r7, #24]
        break;
 800a984:	e008      	b.n	800a998 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a98a:	61bb      	str	r3, [r7, #24]
        break;
 800a98c:	e004      	b.n	800a998 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a98e:	2300      	movs	r3, #0
 800a990:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	77bb      	strb	r3, [r7, #30]
        break;
 800a996:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d074      	beq.n	800aa88 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	005a      	lsls	r2, r3, #1
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	085b      	lsrs	r3, r3, #1
 800a9a8:	441a      	add	r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	2b0f      	cmp	r3, #15
 800a9b8:	d916      	bls.n	800a9e8 <UART_SetConfig+0x400>
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9c0:	d212      	bcs.n	800a9e8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	f023 030f 	bic.w	r3, r3, #15
 800a9ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	085b      	lsrs	r3, r3, #1
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	f003 0307 	and.w	r3, r3, #7
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	89fb      	ldrh	r3, [r7, #14]
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	89fa      	ldrh	r2, [r7, #14]
 800a9e4:	60da      	str	r2, [r3, #12]
 800a9e6:	e04f      	b.n	800aa88 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	77bb      	strb	r3, [r7, #30]
 800a9ec:	e04c      	b.n	800aa88 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a9ee:	7ffb      	ldrb	r3, [r7, #31]
 800a9f0:	2b08      	cmp	r3, #8
 800a9f2:	d828      	bhi.n	800aa46 <UART_SetConfig+0x45e>
 800a9f4:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <UART_SetConfig+0x414>)
 800a9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fa:	bf00      	nop
 800a9fc:	0800aa21 	.word	0x0800aa21
 800aa00:	0800aa29 	.word	0x0800aa29
 800aa04:	0800aa31 	.word	0x0800aa31
 800aa08:	0800aa47 	.word	0x0800aa47
 800aa0c:	0800aa37 	.word	0x0800aa37
 800aa10:	0800aa47 	.word	0x0800aa47
 800aa14:	0800aa47 	.word	0x0800aa47
 800aa18:	0800aa47 	.word	0x0800aa47
 800aa1c:	0800aa3f 	.word	0x0800aa3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa20:	f7fe f97e 	bl	8008d20 <HAL_RCC_GetPCLK1Freq>
 800aa24:	61b8      	str	r0, [r7, #24]
        break;
 800aa26:	e013      	b.n	800aa50 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa28:	f7fe f98e 	bl	8008d48 <HAL_RCC_GetPCLK2Freq>
 800aa2c:	61b8      	str	r0, [r7, #24]
        break;
 800aa2e:	e00f      	b.n	800aa50 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa30:	4b1d      	ldr	r3, [pc, #116]	; (800aaa8 <UART_SetConfig+0x4c0>)
 800aa32:	61bb      	str	r3, [r7, #24]
        break;
 800aa34:	e00c      	b.n	800aa50 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa36:	f7fe f885 	bl	8008b44 <HAL_RCC_GetSysClockFreq>
 800aa3a:	61b8      	str	r0, [r7, #24]
        break;
 800aa3c:	e008      	b.n	800aa50 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa42:	61bb      	str	r3, [r7, #24]
        break;
 800aa44:	e004      	b.n	800aa50 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800aa46:	2300      	movs	r3, #0
 800aa48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	77bb      	strb	r3, [r7, #30]
        break;
 800aa4e:	bf00      	nop
    }

    if (pclk != 0U)
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d018      	beq.n	800aa88 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	085a      	lsrs	r2, r3, #1
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	441a      	add	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	2b0f      	cmp	r3, #15
 800aa6e:	d909      	bls.n	800aa84 <UART_SetConfig+0x49c>
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa76:	d205      	bcs.n	800aa84 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	60da      	str	r2, [r3, #12]
 800aa82:	e001      	b.n	800aa88 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800aa94:	7fbb      	ldrb	r3, [r7, #30]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3720      	adds	r7, #32
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	40007c00 	.word	0x40007c00
 800aaa4:	40023800 	.word	0x40023800
 800aaa8:	00f42400 	.word	0x00f42400

0800aaac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	f003 0301 	and.w	r3, r3, #1
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00a      	beq.n	800aad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	430a      	orrs	r2, r1
 800aad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aada:	f003 0302 	and.w	r3, r3, #2
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d00a      	beq.n	800aaf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	430a      	orrs	r2, r1
 800aaf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafc:	f003 0304 	and.w	r3, r3, #4
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00a      	beq.n	800ab1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	430a      	orrs	r2, r1
 800ab18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	f003 0308 	and.w	r3, r3, #8
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00a      	beq.n	800ab3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	430a      	orrs	r2, r1
 800ab3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab40:	f003 0310 	and.w	r3, r3, #16
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00a      	beq.n	800ab5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	430a      	orrs	r2, r1
 800ab5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab62:	f003 0320 	and.w	r3, r3, #32
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d01a      	beq.n	800abc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	430a      	orrs	r2, r1
 800aba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abaa:	d10a      	bne.n	800abc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	430a      	orrs	r2, r1
 800abc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00a      	beq.n	800abe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	430a      	orrs	r2, r1
 800abe2:	605a      	str	r2, [r3, #4]
  }
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af02      	add	r7, sp, #8
 800abf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac00:	f7fb f806 	bl	8005c10 <HAL_GetTick>
 800ac04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f003 0308 	and.w	r3, r3, #8
 800ac10:	2b08      	cmp	r3, #8
 800ac12:	d10e      	bne.n	800ac32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f82d 	bl	800ac82 <UART_WaitOnFlagUntilTimeout>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d001      	beq.n	800ac32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac2e:	2303      	movs	r3, #3
 800ac30:	e023      	b.n	800ac7a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 0304 	and.w	r3, r3, #4
 800ac3c:	2b04      	cmp	r3, #4
 800ac3e:	d10e      	bne.n	800ac5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f817 	bl	800ac82 <UART_WaitOnFlagUntilTimeout>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d001      	beq.n	800ac5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	e00d      	b.n	800ac7a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2220      	movs	r2, #32
 800ac62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2220      	movs	r2, #32
 800ac68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b09c      	sub	sp, #112	; 0x70
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	60f8      	str	r0, [r7, #12]
 800ac8a:	60b9      	str	r1, [r7, #8]
 800ac8c:	603b      	str	r3, [r7, #0]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac92:	e0a5      	b.n	800ade0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9a:	f000 80a1 	beq.w	800ade0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac9e:	f7fa ffb7 	bl	8005c10 <HAL_GetTick>
 800aca2:	4602      	mov	r2, r0
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800acaa:	429a      	cmp	r2, r3
 800acac:	d302      	bcc.n	800acb4 <UART_WaitOnFlagUntilTimeout+0x32>
 800acae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d13e      	bne.n	800ad32 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acbc:	e853 3f00 	ldrex	r3, [r3]
 800acc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800acc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800acc8:	667b      	str	r3, [r7, #100]	; 0x64
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acd4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800acd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800acda:	e841 2300 	strex	r3, r2, [r1]
 800acde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ace0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1e6      	bne.n	800acb4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3308      	adds	r3, #8
 800acec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf0:	e853 3f00 	ldrex	r3, [r3]
 800acf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800acf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf8:	f023 0301 	bic.w	r3, r3, #1
 800acfc:	663b      	str	r3, [r7, #96]	; 0x60
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	3308      	adds	r3, #8
 800ad04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad06:	64ba      	str	r2, [r7, #72]	; 0x48
 800ad08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad0e:	e841 2300 	strex	r3, r2, [r1]
 800ad12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ad14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1e5      	bne.n	800ace6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2220      	movs	r2, #32
 800ad1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2220      	movs	r2, #32
 800ad24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	e067      	b.n	800ae02 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0304 	and.w	r3, r3, #4
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d04f      	beq.n	800ade0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	69db      	ldr	r3, [r3, #28]
 800ad46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad4e:	d147      	bne.n	800ade0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad78:	637b      	str	r3, [r7, #52]	; 0x34
 800ad7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad80:	e841 2300 	strex	r3, r2, [r1]
 800ad84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e6      	bne.n	800ad5a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	3308      	adds	r3, #8
 800ad92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	e853 3f00 	ldrex	r3, [r3]
 800ad9a:	613b      	str	r3, [r7, #16]
   return(result);
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	f023 0301 	bic.w	r3, r3, #1
 800ada2:	66bb      	str	r3, [r7, #104]	; 0x68
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	3308      	adds	r3, #8
 800adaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800adac:	623a      	str	r2, [r7, #32]
 800adae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb0:	69f9      	ldr	r1, [r7, #28]
 800adb2:	6a3a      	ldr	r2, [r7, #32]
 800adb4:	e841 2300 	strex	r3, r2, [r1]
 800adb8:	61bb      	str	r3, [r7, #24]
   return(result);
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1e5      	bne.n	800ad8c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2220      	movs	r2, #32
 800adc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2220      	movs	r2, #32
 800adca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2220      	movs	r2, #32
 800add0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800addc:	2303      	movs	r3, #3
 800adde:	e010      	b.n	800ae02 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	69da      	ldr	r2, [r3, #28]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	4013      	ands	r3, r2
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	429a      	cmp	r2, r3
 800adee:	bf0c      	ite	eq
 800adf0:	2301      	moveq	r3, #1
 800adf2:	2300      	movne	r3, #0
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	461a      	mov	r2, r3
 800adf8:	79fb      	ldrb	r3, [r7, #7]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	f43f af4a 	beq.w	800ac94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3770      	adds	r7, #112	; 0x70
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b095      	sub	sp, #84	; 0x54
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1a:	e853 3f00 	ldrex	r3, [r3]
 800ae1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae30:	643b      	str	r3, [r7, #64]	; 0x40
 800ae32:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae38:	e841 2300 	strex	r3, r2, [r1]
 800ae3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1e6      	bne.n	800ae12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3308      	adds	r3, #8
 800ae4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	e853 3f00 	ldrex	r3, [r3]
 800ae52:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	f023 0301 	bic.w	r3, r3, #1
 800ae5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3308      	adds	r3, #8
 800ae62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae64:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae6c:	e841 2300 	strex	r3, r2, [r1]
 800ae70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d1e5      	bne.n	800ae44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d118      	bne.n	800aeb2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	e853 3f00 	ldrex	r3, [r3]
 800ae8c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	f023 0310 	bic.w	r3, r3, #16
 800ae94:	647b      	str	r3, [r7, #68]	; 0x44
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae9e:	61bb      	str	r3, [r7, #24]
 800aea0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea2:	6979      	ldr	r1, [r7, #20]
 800aea4:	69ba      	ldr	r2, [r7, #24]
 800aea6:	e841 2300 	strex	r3, r2, [r1]
 800aeaa:	613b      	str	r3, [r7, #16]
   return(result);
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1e6      	bne.n	800ae80 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2200      	movs	r2, #0
 800aec2:	665a      	str	r2, [r3, #100]	; 0x64
}
 800aec4:	bf00      	nop
 800aec6:	3754      	adds	r7, #84	; 0x54
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aedc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f7ff fb5a 	bl	800a5a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aef4:	bf00      	nop
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b08f      	sub	sp, #60	; 0x3c
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af08:	2b21      	cmp	r3, #33	; 0x21
 800af0a:	d14c      	bne.n	800afa6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800af12:	b29b      	uxth	r3, r3
 800af14:	2b00      	cmp	r3, #0
 800af16:	d132      	bne.n	800af7e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1e:	6a3b      	ldr	r3, [r7, #32]
 800af20:	e853 3f00 	ldrex	r3, [r3]
 800af24:	61fb      	str	r3, [r7, #28]
   return(result);
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af2c:	637b      	str	r3, [r7, #52]	; 0x34
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	461a      	mov	r2, r3
 800af34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af38:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af3e:	e841 2300 	strex	r3, r2, [r1]
 800af42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1e6      	bne.n	800af18 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	e853 3f00 	ldrex	r3, [r3]
 800af56:	60bb      	str	r3, [r7, #8]
   return(result);
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af5e:	633b      	str	r3, [r7, #48]	; 0x30
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	461a      	mov	r2, r3
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	61bb      	str	r3, [r7, #24]
 800af6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6c:	6979      	ldr	r1, [r7, #20]
 800af6e:	69ba      	ldr	r2, [r7, #24]
 800af70:	e841 2300 	strex	r3, r2, [r1]
 800af74:	613b      	str	r3, [r7, #16]
   return(result);
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1e6      	bne.n	800af4a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800af7c:	e013      	b.n	800afa6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af82:	781a      	ldrb	r2, [r3, #0]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	3b01      	subs	r3, #1
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800afa6:	bf00      	nop
 800afa8:	373c      	adds	r7, #60	; 0x3c
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800afb2:	b480      	push	{r7}
 800afb4:	b091      	sub	sp, #68	; 0x44
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afbe:	2b21      	cmp	r3, #33	; 0x21
 800afc0:	d151      	bne.n	800b066 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800afc8:	b29b      	uxth	r3, r3
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d132      	bne.n	800b034 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	e853 3f00 	ldrex	r3, [r3]
 800afda:	623b      	str	r3, [r7, #32]
   return(result);
 800afdc:	6a3b      	ldr	r3, [r7, #32]
 800afde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afe2:	63bb      	str	r3, [r7, #56]	; 0x38
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	461a      	mov	r2, r3
 800afea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afec:	633b      	str	r3, [r7, #48]	; 0x30
 800afee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aff4:	e841 2300 	strex	r3, r2, [r1]
 800aff8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800affa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1e6      	bne.n	800afce <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	e853 3f00 	ldrex	r3, [r3]
 800b00c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b014:	637b      	str	r3, [r7, #52]	; 0x34
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	461a      	mov	r2, r3
 800b01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b01e:	61fb      	str	r3, [r7, #28]
 800b020:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b022:	69b9      	ldr	r1, [r7, #24]
 800b024:	69fa      	ldr	r2, [r7, #28]
 800b026:	e841 2300 	strex	r3, r2, [r1]
 800b02a:	617b      	str	r3, [r7, #20]
   return(result);
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1e6      	bne.n	800b000 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b032:	e018      	b.n	800b066 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b038:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b048:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b04e:	1c9a      	adds	r2, r3, #2
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	3b01      	subs	r3, #1
 800b05e:	b29a      	uxth	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b066:	bf00      	nop
 800b068:	3744      	adds	r7, #68	; 0x44
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b088      	sub	sp, #32
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	e853 3f00 	ldrex	r3, [r3]
 800b086:	60bb      	str	r3, [r7, #8]
   return(result);
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b08e:	61fb      	str	r3, [r7, #28]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	461a      	mov	r2, r3
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	61bb      	str	r3, [r7, #24]
 800b09a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09c:	6979      	ldr	r1, [r7, #20]
 800b09e:	69ba      	ldr	r2, [r7, #24]
 800b0a0:	e841 2300 	strex	r3, r2, [r1]
 800b0a4:	613b      	str	r3, [r7, #16]
   return(result);
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1e6      	bne.n	800b07a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2220      	movs	r2, #32
 800b0b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7f5 fe23 	bl	8000d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0be:	bf00      	nop
 800b0c0:	3720      	adds	r7, #32
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
	...

0800b0c8 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_MSB;
 800b0cc:	4b10      	ldr	r3, [pc, #64]	; (800b110 <MX_PDM2PCM_Init+0x48>)
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800b0d2:	4b0f      	ldr	r3, [pc, #60]	; (800b110 <MX_PDM2PCM_Init+0x48>)
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 21045339;
 800b0d8:	4b0d      	ldr	r3, [pc, #52]	; (800b110 <MX_PDM2PCM_Init+0x48>)
 800b0da:	4a0e      	ldr	r2, [pc, #56]	; (800b114 <MX_PDM2PCM_Init+0x4c>)
 800b0dc:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800b0de:	4b0c      	ldr	r3, [pc, #48]	; (800b110 <MX_PDM2PCM_Init+0x48>)
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <MX_PDM2PCM_Init+0x48>)
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800b0ea:	4809      	ldr	r0, [pc, #36]	; (800b110 <MX_PDM2PCM_Init+0x48>)
 800b0ec:	f001 fd26 	bl	800cb3c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_128;
 800b0f0:	4b09      	ldr	r3, [pc, #36]	; (800b118 <MX_PDM2PCM_Init+0x50>)
 800b0f2:	2204      	movs	r2, #4
 800b0f4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800b0f6:	4b08      	ldr	r3, [pc, #32]	; (800b118 <MX_PDM2PCM_Init+0x50>)
 800b0f8:	2210      	movs	r2, #16
 800b0fa:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = -5;
 800b0fc:	4b06      	ldr	r3, [pc, #24]	; (800b118 <MX_PDM2PCM_Init+0x50>)
 800b0fe:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800b102:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800b104:	4904      	ldr	r1, [pc, #16]	; (800b118 <MX_PDM2PCM_Init+0x50>)
 800b106:	4802      	ldr	r0, [pc, #8]	; (800b110 <MX_PDM2PCM_Init+0x48>)
 800b108:	f001 fd9e 	bl	800cc48 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800b10c:	bf00      	nop
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	2005e618 	.word	0x2005e618
 800b114:	0141205b 	.word	0x0141205b
 800b118:	2005e610 	.word	0x2005e610

0800b11c <D16_GENERIC>:
 800b11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b120:	b087      	sub	sp, #28
 800b122:	6993      	ldr	r3, [r2, #24]
 800b124:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b126:	9101      	str	r1, [sp, #4]
 800b128:	68d1      	ldr	r1, [r2, #12]
 800b12a:	9304      	str	r3, [sp, #16]
 800b12c:	9105      	str	r1, [sp, #20]
 800b12e:	6914      	ldr	r4, [r2, #16]
 800b130:	f8d2 a014 	ldr.w	sl, [r2, #20]
 800b134:	69d3      	ldr	r3, [r2, #28]
 800b136:	f8d2 e008 	ldr.w	lr, [r2, #8]
 800b13a:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
 800b13e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800b140:	2d00      	cmp	r5, #0
 800b142:	d05e      	beq.n	800b202 <D16_GENERIC+0xe6>
 800b144:	f001 0510 	and.w	r5, r1, #16
 800b148:	f001 0120 	and.w	r1, r1, #32
 800b14c:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 800b228 <D16_GENERIC+0x10c>
 800b150:	46c1      	mov	r9, r8
 800b152:	9103      	str	r1, [sp, #12]
 800b154:	2100      	movs	r1, #0
 800b156:	9502      	str	r5, [sp, #8]
 800b158:	e048      	b.n	800b1ec <D16_GENERIC+0xd0>
 800b15a:	5d87      	ldrb	r7, [r0, r6]
 800b15c:	7805      	ldrb	r5, [r0, #0]
 800b15e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800b162:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 800b166:	b2fe      	uxtb	r6, r7
 800b168:	f3c7 2707 	ubfx	r7, r7, #8, #8
 800b16c:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
 800b170:	f85c 6027 	ldr.w	r6, [ip, r7, lsl #2]
 800b174:	441d      	add	r5, r3
 800b176:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 800b17a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b17e:	f3c3 0609 	ubfx	r6, r3, #0, #10
 800b182:	0a9b      	lsrs	r3, r3, #10
 800b184:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800b188:	4d25      	ldr	r5, [pc, #148]	; (800b220 <D16_GENERIC+0x104>)
 800b18a:	fb26 e505 	smlad	r5, r6, r5, lr
 800b18e:	4f25      	ldr	r7, [pc, #148]	; (800b224 <D16_GENERIC+0x108>)
 800b190:	fb26 fe07 	smuad	lr, r6, r7
 800b194:	9e02      	ldr	r6, [sp, #8]
 800b196:	f101 0801 	add.w	r8, r1, #1
 800b19a:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 800b19e:	b186      	cbz	r6, 800b1c2 <D16_GENERIC+0xa6>
 800b1a0:	442c      	add	r4, r5
 800b1a2:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800b1a6:	eba4 040a 	sub.w	r4, r4, sl
 800b1aa:	46aa      	mov	sl, r5
 800b1ac:	17e7      	asrs	r7, r4, #31
 800b1ae:	fba4 450b 	umull	r4, r5, r4, fp
 800b1b2:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b1b6:	fb0b 5507 	mla	r5, fp, r7, r5
 800b1ba:	f145 0500 	adc.w	r5, r5, #0
 800b1be:	006c      	lsls	r4, r5, #1
 800b1c0:	4625      	mov	r5, r4
 800b1c2:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800b1c6:	042d      	lsls	r5, r5, #16
 800b1c8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b1cc:	2700      	movs	r7, #0
 800b1ce:	fb01 fb0b 	mul.w	fp, r1, fp
 800b1d2:	fa1f f188 	uxth.w	r1, r8
 800b1d6:	fbc9 6705 	smlal	r6, r7, r9, r5
 800b1da:	9e01      	ldr	r6, [sp, #4]
 800b1dc:	10bd      	asrs	r5, r7, #2
 800b1de:	f305 050f 	ssat	r5, #16, r5
 800b1e2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b1e6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b1e8:	428d      	cmp	r5, r1
 800b1ea:	d90a      	bls.n	800b202 <D16_GENERIC+0xe6>
 800b1ec:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b1ee:	2d01      	cmp	r5, #1
 800b1f0:	b2ee      	uxtb	r6, r5
 800b1f2:	d1b2      	bne.n	800b15a <D16_GENERIC+0x3e>
 800b1f4:	9d03      	ldr	r5, [sp, #12]
 800b1f6:	f850 7b02 	ldr.w	r7, [r0], #2
 800b1fa:	2d00      	cmp	r5, #0
 800b1fc:	d0b3      	beq.n	800b166 <D16_GENERIC+0x4a>
 800b1fe:	ba7f      	rev16	r7, r7
 800b200:	e7b1      	b.n	800b166 <D16_GENERIC+0x4a>
 800b202:	2000      	movs	r0, #0
 800b204:	9905      	ldr	r1, [sp, #20]
 800b206:	61d3      	str	r3, [r2, #28]
 800b208:	9b04      	ldr	r3, [sp, #16]
 800b20a:	f8c2 e008 	str.w	lr, [r2, #8]
 800b20e:	60d1      	str	r1, [r2, #12]
 800b210:	6114      	str	r4, [r2, #16]
 800b212:	f8c2 a014 	str.w	sl, [r2, #20]
 800b216:	6193      	str	r3, [r2, #24]
 800b218:	b007      	add	sp, #28
 800b21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21e:	bf00      	nop
 800b220:	00030001 	.word	0x00030001
 800b224:	00010003 	.word	0x00010003
 800b228:	20000000 	.word	0x20000000

0800b22c <D24_GENERIC>:
 800b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b230:	6953      	ldr	r3, [r2, #20]
 800b232:	b087      	sub	sp, #28
 800b234:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b236:	9301      	str	r3, [sp, #4]
 800b238:	6993      	ldr	r3, [r2, #24]
 800b23a:	9102      	str	r1, [sp, #8]
 800b23c:	9305      	str	r3, [sp, #20]
 800b23e:	6914      	ldr	r4, [r2, #16]
 800b240:	69d1      	ldr	r1, [r2, #28]
 800b242:	6893      	ldr	r3, [r2, #8]
 800b244:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800b248:	f8d2 a030 	ldr.w	sl, [r2, #48]	; 0x30
 800b24c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b24e:	2e00      	cmp	r6, #0
 800b250:	f000 808c 	beq.w	800b36c <D24_GENERIC+0x140>
 800b254:	f005 0610 	and.w	r6, r5, #16
 800b258:	f005 0520 	and.w	r5, r5, #32
 800b25c:	f04f 0e00 	mov.w	lr, #0
 800b260:	f8df c140 	ldr.w	ip, [pc, #320]	; 800b3a4 <D24_GENERIC+0x178>
 800b264:	9603      	str	r6, [sp, #12]
 800b266:	9504      	str	r5, [sp, #16]
 800b268:	e061      	b.n	800b32e <D24_GENERIC+0x102>
 800b26a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800b26e:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800b272:	f810 b007 	ldrb.w	fp, [r0, r7]
 800b276:	042d      	lsls	r5, r5, #16
 800b278:	f890 9000 	ldrb.w	r9, [r0]
 800b27c:	19f0      	adds	r0, r6, r7
 800b27e:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 800b282:	44a9      	add	r9, r5
 800b284:	fa5f f689 	uxtb.w	r6, r9
 800b288:	f3c9 2707 	ubfx	r7, r9, #8, #8
 800b28c:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800b290:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800b294:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 800b298:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800b29c:	f85c 1029 	ldr.w	r1, [ip, r9, lsl #2]
 800b2a0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800b2a4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b2a8:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800b2ac:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800b2b0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b2b4:	4d39      	ldr	r5, [pc, #228]	; (800b39c <D24_GENERIC+0x170>)
 800b2b6:	fb26 8705 	smlad	r7, r6, r5, r8
 800b2ba:	4d39      	ldr	r5, [pc, #228]	; (800b3a0 <D24_GENERIC+0x174>)
 800b2bc:	fb26 3805 	smlad	r8, r6, r5, r3
 800b2c0:	f3c1 0309 	ubfx	r3, r1, #0, #10
 800b2c4:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 800b2ce:	fb26 f603 	smuad	r6, r6, r3
 800b2d2:	eb0e 0903 	add.w	r9, lr, r3
 800b2d6:	eb0b 0306 	add.w	r3, fp, r6
 800b2da:	9e03      	ldr	r6, [sp, #12]
 800b2dc:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800b2e0:	b186      	cbz	r6, 800b304 <D24_GENERIC+0xd8>
 800b2e2:	442c      	add	r4, r5
 800b2e4:	9e01      	ldr	r6, [sp, #4]
 800b2e6:	f8d2 b020 	ldr.w	fp, [r2, #32]
 800b2ea:	1ba4      	subs	r4, r4, r6
 800b2ec:	9501      	str	r5, [sp, #4]
 800b2ee:	17e7      	asrs	r7, r4, #31
 800b2f0:	fba4 450b 	umull	r4, r5, r4, fp
 800b2f4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b2f8:	fb0b 5507 	mla	r5, fp, r7, r5
 800b2fc:	f145 0500 	adc.w	r5, r5, #0
 800b300:	006c      	lsls	r4, r5, #1
 800b302:	4625      	mov	r5, r4
 800b304:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 800b308:	03ad      	lsls	r5, r5, #14
 800b30a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b30e:	2700      	movs	r7, #0
 800b310:	fb0e fb0b 	mul.w	fp, lr, fp
 800b314:	fa1f fe89 	uxth.w	lr, r9
 800b318:	fbca 6705 	smlal	r6, r7, sl, r5
 800b31c:	9e02      	ldr	r6, [sp, #8]
 800b31e:	10bd      	asrs	r5, r7, #2
 800b320:	f305 050f 	ssat	r5, #16, r5
 800b324:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b328:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b32a:	4575      	cmp	r5, lr
 800b32c:	d91e      	bls.n	800b36c <D24_GENERIC+0x140>
 800b32e:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b330:	b2ef      	uxtb	r7, r5
 800b332:	2d01      	cmp	r5, #1
 800b334:	b23e      	sxth	r6, r7
 800b336:	d198      	bne.n	800b26a <D24_GENERIC+0x3e>
 800b338:	9d04      	ldr	r5, [sp, #16]
 800b33a:	b16d      	cbz	r5, 800b358 <D24_GENERIC+0x12c>
 800b33c:	f01e 0f01 	tst.w	lr, #1
 800b340:	d121      	bne.n	800b386 <D24_GENERIC+0x15a>
 800b342:	7805      	ldrb	r5, [r0, #0]
 800b344:	3002      	adds	r0, #2
 800b346:	f890 9001 	ldrb.w	r9, [r0, #1]
 800b34a:	022d      	lsls	r5, r5, #8
 800b34c:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 800b350:	eb05 4909 	add.w	r9, r5, r9, lsl #16
 800b354:	44b1      	add	r9, r6
 800b356:	e795      	b.n	800b284 <D24_GENERIC+0x58>
 800b358:	7846      	ldrb	r6, [r0, #1]
 800b35a:	f890 9002 	ldrb.w	r9, [r0, #2]
 800b35e:	0236      	lsls	r6, r6, #8
 800b360:	f810 5b03 	ldrb.w	r5, [r0], #3
 800b364:	eb06 4909 	add.w	r9, r6, r9, lsl #16
 800b368:	44a9      	add	r9, r5
 800b36a:	e78b      	b.n	800b284 <D24_GENERIC+0x58>
 800b36c:	6093      	str	r3, [r2, #8]
 800b36e:	2000      	movs	r0, #0
 800b370:	9b01      	ldr	r3, [sp, #4]
 800b372:	f8c2 800c 	str.w	r8, [r2, #12]
 800b376:	6153      	str	r3, [r2, #20]
 800b378:	9b05      	ldr	r3, [sp, #20]
 800b37a:	61d1      	str	r1, [r2, #28]
 800b37c:	6114      	str	r4, [r2, #16]
 800b37e:	6193      	str	r3, [r2, #24]
 800b380:	b007      	add	sp, #28
 800b382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b386:	78c5      	ldrb	r5, [r0, #3]
 800b388:	f890 9002 	ldrb.w	r9, [r0, #2]
 800b38c:	022d      	lsls	r5, r5, #8
 800b38e:	f810 6b04 	ldrb.w	r6, [r0], #4
 800b392:	eb05 4909 	add.w	r9, r5, r9, lsl #16
 800b396:	44b1      	add	r9, r6
 800b398:	e774      	b.n	800b284 <D24_GENERIC+0x58>
 800b39a:	bf00      	nop
 800b39c:	00030001 	.word	0x00030001
 800b3a0:	00060007 	.word	0x00060007
 800b3a4:	20000000 	.word	0x20000000

0800b3a8 <D32_GENERIC>:
 800b3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	6953      	ldr	r3, [r2, #20]
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b3b6:	6993      	ldr	r3, [r2, #24]
 800b3b8:	9102      	str	r1, [sp, #8]
 800b3ba:	9305      	str	r3, [sp, #20]
 800b3bc:	9501      	str	r5, [sp, #4]
 800b3be:	6914      	ldr	r4, [r2, #16]
 800b3c0:	69d1      	ldr	r1, [r2, #28]
 800b3c2:	6893      	ldr	r3, [r2, #8]
 800b3c4:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800b3c8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b3ca:	2e00      	cmp	r6, #0
 800b3cc:	f000 8098 	beq.w	800b500 <D32_GENERIC+0x158>
 800b3d0:	f005 0610 	and.w	r6, r5, #16
 800b3d4:	f005 0520 	and.w	r5, r5, #32
 800b3d8:	f04f 0c00 	mov.w	ip, #0
 800b3dc:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800b52c <D32_GENERIC+0x184>
 800b3e0:	9603      	str	r6, [sp, #12]
 800b3e2:	9504      	str	r5, [sp, #16]
 800b3e4:	e078      	b.n	800b4d8 <D32_GENERIC+0x130>
 800b3e6:	eb00 0905 	add.w	r9, r0, r5
 800b3ea:	f810 b005 	ldrb.w	fp, [r0, r5]
 800b3ee:	f810 a006 	ldrb.w	sl, [r0, r6]
 800b3f2:	f819 5007 	ldrb.w	r5, [r9, r7]
 800b3f6:	444f      	add	r7, r9
 800b3f8:	f890 9000 	ldrb.w	r9, [r0]
 800b3fc:	042d      	lsls	r5, r5, #16
 800b3fe:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 800b402:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 800b406:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 800b40a:	44a9      	add	r9, r5
 800b40c:	fa5f f789 	uxtb.w	r7, r9
 800b410:	f3c9 2507 	ubfx	r5, r9, #8, #8
 800b414:	f3c9 4607 	ubfx	r6, r9, #16, #8
 800b418:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800b41c:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800b420:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 800b424:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 800b428:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 800b42c:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
 800b430:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800b434:	f3c1 0909 	ubfx	r9, r1, #0, #10
 800b438:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800b43c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b440:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 800b444:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b448:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 800b44c:	f3c1 0509 	ubfx	r5, r1, #0, #10
 800b450:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800b454:	4d31      	ldr	r5, [pc, #196]	; (800b51c <D32_GENERIC+0x174>)
 800b456:	fb29 8805 	smlad	r8, r9, r5, r8
 800b45a:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800b45e:	fb26 8705 	smlad	r7, r6, r5, r8
 800b462:	4d2f      	ldr	r5, [pc, #188]	; (800b520 <D32_GENERIC+0x178>)
 800b464:	fb29 3305 	smlad	r3, r9, r5, r3
 800b468:	4d2e      	ldr	r5, [pc, #184]	; (800b524 <D32_GENERIC+0x17c>)
 800b46a:	fb26 3805 	smlad	r8, r6, r5, r3
 800b46e:	2301      	movs	r3, #1
 800b470:	fb29 f903 	smuad	r9, r9, r3
 800b474:	4b2c      	ldr	r3, [pc, #176]	; (800b528 <D32_GENERIC+0x180>)
 800b476:	fb26 9303 	smlad	r3, r6, r3, r9
 800b47a:	9e03      	ldr	r6, [sp, #12]
 800b47c:	f10c 0901 	add.w	r9, ip, #1
 800b480:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 800b484:	b186      	cbz	r6, 800b4a8 <D32_GENERIC+0x100>
 800b486:	442c      	add	r4, r5
 800b488:	9e00      	ldr	r6, [sp, #0]
 800b48a:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800b48e:	1ba4      	subs	r4, r4, r6
 800b490:	9500      	str	r5, [sp, #0]
 800b492:	17e7      	asrs	r7, r4, #31
 800b494:	fba4 450a 	umull	r4, r5, r4, sl
 800b498:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b49c:	fb0a 5507 	mla	r5, sl, r7, r5
 800b4a0:	f145 0500 	adc.w	r5, r5, #0
 800b4a4:	006c      	lsls	r4, r5, #1
 800b4a6:	4625      	mov	r5, r4
 800b4a8:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 800b4ac:	036d      	lsls	r5, r5, #13
 800b4ae:	9f01      	ldr	r7, [sp, #4]
 800b4b0:	fb0c fb0a 	mul.w	fp, ip, sl
 800b4b4:	fa1f fc89 	uxth.w	ip, r9
 800b4b8:	f04f 0a00 	mov.w	sl, #0
 800b4bc:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800b4c0:	9e02      	ldr	r6, [sp, #8]
 800b4c2:	fbc7 9a05 	smlal	r9, sl, r7, r5
 800b4c6:	4657      	mov	r7, sl
 800b4c8:	10bd      	asrs	r5, r7, #2
 800b4ca:	f305 050f 	ssat	r5, #16, r5
 800b4ce:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 800b4d2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800b4d4:	4565      	cmp	r5, ip
 800b4d6:	d913      	bls.n	800b500 <D32_GENERIC+0x158>
 800b4d8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800b4da:	b2ee      	uxtb	r6, r5
 800b4dc:	2d01      	cmp	r5, #1
 800b4de:	f1c6 0700 	rsb	r7, r6, #0
 800b4e2:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 800b4e6:	f47f af7e 	bne.w	800b3e6 <D32_GENERIC+0x3e>
 800b4ea:	1d05      	adds	r5, r0, #4
 800b4ec:	f8d0 9000 	ldr.w	r9, [r0]
 800b4f0:	9804      	ldr	r0, [sp, #16]
 800b4f2:	b118      	cbz	r0, 800b4fc <D32_GENERIC+0x154>
 800b4f4:	fa99 f999 	rev16.w	r9, r9
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	e787      	b.n	800b40c <D32_GENERIC+0x64>
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	e785      	b.n	800b40c <D32_GENERIC+0x64>
 800b500:	6093      	str	r3, [r2, #8]
 800b502:	2000      	movs	r0, #0
 800b504:	9b00      	ldr	r3, [sp, #0]
 800b506:	f8c2 800c 	str.w	r8, [r2, #12]
 800b50a:	6153      	str	r3, [r2, #20]
 800b50c:	9b05      	ldr	r3, [sp, #20]
 800b50e:	61d1      	str	r1, [r2, #28]
 800b510:	6114      	str	r4, [r2, #16]
 800b512:	6193      	str	r3, [r2, #24]
 800b514:	b007      	add	sp, #28
 800b516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51a:	bf00      	nop
 800b51c:	00060003 	.word	0x00060003
 800b520:	000a000c 	.word	0x000a000c
 800b524:	000c000a 	.word	0x000c000a
 800b528:	00030006 	.word	0x00030006
 800b52c:	20000000 	.word	0x20000000

0800b530 <D48_GENERIC>:
 800b530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b534:	6913      	ldr	r3, [r2, #16]
 800b536:	b08b      	sub	sp, #44	; 0x2c
 800b538:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b53a:	9106      	str	r1, [sp, #24]
 800b53c:	9303      	str	r3, [sp, #12]
 800b53e:	68d1      	ldr	r1, [r2, #12]
 800b540:	6953      	ldr	r3, [r2, #20]
 800b542:	9101      	str	r1, [sp, #4]
 800b544:	9304      	str	r3, [sp, #16]
 800b546:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b548:	6993      	ldr	r3, [r2, #24]
 800b54a:	9105      	str	r1, [sp, #20]
 800b54c:	9309      	str	r3, [sp, #36]	; 0x24
 800b54e:	69d6      	ldr	r6, [r2, #28]
 800b550:	6893      	ldr	r3, [r2, #8]
 800b552:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800b554:	2c00      	cmp	r4, #0
 800b556:	f000 80c6 	beq.w	800b6e6 <D48_GENERIC+0x1b6>
 800b55a:	f001 0410 	and.w	r4, r1, #16
 800b55e:	f001 0120 	and.w	r1, r1, #32
 800b562:	2700      	movs	r7, #0
 800b564:	9302      	str	r3, [sp, #8]
 800b566:	9108      	str	r1, [sp, #32]
 800b568:	9407      	str	r4, [sp, #28]
 800b56a:	4966      	ldr	r1, [pc, #408]	; (800b704 <D48_GENERIC+0x1d4>)
 800b56c:	e0a6      	b.n	800b6bc <D48_GENERIC+0x18c>
 800b56e:	eb00 0e08 	add.w	lr, r0, r8
 800b572:	f810 a008 	ldrb.w	sl, [r0, r8]
 800b576:	f810 9005 	ldrb.w	r9, [r0, r5]
 800b57a:	f81e 400c 	ldrb.w	r4, [lr, ip]
 800b57e:	44e6      	add	lr, ip
 800b580:	f890 b000 	ldrb.w	fp, [r0]
 800b584:	0420      	lsls	r0, r4, #16
 800b586:	eb0e 0408 	add.w	r4, lr, r8
 800b58a:	f81e e008 	ldrb.w	lr, [lr, r8]
 800b58e:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 800b592:	f814 800c 	ldrb.w	r8, [r4, ip]
 800b596:	44a4      	add	ip, r4
 800b598:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 800b59c:	eb08 2e0e 	add.w	lr, r8, lr, lsl #8
 800b5a0:	eb0a 040b 	add.w	r4, sl, fp
 800b5a4:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 800b5a8:	fa5f f884 	uxtb.w	r8, r4
 800b5ac:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800b5b0:	f3c4 4907 	ubfx	r9, r4, #16, #8
 800b5b4:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 800b5b8:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800b5bc:	fa5f fc8e 	uxtb.w	ip, lr
 800b5c0:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800b5c4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 800b5c8:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 800b5cc:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 800b5d0:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 800b5d4:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800b5d8:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 800b5dc:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 800b5e0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b5e4:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800b5e8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800b5ec:	9b01      	ldr	r3, [sp, #4]
 800b5ee:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800b5f2:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800b5f6:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800b5fa:	eb0c 2c94 	add.w	ip, ip, r4, lsr #10
 800b5fe:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b602:	eb0e 269c 	add.w	r6, lr, ip, lsr #10
 800b606:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b60a:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 800b60e:	f3c6 0509 	ubfx	r5, r6, #0, #10
 800b612:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800b616:	4d3c      	ldr	r5, [pc, #240]	; (800b708 <D48_GENERIC+0x1d8>)
 800b618:	fb28 3a05 	smlad	sl, r8, r5, r3
 800b61c:	4b3b      	ldr	r3, [pc, #236]	; (800b70c <D48_GENERIC+0x1dc>)
 800b61e:	fb24 aa03 	smlad	sl, r4, r3, sl
 800b622:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b626:	fb2c aa03 	smlad	sl, ip, r3, sl
 800b62a:	4b39      	ldr	r3, [pc, #228]	; (800b710 <D48_GENERIC+0x1e0>)
 800b62c:	9d02      	ldr	r5, [sp, #8]
 800b62e:	fb28 5303 	smlad	r3, r8, r3, r5
 800b632:	f04f 151b 	mov.w	r5, #1769499	; 0x1b001b
 800b636:	fb24 3305 	smlad	r3, r4, r5, r3
 800b63a:	4d36      	ldr	r5, [pc, #216]	; (800b714 <D48_GENERIC+0x1e4>)
 800b63c:	fb2c 3305 	smlad	r3, ip, r5, r3
 800b640:	2501      	movs	r5, #1
 800b642:	9301      	str	r3, [sp, #4]
 800b644:	fb28 f805 	smuad	r8, r8, r5
 800b648:	4b33      	ldr	r3, [pc, #204]	; (800b718 <D48_GENERIC+0x1e8>)
 800b64a:	fb24 8403 	smlad	r4, r4, r3, r8
 800b64e:	4b33      	ldr	r3, [pc, #204]	; (800b71c <D48_GENERIC+0x1ec>)
 800b650:	fb2c 4303 	smlad	r3, ip, r3, r4
 800b654:	9302      	str	r3, [sp, #8]
 800b656:	eb07 0e05 	add.w	lr, r7, r5
 800b65a:	9b07      	ldr	r3, [sp, #28]
 800b65c:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800b660:	b1ab      	cbz	r3, 800b68e <D48_GENERIC+0x15e>
 800b662:	9b03      	ldr	r3, [sp, #12]
 800b664:	f8d2 c020 	ldr.w	ip, [r2, #32]
 800b668:	4453      	add	r3, sl
 800b66a:	461c      	mov	r4, r3
 800b66c:	9b04      	ldr	r3, [sp, #16]
 800b66e:	f8cd a010 	str.w	sl, [sp, #16]
 800b672:	1ae4      	subs	r4, r4, r3
 800b674:	ea4f 79e4 	mov.w	r9, r4, asr #31
 800b678:	fba4 450c 	umull	r4, r5, r4, ip
 800b67c:	fb0c 5509 	mla	r5, ip, r9, r5
 800b680:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800b684:	f145 0500 	adc.w	r5, r5, #0
 800b688:	006b      	lsls	r3, r5, #1
 800b68a:	469a      	mov	sl, r3
 800b68c:	9303      	str	r3, [sp, #12]
 800b68e:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 800b692:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 800b696:	9b05      	ldr	r3, [sp, #20]
 800b698:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b69c:	2500      	movs	r5, #0
 800b69e:	fb07 fc0c 	mul.w	ip, r7, ip
 800b6a2:	fa1f f78e 	uxth.w	r7, lr
 800b6a6:	fbc3 450a 	smlal	r4, r5, r3, sl
 800b6aa:	9b06      	ldr	r3, [sp, #24]
 800b6ac:	10ac      	asrs	r4, r5, #2
 800b6ae:	f304 040f 	ssat	r4, #16, r4
 800b6b2:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800b6b6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800b6b8:	42bc      	cmp	r4, r7
 800b6ba:	d913      	bls.n	800b6e4 <D48_GENERIC+0x1b4>
 800b6bc:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800b6be:	b2e5      	uxtb	r5, r4
 800b6c0:	2c01      	cmp	r4, #1
 800b6c2:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800b6c6:	f1c5 0c00 	rsb	ip, r5, #0
 800b6ca:	f47f af50 	bne.w	800b56e <D48_GENERIC+0x3e>
 800b6ce:	9b08      	ldr	r3, [sp, #32]
 800b6d0:	e890 4010 	ldmia.w	r0, {r4, lr}
 800b6d4:	3006      	adds	r0, #6
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	f43f af66 	beq.w	800b5a8 <D48_GENERIC+0x78>
 800b6dc:	ba64      	rev16	r4, r4
 800b6de:	fa9e fe9e 	rev16.w	lr, lr
 800b6e2:	e761      	b.n	800b5a8 <D48_GENERIC+0x78>
 800b6e4:	9b02      	ldr	r3, [sp, #8]
 800b6e6:	6093      	str	r3, [r2, #8]
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	9b01      	ldr	r3, [sp, #4]
 800b6ec:	61d6      	str	r6, [r2, #28]
 800b6ee:	60d3      	str	r3, [r2, #12]
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	6113      	str	r3, [r2, #16]
 800b6f4:	9b04      	ldr	r3, [sp, #16]
 800b6f6:	6153      	str	r3, [r2, #20]
 800b6f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6fa:	6193      	str	r3, [r2, #24]
 800b6fc:	b00b      	add	sp, #44	; 0x2c
 800b6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b702:	bf00      	nop
 800b704:	20000000 	.word	0x20000000
 800b708:	000f000a 	.word	0x000f000a
 800b70c:	00060003 	.word	0x00060003
 800b710:	00150019 	.word	0x00150019
 800b714:	00190015 	.word	0x00190015
 800b718:	00030006 	.word	0x00030006
 800b71c:	000a000f 	.word	0x000a000f

0800b720 <D64_GENERIC>:
 800b720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b724:	6913      	ldr	r3, [r2, #16]
 800b726:	b089      	sub	sp, #36	; 0x24
 800b728:	68d5      	ldr	r5, [r2, #12]
 800b72a:	9302      	str	r3, [sp, #8]
 800b72c:	6953      	ldr	r3, [r2, #20]
 800b72e:	462e      	mov	r6, r5
 800b730:	9105      	str	r1, [sp, #20]
 800b732:	9303      	str	r3, [sp, #12]
 800b734:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800b736:	6993      	ldr	r3, [r2, #24]
 800b738:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800b73a:	9307      	str	r3, [sp, #28]
 800b73c:	69d4      	ldr	r4, [r2, #28]
 800b73e:	6893      	ldr	r3, [r2, #8]
 800b740:	9504      	str	r5, [sp, #16]
 800b742:	2900      	cmp	r1, #0
 800b744:	f000 80e5 	beq.w	800b912 <D64_GENERIC+0x1f2>
 800b748:	6a11      	ldr	r1, [r2, #32]
 800b74a:	2500      	movs	r5, #0
 800b74c:	46b3      	mov	fp, r6
 800b74e:	9301      	str	r3, [sp, #4]
 800b750:	9106      	str	r1, [sp, #24]
 800b752:	4976      	ldr	r1, [pc, #472]	; (800b92c <D64_GENERIC+0x20c>)
 800b754:	e0c7      	b.n	800b8e6 <D64_GENERIC+0x1c6>
 800b756:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 800b75a:	f1cc 0e00 	rsb	lr, ip, #0
 800b75e:	f890 9000 	ldrb.w	r9, [r0]
 800b762:	eb00 0708 	add.w	r7, r0, r8
 800b766:	f810 6008 	ldrb.w	r6, [r0, r8]
 800b76a:	eb07 0a4e 	add.w	sl, r7, lr, lsl #1
 800b76e:	f817 000e 	ldrb.w	r0, [r7, lr]
 800b772:	f817 301e 	ldrb.w	r3, [r7, lr, lsl #1]
 800b776:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 800b77a:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 800b77e:	ea4f 4800 	mov.w	r8, r0, lsl #16
 800b782:	f817 000e 	ldrb.w	r0, [r7, lr]
 800b786:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 800b78a:	f817 801e 	ldrb.w	r8, [r7, lr, lsl #1]
 800b78e:	0400      	lsls	r0, r0, #16
 800b790:	4477      	add	r7, lr
 800b792:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 800b796:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800b79a:	f817 a01e 	ldrb.w	sl, [r7, lr, lsl #1]
 800b79e:	eb07 074e 	add.w	r7, r7, lr, lsl #1
 800b7a2:	444e      	add	r6, r9
 800b7a4:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 800b7a8:	eb07 008c 	add.w	r0, r7, ip, lsl #2
 800b7ac:	44c2      	add	sl, r8
 800b7ae:	b2f7      	uxtb	r7, r6
 800b7b0:	f3c6 2807 	ubfx	r8, r6, #8, #8
 800b7b4:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 800b7b8:	0e36      	lsrs	r6, r6, #24
 800b7ba:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800b7be:	fa5f fe8a 	uxtb.w	lr, sl
 800b7c2:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800b7c6:	f3ca 2907 	ubfx	r9, sl, #8, #8
 800b7ca:	443c      	add	r4, r7
 800b7cc:	f851 702c 	ldr.w	r7, [r1, ip, lsl #2]
 800b7d0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800b7d4:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 800b7d8:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 800b7dc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800b7e0:	4b53      	ldr	r3, [pc, #332]	; (800b930 <D64_GENERIC+0x210>)
 800b7e2:	eb07 2c98 	add.w	ip, r7, r8, lsr #10
 800b7e6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800b7ea:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 800b7ee:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 800b7f2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800b7f6:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 800b7fa:	f3ca 4407 	ubfx	r4, sl, #16, #8
 800b7fe:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800b802:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800b806:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800b80a:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800b80e:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800b812:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800b816:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 800b81a:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 800b81e:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 800b822:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800b826:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 800b82a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800b82e:	ea47 4e0e 	orr.w	lr, r7, lr, lsl #16
 800b832:	f3c9 0709 	ubfx	r7, r9, #0, #10
 800b836:	ea4f 2499 	mov.w	r4, r9, lsr #10
 800b83a:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 800b83e:	fb28 b903 	smlad	r9, r8, r3, fp
 800b842:	4b3c      	ldr	r3, [pc, #240]	; (800b934 <D64_GENERIC+0x214>)
 800b844:	fb26 9903 	smlad	r9, r6, r3, r9
 800b848:	4b3b      	ldr	r3, [pc, #236]	; (800b938 <D64_GENERIC+0x218>)
 800b84a:	fb2e 9703 	smlad	r7, lr, r3, r9
 800b84e:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 800b852:	fb2a 7909 	smlad	r9, sl, r9, r7
 800b856:	4b39      	ldr	r3, [pc, #228]	; (800b93c <D64_GENERIC+0x21c>)
 800b858:	9f01      	ldr	r7, [sp, #4]
 800b85a:	fb28 7303 	smlad	r3, r8, r3, r7
 800b85e:	4f37      	ldr	r7, [pc, #220]	; (800b93c <D64_GENERIC+0x21c>)
 800b860:	fb2a 3317 	smladx	r3, sl, r7, r3
 800b864:	4f36      	ldr	r7, [pc, #216]	; (800b940 <D64_GENERIC+0x220>)
 800b866:	fb26 3307 	smlad	r3, r6, r7, r3
 800b86a:	fb2e 3b17 	smladx	fp, lr, r7, r3
 800b86e:	f04f 0c01 	mov.w	ip, #1
 800b872:	fb28 f80c 	smuad	r8, r8, ip
 800b876:	4b33      	ldr	r3, [pc, #204]	; (800b944 <D64_GENERIC+0x224>)
 800b878:	fb26 8603 	smlad	r6, r6, r3, r8
 800b87c:	4b32      	ldr	r3, [pc, #200]	; (800b948 <D64_GENERIC+0x228>)
 800b87e:	fb2e 6e03 	smlad	lr, lr, r3, r6
 800b882:	4b32      	ldr	r3, [pc, #200]	; (800b94c <D64_GENERIC+0x22c>)
 800b884:	fb2a e303 	smlad	r3, sl, r3, lr
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 800b88e:	9b06      	ldr	r3, [sp, #24]
 800b890:	b19b      	cbz	r3, 800b8ba <D64_GENERIC+0x19a>
 800b892:	9e02      	ldr	r6, [sp, #8]
 800b894:	9f03      	ldr	r7, [sp, #12]
 800b896:	444e      	add	r6, r9
 800b898:	f8cd 900c 	str.w	r9, [sp, #12]
 800b89c:	1bf6      	subs	r6, r6, r7
 800b89e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800b8a2:	fba6 6703 	umull	r6, r7, r6, r3
 800b8a6:	fb03 7709 	mla	r7, r3, r9, r7
 800b8aa:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 800b8ae:	f147 0700 	adc.w	r7, r7, #0
 800b8b2:	fa07 f30c 	lsl.w	r3, r7, ip
 800b8b6:	4699      	mov	r9, r3
 800b8b8:	9302      	str	r3, [sp, #8]
 800b8ba:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800b8be:	ea4f 2989 	mov.w	r9, r9, lsl #10
 800b8c2:	9b04      	ldr	r3, [sp, #16]
 800b8c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b8c8:	2700      	movs	r7, #0
 800b8ca:	fb05 fe0e 	mul.w	lr, r5, lr
 800b8ce:	3501      	adds	r5, #1
 800b8d0:	fbc3 6709 	smlal	r6, r7, r3, r9
 800b8d4:	9b05      	ldr	r3, [sp, #20]
 800b8d6:	10be      	asrs	r6, r7, #2
 800b8d8:	f306 060f 	ssat	r6, #16, r6
 800b8dc:	f823 601e 	strh.w	r6, [r3, lr, lsl #1]
 800b8e0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800b8e2:	42ae      	cmp	r6, r5
 800b8e4:	dd13      	ble.n	800b90e <D64_GENERIC+0x1ee>
 800b8e6:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
 800b8ea:	f1bc 0f01 	cmp.w	ip, #1
 800b8ee:	f47f af32 	bne.w	800b756 <D64_GENERIC+0x36>
 800b8f2:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800b8f4:	f100 0e08 	add.w	lr, r0, #8
 800b8f8:	06bb      	lsls	r3, r7, #26
 800b8fa:	e890 0440 	ldmia.w	r0, {r6, sl}
 800b8fe:	d504      	bpl.n	800b90a <D64_GENERIC+0x1ea>
 800b900:	ba76      	rev16	r6, r6
 800b902:	fa9a fa9a 	rev16.w	sl, sl
 800b906:	4670      	mov	r0, lr
 800b908:	e751      	b.n	800b7ae <D64_GENERIC+0x8e>
 800b90a:	4670      	mov	r0, lr
 800b90c:	e74f      	b.n	800b7ae <D64_GENERIC+0x8e>
 800b90e:	465e      	mov	r6, fp
 800b910:	9b01      	ldr	r3, [sp, #4]
 800b912:	6093      	str	r3, [r2, #8]
 800b914:	2000      	movs	r0, #0
 800b916:	9b02      	ldr	r3, [sp, #8]
 800b918:	60d6      	str	r6, [r2, #12]
 800b91a:	6113      	str	r3, [r2, #16]
 800b91c:	9b03      	ldr	r3, [sp, #12]
 800b91e:	61d4      	str	r4, [r2, #28]
 800b920:	6153      	str	r3, [r2, #20]
 800b922:	9b07      	ldr	r3, [sp, #28]
 800b924:	6193      	str	r3, [r2, #24]
 800b926:	b009      	add	sp, #36	; 0x24
 800b928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92c:	20000000 	.word	0x20000000
 800b930:	001c0015 	.word	0x001c0015
 800b934:	000f000a 	.word	0x000f000a
 800b938:	00060003 	.word	0x00060003
 800b93c:	0024002a 	.word	0x0024002a
 800b940:	002e0030 	.word	0x002e0030
 800b944:	00030006 	.word	0x00030006
 800b948:	000a000f 	.word	0x000a000f
 800b94c:	0015001c 	.word	0x0015001c

0800b950 <D80_GENERIC>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	b08b      	sub	sp, #44	; 0x2c
 800b956:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800b958:	9107      	str	r1, [sp, #28]
 800b95a:	6911      	ldr	r1, [r2, #16]
 800b95c:	9104      	str	r1, [sp, #16]
 800b95e:	6951      	ldr	r1, [r2, #20]
 800b960:	9105      	str	r1, [sp, #20]
 800b962:	6991      	ldr	r1, [r2, #24]
 800b964:	9109      	str	r1, [sp, #36]	; 0x24
 800b966:	69d1      	ldr	r1, [r2, #28]
 800b968:	9101      	str	r1, [sp, #4]
 800b96a:	6891      	ldr	r1, [r2, #8]
 800b96c:	9103      	str	r1, [sp, #12]
 800b96e:	68d1      	ldr	r1, [r2, #12]
 800b970:	9102      	str	r1, [sp, #8]
 800b972:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800b974:	9106      	str	r1, [sp, #24]
 800b976:	2b00      	cmp	r3, #0
 800b978:	f000 810d 	beq.w	800bb96 <D80_GENERIC+0x246>
 800b97c:	6a13      	ldr	r3, [r2, #32]
 800b97e:	f04f 0800 	mov.w	r8, #0
 800b982:	f8df e264 	ldr.w	lr, [pc, #612]	; 800bbe8 <D80_GENERIC+0x298>
 800b986:	9308      	str	r3, [sp, #32]
 800b988:	9200      	str	r2, [sp, #0]
 800b98a:	e0ee      	b.n	800bb6a <D80_GENERIC+0x21a>
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	f890 c000 	ldrb.w	ip, [r0]
 800b992:	b219      	sxth	r1, r3
 800b994:	425c      	negs	r4, r3
 800b996:	f810 9003 	ldrb.w	r9, [r0, r3]
 800b99a:	004e      	lsls	r6, r1, #1
 800b99c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 800b9a0:	4431      	add	r1, r6
 800b9a2:	1843      	adds	r3, r0, r1
 800b9a4:	f810 b001 	ldrb.w	fp, [r0, r1]
 800b9a8:	1919      	adds	r1, r3, r4
 800b9aa:	5d1b      	ldrb	r3, [r3, r4]
 800b9ac:	1948      	adds	r0, r1, r5
 800b9ae:	f811 a005 	ldrb.w	sl, [r1, r5]
 800b9b2:	041b      	lsls	r3, r3, #16
 800b9b4:	1907      	adds	r7, r0, r4
 800b9b6:	5d01      	ldrb	r1, [r0, r4]
 800b9b8:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800b9bc:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 800b9c0:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 800b9c4:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 800b9c8:	0409      	lsls	r1, r1, #16
 800b9ca:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 800b9ce:	eb0b 0905 	add.w	r9, fp, r5
 800b9d2:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800b9d6:	f81b 5005 	ldrb.w	r5, [fp, r5]
 800b9da:	eb09 0b04 	add.w	fp, r9, r4
 800b9de:	f819 4004 	ldrb.w	r4, [r9, r4]
 800b9e2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800b9e6:	4463      	add	r3, ip
 800b9e8:	eb0b 0006 	add.w	r0, fp, r6
 800b9ec:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 800b9f0:	4439      	add	r1, r7
 800b9f2:	f3c3 2407 	ubfx	r4, r3, #8, #8
 800b9f6:	b2df      	uxtb	r7, r3
 800b9f8:	f3c3 4607 	ubfx	r6, r3, #16, #8
 800b9fc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 800ba00:	f85e 3027 	ldr.w	r3, [lr, r7, lsl #2]
 800ba04:	fa5f fa81 	uxtb.w	sl, r1
 800ba08:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800ba0c:	9c01      	ldr	r4, [sp, #4]
 800ba0e:	f85e 9026 	ldr.w	r9, [lr, r6, lsl #2]
 800ba12:	441c      	add	r4, r3
 800ba14:	f85e 602c 	ldr.w	r6, [lr, ip, lsl #2]
 800ba18:	f85e c02a 	ldr.w	ip, [lr, sl, lsl #2]
 800ba1c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 800ba20:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800ba24:	f3c4 0309 	ubfx	r3, r4, #0, #10
 800ba28:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ba2c:	b2ed      	uxtb	r5, r5
 800ba2e:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800ba32:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ba36:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 800ba3a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800ba3e:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 800ba42:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800ba46:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800ba4a:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800ba4e:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 800ba52:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 800ba56:	0e09      	lsrs	r1, r1, #24
 800ba58:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800ba5c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800ba60:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800ba64:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800ba68:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800ba6c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ba70:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ba74:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800ba78:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ba7c:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800ba80:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 800ba84:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ba88:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800ba8c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800ba90:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ba94:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800ba98:	ea4f 229a 	mov.w	r2, sl, lsr #10
 800ba9c:	f3ca 0709 	ubfx	r7, sl, #0, #10
 800baa0:	9201      	str	r2, [sp, #4]
 800baa2:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800baa6:	4a44      	ldr	r2, [pc, #272]	; (800bbb8 <D80_GENERIC+0x268>)
 800baa8:	9f02      	ldr	r7, [sp, #8]
 800baaa:	fb23 7a02 	smlad	sl, r3, r2, r7
 800baae:	4a43      	ldr	r2, [pc, #268]	; (800bbbc <D80_GENERIC+0x26c>)
 800bab0:	fb26 aa02 	smlad	sl, r6, r2, sl
 800bab4:	4a42      	ldr	r2, [pc, #264]	; (800bbc0 <D80_GENERIC+0x270>)
 800bab6:	fb24 aa02 	smlad	sl, r4, r2, sl
 800baba:	4a42      	ldr	r2, [pc, #264]	; (800bbc4 <D80_GENERIC+0x274>)
 800babc:	fb21 a702 	smlad	r7, r1, r2, sl
 800bac0:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800bac4:	fb25 7a0a 	smlad	sl, r5, sl, r7
 800bac8:	4a3f      	ldr	r2, [pc, #252]	; (800bbc8 <D80_GENERIC+0x278>)
 800baca:	9f03      	ldr	r7, [sp, #12]
 800bacc:	fb23 7c02 	smlad	ip, r3, r2, r7
 800bad0:	4a3e      	ldr	r2, [pc, #248]	; (800bbcc <D80_GENERIC+0x27c>)
 800bad2:	fb26 cc02 	smlad	ip, r6, r2, ip
 800bad6:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 800bada:	fb24 c707 	smlad	r7, r4, r7, ip
 800bade:	4a3c      	ldr	r2, [pc, #240]	; (800bbd0 <D80_GENERIC+0x280>)
 800bae0:	fb21 7702 	smlad	r7, r1, r2, r7
 800bae4:	4a3b      	ldr	r2, [pc, #236]	; (800bbd4 <D80_GENERIC+0x284>)
 800bae6:	fb25 7202 	smlad	r2, r5, r2, r7
 800baea:	f04f 0901 	mov.w	r9, #1
 800baee:	9202      	str	r2, [sp, #8]
 800baf0:	fb23 f909 	smuad	r9, r3, r9
 800baf4:	4b38      	ldr	r3, [pc, #224]	; (800bbd8 <D80_GENERIC+0x288>)
 800baf6:	fb26 9603 	smlad	r6, r6, r3, r9
 800bafa:	4f38      	ldr	r7, [pc, #224]	; (800bbdc <D80_GENERIC+0x28c>)
 800bafc:	fb24 6407 	smlad	r4, r4, r7, r6
 800bb00:	4f37      	ldr	r7, [pc, #220]	; (800bbe0 <D80_GENERIC+0x290>)
 800bb02:	fb21 4707 	smlad	r7, r1, r7, r4
 800bb06:	4937      	ldr	r1, [pc, #220]	; (800bbe4 <D80_GENERIC+0x294>)
 800bb08:	fb25 7301 	smlad	r3, r5, r1, r7
 800bb0c:	9303      	str	r3, [sp, #12]
 800bb0e:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 800bb12:	9b08      	ldr	r3, [sp, #32]
 800bb14:	b193      	cbz	r3, 800bb3c <D80_GENERIC+0x1ec>
 800bb16:	9a04      	ldr	r2, [sp, #16]
 800bb18:	4452      	add	r2, sl
 800bb1a:	4614      	mov	r4, r2
 800bb1c:	9a05      	ldr	r2, [sp, #20]
 800bb1e:	f8cd a014 	str.w	sl, [sp, #20]
 800bb22:	1aa4      	subs	r4, r4, r2
 800bb24:	17e7      	asrs	r7, r4, #31
 800bb26:	fba4 4503 	umull	r4, r5, r4, r3
 800bb2a:	fb03 5507 	mla	r5, r3, r7, r5
 800bb2e:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800bb32:	f145 0500 	adc.w	r5, r5, #0
 800bb36:	006b      	lsls	r3, r5, #1
 800bb38:	469a      	mov	sl, r3
 800bb3a:	9304      	str	r3, [sp, #16]
 800bb3c:	9e00      	ldr	r6, [sp, #0]
 800bb3e:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 800bb42:	9a06      	ldr	r2, [sp, #24]
 800bb44:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bb48:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 800bb4a:	2500      	movs	r5, #0
 800bb4c:	fb08 f303 	mul.w	r3, r8, r3
 800bb50:	fbc2 450a 	smlal	r4, r5, r2, sl
 800bb54:	9a07      	ldr	r2, [sp, #28]
 800bb56:	f108 0801 	add.w	r8, r8, #1
 800bb5a:	10a9      	asrs	r1, r5, #2
 800bb5c:	f301 010f 	ssat	r1, #16, r1
 800bb60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800bb64:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800bb66:	4543      	cmp	r3, r8
 800bb68:	dd14      	ble.n	800bb94 <D80_GENERIC+0x244>
 800bb6a:	9b00      	ldr	r3, [sp, #0]
 800bb6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	f47f af0c 	bne.w	800b98c <D80_GENERIC+0x3c>
 800bb74:	9b00      	ldr	r3, [sp, #0]
 800bb76:	300a      	adds	r0, #10
 800bb78:	f850 1c06 	ldr.w	r1, [r0, #-6]
 800bb7c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800bb7e:	f850 5c02 	ldr.w	r5, [r0, #-2]
 800bb82:	06b2      	lsls	r2, r6, #26
 800bb84:	f850 3c0a 	ldr.w	r3, [r0, #-10]
 800bb88:	f57f af33 	bpl.w	800b9f2 <D80_GENERIC+0xa2>
 800bb8c:	ba5b      	rev16	r3, r3
 800bb8e:	ba49      	rev16	r1, r1
 800bb90:	ba6d      	rev16	r5, r5
 800bb92:	e72e      	b.n	800b9f2 <D80_GENERIC+0xa2>
 800bb94:	4632      	mov	r2, r6
 800bb96:	9b03      	ldr	r3, [sp, #12]
 800bb98:	2000      	movs	r0, #0
 800bb9a:	6093      	str	r3, [r2, #8]
 800bb9c:	9b02      	ldr	r3, [sp, #8]
 800bb9e:	60d3      	str	r3, [r2, #12]
 800bba0:	9b01      	ldr	r3, [sp, #4]
 800bba2:	61d3      	str	r3, [r2, #28]
 800bba4:	9b04      	ldr	r3, [sp, #16]
 800bba6:	6113      	str	r3, [r2, #16]
 800bba8:	9b05      	ldr	r3, [sp, #20]
 800bbaa:	6153      	str	r3, [r2, #20]
 800bbac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbae:	6193      	str	r3, [r2, #24]
 800bbb0:	b00b      	add	sp, #44	; 0x2c
 800bbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb6:	bf00      	nop
 800bbb8:	002d0024 	.word	0x002d0024
 800bbbc:	001c0015 	.word	0x001c0015
 800bbc0:	000f000a 	.word	0x000f000a
 800bbc4:	00060003 	.word	0x00060003
 800bbc8:	0037003f 	.word	0x0037003f
 800bbcc:	00450049 	.word	0x00450049
 800bbd0:	00490045 	.word	0x00490045
 800bbd4:	003f0037 	.word	0x003f0037
 800bbd8:	00030006 	.word	0x00030006
 800bbdc:	000a000f 	.word	0x000a000f
 800bbe0:	0015001c 	.word	0x0015001c
 800bbe4:	0024002d 	.word	0x0024002d
 800bbe8:	20000000 	.word	0x20000000

0800bbec <D128_GENERIC>:
 800bbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf0:	b08d      	sub	sp, #52	; 0x34
 800bbf2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800bbf4:	9201      	str	r2, [sp, #4]
 800bbf6:	9109      	str	r1, [sp, #36]	; 0x24
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	6912      	ldr	r2, [r2, #16]
 800bbfc:	9206      	str	r2, [sp, #24]
 800bbfe:	460a      	mov	r2, r1
 800bc00:	6949      	ldr	r1, [r1, #20]
 800bc02:	4614      	mov	r4, r2
 800bc04:	9107      	str	r1, [sp, #28]
 800bc06:	4611      	mov	r1, r2
 800bc08:	6992      	ldr	r2, [r2, #24]
 800bc0a:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 800bc0e:	920b      	str	r2, [sp, #44]	; 0x2c
 800bc10:	68e2      	ldr	r2, [r4, #12]
 800bc12:	6889      	ldr	r1, [r1, #8]
 800bc14:	9202      	str	r2, [sp, #8]
 800bc16:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bc18:	9103      	str	r1, [sp, #12]
 800bc1a:	9208      	str	r2, [sp, #32]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f000 8180 	beq.w	800bf22 <D128_GENERIC+0x336>
 800bc22:	6a23      	ldr	r3, [r4, #32]
 800bc24:	4681      	mov	r9, r0
 800bc26:	49c8      	ldr	r1, [pc, #800]	; (800bf48 <D128_GENERIC+0x35c>)
 800bc28:	930a      	str	r3, [sp, #40]	; 0x28
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f8cd a010 	str.w	sl, [sp, #16]
 800bc30:	9305      	str	r3, [sp, #20]
 800bc32:	e15d      	b.n	800bef0 <D128_GENERIC+0x304>
 800bc34:	b2d2      	uxtb	r2, r2
 800bc36:	f899 b000 	ldrb.w	fp, [r9]
 800bc3a:	b213      	sxth	r3, r2
 800bc3c:	4255      	negs	r5, r2
 800bc3e:	f819 0002 	ldrb.w	r0, [r9, r2]
 800bc42:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800bc46:	009f      	lsls	r7, r3, #2
 800bc48:	eb09 0402 	add.w	r4, r9, r2
 800bc4c:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800bc50:	f819 8002 	ldrb.w	r8, [r9, r2]
 800bc54:	443b      	add	r3, r7
 800bc56:	1962      	adds	r2, r4, r5
 800bc58:	5d64      	ldrb	r4, [r4, r5]
 800bc5a:	eb02 0e03 	add.w	lr, r2, r3
 800bc5e:	0424      	lsls	r4, r4, #16
 800bc60:	5cd3      	ldrb	r3, [r2, r3]
 800bc62:	eb0e 0c05 	add.w	ip, lr, r5
 800bc66:	f81e 9015 	ldrb.w	r9, [lr, r5, lsl #1]
 800bc6a:	f81e 2005 	ldrb.w	r2, [lr, r5]
 800bc6e:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 800bc72:	eb0c 0e45 	add.w	lr, ip, r5, lsl #1
 800bc76:	f81c 8015 	ldrb.w	r8, [ip, r5, lsl #1]
 800bc7a:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 800bc7e:	eb0e 0c06 	add.w	ip, lr, r6
 800bc82:	f81e a006 	ldrb.w	sl, [lr, r6]
 800bc86:	0412      	lsls	r2, r2, #16
 800bc88:	445c      	add	r4, fp
 800bc8a:	eb0c 0e05 	add.w	lr, ip, r5
 800bc8e:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 800bc92:	f81c 3005 	ldrb.w	r3, [ip, r5]
 800bc96:	eb0e 0045 	add.w	r0, lr, r5, lsl #1
 800bc9a:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 800bc9e:	041b      	lsls	r3, r3, #16
 800bca0:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800bca4:	eb00 0b06 	add.w	fp, r0, r6
 800bca8:	5d80      	ldrb	r0, [r0, r6]
 800bcaa:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 800bcae:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800bcb2:	eb0b 0a05 	add.w	sl, fp, r5
 800bcb6:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 800bcba:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 800bcbe:	0436      	lsls	r6, r6, #16
 800bcc0:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 800bcc4:	f81a 5015 	ldrb.w	r5, [sl, r5, lsl #1]
 800bcc8:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 800bccc:	4442      	add	r2, r8
 800bcce:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 800bcd2:	44b9      	add	r9, r7
 800bcd4:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 800bcd8:	4473      	add	r3, lr
 800bcda:	442e      	add	r6, r5
 800bcdc:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800bce0:	b2e7      	uxtb	r7, r4
 800bce2:	f3c4 4507 	ubfx	r5, r4, #16, #8
 800bce6:	0e24      	lsrs	r4, r4, #24
 800bce8:	f851 b020 	ldr.w	fp, [r1, r0, lsl #2]
 800bcec:	fa5f fe82 	uxtb.w	lr, r2
 800bcf0:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800bcf4:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 800bcf8:	9804      	ldr	r0, [sp, #16]
 800bcfa:	f851 c025 	ldr.w	ip, [r1, r5, lsl #2]
 800bcfe:	4438      	add	r0, r7
 800bd00:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 800bd04:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 800bd08:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800bd0c:	4680      	mov	r8, r0
 800bd0e:	eb0b 2090 	add.w	r0, fp, r0, lsr #10
 800bd12:	f851 402a 	ldr.w	r4, [r1, sl, lsl #2]
 800bd16:	0e12      	lsrs	r2, r2, #24
 800bd18:	eb0c 2c90 	add.w	ip, ip, r0, lsr #10
 800bd1c:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800bd20:	fa5f fa83 	uxtb.w	sl, r3
 800bd24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bd28:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800bd2c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800bd30:	f851 b02a 	ldr.w	fp, [r1, sl, lsl #2]
 800bd34:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800bd38:	eb0e 2e95 	add.w	lr, lr, r5, lsr #10
 800bd3c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800bd40:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800bd44:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800bd48:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800bd4c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800bd50:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800bd54:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800bd58:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800bd5c:	f3c4 0809 	ubfx	r8, r4, #0, #10
 800bd60:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800bd64:	f851 402c 	ldr.w	r4, [r1, ip, lsl #2]
 800bd68:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 800bd6c:	0e1b      	lsrs	r3, r3, #24
 800bd6e:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 800bd72:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800bd76:	f851 a02c 	ldr.w	sl, [r1, ip, lsl #2]
 800bd7a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bd7e:	eb04 2c9b 	add.w	ip, r4, fp, lsr #10
 800bd82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bd86:	ea48 4e0e 	orr.w	lr, r8, lr, lsl #16
 800bd8a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800bd8e:	eb0a 2a9c 	add.w	sl, sl, ip, lsr #10
 800bd92:	f3cc 0409 	ubfx	r4, ip, #0, #10
 800bd96:	fa5f f886 	uxtb.w	r8, r6
 800bd9a:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800bd9e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800bda2:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 800bda6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800bdaa:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800bdae:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 800bdb2:	eb08 2893 	add.w	r8, r8, r3, lsr #10
 800bdb6:	f3c6 4407 	ubfx	r4, r6, #16, #8
 800bdba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bdbe:	0e36      	lsrs	r6, r6, #24
 800bdc0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800bdc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bdc8:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800bdcc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800bdd0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800bdd4:	ea43 4a0a 	orr.w	sl, r3, sl, lsl #16
 800bdd8:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800bddc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800bde0:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800bde4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800bde8:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 800bdec:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800bdf0:	0ab2      	lsrs	r2, r6, #10
 800bdf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bdf6:	9204      	str	r2, [sp, #16]
 800bdf8:	9c02      	ldr	r4, [sp, #8]
 800bdfa:	4a54      	ldr	r2, [pc, #336]	; (800bf4c <D128_GENERIC+0x360>)
 800bdfc:	fb20 4602 	smlad	r6, r0, r2, r4
 800be00:	4a53      	ldr	r2, [pc, #332]	; (800bf50 <D128_GENERIC+0x364>)
 800be02:	fb25 6602 	smlad	r6, r5, r2, r6
 800be06:	4a53      	ldr	r2, [pc, #332]	; (800bf54 <D128_GENERIC+0x368>)
 800be08:	fb2e 6602 	smlad	r6, lr, r2, r6
 800be0c:	4a52      	ldr	r2, [pc, #328]	; (800bf58 <D128_GENERIC+0x36c>)
 800be0e:	fb27 6602 	smlad	r6, r7, r2, r6
 800be12:	4a52      	ldr	r2, [pc, #328]	; (800bf5c <D128_GENERIC+0x370>)
 800be14:	fb2b 6602 	smlad	r6, fp, r2, r6
 800be18:	4a51      	ldr	r2, [pc, #324]	; (800bf60 <D128_GENERIC+0x374>)
 800be1a:	fb2a 6602 	smlad	r6, sl, r2, r6
 800be1e:	4a51      	ldr	r2, [pc, #324]	; (800bf64 <D128_GENERIC+0x378>)
 800be20:	fb28 6202 	smlad	r2, r8, r2, r6
 800be24:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800be28:	fb23 2606 	smlad	r6, r3, r6, r2
 800be2c:	4a4e      	ldr	r2, [pc, #312]	; (800bf68 <D128_GENERIC+0x37c>)
 800be2e:	9c03      	ldr	r4, [sp, #12]
 800be30:	fb20 4202 	smlad	r2, r0, r2, r4
 800be34:	4c4d      	ldr	r4, [pc, #308]	; (800bf6c <D128_GENERIC+0x380>)
 800be36:	fb25 2404 	smlad	r4, r5, r4, r2
 800be3a:	4a4d      	ldr	r2, [pc, #308]	; (800bf70 <D128_GENERIC+0x384>)
 800be3c:	fb2e 4202 	smlad	r2, lr, r2, r4
 800be40:	4c4c      	ldr	r4, [pc, #304]	; (800bf74 <D128_GENERIC+0x388>)
 800be42:	fb27 2204 	smlad	r2, r7, r4, r2
 800be46:	4c4c      	ldr	r4, [pc, #304]	; (800bf78 <D128_GENERIC+0x38c>)
 800be48:	fb2b 2404 	smlad	r4, fp, r4, r2
 800be4c:	4a4b      	ldr	r2, [pc, #300]	; (800bf7c <D128_GENERIC+0x390>)
 800be4e:	fb2a 4402 	smlad	r4, sl, r2, r4
 800be52:	4a4b      	ldr	r2, [pc, #300]	; (800bf80 <D128_GENERIC+0x394>)
 800be54:	fb28 4202 	smlad	r2, r8, r2, r4
 800be58:	4c4a      	ldr	r4, [pc, #296]	; (800bf84 <D128_GENERIC+0x398>)
 800be5a:	fb23 2204 	smlad	r2, r3, r4, r2
 800be5e:	f04f 0c01 	mov.w	ip, #1
 800be62:	9202      	str	r2, [sp, #8]
 800be64:	fb20 f00c 	smuad	r0, r0, ip
 800be68:	4a47      	ldr	r2, [pc, #284]	; (800bf88 <D128_GENERIC+0x39c>)
 800be6a:	fb25 0502 	smlad	r5, r5, r2, r0
 800be6e:	4a47      	ldr	r2, [pc, #284]	; (800bf8c <D128_GENERIC+0x3a0>)
 800be70:	fb2e 5e02 	smlad	lr, lr, r2, r5
 800be74:	4a46      	ldr	r2, [pc, #280]	; (800bf90 <D128_GENERIC+0x3a4>)
 800be76:	fb27 e202 	smlad	r2, r7, r2, lr
 800be7a:	4c46      	ldr	r4, [pc, #280]	; (800bf94 <D128_GENERIC+0x3a8>)
 800be7c:	fb2b 2204 	smlad	r2, fp, r4, r2
 800be80:	4c45      	ldr	r4, [pc, #276]	; (800bf98 <D128_GENERIC+0x3ac>)
 800be82:	fb2a 2204 	smlad	r2, sl, r4, r2
 800be86:	4c45      	ldr	r4, [pc, #276]	; (800bf9c <D128_GENERIC+0x3b0>)
 800be88:	fb28 2204 	smlad	r2, r8, r4, r2
 800be8c:	4c44      	ldr	r4, [pc, #272]	; (800bfa0 <D128_GENERIC+0x3b4>)
 800be8e:	fb23 2304 	smlad	r3, r3, r4, r2
 800be92:	9303      	str	r3, [sp, #12]
 800be94:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800be98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be9a:	b193      	cbz	r3, 800bec2 <D128_GENERIC+0x2d6>
 800be9c:	9a06      	ldr	r2, [sp, #24]
 800be9e:	9807      	ldr	r0, [sp, #28]
 800bea0:	4432      	add	r2, r6
 800bea2:	9607      	str	r6, [sp, #28]
 800bea4:	461e      	mov	r6, r3
 800bea6:	1a12      	subs	r2, r2, r0
 800bea8:	17d5      	asrs	r5, r2, #31
 800beaa:	fba2 2303 	umull	r2, r3, r2, r3
 800beae:	fb06 3305 	mla	r3, r6, r5, r3
 800beb2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800beb6:	f143 0300 	adc.w	r3, r3, #0
 800beba:	fa03 f30c 	lsl.w	r3, r3, ip
 800bebe:	461e      	mov	r6, r3
 800bec0:	9306      	str	r3, [sp, #24]
 800bec2:	9c01      	ldr	r4, [sp, #4]
 800bec4:	01f6      	lsls	r6, r6, #7
 800bec6:	9d05      	ldr	r5, [sp, #20]
 800bec8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800becc:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800bece:	2300      	movs	r3, #0
 800bed0:	9f08      	ldr	r7, [sp, #32]
 800bed2:	fb05 f000 	mul.w	r0, r5, r0
 800bed6:	3501      	adds	r5, #1
 800bed8:	fbc7 2306 	smlal	r2, r3, r7, r6
 800bedc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bede:	109b      	asrs	r3, r3, #2
 800bee0:	9505      	str	r5, [sp, #20]
 800bee2:	f303 030f 	ssat	r3, #16, r3
 800bee6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 800beea:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800beec:	42ab      	cmp	r3, r5
 800beee:	dd16      	ble.n	800bf1e <D128_GENERIC+0x332>
 800bef0:	9b01      	ldr	r3, [sp, #4]
 800bef2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bef4:	2a01      	cmp	r2, #1
 800bef6:	f47f ae9d 	bne.w	800bc34 <D128_GENERIC+0x48>
 800befa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800befc:	f109 0204 	add.w	r2, r9, #4
 800bf00:	f109 0510 	add.w	r5, r9, #16
 800bf04:	f8d9 4000 	ldr.w	r4, [r9]
 800bf08:	0680      	lsls	r0, r0, #26
 800bf0a:	ca4c      	ldmia	r2, {r2, r3, r6}
 800bf0c:	d505      	bpl.n	800bf1a <D128_GENERIC+0x32e>
 800bf0e:	ba64      	rev16	r4, r4
 800bf10:	ba52      	rev16	r2, r2
 800bf12:	ba5b      	rev16	r3, r3
 800bf14:	ba76      	rev16	r6, r6
 800bf16:	46a9      	mov	r9, r5
 800bf18:	e6e0      	b.n	800bcdc <D128_GENERIC+0xf0>
 800bf1a:	46a9      	mov	r9, r5
 800bf1c:	e6de      	b.n	800bcdc <D128_GENERIC+0xf0>
 800bf1e:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bf22:	9a01      	ldr	r2, [sp, #4]
 800bf24:	2000      	movs	r0, #0
 800bf26:	9903      	ldr	r1, [sp, #12]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	f8c2 a01c 	str.w	sl, [r2, #28]
 800bf2e:	6091      	str	r1, [r2, #8]
 800bf30:	9902      	ldr	r1, [sp, #8]
 800bf32:	60d1      	str	r1, [r2, #12]
 800bf34:	9907      	ldr	r1, [sp, #28]
 800bf36:	9a06      	ldr	r2, [sp, #24]
 800bf38:	6159      	str	r1, [r3, #20]
 800bf3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf3c:	611a      	str	r2, [r3, #16]
 800bf3e:	6199      	str	r1, [r3, #24]
 800bf40:	b00d      	add	sp, #52	; 0x34
 800bf42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf46:	bf00      	nop
 800bf48:	20000000 	.word	0x20000000
 800bf4c:	00780069 	.word	0x00780069
 800bf50:	005b004e 	.word	0x005b004e
 800bf54:	00420037 	.word	0x00420037
 800bf58:	002d0024 	.word	0x002d0024
 800bf5c:	001c0015 	.word	0x001c0015
 800bf60:	000f000a 	.word	0x000f000a
 800bf64:	00060003 	.word	0x00060003
 800bf68:	00880096 	.word	0x00880096
 800bf6c:	00a200ac 	.word	0x00a200ac
 800bf70:	00b400ba 	.word	0x00b400ba
 800bf74:	00be00c0 	.word	0x00be00c0
 800bf78:	00c000be 	.word	0x00c000be
 800bf7c:	00ba00b4 	.word	0x00ba00b4
 800bf80:	00ac00a2 	.word	0x00ac00a2
 800bf84:	00960088 	.word	0x00960088
 800bf88:	00030006 	.word	0x00030006
 800bf8c:	000a000f 	.word	0x000a000f
 800bf90:	0015001c 	.word	0x0015001c
 800bf94:	0024002d 	.word	0x0024002d
 800bf98:	00370042 	.word	0x00370042
 800bf9c:	004e005b 	.word	0x004e005b
 800bfa0:	00690078 	.word	0x00690078

0800bfa4 <D16_1CH_HTONS_VOL_HP>:
 800bfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa8:	4692      	mov	sl, r2
 800bfaa:	b087      	sub	sp, #28
 800bfac:	4681      	mov	r9, r0
 800bfae:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800bfb0:	f8da 3018 	ldr.w	r3, [sl, #24]
 800bfb4:	f8da 000c 	ldr.w	r0, [sl, #12]
 800bfb8:	9303      	str	r3, [sp, #12]
 800bfba:	f8da 6010 	ldr.w	r6, [sl, #16]
 800bfbe:	f8da 5014 	ldr.w	r5, [sl, #20]
 800bfc2:	f8da 301c 	ldr.w	r3, [sl, #28]
 800bfc6:	f8da 4008 	ldr.w	r4, [sl, #8]
 800bfca:	9004      	str	r0, [sp, #16]
 800bfcc:	f8da b030 	ldr.w	fp, [sl, #48]	; 0x30
 800bfd0:	f8da e020 	ldr.w	lr, [sl, #32]
 800bfd4:	2a00      	cmp	r2, #0
 800bfd6:	d05a      	beq.n	800c08e <D16_1CH_HTONS_VOL_HP+0xea>
 800bfd8:	f1a1 0802 	sub.w	r8, r1, #2
 800bfdc:	eb09 0242 	add.w	r2, r9, r2, lsl #1
 800bfe0:	f8cd b008 	str.w	fp, [sp, #8]
 800bfe4:	46cb      	mov	fp, r9
 800bfe6:	f8cd a014 	str.w	sl, [sp, #20]
 800bfea:	46c2      	mov	sl, r8
 800bfec:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 800c09c <D16_1CH_HTONS_VOL_HP+0xf8>
 800bff0:	9201      	str	r2, [sp, #4]
 800bff2:	f85b 2b02 	ldr.w	r2, [fp], #2
 800bff6:	ba52      	rev16	r2, r2
 800bff8:	b2d0      	uxtb	r0, r2
 800bffa:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800bffe:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 800c002:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 800c006:	4413      	add	r3, r2
 800c008:	eb00 2093 	add.w	r0, r0, r3, lsr #10
 800c00c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c010:	f3c0 0109 	ubfx	r1, r0, #0, #10
 800c014:	0a83      	lsrs	r3, r0, #10
 800c016:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800c01a:	491e      	ldr	r1, [pc, #120]	; (800c094 <D16_1CH_HTONS_VOL_HP+0xf0>)
 800c01c:	fb22 4101 	smlad	r1, r2, r1, r4
 800c020:	481d      	ldr	r0, [pc, #116]	; (800c098 <D16_1CH_HTONS_VOL_HP+0xf4>)
 800c022:	fb22 f400 	smuad	r4, r2, r0
 800c026:	f5a1 6200 	sub.w	r2, r1, #2048	; 0x800
 800c02a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c02e:	f04f 0900 	mov.w	r9, #0
 800c032:	1990      	adds	r0, r2, r6
 800c034:	1b40      	subs	r0, r0, r5
 800c036:	4615      	mov	r5, r2
 800c038:	17c7      	asrs	r7, r0, #31
 800c03a:	fba0 010e 	umull	r0, r1, r0, lr
 800c03e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800c042:	fb0e 1107 	mla	r1, lr, r7, r1
 800c046:	f141 0100 	adc.w	r1, r1, #0
 800c04a:	0448      	lsls	r0, r1, #17
 800c04c:	004e      	lsls	r6, r1, #1
 800c04e:	9902      	ldr	r1, [sp, #8]
 800c050:	fbc0 8901 	smlal	r8, r9, r0, r1
 800c054:	ea4f 01a9 	mov.w	r1, r9, asr #2
 800c058:	f301 010f 	ssat	r1, #16, r1
 800c05c:	f82a 1f02 	strh.w	r1, [sl, #2]!
 800c060:	9901      	ldr	r1, [sp, #4]
 800c062:	458b      	cmp	fp, r1
 800c064:	d1c5      	bne.n	800bff2 <D16_1CH_HTONS_VOL_HP+0x4e>
 800c066:	f8dd a014 	ldr.w	sl, [sp, #20]
 800c06a:	9904      	ldr	r1, [sp, #16]
 800c06c:	2000      	movs	r0, #0
 800c06e:	f8ca 301c 	str.w	r3, [sl, #28]
 800c072:	9b03      	ldr	r3, [sp, #12]
 800c074:	f8ca 4008 	str.w	r4, [sl, #8]
 800c078:	f8ca 100c 	str.w	r1, [sl, #12]
 800c07c:	f8ca 6010 	str.w	r6, [sl, #16]
 800c080:	f8ca 2014 	str.w	r2, [sl, #20]
 800c084:	f8ca 3018 	str.w	r3, [sl, #24]
 800c088:	b007      	add	sp, #28
 800c08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c08e:	462a      	mov	r2, r5
 800c090:	4601      	mov	r1, r0
 800c092:	e7eb      	b.n	800c06c <D16_1CH_HTONS_VOL_HP+0xc8>
 800c094:	00030001 	.word	0x00030001
 800c098:	00010003 	.word	0x00010003
 800c09c:	20000000 	.word	0x20000000

0800c0a0 <D24_1CH_HTONS_VOL_HP>:
 800c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a4:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c0a6:	b087      	sub	sp, #28
 800c0a8:	4616      	mov	r6, r2
 800c0aa:	6914      	ldr	r4, [r2, #16]
 800c0ac:	9302      	str	r3, [sp, #8]
 800c0ae:	9205      	str	r2, [sp, #20]
 800c0b0:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800c0b4:	6b37      	ldr	r7, [r6, #48]	; 0x30
 800c0b6:	6992      	ldr	r2, [r2, #24]
 800c0b8:	9d02      	ldr	r5, [sp, #8]
 800c0ba:	9204      	str	r2, [sp, #16]
 800c0bc:	68b3      	ldr	r3, [r6, #8]
 800c0be:	69f2      	ldr	r2, [r6, #28]
 800c0c0:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800c0c4:	9703      	str	r7, [sp, #12]
 800c0c6:	f8d6 a020 	ldr.w	sl, [r6, #32]
 800c0ca:	2d00      	cmp	r5, #0
 800c0cc:	d076      	beq.n	800c1bc <D24_1CH_HTONS_VOL_HP+0x11c>
 800c0ce:	f04f 0e00 	mov.w	lr, #0
 800c0d2:	f1a1 0b02 	sub.w	fp, r1, #2
 800c0d6:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 800c1cc <D24_1CH_HTONS_VOL_HP+0x12c>
 800c0da:	f8cd 8004 	str.w	r8, [sp, #4]
 800c0de:	e052      	b.n	800c186 <D24_1CH_HTONS_VOL_HP+0xe6>
 800c0e0:	7801      	ldrb	r1, [r0, #0]
 800c0e2:	3002      	adds	r0, #2
 800c0e4:	7847      	ldrb	r7, [r0, #1]
 800c0e6:	0209      	lsls	r1, r1, #8
 800c0e8:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800c0ec:	eb01 4707 	add.w	r7, r1, r7, lsl #16
 800c0f0:	442f      	add	r7, r5
 800c0f2:	b2fd      	uxtb	r5, r7
 800c0f4:	f3c7 2107 	ubfx	r1, r7, #8, #8
 800c0f8:	0c3f      	lsrs	r7, r7, #16
 800c0fa:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 800c0fe:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
 800c102:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800c106:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 800c10a:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800c10e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c112:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800c116:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800c11a:	9e01      	ldr	r6, [sp, #4]
 800c11c:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800c120:	4928      	ldr	r1, [pc, #160]	; (800c1c4 <D24_1CH_HTONS_VOL_HP+0x124>)
 800c122:	fb25 6701 	smlad	r7, r5, r1, r6
 800c126:	4928      	ldr	r1, [pc, #160]	; (800c1c8 <D24_1CH_HTONS_VOL_HP+0x128>)
 800c128:	fb25 3801 	smlad	r8, r5, r1, r3
 800c12c:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800c130:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800c134:	eb08 0346 	add.w	r3, r8, r6, lsl #1
 800c138:	9301      	str	r3, [sp, #4]
 800c13a:	2301      	movs	r3, #1
 800c13c:	fb25 f503 	smuad	r5, r5, r3
 800c140:	f5a7 51d8 	sub.w	r1, r7, #6912	; 0x1b00
 800c144:	449e      	add	lr, r3
 800c146:	1973      	adds	r3, r6, r5
 800c148:	f04f 0800 	mov.w	r8, #0
 800c14c:	440c      	add	r4, r1
 800c14e:	eba4 0409 	sub.w	r4, r4, r9
 800c152:	4689      	mov	r9, r1
 800c154:	17e7      	asrs	r7, r4, #31
 800c156:	fba4 450a 	umull	r4, r5, r4, sl
 800c15a:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800c15e:	fb0a 5507 	mla	r5, sl, r7, r5
 800c162:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800c166:	f145 0500 	adc.w	r5, r5, #0
 800c16a:	03ee      	lsls	r6, r5, #15
 800c16c:	006c      	lsls	r4, r5, #1
 800c16e:	9d03      	ldr	r5, [sp, #12]
 800c170:	fbc5 7806 	smlal	r7, r8, r5, r6
 800c174:	4647      	mov	r7, r8
 800c176:	10bd      	asrs	r5, r7, #2
 800c178:	f305 050f 	ssat	r5, #16, r5
 800c17c:	f82b 5f02 	strh.w	r5, [fp, #2]!
 800c180:	9d02      	ldr	r5, [sp, #8]
 800c182:	45ae      	cmp	lr, r5
 800c184:	d00b      	beq.n	800c19e <D24_1CH_HTONS_VOL_HP+0xfe>
 800c186:	f01e 0f01 	tst.w	lr, #1
 800c18a:	d0a9      	beq.n	800c0e0 <D24_1CH_HTONS_VOL_HP+0x40>
 800c18c:	78c1      	ldrb	r1, [r0, #3]
 800c18e:	7887      	ldrb	r7, [r0, #2]
 800c190:	0209      	lsls	r1, r1, #8
 800c192:	f810 5b04 	ldrb.w	r5, [r0], #4
 800c196:	eb01 4707 	add.w	r7, r1, r7, lsl #16
 800c19a:	442f      	add	r7, r5
 800c19c:	e7a9      	b.n	800c0f2 <D24_1CH_HTONS_VOL_HP+0x52>
 800c19e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c1a2:	9d05      	ldr	r5, [sp, #20]
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	6169      	str	r1, [r5, #20]
 800c1a8:	9904      	ldr	r1, [sp, #16]
 800c1aa:	60ab      	str	r3, [r5, #8]
 800c1ac:	f8c5 800c 	str.w	r8, [r5, #12]
 800c1b0:	61ea      	str	r2, [r5, #28]
 800c1b2:	612c      	str	r4, [r5, #16]
 800c1b4:	61a9      	str	r1, [r5, #24]
 800c1b6:	b007      	add	sp, #28
 800c1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1bc:	4649      	mov	r1, r9
 800c1be:	4635      	mov	r5, r6
 800c1c0:	e7f0      	b.n	800c1a4 <D24_1CH_HTONS_VOL_HP+0x104>
 800c1c2:	bf00      	nop
 800c1c4:	00030001 	.word	0x00030001
 800c1c8:	00060007 	.word	0x00060007
 800c1cc:	20000000 	.word	0x20000000

0800c1d0 <D32_1CH_HTONS_VOL_HP>:
 800c1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	4693      	mov	fp, r2
 800c1d6:	b087      	sub	sp, #28
 800c1d8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800c1da:	f8db 3018 	ldr.w	r3, [fp, #24]
 800c1de:	f8db 5030 	ldr.w	r5, [fp, #48]	; 0x30
 800c1e2:	9304      	str	r3, [sp, #16]
 800c1e4:	f8db 4010 	ldr.w	r4, [fp, #16]
 800c1e8:	f8db c014 	ldr.w	ip, [fp, #20]
 800c1ec:	f8db 601c 	ldr.w	r6, [fp, #28]
 800c1f0:	f8db 3008 	ldr.w	r3, [fp, #8]
 800c1f4:	f8db e00c 	ldr.w	lr, [fp, #12]
 800c1f8:	9502      	str	r5, [sp, #8]
 800c1fa:	f8db a020 	ldr.w	sl, [fp, #32]
 800c1fe:	2a00      	cmp	r2, #0
 800c200:	d07d      	beq.n	800c2fe <D32_1CH_HTONS_VOL_HP+0x12e>
 800c202:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c206:	9101      	str	r1, [sp, #4]
 800c208:	f8cd b014 	str.w	fp, [sp, #20]
 800c20c:	4621      	mov	r1, r4
 800c20e:	4f3d      	ldr	r7, [pc, #244]	; (800c304 <D32_1CH_HTONS_VOL_HP+0x134>)
 800c210:	4693      	mov	fp, r2
 800c212:	f8cd a00c 	str.w	sl, [sp, #12]
 800c216:	f850 2b04 	ldr.w	r2, [r0], #4
 800c21a:	fa92 f992 	rev16.w	r9, r2
 800c21e:	fa5f f889 	uxtb.w	r8, r9
 800c222:	f3c9 2207 	ubfx	r2, r9, #8, #8
 800c226:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800c22a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800c22e:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 800c232:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800c236:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 800c23a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800c23e:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 800c242:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800c246:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c24a:	4c2f      	ldr	r4, [pc, #188]	; (800c308 <D32_1CH_HTONS_VOL_HP+0x138>)
 800c24c:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800c250:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c254:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800c258:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c25c:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 800c260:	f3c6 0809 	ubfx	r8, r6, #0, #10
 800c264:	ea48 4505 	orr.w	r5, r8, r5, lsl #16
 800c268:	fb22 ee04 	smlad	lr, r2, r4, lr
 800c26c:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 800c270:	fb25 e904 	smlad	r9, r5, r4, lr
 800c274:	4c25      	ldr	r4, [pc, #148]	; (800c30c <D32_1CH_HTONS_VOL_HP+0x13c>)
 800c276:	fb22 3e04 	smlad	lr, r2, r4, r3
 800c27a:	4b25      	ldr	r3, [pc, #148]	; (800c310 <D32_1CH_HTONS_VOL_HP+0x140>)
 800c27c:	fb25 ee03 	smlad	lr, r5, r3, lr
 800c280:	2301      	movs	r3, #1
 800c282:	fb22 f203 	smuad	r2, r2, r3
 800c286:	4b23      	ldr	r3, [pc, #140]	; (800c314 <D32_1CH_HTONS_VOL_HP+0x144>)
 800c288:	fb25 2303 	smlad	r3, r5, r3, r2
 800c28c:	f5a9 4280 	sub.w	r2, r9, #16384	; 0x4000
 800c290:	f04f 0a00 	mov.w	sl, #0
 800c294:	4411      	add	r1, r2
 800c296:	eba1 040c 	sub.w	r4, r1, ip
 800c29a:	9903      	ldr	r1, [sp, #12]
 800c29c:	4694      	mov	ip, r2
 800c29e:	ea4f 79e4 	mov.w	r9, r4, asr #31
 800c2a2:	fba4 4501 	umull	r4, r5, r4, r1
 800c2a6:	fb01 5509 	mla	r5, r1, r9, r5
 800c2aa:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800c2ae:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800c2b2:	9c02      	ldr	r4, [sp, #8]
 800c2b4:	f145 0500 	adc.w	r5, r5, #0
 800c2b8:	ea4f 3885 	mov.w	r8, r5, lsl #14
 800c2bc:	0069      	lsls	r1, r5, #1
 800c2be:	fbc8 9a04 	smlal	r9, sl, r8, r4
 800c2c2:	9c01      	ldr	r4, [sp, #4]
 800c2c4:	ea4f 05aa 	mov.w	r5, sl, asr #2
 800c2c8:	f305 050f 	ssat	r5, #16, r5
 800c2cc:	f824 5b02 	strh.w	r5, [r4], #2
 800c2d0:	455c      	cmp	r4, fp
 800c2d2:	9401      	str	r4, [sp, #4]
 800c2d4:	d19f      	bne.n	800c216 <D32_1CH_HTONS_VOL_HP+0x46>
 800c2d6:	460c      	mov	r4, r1
 800c2d8:	f8dd b014 	ldr.w	fp, [sp, #20]
 800c2dc:	f8cb 3008 	str.w	r3, [fp, #8]
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	9b04      	ldr	r3, [sp, #16]
 800c2e4:	f8cb e00c 	str.w	lr, [fp, #12]
 800c2e8:	f8cb 601c 	str.w	r6, [fp, #28]
 800c2ec:	f8cb 4010 	str.w	r4, [fp, #16]
 800c2f0:	f8cb 2014 	str.w	r2, [fp, #20]
 800c2f4:	f8cb 3018 	str.w	r3, [fp, #24]
 800c2f8:	b007      	add	sp, #28
 800c2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2fe:	4662      	mov	r2, ip
 800c300:	e7ec      	b.n	800c2dc <D32_1CH_HTONS_VOL_HP+0x10c>
 800c302:	bf00      	nop
 800c304:	20000000 	.word	0x20000000
 800c308:	00060003 	.word	0x00060003
 800c30c:	000a000c 	.word	0x000a000c
 800c310:	000c000a 	.word	0x000c000a
 800c314:	00030006 	.word	0x00030006

0800c318 <D48_1CH_HTONS_VOL_HP>:
 800c318:	4613      	mov	r3, r2
 800c31a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31e:	461c      	mov	r4, r3
 800c320:	b087      	sub	sp, #28
 800c322:	4680      	mov	r8, r0
 800c324:	691e      	ldr	r6, [r3, #16]
 800c326:	4610      	mov	r0, r2
 800c328:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800c32c:	699b      	ldr	r3, [r3, #24]
 800c32e:	9205      	str	r2, [sp, #20]
 800c330:	9304      	str	r3, [sp, #16]
 800c332:	69c5      	ldr	r5, [r0, #28]
 800c334:	6883      	ldr	r3, [r0, #8]
 800c336:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800c33a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800c33c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800c33e:	f8d4 b020 	ldr.w	fp, [r4, #32]
 800c342:	9002      	str	r0, [sp, #8]
 800c344:	2a00      	cmp	r2, #0
 800c346:	f000 8097 	beq.w	800c478 <D48_1CH_HTONS_VOL_HP+0x160>
 800c34a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c34e:	468c      	mov	ip, r1
 800c350:	4c4a      	ldr	r4, [pc, #296]	; (800c47c <D48_1CH_HTONS_VOL_HP+0x164>)
 800c352:	4619      	mov	r1, r3
 800c354:	4640      	mov	r0, r8
 800c356:	9203      	str	r2, [sp, #12]
 800c358:	f8cd 9004 	str.w	r9, [sp, #4]
 800c35c:	6803      	ldr	r3, [r0, #0]
 800c35e:	3006      	adds	r0, #6
 800c360:	f850 2c02 	ldr.w	r2, [r0, #-2]
 800c364:	ba5b      	rev16	r3, r3
 800c366:	fa92 fa92 	rev16.w	sl, r2
 800c36a:	fa5f f883 	uxtb.w	r8, r3
 800c36e:	f3c3 2707 	ubfx	r7, r3, #8, #8
 800c372:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c376:	0e1b      	lsrs	r3, r3, #24
 800c378:	f854 9028 	ldr.w	r9, [r4, r8, lsl #2]
 800c37c:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800c380:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800c384:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 800c388:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800c38c:	fa5f f28a 	uxtb.w	r2, sl
 800c390:	eb07 2799 	add.w	r7, r7, r9, lsr #10
 800c394:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 800c398:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c39c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800c3a0:	eb05 2897 	add.w	r8, r5, r7, lsr #10
 800c3a4:	f854 502a 	ldr.w	r5, [r4, sl, lsl #2]
 800c3a8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c3ac:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 800c3b0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c3b4:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 800c3b8:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 800c3bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3c0:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 800c3c4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c3c8:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 800c3cc:	f3c5 0309 	ubfx	r3, r5, #0, #10
 800c3d0:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800c3d4:	4b2a      	ldr	r3, [pc, #168]	; (800c480 <D48_1CH_HTONS_VOL_HP+0x168>)
 800c3d6:	fb27 ea03 	smlad	sl, r7, r3, lr
 800c3da:	4b2a      	ldr	r3, [pc, #168]	; (800c484 <D48_1CH_HTONS_VOL_HP+0x16c>)
 800c3dc:	fb28 aa03 	smlad	sl, r8, r3, sl
 800c3e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c3e4:	fb22 aa03 	smlad	sl, r2, r3, sl
 800c3e8:	4b27      	ldr	r3, [pc, #156]	; (800c488 <D48_1CH_HTONS_VOL_HP+0x170>)
 800c3ea:	fb27 1e03 	smlad	lr, r7, r3, r1
 800c3ee:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800c3f2:	fb28 ee03 	smlad	lr, r8, r3, lr
 800c3f6:	4b25      	ldr	r3, [pc, #148]	; (800c48c <D48_1CH_HTONS_VOL_HP+0x174>)
 800c3f8:	fb22 ee03 	smlad	lr, r2, r3, lr
 800c3fc:	f04f 0901 	mov.w	r9, #1
 800c400:	fb27 f709 	smuad	r7, r7, r9
 800c404:	4b22      	ldr	r3, [pc, #136]	; (800c490 <D48_1CH_HTONS_VOL_HP+0x178>)
 800c406:	fb28 7803 	smlad	r8, r8, r3, r7
 800c40a:	4b22      	ldr	r3, [pc, #136]	; (800c494 <D48_1CH_HTONS_VOL_HP+0x17c>)
 800c40c:	fb22 8103 	smlad	r1, r2, r3, r8
 800c410:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 800c414:	9b01      	ldr	r3, [sp, #4]
 800c416:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c41a:	eb0a 0206 	add.w	r2, sl, r6
 800c41e:	f8cd a004 	str.w	sl, [sp, #4]
 800c422:	1ad2      	subs	r2, r2, r3
 800c424:	17d7      	asrs	r7, r2, #31
 800c426:	fba2 230b 	umull	r2, r3, r2, fp
 800c42a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c42e:	fb0b 3307 	mla	r3, fp, r7, r3
 800c432:	f143 0300 	adc.w	r3, r3, #0
 800c436:	031a      	lsls	r2, r3, #12
 800c438:	fa03 f609 	lsl.w	r6, r3, r9
 800c43c:	9b02      	ldr	r3, [sp, #8]
 800c43e:	f04f 0900 	mov.w	r9, #0
 800c442:	fbc2 8903 	smlal	r8, r9, r2, r3
 800c446:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800c44a:	f303 030f 	ssat	r3, #16, r3
 800c44e:	f82c 3b02 	strh.w	r3, [ip], #2
 800c452:	9b03      	ldr	r3, [sp, #12]
 800c454:	459c      	cmp	ip, r3
 800c456:	d181      	bne.n	800c35c <D48_1CH_HTONS_VOL_HP+0x44>
 800c458:	460b      	mov	r3, r1
 800c45a:	9905      	ldr	r1, [sp, #20]
 800c45c:	2000      	movs	r0, #0
 800c45e:	460a      	mov	r2, r1
 800c460:	608b      	str	r3, [r1, #8]
 800c462:	f8c1 e00c 	str.w	lr, [r1, #12]
 800c466:	61cd      	str	r5, [r1, #28]
 800c468:	610e      	str	r6, [r1, #16]
 800c46a:	f8c1 a014 	str.w	sl, [r1, #20]
 800c46e:	9904      	ldr	r1, [sp, #16]
 800c470:	6191      	str	r1, [r2, #24]
 800c472:	b007      	add	sp, #28
 800c474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c478:	46ca      	mov	sl, r9
 800c47a:	e7ee      	b.n	800c45a <D48_1CH_HTONS_VOL_HP+0x142>
 800c47c:	20000000 	.word	0x20000000
 800c480:	000f000a 	.word	0x000f000a
 800c484:	00060003 	.word	0x00060003
 800c488:	00150019 	.word	0x00150019
 800c48c:	00190015 	.word	0x00190015
 800c490:	00030006 	.word	0x00030006
 800c494:	000a000f 	.word	0x000a000f

0800c498 <D64_1CH_HTONS_VOL_HP>:
 800c498:	4613      	mov	r3, r2
 800c49a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49e:	f8d3 c014 	ldr.w	ip, [r3, #20]
 800c4a2:	461d      	mov	r5, r3
 800c4a4:	b087      	sub	sp, #28
 800c4a6:	699b      	ldr	r3, [r3, #24]
 800c4a8:	462e      	mov	r6, r5
 800c4aa:	69ef      	ldr	r7, [r5, #28]
 800c4ac:	9304      	str	r3, [sp, #16]
 800c4ae:	4614      	mov	r4, r2
 800c4b0:	68ab      	ldr	r3, [r5, #8]
 800c4b2:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800c4b6:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800c4b8:	9205      	str	r2, [sp, #20]
 800c4ba:	9501      	str	r5, [sp, #4]
 800c4bc:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800c4be:	6a35      	ldr	r5, [r6, #32]
 800c4c0:	6924      	ldr	r4, [r4, #16]
 800c4c2:	9502      	str	r5, [sp, #8]
 800c4c4:	2a00      	cmp	r2, #0
 800c4c6:	f000 80ae 	beq.w	800c626 <D64_1CH_HTONS_VOL_HP+0x18e>
 800c4ca:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c4ce:	4e57      	ldr	r6, [pc, #348]	; (800c62c <D64_1CH_HTONS_VOL_HP+0x194>)
 800c4d0:	461d      	mov	r5, r3
 800c4d2:	9203      	str	r2, [sp, #12]
 800c4d4:	f850 2b08 	ldr.w	r2, [r0], #8
 800c4d8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c4dc:	fa92 f892 	rev16.w	r8, r2
 800c4e0:	fa93 fb93 	rev16.w	fp, r3
 800c4e4:	fa5f f288 	uxtb.w	r2, r8
 800c4e8:	f3c8 2907 	ubfx	r9, r8, #8, #8
 800c4ec:	f3c8 4307 	ubfx	r3, r8, #16, #8
 800c4f0:	ea4f 6818 	mov.w	r8, r8, lsr #24
 800c4f4:	f856 a022 	ldr.w	sl, [r6, r2, lsl #2]
 800c4f8:	fa5f f28b 	uxtb.w	r2, fp
 800c4fc:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 800c500:	4457      	add	r7, sl
 800c502:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c506:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 800c50a:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800c50e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800c512:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c516:	eb03 2a99 	add.w	sl, r3, r9, lsr #10
 800c51a:	f3cb 2307 	ubfx	r3, fp, #8, #8
 800c51e:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800c522:	eb08 289a 	add.w	r8, r8, sl, lsr #10
 800c526:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c52a:	ea49 4907 	orr.w	r9, r9, r7, lsl #16
 800c52e:	f3cb 4707 	ubfx	r7, fp, #16, #8
 800c532:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800c536:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c53a:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800c53e:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 800c542:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800c546:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c54a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800c54e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c552:	eb07 2793 	add.w	r7, r7, r3, lsr #10
 800c556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c55a:	ea48 480a 	orr.w	r8, r8, sl, lsl #16
 800c55e:	eb0b 2b97 	add.w	fp, fp, r7, lsr #10
 800c562:	f3c7 0a09 	ubfx	sl, r7, #0, #10
 800c566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c56a:	f3cb 0209 	ubfx	r2, fp, #0, #10
 800c56e:	ea4f 279b 	mov.w	r7, fp, lsr #10
 800c572:	ea42 4b0a 	orr.w	fp, r2, sl, lsl #16
 800c576:	4a2e      	ldr	r2, [pc, #184]	; (800c630 <D64_1CH_HTONS_VOL_HP+0x198>)
 800c578:	fb29 ee02 	smlad	lr, r9, r2, lr
 800c57c:	4a2d      	ldr	r2, [pc, #180]	; (800c634 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800c57e:	fb28 ee02 	smlad	lr, r8, r2, lr
 800c582:	4a2d      	ldr	r2, [pc, #180]	; (800c638 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800c584:	fb23 ee02 	smlad	lr, r3, r2, lr
 800c588:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800c58c:	fb2b ea0a 	smlad	sl, fp, sl, lr
 800c590:	4a2a      	ldr	r2, [pc, #168]	; (800c63c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800c592:	fb29 5e02 	smlad	lr, r9, r2, r5
 800c596:	fb2b ee12 	smladx	lr, fp, r2, lr
 800c59a:	4a29      	ldr	r2, [pc, #164]	; (800c640 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800c59c:	fb28 ee02 	smlad	lr, r8, r2, lr
 800c5a0:	fb23 ee12 	smladx	lr, r3, r2, lr
 800c5a4:	2501      	movs	r5, #1
 800c5a6:	fb29 f905 	smuad	r9, r9, r5
 800c5aa:	4a26      	ldr	r2, [pc, #152]	; (800c644 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800c5ac:	fb28 9802 	smlad	r8, r8, r2, r9
 800c5b0:	4a25      	ldr	r2, [pc, #148]	; (800c648 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800c5b2:	fb23 8302 	smlad	r3, r3, r2, r8
 800c5b6:	4a25      	ldr	r2, [pc, #148]	; (800c64c <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800c5b8:	fb2b 3502 	smlad	r5, fp, r2, r3
 800c5bc:	f5aa 3a00 	sub.w	sl, sl, #131072	; 0x20000
 800c5c0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c5c4:	eb0a 0204 	add.w	r2, sl, r4
 800c5c8:	9c02      	ldr	r4, [sp, #8]
 800c5ca:	eba2 020c 	sub.w	r2, r2, ip
 800c5ce:	46d4      	mov	ip, sl
 800c5d0:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800c5d4:	fba2 2304 	umull	r2, r3, r2, r4
 800c5d8:	fb04 3309 	mla	r3, r4, r9, r3
 800c5dc:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800c5e0:	f04f 0900 	mov.w	r9, #0
 800c5e4:	f143 0300 	adc.w	r3, r3, #0
 800c5e8:	02da      	lsls	r2, r3, #11
 800c5ea:	005c      	lsls	r4, r3, #1
 800c5ec:	9b01      	ldr	r3, [sp, #4]
 800c5ee:	fbc3 8902 	smlal	r8, r9, r3, r2
 800c5f2:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800c5f6:	f303 030f 	ssat	r3, #16, r3
 800c5fa:	f821 3b02 	strh.w	r3, [r1], #2
 800c5fe:	9b03      	ldr	r3, [sp, #12]
 800c600:	4299      	cmp	r1, r3
 800c602:	f47f af67 	bne.w	800c4d4 <D64_1CH_HTONS_VOL_HP+0x3c>
 800c606:	462b      	mov	r3, r5
 800c608:	9905      	ldr	r1, [sp, #20]
 800c60a:	2000      	movs	r0, #0
 800c60c:	460a      	mov	r2, r1
 800c60e:	608b      	str	r3, [r1, #8]
 800c610:	f8c1 e00c 	str.w	lr, [r1, #12]
 800c614:	61cf      	str	r7, [r1, #28]
 800c616:	610c      	str	r4, [r1, #16]
 800c618:	f8c1 a014 	str.w	sl, [r1, #20]
 800c61c:	9904      	ldr	r1, [sp, #16]
 800c61e:	6191      	str	r1, [r2, #24]
 800c620:	b007      	add	sp, #28
 800c622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c626:	46e2      	mov	sl, ip
 800c628:	e7ee      	b.n	800c608 <D64_1CH_HTONS_VOL_HP+0x170>
 800c62a:	bf00      	nop
 800c62c:	20000000 	.word	0x20000000
 800c630:	001c0015 	.word	0x001c0015
 800c634:	000f000a 	.word	0x000f000a
 800c638:	00060003 	.word	0x00060003
 800c63c:	0024002a 	.word	0x0024002a
 800c640:	002e0030 	.word	0x002e0030
 800c644:	00030006 	.word	0x00030006
 800c648:	000a000f 	.word	0x000a000f
 800c64c:	0015001c 	.word	0x0015001c

0800c650 <D80_1CH_HTONS_VOL_HP>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	4614      	mov	r4, r2
 800c656:	b089      	sub	sp, #36	; 0x24
 800c658:	4613      	mov	r3, r2
 800c65a:	6924      	ldr	r4, [r4, #16]
 800c65c:	461d      	mov	r5, r3
 800c65e:	9207      	str	r2, [sp, #28]
 800c660:	9401      	str	r4, [sp, #4]
 800c662:	461c      	mov	r4, r3
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	68a7      	ldr	r7, [r4, #8]
 800c668:	9302      	str	r3, [sp, #8]
 800c66a:	69a3      	ldr	r3, [r4, #24]
 800c66c:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800c670:	9306      	str	r3, [sp, #24]
 800c672:	69e3      	ldr	r3, [r4, #28]
 800c674:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800c676:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800c678:	9403      	str	r4, [sp, #12]
 800c67a:	6a2c      	ldr	r4, [r5, #32]
 800c67c:	9404      	str	r4, [sp, #16]
 800c67e:	2a00      	cmp	r2, #0
 800c680:	f000 80ca 	beq.w	800c818 <D80_1CH_HTONS_VOL_HP+0x1c8>
 800c684:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c688:	4e64      	ldr	r6, [pc, #400]	; (800c81c <D80_1CH_HTONS_VOL_HP+0x1cc>)
 800c68a:	468c      	mov	ip, r1
 800c68c:	4682      	mov	sl, r0
 800c68e:	9205      	str	r2, [sp, #20]
 800c690:	f8da 2008 	ldr.w	r2, [sl, #8]
 800c694:	e89a 0011 	ldmia.w	sl, {r0, r4}
 800c698:	f10a 0a0a 	add.w	sl, sl, #10
 800c69c:	ba40      	rev16	r0, r0
 800c69e:	ba64      	rev16	r4, r4
 800c6a0:	fa92 f992 	rev16.w	r9, r2
 800c6a4:	b2c5      	uxtb	r5, r0
 800c6a6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800c6aa:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800c6ae:	0e00      	lsrs	r0, r0, #24
 800c6b0:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 800c6b4:	b2e5      	uxtb	r5, r4
 800c6b6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800c6ba:	f3c4 4b07 	ubfx	fp, r4, #16, #8
 800c6be:	4443      	add	r3, r8
 800c6c0:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800c6c4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 800c6c8:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800c6cc:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800c6d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c6d4:	eb02 2891 	add.w	r8, r2, r1, lsr #10
 800c6d8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 800c6dc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c6e0:	eb00 2098 	add.w	r0, r0, r8, lsr #10
 800c6e4:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800c6e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c6ec:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c6f0:	eb05 2590 	add.w	r5, r5, r0, lsr #10
 800c6f4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800c6f8:	0e23      	lsrs	r3, r4, #24
 800c6fa:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800c6fe:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800c702:	f3c9 2b07 	ubfx	fp, r9, #8, #8
 800c706:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800c70a:	fa5f f989 	uxtb.w	r9, r9
 800c70e:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800c712:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 800c716:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 800c71a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c71e:	eb03 2394 	add.w	r3, r3, r4, lsr #10
 800c722:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c726:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c72a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800c72e:	eb09 2993 	add.w	r9, r9, r3, lsr #10
 800c732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c736:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800c73a:	eb0b 2b99 	add.w	fp, fp, r9, lsr #10
 800c73e:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800c742:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800c746:	f3cb 0209 	ubfx	r2, fp, #0, #10
 800c74a:	ea4f 239b 	mov.w	r3, fp, lsr #10
 800c74e:	ea42 4909 	orr.w	r9, r2, r9, lsl #16
 800c752:	4a33      	ldr	r2, [pc, #204]	; (800c820 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 800c754:	fb21 ee02 	smlad	lr, r1, r2, lr
 800c758:	4a32      	ldr	r2, [pc, #200]	; (800c824 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800c75a:	fb20 ee02 	smlad	lr, r0, r2, lr
 800c75e:	4a32      	ldr	r2, [pc, #200]	; (800c828 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800c760:	fb25 ee02 	smlad	lr, r5, r2, lr
 800c764:	4a31      	ldr	r2, [pc, #196]	; (800c82c <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800c766:	fb24 ee02 	smlad	lr, r4, r2, lr
 800c76a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c76e:	fb29 eb02 	smlad	fp, r9, r2, lr
 800c772:	4a2f      	ldr	r2, [pc, #188]	; (800c830 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800c774:	fb21 7702 	smlad	r7, r1, r2, r7
 800c778:	4a2e      	ldr	r2, [pc, #184]	; (800c834 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800c77a:	fb20 7702 	smlad	r7, r0, r2, r7
 800c77e:	f04f 1e4b 	mov.w	lr, #4915275	; 0x4b004b
 800c782:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800c786:	4a2c      	ldr	r2, [pc, #176]	; (800c838 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800c788:	fb24 ee02 	smlad	lr, r4, r2, lr
 800c78c:	4a2b      	ldr	r2, [pc, #172]	; (800c83c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800c78e:	fb29 ee02 	smlad	lr, r9, r2, lr
 800c792:	f04f 0801 	mov.w	r8, #1
 800c796:	fb21 f808 	smuad	r8, r1, r8
 800c79a:	4a29      	ldr	r2, [pc, #164]	; (800c840 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800c79c:	fb20 8002 	smlad	r0, r0, r2, r8
 800c7a0:	4a28      	ldr	r2, [pc, #160]	; (800c844 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800c7a2:	fb25 0002 	smlad	r0, r5, r2, r0
 800c7a6:	4a28      	ldr	r2, [pc, #160]	; (800c848 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800c7a8:	fb24 0402 	smlad	r4, r4, r2, r0
 800c7ac:	4f27      	ldr	r7, [pc, #156]	; (800c84c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800c7ae:	fb29 4707 	smlad	r7, r9, r7, r4
 800c7b2:	f5ab 327a 	sub.w	r2, fp, #256000	; 0x3e800
 800c7b6:	9901      	ldr	r1, [sp, #4]
 800c7b8:	9c04      	ldr	r4, [sp, #16]
 800c7ba:	2500      	movs	r5, #0
 800c7bc:	4411      	add	r1, r2
 800c7be:	4608      	mov	r0, r1
 800c7c0:	9902      	ldr	r1, [sp, #8]
 800c7c2:	9202      	str	r2, [sp, #8]
 800c7c4:	1a40      	subs	r0, r0, r1
 800c7c6:	ea4f 79e0 	mov.w	r9, r0, asr #31
 800c7ca:	fba0 0104 	umull	r0, r1, r0, r4
 800c7ce:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800c7d2:	fb04 1109 	mla	r1, r4, r9, r1
 800c7d6:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c7da:	f141 0100 	adc.w	r1, r1, #0
 800c7de:	0288      	lsls	r0, r1, #10
 800c7e0:	0049      	lsls	r1, r1, #1
 800c7e2:	9101      	str	r1, [sp, #4]
 800c7e4:	9903      	ldr	r1, [sp, #12]
 800c7e6:	fbc1 4500 	smlal	r4, r5, r1, r0
 800c7ea:	10a9      	asrs	r1, r5, #2
 800c7ec:	f301 010f 	ssat	r1, #16, r1
 800c7f0:	f82c 1b02 	strh.w	r1, [ip], #2
 800c7f4:	9905      	ldr	r1, [sp, #20]
 800c7f6:	458c      	cmp	ip, r1
 800c7f8:	f47f af4a 	bne.w	800c690 <D80_1CH_HTONS_VOL_HP+0x40>
 800c7fc:	9c07      	ldr	r4, [sp, #28]
 800c7fe:	2000      	movs	r0, #0
 800c800:	9901      	ldr	r1, [sp, #4]
 800c802:	6162      	str	r2, [r4, #20]
 800c804:	9a06      	ldr	r2, [sp, #24]
 800c806:	60a7      	str	r7, [r4, #8]
 800c808:	f8c4 e00c 	str.w	lr, [r4, #12]
 800c80c:	61e3      	str	r3, [r4, #28]
 800c80e:	6121      	str	r1, [r4, #16]
 800c810:	61a2      	str	r2, [r4, #24]
 800c812:	b009      	add	sp, #36	; 0x24
 800c814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c818:	9a02      	ldr	r2, [sp, #8]
 800c81a:	e7ef      	b.n	800c7fc <D80_1CH_HTONS_VOL_HP+0x1ac>
 800c81c:	20000000 	.word	0x20000000
 800c820:	002d0024 	.word	0x002d0024
 800c824:	001c0015 	.word	0x001c0015
 800c828:	000f000a 	.word	0x000f000a
 800c82c:	00060003 	.word	0x00060003
 800c830:	0037003f 	.word	0x0037003f
 800c834:	00450049 	.word	0x00450049
 800c838:	00490045 	.word	0x00490045
 800c83c:	003f0037 	.word	0x003f0037
 800c840:	00030006 	.word	0x00030006
 800c844:	000a000f 	.word	0x000a000f
 800c848:	0015001c 	.word	0x0015001c
 800c84c:	0024002d 	.word	0x0024002d

0800c850 <D128_1CH_HTONS_VOL_HP>:
 800c850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c854:	b08d      	sub	sp, #52	; 0x34
 800c856:	4614      	mov	r4, r2
 800c858:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800c85a:	920b      	str	r2, [sp, #44]	; 0x2c
 800c85c:	6912      	ldr	r2, [r2, #16]
 800c85e:	9202      	str	r2, [sp, #8]
 800c860:	4622      	mov	r2, r4
 800c862:	6964      	ldr	r4, [r4, #20]
 800c864:	4615      	mov	r5, r2
 800c866:	9405      	str	r4, [sp, #20]
 800c868:	4614      	mov	r4, r2
 800c86a:	6992      	ldr	r2, [r2, #24]
 800c86c:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800c870:	920a      	str	r2, [sp, #40]	; 0x28
 800c872:	68ea      	ldr	r2, [r5, #12]
 800c874:	68a4      	ldr	r4, [r4, #8]
 800c876:	9203      	str	r2, [sp, #12]
 800c878:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800c87a:	9404      	str	r4, [sp, #16]
 800c87c:	9207      	str	r2, [sp, #28]
 800c87e:	6a2a      	ldr	r2, [r5, #32]
 800c880:	9208      	str	r2, [sp, #32]
 800c882:	2b00      	cmp	r3, #0
 800c884:	f000 8129 	beq.w	800cada <D128_1CH_HTONS_VOL_HP+0x28a>
 800c888:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c88c:	f100 0b10 	add.w	fp, r0, #16
 800c890:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 800cb34 <D128_1CH_HTONS_VOL_HP+0x2e4>
 800c894:	9106      	str	r1, [sp, #24]
 800c896:	9309      	str	r3, [sp, #36]	; 0x24
 800c898:	f1ab 0010 	sub.w	r0, fp, #16
 800c89c:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 800c8a0:	c80d      	ldmia	r0, {r0, r2, r3}
 800c8a2:	ba40      	rev16	r0, r0
 800c8a4:	ba52      	rev16	r2, r2
 800c8a6:	ba5b      	rev16	r3, r3
 800c8a8:	fa91 fc91 	rev16.w	ip, r1
 800c8ac:	b2c5      	uxtb	r5, r0
 800c8ae:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800c8b2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800c8b6:	0e00      	lsrs	r0, r0, #24
 800c8b8:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800c8bc:	b2d5      	uxtb	r5, r2
 800c8be:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
 800c8c2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800c8c6:	44b6      	add	lr, r6
 800c8c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c8cc:	f859 6020 	ldr.w	r6, [r9, r0, lsl #2]
 800c8d0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800c8d4:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 800c8d8:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 800c8dc:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800c8e0:	0e12      	lsrs	r2, r2, #24
 800c8e2:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800c8e6:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800c8ea:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c8ee:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800c8f2:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800c8f6:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800c8fa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c8fe:	b2da      	uxtb	r2, r3
 800c900:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800c904:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c908:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 800c90c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800c910:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 800c914:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c918:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 800c91c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c920:	eb00 2e95 	add.w	lr, r0, r5, lsr #10
 800c924:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800c928:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 800c92c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800c930:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800c934:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c938:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 800c93c:	0e1b      	lsrs	r3, r3, #24
 800c93e:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800c942:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c946:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 800c94a:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 800c94e:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 800c952:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c956:	fa5f f38c 	uxtb.w	r3, ip
 800c95a:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 800c95e:	f3c8 0009 	ubfx	r0, r8, #0, #10
 800c962:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c966:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800c96a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800c96e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 800c972:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800c976:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800c97a:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 800c97e:	f859 202e 	ldr.w	r2, [r9, lr, lsl #2]
 800c982:	f3cc 4307 	ubfx	r3, ip, #16, #8
 800c986:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 800c98a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800c98e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800c992:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c996:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800c99a:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800c99e:	eb03 2c92 	add.w	ip, r3, r2, lsr #10
 800c9a2:	f3c2 0309 	ubfx	r3, r2, #0, #10
 800c9a6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c9aa:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 800c9ae:	9b03      	ldr	r3, [sp, #12]
 800c9b0:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 800c9b4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800c9b8:	9201      	str	r2, [sp, #4]
 800c9ba:	f3ce 0209 	ubfx	r2, lr, #0, #10
 800c9be:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 800c9c2:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 800c9c6:	4a46      	ldr	r2, [pc, #280]	; (800cae0 <D128_1CH_HTONS_VOL_HP+0x290>)
 800c9c8:	fb27 3802 	smlad	r8, r7, r2, r3
 800c9cc:	4b45      	ldr	r3, [pc, #276]	; (800cae4 <D128_1CH_HTONS_VOL_HP+0x294>)
 800c9ce:	fb26 8803 	smlad	r8, r6, r3, r8
 800c9d2:	4b45      	ldr	r3, [pc, #276]	; (800cae8 <D128_1CH_HTONS_VOL_HP+0x298>)
 800c9d4:	fb25 8803 	smlad	r8, r5, r3, r8
 800c9d8:	4b44      	ldr	r3, [pc, #272]	; (800caec <D128_1CH_HTONS_VOL_HP+0x29c>)
 800c9da:	fb24 8803 	smlad	r8, r4, r3, r8
 800c9de:	4b44      	ldr	r3, [pc, #272]	; (800caf0 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 800c9e0:	fb20 8803 	smlad	r8, r0, r3, r8
 800c9e4:	4b43      	ldr	r3, [pc, #268]	; (800caf4 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 800c9e6:	fb21 8803 	smlad	r8, r1, r3, r8
 800c9ea:	4b43      	ldr	r3, [pc, #268]	; (800caf8 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 800c9ec:	9a01      	ldr	r2, [sp, #4]
 800c9ee:	fb22 8203 	smlad	r2, r2, r3, r8
 800c9f2:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800c9f6:	fb2c 2808 	smlad	r8, ip, r8, r2
 800c9fa:	4b40      	ldr	r3, [pc, #256]	; (800cafc <D128_1CH_HTONS_VOL_HP+0x2ac>)
 800c9fc:	9a04      	ldr	r2, [sp, #16]
 800c9fe:	fb27 2a03 	smlad	sl, r7, r3, r2
 800ca02:	4b3f      	ldr	r3, [pc, #252]	; (800cb00 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 800ca04:	fb26 aa03 	smlad	sl, r6, r3, sl
 800ca08:	4a3e      	ldr	r2, [pc, #248]	; (800cb04 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 800ca0a:	fb25 aa02 	smlad	sl, r5, r2, sl
 800ca0e:	4a3e      	ldr	r2, [pc, #248]	; (800cb08 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 800ca10:	fb24 aa02 	smlad	sl, r4, r2, sl
 800ca14:	4a3d      	ldr	r2, [pc, #244]	; (800cb0c <D128_1CH_HTONS_VOL_HP+0x2bc>)
 800ca16:	fb20 aa02 	smlad	sl, r0, r2, sl
 800ca1a:	4a3d      	ldr	r2, [pc, #244]	; (800cb10 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 800ca1c:	fb21 aa02 	smlad	sl, r1, r2, sl
 800ca20:	4a3c      	ldr	r2, [pc, #240]	; (800cb14 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 800ca22:	9b01      	ldr	r3, [sp, #4]
 800ca24:	fb23 a202 	smlad	r2, r3, r2, sl
 800ca28:	f8df a10c 	ldr.w	sl, [pc, #268]	; 800cb38 <D128_1CH_HTONS_VOL_HP+0x2e8>
 800ca2c:	fb2c 230a 	smlad	r3, ip, sl, r2
 800ca30:	2201      	movs	r2, #1
 800ca32:	9303      	str	r3, [sp, #12]
 800ca34:	fb27 f702 	smuad	r7, r7, r2
 800ca38:	4a37      	ldr	r2, [pc, #220]	; (800cb18 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800ca3a:	fb26 7702 	smlad	r7, r6, r2, r7
 800ca3e:	4a37      	ldr	r2, [pc, #220]	; (800cb1c <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800ca40:	fb25 7702 	smlad	r7, r5, r2, r7
 800ca44:	4a36      	ldr	r2, [pc, #216]	; (800cb20 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800ca46:	fb24 7702 	smlad	r7, r4, r2, r7
 800ca4a:	4a36      	ldr	r2, [pc, #216]	; (800cb24 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800ca4c:	fb20 7702 	smlad	r7, r0, r2, r7
 800ca50:	4a35      	ldr	r2, [pc, #212]	; (800cb28 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800ca52:	fb21 7702 	smlad	r7, r1, r2, r7
 800ca56:	4a35      	ldr	r2, [pc, #212]	; (800cb2c <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800ca58:	9b01      	ldr	r3, [sp, #4]
 800ca5a:	fb23 7202 	smlad	r2, r3, r2, r7
 800ca5e:	4b34      	ldr	r3, [pc, #208]	; (800cb30 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800ca60:	fb2c 2303 	smlad	r3, ip, r3, r2
 800ca64:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
 800ca68:	9304      	str	r3, [sp, #16]
 800ca6a:	9b02      	ldr	r3, [sp, #8]
 800ca6c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ca70:	9e08      	ldr	r6, [sp, #32]
 800ca72:	2100      	movs	r1, #0
 800ca74:	4443      	add	r3, r8
 800ca76:	f10b 0b10 	add.w	fp, fp, #16
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	9b05      	ldr	r3, [sp, #20]
 800ca7e:	f8cd 8014 	str.w	r8, [sp, #20]
 800ca82:	1ad2      	subs	r2, r2, r3
 800ca84:	17d5      	asrs	r5, r2, #31
 800ca86:	fba2 2306 	umull	r2, r3, r2, r6
 800ca8a:	1812      	adds	r2, r2, r0
 800ca8c:	fb06 3305 	mla	r3, r6, r5, r3
 800ca90:	414b      	adcs	r3, r1
 800ca92:	021a      	lsls	r2, r3, #8
 800ca94:	005b      	lsls	r3, r3, #1
 800ca96:	9302      	str	r3, [sp, #8]
 800ca98:	9b07      	ldr	r3, [sp, #28]
 800ca9a:	fbc3 0102 	smlal	r0, r1, r3, r2
 800ca9e:	9a06      	ldr	r2, [sp, #24]
 800caa0:	108b      	asrs	r3, r1, #2
 800caa2:	f303 030f 	ssat	r3, #16, r3
 800caa6:	f822 3b02 	strh.w	r3, [r2], #2
 800caaa:	4613      	mov	r3, r2
 800caac:	9206      	str	r2, [sp, #24]
 800caae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cab0:	4293      	cmp	r3, r2
 800cab2:	f47f aef1 	bne.w	800c898 <D128_1CH_HTONS_VOL_HP+0x48>
 800cab6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cab8:	2000      	movs	r0, #0
 800caba:	9904      	ldr	r1, [sp, #16]
 800cabc:	4613      	mov	r3, r2
 800cabe:	f8c2 e01c 	str.w	lr, [r2, #28]
 800cac2:	6091      	str	r1, [r2, #8]
 800cac4:	9903      	ldr	r1, [sp, #12]
 800cac6:	60d1      	str	r1, [r2, #12]
 800cac8:	9a02      	ldr	r2, [sp, #8]
 800caca:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cacc:	611a      	str	r2, [r3, #16]
 800cace:	f8c3 8014 	str.w	r8, [r3, #20]
 800cad2:	6199      	str	r1, [r3, #24]
 800cad4:	b00d      	add	sp, #52	; 0x34
 800cad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cada:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800cade:	e7ea      	b.n	800cab6 <D128_1CH_HTONS_VOL_HP+0x266>
 800cae0:	00780069 	.word	0x00780069
 800cae4:	005b004e 	.word	0x005b004e
 800cae8:	00420037 	.word	0x00420037
 800caec:	002d0024 	.word	0x002d0024
 800caf0:	001c0015 	.word	0x001c0015
 800caf4:	000f000a 	.word	0x000f000a
 800caf8:	00060003 	.word	0x00060003
 800cafc:	00880096 	.word	0x00880096
 800cb00:	00a200ac 	.word	0x00a200ac
 800cb04:	00b400ba 	.word	0x00b400ba
 800cb08:	00be00c0 	.word	0x00be00c0
 800cb0c:	00c000be 	.word	0x00c000be
 800cb10:	00ba00b4 	.word	0x00ba00b4
 800cb14:	00ac00a2 	.word	0x00ac00a2
 800cb18:	00030006 	.word	0x00030006
 800cb1c:	000a000f 	.word	0x000a000f
 800cb20:	0015001c 	.word	0x0015001c
 800cb24:	0024002d 	.word	0x0024002d
 800cb28:	00370042 	.word	0x00370042
 800cb2c:	004e005b 	.word	0x004e005b
 800cb30:	00690078 	.word	0x00690078
 800cb34:	20000000 	.word	0x20000000
 800cb38:	00960088 	.word	0x00960088

0800cb3c <PDM_Filter_Init>:
 800cb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb3e:	2240      	movs	r2, #64	; 0x40
 800cb40:	4604      	mov	r4, r0
 800cb42:	2100      	movs	r1, #0
 800cb44:	300c      	adds	r0, #12
 800cb46:	f000 f9e5 	bl	800cf14 <memset>
 800cb4a:	4939      	ldr	r1, [pc, #228]	; (800cc30 <PDM_Filter_Init+0xf4>)
 800cb4c:	4839      	ldr	r0, [pc, #228]	; (800cc34 <PDM_Filter_Init+0xf8>)
 800cb4e:	f000 f977 	bl	800ce40 <CRC_Lock>
 800cb52:	2300      	movs	r3, #0
 800cb54:	2801      	cmp	r0, #1
 800cb56:	8820      	ldrh	r0, [r4, #0]
 800cb58:	4a35      	ldr	r2, [pc, #212]	; (800cc30 <PDM_Filter_Init+0xf4>)
 800cb5a:	8965      	ldrh	r5, [r4, #10]
 800cb5c:	bf18      	it	ne
 800cb5e:	461a      	movne	r2, r3
 800cb60:	8921      	ldrh	r1, [r4, #8]
 800cb62:	2801      	cmp	r0, #1
 800cb64:	86a5      	strh	r5, [r4, #52]	; 0x34
 800cb66:	6462      	str	r2, [r4, #68]	; 0x44
 800cb68:	86e1      	strh	r1, [r4, #54]	; 0x36
 800cb6a:	61a3      	str	r3, [r4, #24]
 800cb6c:	6123      	str	r3, [r4, #16]
 800cb6e:	6163      	str	r3, [r4, #20]
 800cb70:	60e3      	str	r3, [r4, #12]
 800cb72:	6263      	str	r3, [r4, #36]	; 0x24
 800cb74:	61e3      	str	r3, [r4, #28]
 800cb76:	6223      	str	r3, [r4, #32]
 800cb78:	6423      	str	r3, [r4, #64]	; 0x40
 800cb7a:	d91c      	bls.n	800cbb6 <PDM_Filter_Init+0x7a>
 800cb7c:	2003      	movs	r0, #3
 800cb7e:	2302      	movs	r3, #2
 800cb80:	8862      	ldrh	r2, [r4, #2]
 800cb82:	2a01      	cmp	r2, #1
 800cb84:	d914      	bls.n	800cbb0 <PDM_Filter_Init+0x74>
 800cb86:	2140      	movs	r1, #64	; 0x40
 800cb88:	2300      	movs	r3, #0
 800cb8a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cb8c:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800cb90:	d00b      	beq.n	800cbaa <PDM_Filter_Init+0x6e>
 800cb92:	6862      	ldr	r2, [r4, #4]
 800cb94:	b11a      	cbz	r2, 800cb9e <PDM_Filter_Init+0x62>
 800cb96:	f043 0310 	orr.w	r3, r3, #16
 800cb9a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800cb9c:	6423      	str	r3, [r4, #64]	; 0x40
 800cb9e:	2200      	movs	r2, #0
 800cba0:	8722      	strh	r2, [r4, #56]	; 0x38
 800cba2:	b908      	cbnz	r0, 800cba8 <PDM_Filter_Init+0x6c>
 800cba4:	3380      	adds	r3, #128	; 0x80
 800cba6:	6423      	str	r3, [r4, #64]	; 0x40
 800cba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbaa:	460b      	mov	r3, r1
 800cbac:	6421      	str	r1, [r4, #64]	; 0x40
 800cbae:	e7f0      	b.n	800cb92 <PDM_Filter_Init+0x56>
 800cbb0:	d008      	beq.n	800cbc4 <PDM_Filter_Init+0x88>
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	e7e7      	b.n	800cb86 <PDM_Filter_Init+0x4a>
 800cbb6:	4d20      	ldr	r5, [pc, #128]	; (800cc38 <PDM_Filter_Init+0xfc>)
 800cbb8:	782a      	ldrb	r2, [r5, #0]
 800cbba:	d009      	beq.n	800cbd0 <PDM_Filter_Init+0x94>
 800cbbc:	2a01      	cmp	r2, #1
 800cbbe:	d020      	beq.n	800cc02 <PDM_Filter_Init+0xc6>
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	e7dd      	b.n	800cb80 <PDM_Filter_Init+0x44>
 800cbc4:	2220      	movs	r2, #32
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	2160      	movs	r1, #96	; 0x60
 800cbca:	6422      	str	r2, [r4, #64]	; 0x40
 800cbcc:	4613      	mov	r3, r2
 800cbce:	e7dc      	b.n	800cb8a <PDM_Filter_Init+0x4e>
 800cbd0:	2a00      	cmp	r2, #0
 800cbd2:	d1d5      	bne.n	800cb80 <PDM_Filter_Init+0x44>
 800cbd4:	4919      	ldr	r1, [pc, #100]	; (800cc3c <PDM_Filter_Init+0x100>)
 800cbd6:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800cc44 <PDM_Filter_Init+0x108>
 800cbda:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800cbde:	4e18      	ldr	r6, [pc, #96]	; (800cc40 <PDM_Filter_Init+0x104>)
 800cbe0:	684a      	ldr	r2, [r1, #4]
 800cbe2:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800cbe6:	ea02 0006 	and.w	r0, r2, r6
 800cbea:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800cbee:	4303      	orrs	r3, r0
 800cbf0:	4413      	add	r3, r2
 800cbf2:	f841 3f04 	str.w	r3, [r1, #4]!
 800cbf6:	428f      	cmp	r7, r1
 800cbf8:	d1f2      	bne.n	800cbe0 <PDM_Filter_Init+0xa4>
 800cbfa:	2001      	movs	r0, #1
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	7028      	strb	r0, [r5, #0]
 800cc00:	e7be      	b.n	800cb80 <PDM_Filter_Init+0x44>
 800cc02:	490e      	ldr	r1, [pc, #56]	; (800cc3c <PDM_Filter_Init+0x100>)
 800cc04:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800cc44 <PDM_Filter_Init+0x108>
 800cc08:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 800cc0c:	4e0c      	ldr	r6, [pc, #48]	; (800cc40 <PDM_Filter_Init+0x104>)
 800cc0e:	684a      	ldr	r2, [r1, #4]
 800cc10:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800cc14:	ea02 0006 	and.w	r0, r2, r6
 800cc18:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800cc1c:	4303      	orrs	r3, r0
 800cc1e:	4413      	add	r3, r2
 800cc20:	f841 3f04 	str.w	r3, [r1, #4]!
 800cc24:	428f      	cmp	r7, r1
 800cc26:	d1f2      	bne.n	800cc0e <PDM_Filter_Init+0xd2>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	2001      	movs	r0, #1
 800cc2c:	702b      	strb	r3, [r5, #0]
 800cc2e:	e7a7      	b.n	800cb80 <PDM_Filter_Init+0x44>
 800cc30:	b5e8b5cd 	.word	0xb5e8b5cd
 800cc34:	f407a5c2 	.word	0xf407a5c2
 800cc38:	2000056c 	.word	0x2000056c
 800cc3c:	1ffffffc 	.word	0x1ffffffc
 800cc40:	000ffc00 	.word	0x000ffc00
 800cc44:	3ff00000 	.word	0x3ff00000

0800cc48 <PDM_Filter_setConfig>:
 800cc48:	b570      	push	{r4, r5, r6, lr}
 800cc4a:	460e      	mov	r6, r1
 800cc4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800cc4e:	4604      	mov	r4, r0
 800cc50:	8832      	ldrh	r2, [r6, #0]
 800cc52:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800cc56:	1e53      	subs	r3, r2, #1
 800cc58:	2b06      	cmp	r3, #6
 800cc5a:	ed2d 8b04 	vpush	{d8-d9}
 800cc5e:	6420      	str	r0, [r4, #64]	; 0x40
 800cc60:	d91b      	bls.n	800cc9a <PDM_Filter_setConfig+0x52>
 800cc62:	2508      	movs	r5, #8
 800cc64:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800cc68:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800cc6c:	4299      	cmp	r1, r3
 800cc6e:	d07b      	beq.n	800cd68 <PDM_Filter_setConfig+0x120>
 800cc70:	f113 0f0c 	cmn.w	r3, #12
 800cc74:	db29      	blt.n	800ccca <PDM_Filter_setConfig+0x82>
 800cc76:	2b33      	cmp	r3, #51	; 0x33
 800cc78:	dd2c      	ble.n	800ccd4 <PDM_Filter_setConfig+0x8c>
 800cc7a:	2333      	movs	r3, #51	; 0x33
 800cc7c:	3540      	adds	r5, #64	; 0x40
 800cc7e:	80b3      	strh	r3, [r6, #4]
 800cc80:	8622      	strh	r2, [r4, #48]	; 0x30
 800cc82:	8873      	ldrh	r3, [r6, #2]
 800cc84:	8663      	strh	r3, [r4, #50]	; 0x32
 800cc86:	b925      	cbnz	r5, 800cc92 <PDM_Filter_setConfig+0x4a>
 800cc88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc8a:	2500      	movs	r5, #0
 800cc8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc90:	6423      	str	r3, [r4, #64]	; 0x40
 800cc92:	4628      	mov	r0, r5
 800cc94:	ecbd 8b04 	vpop	{d8-d9}
 800cc98:	bd70      	pop	{r4, r5, r6, pc}
 800cc9a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d04a      	beq.n	800cd36 <PDM_Filter_setConfig+0xee>
 800cca0:	4b4e      	ldr	r3, [pc, #312]	; (800cddc <PDM_Filter_setConfig+0x194>)
 800cca2:	400b      	ands	r3, r1
 800cca4:	4313      	orrs	r3, r2
 800cca6:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800ccaa:	6423      	str	r3, [r4, #64]	; 0x40
 800ccac:	f003 030f 	and.w	r3, r3, #15
 800ccb0:	2970      	cmp	r1, #112	; 0x70
 800ccb2:	f103 33ff 	add.w	r3, r3, #4294967295
 800ccb6:	d04a      	beq.n	800cd4e <PDM_Filter_setConfig+0x106>
 800ccb8:	2b06      	cmp	r3, #6
 800ccba:	f200 808d 	bhi.w	800cdd8 <PDM_Filter_setConfig+0x190>
 800ccbe:	e8df f003 	tbb	[pc, r3]
 800ccc2:	6467      	.short	0x6467
 800ccc4:	6a6d7073 	.word	0x6a6d7073
 800ccc8:	5a          	.byte	0x5a
 800ccc9:	00          	.byte	0x00
 800ccca:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800ccce:	3540      	adds	r5, #64	; 0x40
 800ccd0:	80b3      	strh	r3, [r6, #4]
 800ccd2:	e7d5      	b.n	800cc80 <PDM_Filter_setConfig+0x38>
 800ccd4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ccd6:	f002 020f 	and.w	r2, r2, #15
 800ccda:	3a01      	subs	r2, #1
 800ccdc:	2a06      	cmp	r2, #6
 800ccde:	d83e      	bhi.n	800cd5e <PDM_Filter_setConfig+0x116>
 800cce0:	493f      	ldr	r1, [pc, #252]	; (800cde0 <PDM_Filter_setConfig+0x198>)
 800cce2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800cce6:	ed92 9a00 	vldr	s18, [r2]
 800ccea:	ed92 8a07 	vldr	s16, [r2, #28]
 800ccee:	ee07 3a90 	vmov	s15, r3
 800ccf2:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800ccf6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800ccfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ccfe:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800cd02:	f000 f929 	bl	800cf58 <powf>
 800cd06:	eddf 0a37 	vldr	s1, [pc, #220]	; 800cde4 <PDM_Filter_setConfig+0x19c>
 800cd0a:	eef0 8a40 	vmov.f32	s17, s0
 800cd0e:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800cd12:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800cd16:	f000 f91f 	bl	800cf58 <powf>
 800cd1a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800cd1e:	88b3      	ldrh	r3, [r6, #4]
 800cd20:	8832      	ldrh	r2, [r6, #0]
 800cd22:	ee28 8a00 	vmul.f32	s16, s16, s0
 800cd26:	8723      	strh	r3, [r4, #56]	; 0x38
 800cd28:	feb8 8a48 	vrinta.f32	s16, s16
 800cd2c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800cd30:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 800cd34:	e7a4      	b.n	800cc80 <PDM_Filter_setConfig+0x38>
 800cd36:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800cd3a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800cd3e:	4299      	cmp	r1, r3
 800cd40:	d016      	beq.n	800cd70 <PDM_Filter_setConfig+0x128>
 800cd42:	f113 0f0c 	cmn.w	r3, #12
 800cd46:	f04f 0500 	mov.w	r5, #0
 800cd4a:	da94      	bge.n	800cc76 <PDM_Filter_setConfig+0x2e>
 800cd4c:	e7bd      	b.n	800ccca <PDM_Filter_setConfig+0x82>
 800cd4e:	2b06      	cmp	r3, #6
 800cd50:	d842      	bhi.n	800cdd8 <PDM_Filter_setConfig+0x190>
 800cd52:	e8df f003 	tbb	[pc, r3]
 800cd56:	3b3e      	.short	0x3b3e
 800cd58:	2f323538 	.word	0x2f323538
 800cd5c:	2c          	.byte	0x2c
 800cd5d:	00          	.byte	0x00
 800cd5e:	ed9f 8a22 	vldr	s16, [pc, #136]	; 800cde8 <PDM_Filter_setConfig+0x1a0>
 800cd62:	eeb0 9a48 	vmov.f32	s18, s16
 800cd66:	e7c2      	b.n	800ccee <PDM_Filter_setConfig+0xa6>
 800cd68:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800cd6a:	4291      	cmp	r1, r2
 800cd6c:	d180      	bne.n	800cc70 <PDM_Filter_setConfig+0x28>
 800cd6e:	e788      	b.n	800cc82 <PDM_Filter_setConfig+0x3a>
 800cd70:	8873      	ldrh	r3, [r6, #2]
 800cd72:	8663      	strh	r3, [r4, #50]	; 0x32
 800cd74:	e788      	b.n	800cc88 <PDM_Filter_setConfig+0x40>
 800cd76:	4b1d      	ldr	r3, [pc, #116]	; (800cdec <PDM_Filter_setConfig+0x1a4>)
 800cd78:	64a3      	str	r3, [r4, #72]	; 0x48
 800cd7a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800cd7e:	2500      	movs	r5, #0
 800cd80:	f113 0f0c 	cmn.w	r3, #12
 800cd84:	f6bf af77 	bge.w	800cc76 <PDM_Filter_setConfig+0x2e>
 800cd88:	e79f      	b.n	800ccca <PDM_Filter_setConfig+0x82>
 800cd8a:	4b19      	ldr	r3, [pc, #100]	; (800cdf0 <PDM_Filter_setConfig+0x1a8>)
 800cd8c:	64a3      	str	r3, [r4, #72]	; 0x48
 800cd8e:	e7f4      	b.n	800cd7a <PDM_Filter_setConfig+0x132>
 800cd90:	4b18      	ldr	r3, [pc, #96]	; (800cdf4 <PDM_Filter_setConfig+0x1ac>)
 800cd92:	64a3      	str	r3, [r4, #72]	; 0x48
 800cd94:	e7f1      	b.n	800cd7a <PDM_Filter_setConfig+0x132>
 800cd96:	4b18      	ldr	r3, [pc, #96]	; (800cdf8 <PDM_Filter_setConfig+0x1b0>)
 800cd98:	64a3      	str	r3, [r4, #72]	; 0x48
 800cd9a:	e7ee      	b.n	800cd7a <PDM_Filter_setConfig+0x132>
 800cd9c:	4b17      	ldr	r3, [pc, #92]	; (800cdfc <PDM_Filter_setConfig+0x1b4>)
 800cd9e:	64a3      	str	r3, [r4, #72]	; 0x48
 800cda0:	e7eb      	b.n	800cd7a <PDM_Filter_setConfig+0x132>
 800cda2:	4b17      	ldr	r3, [pc, #92]	; (800ce00 <PDM_Filter_setConfig+0x1b8>)
 800cda4:	64a3      	str	r3, [r4, #72]	; 0x48
 800cda6:	e7e8      	b.n	800cd7a <PDM_Filter_setConfig+0x132>
 800cda8:	4b16      	ldr	r3, [pc, #88]	; (800ce04 <PDM_Filter_setConfig+0x1bc>)
 800cdaa:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdac:	e7e5      	b.n	800cd7a <PDM_Filter_setConfig+0x132>
 800cdae:	4b16      	ldr	r3, [pc, #88]	; (800ce08 <PDM_Filter_setConfig+0x1c0>)
 800cdb0:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdb2:	e7e2      	b.n	800cd7a <PDM_Filter_setConfig+0x132>
 800cdb4:	4b15      	ldr	r3, [pc, #84]	; (800ce0c <PDM_Filter_setConfig+0x1c4>)
 800cdb6:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdb8:	e7df      	b.n	800cd7a <PDM_Filter_setConfig+0x132>
 800cdba:	4b15      	ldr	r3, [pc, #84]	; (800ce10 <PDM_Filter_setConfig+0x1c8>)
 800cdbc:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdbe:	e7dc      	b.n	800cd7a <PDM_Filter_setConfig+0x132>
 800cdc0:	4b14      	ldr	r3, [pc, #80]	; (800ce14 <PDM_Filter_setConfig+0x1cc>)
 800cdc2:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdc4:	e7d9      	b.n	800cd7a <PDM_Filter_setConfig+0x132>
 800cdc6:	4b14      	ldr	r3, [pc, #80]	; (800ce18 <PDM_Filter_setConfig+0x1d0>)
 800cdc8:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdca:	e7d6      	b.n	800cd7a <PDM_Filter_setConfig+0x132>
 800cdcc:	4b13      	ldr	r3, [pc, #76]	; (800ce1c <PDM_Filter_setConfig+0x1d4>)
 800cdce:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdd0:	e7d3      	b.n	800cd7a <PDM_Filter_setConfig+0x132>
 800cdd2:	4b13      	ldr	r3, [pc, #76]	; (800ce20 <PDM_Filter_setConfig+0x1d8>)
 800cdd4:	64a3      	str	r3, [r4, #72]	; 0x48
 800cdd6:	e7d0      	b.n	800cd7a <PDM_Filter_setConfig+0x132>
 800cdd8:	2500      	movs	r5, #0
 800cdda:	e743      	b.n	800cc64 <PDM_Filter_setConfig+0x1c>
 800cddc:	fffffef0 	.word	0xfffffef0
 800cde0:	0800d2c8 	.word	0x0800d2c8
 800cde4:	42000000 	.word	0x42000000
 800cde8:	00000000 	.word	0x00000000
 800cdec:	0800b3a9 	.word	0x0800b3a9
 800cdf0:	0800b721 	.word	0x0800b721
 800cdf4:	0800b531 	.word	0x0800b531
 800cdf8:	0800b22d 	.word	0x0800b22d
 800cdfc:	0800b11d 	.word	0x0800b11d
 800ce00:	0800bbed 	.word	0x0800bbed
 800ce04:	0800b951 	.word	0x0800b951
 800ce08:	0800c1d1 	.word	0x0800c1d1
 800ce0c:	0800c0a1 	.word	0x0800c0a1
 800ce10:	0800bfa5 	.word	0x0800bfa5
 800ce14:	0800c851 	.word	0x0800c851
 800ce18:	0800c651 	.word	0x0800c651
 800ce1c:	0800c499 	.word	0x0800c499
 800ce20:	0800c319 	.word	0x0800c319

0800ce24 <PDM_Filter>:
 800ce24:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ce26:	f413 7f80 	tst.w	r3, #256	; 0x100
 800ce2a:	d105      	bne.n	800ce38 <PDM_Filter+0x14>
 800ce2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ce30:	bf14      	ite	ne
 800ce32:	2020      	movne	r0, #32
 800ce34:	2030      	moveq	r0, #48	; 0x30
 800ce36:	4770      	bx	lr
 800ce38:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800ce3a:	320c      	adds	r2, #12
 800ce3c:	4718      	bx	r3
 800ce3e:	bf00      	nop

0800ce40 <CRC_Lock>:
 800ce40:	4a18      	ldr	r2, [pc, #96]	; (800cea4 <CRC_Lock+0x64>)
 800ce42:	6813      	ldr	r3, [r2, #0]
 800ce44:	b410      	push	{r4}
 800ce46:	f023 0301 	bic.w	r3, r3, #1
 800ce4a:	4c17      	ldr	r4, [pc, #92]	; (800cea8 <CRC_Lock+0x68>)
 800ce4c:	6013      	str	r3, [r2, #0]
 800ce4e:	6823      	ldr	r3, [r4, #0]
 800ce50:	b933      	cbnz	r3, 800ce60 <CRC_Lock+0x20>
 800ce52:	4b16      	ldr	r3, [pc, #88]	; (800ceac <CRC_Lock+0x6c>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce5a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ce5e:	d010      	beq.n	800ce82 <CRC_Lock+0x42>
 800ce60:	4b13      	ldr	r3, [pc, #76]	; (800ceb0 <CRC_Lock+0x70>)
 800ce62:	2401      	movs	r4, #1
 800ce64:	461a      	mov	r2, r3
 800ce66:	601c      	str	r4, [r3, #0]
 800ce68:	6813      	ldr	r3, [r2, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1fc      	bne.n	800ce68 <CRC_Lock+0x28>
 800ce6e:	4b11      	ldr	r3, [pc, #68]	; (800ceb4 <CRC_Lock+0x74>)
 800ce70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce74:	6018      	str	r0, [r3, #0]
 800ce76:	6818      	ldr	r0, [r3, #0]
 800ce78:	1a08      	subs	r0, r1, r0
 800ce7a:	fab0 f080 	clz	r0, r0
 800ce7e:	0940      	lsrs	r0, r0, #5
 800ce80:	4770      	bx	lr
 800ce82:	4b0d      	ldr	r3, [pc, #52]	; (800ceb8 <CRC_Lock+0x78>)
 800ce84:	2401      	movs	r4, #1
 800ce86:	461a      	mov	r2, r3
 800ce88:	601c      	str	r4, [r3, #0]
 800ce8a:	6813      	ldr	r3, [r2, #0]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d1fc      	bne.n	800ce8a <CRC_Lock+0x4a>
 800ce90:	4b0a      	ldr	r3, [pc, #40]	; (800cebc <CRC_Lock+0x7c>)
 800ce92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce96:	6018      	str	r0, [r3, #0]
 800ce98:	6818      	ldr	r0, [r3, #0]
 800ce9a:	1a40      	subs	r0, r0, r1
 800ce9c:	fab0 f080 	clz	r0, r0
 800cea0:	0940      	lsrs	r0, r0, #5
 800cea2:	4770      	bx	lr
 800cea4:	e0002000 	.word	0xe0002000
 800cea8:	e0042000 	.word	0xe0042000
 800ceac:	5c001000 	.word	0x5c001000
 800ceb0:	40023008 	.word	0x40023008
 800ceb4:	40023000 	.word	0x40023000
 800ceb8:	58024c08 	.word	0x58024c08
 800cebc:	58024c00 	.word	0x58024c00

0800cec0 <__errno>:
 800cec0:	4b01      	ldr	r3, [pc, #4]	; (800cec8 <__errno+0x8>)
 800cec2:	6818      	ldr	r0, [r3, #0]
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop
 800cec8:	200004ec 	.word	0x200004ec

0800cecc <__libc_init_array>:
 800cecc:	b570      	push	{r4, r5, r6, lr}
 800cece:	4d0d      	ldr	r5, [pc, #52]	; (800cf04 <__libc_init_array+0x38>)
 800ced0:	4c0d      	ldr	r4, [pc, #52]	; (800cf08 <__libc_init_array+0x3c>)
 800ced2:	1b64      	subs	r4, r4, r5
 800ced4:	10a4      	asrs	r4, r4, #2
 800ced6:	2600      	movs	r6, #0
 800ced8:	42a6      	cmp	r6, r4
 800ceda:	d109      	bne.n	800cef0 <__libc_init_array+0x24>
 800cedc:	4d0b      	ldr	r5, [pc, #44]	; (800cf0c <__libc_init_array+0x40>)
 800cede:	4c0c      	ldr	r4, [pc, #48]	; (800cf10 <__libc_init_array+0x44>)
 800cee0:	f000 f9e6 	bl	800d2b0 <_init>
 800cee4:	1b64      	subs	r4, r4, r5
 800cee6:	10a4      	asrs	r4, r4, #2
 800cee8:	2600      	movs	r6, #0
 800ceea:	42a6      	cmp	r6, r4
 800ceec:	d105      	bne.n	800cefa <__libc_init_array+0x2e>
 800ceee:	bd70      	pop	{r4, r5, r6, pc}
 800cef0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cef4:	4798      	blx	r3
 800cef6:	3601      	adds	r6, #1
 800cef8:	e7ee      	b.n	800ced8 <__libc_init_array+0xc>
 800cefa:	f855 3b04 	ldr.w	r3, [r5], #4
 800cefe:	4798      	blx	r3
 800cf00:	3601      	adds	r6, #1
 800cf02:	e7f2      	b.n	800ceea <__libc_init_array+0x1e>
 800cf04:	0800d5b0 	.word	0x0800d5b0
 800cf08:	0800d5b0 	.word	0x0800d5b0
 800cf0c:	0800d5b0 	.word	0x0800d5b0
 800cf10:	0800d5b4 	.word	0x0800d5b4

0800cf14 <memset>:
 800cf14:	4402      	add	r2, r0
 800cf16:	4603      	mov	r3, r0
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d100      	bne.n	800cf1e <memset+0xa>
 800cf1c:	4770      	bx	lr
 800cf1e:	f803 1b01 	strb.w	r1, [r3], #1
 800cf22:	e7f9      	b.n	800cf18 <memset+0x4>

0800cf24 <checkint>:
 800cf24:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800cf28:	2b7e      	cmp	r3, #126	; 0x7e
 800cf2a:	dd10      	ble.n	800cf4e <checkint+0x2a>
 800cf2c:	2b96      	cmp	r3, #150	; 0x96
 800cf2e:	dc0c      	bgt.n	800cf4a <checkint+0x26>
 800cf30:	2201      	movs	r2, #1
 800cf32:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800cf36:	fa02 f303 	lsl.w	r3, r2, r3
 800cf3a:	1e5a      	subs	r2, r3, #1
 800cf3c:	4202      	tst	r2, r0
 800cf3e:	d106      	bne.n	800cf4e <checkint+0x2a>
 800cf40:	4203      	tst	r3, r0
 800cf42:	bf0c      	ite	eq
 800cf44:	2002      	moveq	r0, #2
 800cf46:	2001      	movne	r0, #1
 800cf48:	4770      	bx	lr
 800cf4a:	2002      	movs	r0, #2
 800cf4c:	4770      	bx	lr
 800cf4e:	2000      	movs	r0, #0
 800cf50:	4770      	bx	lr
 800cf52:	0000      	movs	r0, r0
 800cf54:	0000      	movs	r0, r0
	...

0800cf58 <powf>:
 800cf58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf5a:	ee10 1a10 	vmov	r1, s0
 800cf5e:	ee10 6a90 	vmov	r6, s1
 800cf62:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800cf66:	0072      	lsls	r2, r6, #1
 800cf68:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800cf6c:	b085      	sub	sp, #20
 800cf6e:	f102 30ff 	add.w	r0, r2, #4294967295
 800cf72:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800cf76:	d256      	bcs.n	800d026 <powf+0xce>
 800cf78:	4298      	cmp	r0, r3
 800cf7a:	d256      	bcs.n	800d02a <powf+0xd2>
 800cf7c:	2000      	movs	r0, #0
 800cf7e:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800cf82:	4ea3      	ldr	r6, [pc, #652]	; (800d210 <powf+0x2b8>)
 800cf84:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800cf88:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800cf8c:	f3c2 47c3 	ubfx	r7, r2, #19, #4
 800cf90:	0dd2      	lsrs	r2, r2, #23
 800cf92:	eb06 1707 	add.w	r7, r6, r7, lsl #4
 800cf96:	05d2      	lsls	r2, r2, #23
 800cf98:	1a8b      	subs	r3, r1, r2
 800cf9a:	ed97 5b00 	vldr	d5, [r7]
 800cf9e:	ee07 3a90 	vmov	s15, r3
 800cfa2:	15d2      	asrs	r2, r2, #23
 800cfa4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cfa8:	eea5 6b07 	vfma.f64	d6, d5, d7
 800cfac:	ed97 5b02 	vldr	d5, [r7, #8]
 800cfb0:	ee26 2b06 	vmul.f64	d2, d6, d6
 800cfb4:	ee22 1b02 	vmul.f64	d1, d2, d2
 800cfb8:	ee07 2a90 	vmov	s15, r2
 800cfbc:	ed96 4b40 	vldr	d4, [r6, #256]	; 0x100
 800cfc0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cfc4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cfc8:	ed96 5b42 	vldr	d5, [r6, #264]	; 0x108
 800cfcc:	ed96 3b44 	vldr	d3, [r6, #272]	; 0x110
 800cfd0:	eea6 5b04 	vfma.f64	d5, d6, d4
 800cfd4:	ed96 4b46 	vldr	d4, [r6, #280]	; 0x118
 800cfd8:	eea6 4b03 	vfma.f64	d4, d6, d3
 800cfdc:	ed96 3b48 	vldr	d3, [r6, #288]	; 0x120
 800cfe0:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800cfe4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800cfe8:	eea2 7b04 	vfma.f64	d7, d2, d4
 800cfec:	eea5 7b01 	vfma.f64	d7, d5, d1
 800cff0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cff4:	ee10 1a90 	vmov	r1, s1
 800cff8:	2300      	movs	r3, #0
 800cffa:	2700      	movs	r7, #0
 800cffc:	f3c1 32cf 	ubfx	r2, r1, #15, #16
 800d000:	f248 06be 	movw	r6, #32958	; 0x80be
 800d004:	429f      	cmp	r7, r3
 800d006:	bf08      	it	eq
 800d008:	4296      	cmpeq	r6, r2
 800d00a:	f080 80b1 	bcs.w	800d170 <powf+0x218>
 800d00e:	ed9f 7b78 	vldr	d7, [pc, #480]	; 800d1f0 <powf+0x298>
 800d012:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d01a:	dd79      	ble.n	800d110 <powf+0x1b8>
 800d01c:	b005      	add	sp, #20
 800d01e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d022:	f000 b91f 	b.w	800d264 <__math_oflowf>
 800d026:	4298      	cmp	r0, r3
 800d028:	d32d      	bcc.n	800d086 <powf+0x12e>
 800d02a:	b952      	cbnz	r2, 800d042 <powf+0xea>
 800d02c:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800d030:	005b      	lsls	r3, r3, #1
 800d032:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800d036:	f240 80cd 	bls.w	800d1d4 <powf+0x27c>
 800d03a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800d03e:	b005      	add	sp, #20
 800d040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d042:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800d046:	d105      	bne.n	800d054 <powf+0xfc>
 800d048:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800d04c:	0076      	lsls	r6, r6, #1
 800d04e:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800d052:	e7f0      	b.n	800d036 <powf+0xde>
 800d054:	004b      	lsls	r3, r1, #1
 800d056:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800d05a:	d8ee      	bhi.n	800d03a <powf+0xe2>
 800d05c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800d060:	d1eb      	bne.n	800d03a <powf+0xe2>
 800d062:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d066:	f000 80b5 	beq.w	800d1d4 <powf+0x27c>
 800d06a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800d06e:	ea6f 0606 	mvn.w	r6, r6
 800d072:	bf34      	ite	cc
 800d074:	2300      	movcc	r3, #0
 800d076:	2301      	movcs	r3, #1
 800d078:	0ff6      	lsrs	r6, r6, #31
 800d07a:	42b3      	cmp	r3, r6
 800d07c:	f040 80ad 	bne.w	800d1da <powf+0x282>
 800d080:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800d084:	e7db      	b.n	800d03e <powf+0xe6>
 800d086:	004f      	lsls	r7, r1, #1
 800d088:	1e7a      	subs	r2, r7, #1
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d31c      	bcc.n	800d0c8 <powf+0x170>
 800d08e:	2900      	cmp	r1, #0
 800d090:	ee20 0a00 	vmul.f32	s0, s0, s0
 800d094:	da0f      	bge.n	800d0b6 <powf+0x15e>
 800d096:	ee10 0a90 	vmov	r0, s1
 800d09a:	f7ff ff43 	bl	800cf24 <checkint>
 800d09e:	2801      	cmp	r0, #1
 800d0a0:	d109      	bne.n	800d0b6 <powf+0x15e>
 800d0a2:	eeb1 0a40 	vneg.f32	s0, s0
 800d0a6:	b947      	cbnz	r7, 800d0ba <powf+0x162>
 800d0a8:	2e00      	cmp	r6, #0
 800d0aa:	dac8      	bge.n	800d03e <powf+0xe6>
 800d0ac:	b005      	add	sp, #20
 800d0ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d0b2:	f000 b8dd 	b.w	800d270 <__math_divzerof>
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	e7f5      	b.n	800d0a6 <powf+0x14e>
 800d0ba:	2e00      	cmp	r6, #0
 800d0bc:	dabf      	bge.n	800d03e <powf+0xe6>
 800d0be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d0c2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d0c6:	e7ba      	b.n	800d03e <powf+0xe6>
 800d0c8:	2900      	cmp	r1, #0
 800d0ca:	da1f      	bge.n	800d10c <powf+0x1b4>
 800d0cc:	ee10 0a90 	vmov	r0, s1
 800d0d0:	f7ff ff28 	bl	800cf24 <checkint>
 800d0d4:	b920      	cbnz	r0, 800d0e0 <powf+0x188>
 800d0d6:	b005      	add	sp, #20
 800d0d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d0dc:	f000 b8d8 	b.w	800d290 <__math_invalidf>
 800d0e0:	2801      	cmp	r0, #1
 800d0e2:	bf14      	ite	ne
 800d0e4:	2000      	movne	r0, #0
 800d0e6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800d0ea:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d0ee:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800d0f2:	f4bf af44 	bcs.w	800cf7e <powf+0x26>
 800d0f6:	eddf 7a47 	vldr	s15, [pc, #284]	; 800d214 <powf+0x2bc>
 800d0fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d0fe:	ee10 3a10 	vmov	r3, s0
 800d102:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d106:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800d10a:	e738      	b.n	800cf7e <powf+0x26>
 800d10c:	2000      	movs	r0, #0
 800d10e:	e7ee      	b.n	800d0ee <powf+0x196>
 800d110:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800d1f8 <powf+0x2a0>
 800d114:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d11c:	dd10      	ble.n	800d140 <powf+0x1e8>
 800d11e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800d122:	2800      	cmp	r0, #0
 800d124:	d15c      	bne.n	800d1e0 <powf+0x288>
 800d126:	9302      	str	r3, [sp, #8]
 800d128:	eddd 7a02 	vldr	s15, [sp, #8]
 800d12c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d130:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d134:	eef4 7a47 	vcmp.f32	s15, s14
 800d138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d13c:	f47f af6e 	bne.w	800d01c <powf+0xc4>
 800d140:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800d200 <powf+0x2a8>
 800d144:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d14c:	d804      	bhi.n	800d158 <powf+0x200>
 800d14e:	b005      	add	sp, #20
 800d150:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d154:	f000 b87a 	b.w	800d24c <__math_uflowf>
 800d158:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800d208 <powf+0x2b0>
 800d15c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d164:	d504      	bpl.n	800d170 <powf+0x218>
 800d166:	b005      	add	sp, #20
 800d168:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d16c:	f000 b874 	b.w	800d258 <__math_may_uflowf>
 800d170:	4b29      	ldr	r3, [pc, #164]	; (800d218 <powf+0x2c0>)
 800d172:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800d176:	ee30 6b07 	vadd.f64	d6, d0, d7
 800d17a:	ed8d 6b00 	vstr	d6, [sp]
 800d17e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d182:	ee30 7b47 	vsub.f64	d7, d0, d7
 800d186:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d18a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d18e:	f006 011f 	and.w	r1, r6, #31
 800d192:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d196:	e9d1 ce00 	ldrd	ip, lr, [r1]
 800d19a:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800d19e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800d1a2:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
 800d1a6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d1aa:	ee27 5b07 	vmul.f64	d5, d7, d7
 800d1ae:	1836      	adds	r6, r6, r0
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	eb13 040c 	adds.w	r4, r3, ip
 800d1b6:	ea4f 31c6 	mov.w	r1, r6, lsl #15
 800d1ba:	eb41 050e 	adc.w	r5, r1, lr
 800d1be:	eea7 0b04 	vfma.f64	d0, d7, d4
 800d1c2:	ec45 4b17 	vmov	d7, r4, r5
 800d1c6:	eea6 0b05 	vfma.f64	d0, d6, d5
 800d1ca:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d1ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d1d2:	e734      	b.n	800d03e <powf+0xe6>
 800d1d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d1d8:	e731      	b.n	800d03e <powf+0xe6>
 800d1da:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d21c <powf+0x2c4>
 800d1de:	e72e      	b.n	800d03e <powf+0xe6>
 800d1e0:	9303      	str	r3, [sp, #12]
 800d1e2:	eddd 7a03 	vldr	s15, [sp, #12]
 800d1e6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d1ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1ee:	e7a1      	b.n	800d134 <powf+0x1dc>
 800d1f0:	ffd1d571 	.word	0xffd1d571
 800d1f4:	405fffff 	.word	0x405fffff
 800d1f8:	ffa3aae2 	.word	0xffa3aae2
 800d1fc:	405fffff 	.word	0x405fffff
 800d200:	00000000 	.word	0x00000000
 800d204:	c062c000 	.word	0xc062c000
 800d208:	00000000 	.word	0x00000000
 800d20c:	c062a000 	.word	0xc062a000
 800d210:	0800d338 	.word	0x0800d338
 800d214:	4b000000 	.word	0x4b000000
 800d218:	0800d460 	.word	0x0800d460
 800d21c:	00000000 	.word	0x00000000

0800d220 <with_errnof>:
 800d220:	b513      	push	{r0, r1, r4, lr}
 800d222:	4604      	mov	r4, r0
 800d224:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d228:	f7ff fe4a 	bl	800cec0 <__errno>
 800d22c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d230:	6004      	str	r4, [r0, #0]
 800d232:	b002      	add	sp, #8
 800d234:	bd10      	pop	{r4, pc}

0800d236 <xflowf>:
 800d236:	b130      	cbz	r0, 800d246 <xflowf+0x10>
 800d238:	eef1 7a40 	vneg.f32	s15, s0
 800d23c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d240:	2022      	movs	r0, #34	; 0x22
 800d242:	f7ff bfed 	b.w	800d220 <with_errnof>
 800d246:	eef0 7a40 	vmov.f32	s15, s0
 800d24a:	e7f7      	b.n	800d23c <xflowf+0x6>

0800d24c <__math_uflowf>:
 800d24c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d254 <__math_uflowf+0x8>
 800d250:	f7ff bff1 	b.w	800d236 <xflowf>
 800d254:	10000000 	.word	0x10000000

0800d258 <__math_may_uflowf>:
 800d258:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d260 <__math_may_uflowf+0x8>
 800d25c:	f7ff bfeb 	b.w	800d236 <xflowf>
 800d260:	1a200000 	.word	0x1a200000

0800d264 <__math_oflowf>:
 800d264:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d26c <__math_oflowf+0x8>
 800d268:	f7ff bfe5 	b.w	800d236 <xflowf>
 800d26c:	70000000 	.word	0x70000000

0800d270 <__math_divzerof>:
 800d270:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d274:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d278:	2800      	cmp	r0, #0
 800d27a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800d27e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d28c <__math_divzerof+0x1c>
 800d282:	2022      	movs	r0, #34	; 0x22
 800d284:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800d288:	f7ff bfca 	b.w	800d220 <with_errnof>
 800d28c:	00000000 	.word	0x00000000

0800d290 <__math_invalidf>:
 800d290:	eef0 7a40 	vmov.f32	s15, s0
 800d294:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d298:	eef4 7a67 	vcmp.f32	s15, s15
 800d29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2a0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800d2a4:	d602      	bvs.n	800d2ac <__math_invalidf+0x1c>
 800d2a6:	2021      	movs	r0, #33	; 0x21
 800d2a8:	f7ff bfba 	b.w	800d220 <with_errnof>
 800d2ac:	4770      	bx	lr
	...

0800d2b0 <_init>:
 800d2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b2:	bf00      	nop
 800d2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2b6:	bc08      	pop	{r3}
 800d2b8:	469e      	mov	lr, r3
 800d2ba:	4770      	bx	lr

0800d2bc <_fini>:
 800d2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2be:	bf00      	nop
 800d2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2c2:	bc08      	pop	{r3}
 800d2c4:	469e      	mov	lr, r3
 800d2c6:	4770      	bx	lr
